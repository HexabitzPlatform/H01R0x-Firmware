
H01R0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014640  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 privileged_functions 00001c0c  080146fc  080146fc  000246fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003a70  08016308  08016308  00026308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08019d78  08019d78  00030394  2**0
                  CONTENTS
  5 .ARM          00000000  08019d78  08019d78  00030394  2**0
                  CONTENTS
  6 .preinit_array 00000000  08019d78  08019d78  00030394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08019d78  08019d78  00029d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08019d7c  08019d7c  00029d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000230  20000000  08019d80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 privileged_data 00000164  20000230  08019fb0  00030230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006284  20000398  0801a114  00030398  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2000661c  0801a114  0003661c  2**0
                  ALLOC
 13 .ARM.attributes 00000028  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY
 14 .debug_info   00048664  00000000  00000000  000303bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006a9a  00000000  00000000  00078a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001a687  00000000  00000000  0007f4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001af8  00000000  00000000  00099b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001f58  00000000  00000000  0009b640  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000133c6  00000000  00000000  0009d598  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00009ff3  00000000  00000000  000b095e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  000ba951  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005c6c  00000000  00000000  000ba9cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000398 	.word	0x20000398
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080146e4 	.word	0x080146e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000039c 	.word	0x2000039c
 8000100:	080146e4 	.word	0x080146e4

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fcb9 	bl	8001db0 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fc11 	bl	8001c70 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fcab 	bl	8001db0 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fca1 	bl	8001db0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc33 	bl	8001ce8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc29 	bl	8001ce8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	1c08      	adds	r0, r1, #0
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fa1b 	bl	80008e8 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f99d 	bl	80007fc <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fa0d 	bl	80008e8 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fa03 	bl	80008e8 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9ab 	bl	800084c <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f9a1 	bl	800084c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_lmul>:
 8000518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051a:	46ce      	mov	lr, r9
 800051c:	4647      	mov	r7, r8
 800051e:	0415      	lsls	r5, r2, #16
 8000520:	0c2d      	lsrs	r5, r5, #16
 8000522:	002e      	movs	r6, r5
 8000524:	b580      	push	{r7, lr}
 8000526:	0407      	lsls	r7, r0, #16
 8000528:	0c14      	lsrs	r4, r2, #16
 800052a:	0c3f      	lsrs	r7, r7, #16
 800052c:	4699      	mov	r9, r3
 800052e:	0c03      	lsrs	r3, r0, #16
 8000530:	437e      	muls	r6, r7
 8000532:	435d      	muls	r5, r3
 8000534:	4367      	muls	r7, r4
 8000536:	4363      	muls	r3, r4
 8000538:	197f      	adds	r7, r7, r5
 800053a:	0c34      	lsrs	r4, r6, #16
 800053c:	19e4      	adds	r4, r4, r7
 800053e:	469c      	mov	ip, r3
 8000540:	42a5      	cmp	r5, r4
 8000542:	d903      	bls.n	800054c <__aeabi_lmul+0x34>
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	025b      	lsls	r3, r3, #9
 8000548:	4698      	mov	r8, r3
 800054a:	44c4      	add	ip, r8
 800054c:	464b      	mov	r3, r9
 800054e:	4343      	muls	r3, r0
 8000550:	4351      	muls	r1, r2
 8000552:	0c25      	lsrs	r5, r4, #16
 8000554:	0436      	lsls	r6, r6, #16
 8000556:	4465      	add	r5, ip
 8000558:	0c36      	lsrs	r6, r6, #16
 800055a:	0424      	lsls	r4, r4, #16
 800055c:	19a4      	adds	r4, r4, r6
 800055e:	195b      	adds	r3, r3, r5
 8000560:	1859      	adds	r1, r3, r1
 8000562:	0020      	movs	r0, r4
 8000564:	bc0c      	pop	{r2, r3}
 8000566:	4690      	mov	r8, r2
 8000568:	4699      	mov	r9, r3
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800056c <__aeabi_f2uiz>:
 800056c:	219e      	movs	r1, #158	; 0x9e
 800056e:	b510      	push	{r4, lr}
 8000570:	05c9      	lsls	r1, r1, #23
 8000572:	1c04      	adds	r4, r0, #0
 8000574:	f7ff ffc6 	bl	8000504 <__aeabi_fcmpge>
 8000578:	2800      	cmp	r0, #0
 800057a:	d103      	bne.n	8000584 <__aeabi_f2uiz+0x18>
 800057c:	1c20      	adds	r0, r4, #0
 800057e:	f000 fcf9 	bl	8000f74 <__aeabi_f2iz>
 8000582:	bd10      	pop	{r4, pc}
 8000584:	219e      	movs	r1, #158	; 0x9e
 8000586:	1c20      	adds	r0, r4, #0
 8000588:	05c9      	lsls	r1, r1, #23
 800058a:	f000 fb2f 	bl	8000bec <__aeabi_fsub>
 800058e:	f000 fcf1 	bl	8000f74 <__aeabi_f2iz>
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	469c      	mov	ip, r3
 8000598:	4460      	add	r0, ip
 800059a:	e7f2      	b.n	8000582 <__aeabi_f2uiz+0x16>

0800059c <__aeabi_d2uiz>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	2200      	movs	r2, #0
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005a2:	0004      	movs	r4, r0
 80005a4:	000d      	movs	r5, r1
 80005a6:	f7ff ff73 	bl	8000490 <__aeabi_dcmpge>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d104      	bne.n	80005b8 <__aeabi_d2uiz+0x1c>
 80005ae:	0020      	movs	r0, r4
 80005b0:	0029      	movs	r1, r5
 80005b2:	f002 fa1f 	bl	80029f4 <__aeabi_d2iz>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	0020      	movs	r0, r4
 80005be:	0029      	movs	r1, r5
 80005c0:	f001 fed0 	bl	8002364 <__aeabi_dsub>
 80005c4:	f002 fa16 	bl	80029f4 <__aeabi_d2iz>
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	061b      	lsls	r3, r3, #24
 80005cc:	469c      	mov	ip, r3
 80005ce:	4460      	add	r0, ip
 80005d0:	e7f1      	b.n	80005b6 <__aeabi_d2uiz+0x1a>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	41e00000 	.word	0x41e00000

080005d8 <__aeabi_fdiv>:
 80005d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005da:	4657      	mov	r7, sl
 80005dc:	464e      	mov	r6, r9
 80005de:	4645      	mov	r5, r8
 80005e0:	46de      	mov	lr, fp
 80005e2:	0244      	lsls	r4, r0, #9
 80005e4:	b5e0      	push	{r5, r6, r7, lr}
 80005e6:	0046      	lsls	r6, r0, #1
 80005e8:	4688      	mov	r8, r1
 80005ea:	0a64      	lsrs	r4, r4, #9
 80005ec:	0e36      	lsrs	r6, r6, #24
 80005ee:	0fc7      	lsrs	r7, r0, #31
 80005f0:	2e00      	cmp	r6, #0
 80005f2:	d063      	beq.n	80006bc <__aeabi_fdiv+0xe4>
 80005f4:	2eff      	cmp	r6, #255	; 0xff
 80005f6:	d024      	beq.n	8000642 <__aeabi_fdiv+0x6a>
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	00e4      	lsls	r4, r4, #3
 80005fc:	04db      	lsls	r3, r3, #19
 80005fe:	431c      	orrs	r4, r3
 8000600:	2300      	movs	r3, #0
 8000602:	4699      	mov	r9, r3
 8000604:	469b      	mov	fp, r3
 8000606:	3e7f      	subs	r6, #127	; 0x7f
 8000608:	4643      	mov	r3, r8
 800060a:	4642      	mov	r2, r8
 800060c:	025d      	lsls	r5, r3, #9
 800060e:	0fd2      	lsrs	r2, r2, #31
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	0a6d      	lsrs	r5, r5, #9
 8000614:	0e1b      	lsrs	r3, r3, #24
 8000616:	4690      	mov	r8, r2
 8000618:	4692      	mov	sl, r2
 800061a:	d065      	beq.n	80006e8 <__aeabi_fdiv+0x110>
 800061c:	2bff      	cmp	r3, #255	; 0xff
 800061e:	d055      	beq.n	80006cc <__aeabi_fdiv+0xf4>
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	2100      	movs	r1, #0
 8000624:	00ed      	lsls	r5, r5, #3
 8000626:	04d2      	lsls	r2, r2, #19
 8000628:	3b7f      	subs	r3, #127	; 0x7f
 800062a:	4315      	orrs	r5, r2
 800062c:	1af6      	subs	r6, r6, r3
 800062e:	4643      	mov	r3, r8
 8000630:	464a      	mov	r2, r9
 8000632:	407b      	eors	r3, r7
 8000634:	2a0f      	cmp	r2, #15
 8000636:	d900      	bls.n	800063a <__aeabi_fdiv+0x62>
 8000638:	e08d      	b.n	8000756 <__aeabi_fdiv+0x17e>
 800063a:	486d      	ldr	r0, [pc, #436]	; (80007f0 <__aeabi_fdiv+0x218>)
 800063c:	0092      	lsls	r2, r2, #2
 800063e:	5882      	ldr	r2, [r0, r2]
 8000640:	4697      	mov	pc, r2
 8000642:	2c00      	cmp	r4, #0
 8000644:	d154      	bne.n	80006f0 <__aeabi_fdiv+0x118>
 8000646:	2308      	movs	r3, #8
 8000648:	4699      	mov	r9, r3
 800064a:	3b06      	subs	r3, #6
 800064c:	26ff      	movs	r6, #255	; 0xff
 800064e:	469b      	mov	fp, r3
 8000650:	e7da      	b.n	8000608 <__aeabi_fdiv+0x30>
 8000652:	2500      	movs	r5, #0
 8000654:	4653      	mov	r3, sl
 8000656:	2902      	cmp	r1, #2
 8000658:	d01b      	beq.n	8000692 <__aeabi_fdiv+0xba>
 800065a:	2903      	cmp	r1, #3
 800065c:	d100      	bne.n	8000660 <__aeabi_fdiv+0x88>
 800065e:	e0bf      	b.n	80007e0 <__aeabi_fdiv+0x208>
 8000660:	2901      	cmp	r1, #1
 8000662:	d028      	beq.n	80006b6 <__aeabi_fdiv+0xde>
 8000664:	0030      	movs	r0, r6
 8000666:	307f      	adds	r0, #127	; 0x7f
 8000668:	2800      	cmp	r0, #0
 800066a:	dd20      	ble.n	80006ae <__aeabi_fdiv+0xd6>
 800066c:	076a      	lsls	r2, r5, #29
 800066e:	d004      	beq.n	800067a <__aeabi_fdiv+0xa2>
 8000670:	220f      	movs	r2, #15
 8000672:	402a      	ands	r2, r5
 8000674:	2a04      	cmp	r2, #4
 8000676:	d000      	beq.n	800067a <__aeabi_fdiv+0xa2>
 8000678:	3504      	adds	r5, #4
 800067a:	012a      	lsls	r2, r5, #4
 800067c:	d503      	bpl.n	8000686 <__aeabi_fdiv+0xae>
 800067e:	0030      	movs	r0, r6
 8000680:	4a5c      	ldr	r2, [pc, #368]	; (80007f4 <__aeabi_fdiv+0x21c>)
 8000682:	3080      	adds	r0, #128	; 0x80
 8000684:	4015      	ands	r5, r2
 8000686:	28fe      	cmp	r0, #254	; 0xfe
 8000688:	dc03      	bgt.n	8000692 <__aeabi_fdiv+0xba>
 800068a:	01ac      	lsls	r4, r5, #6
 800068c:	0a64      	lsrs	r4, r4, #9
 800068e:	b2c2      	uxtb	r2, r0
 8000690:	e001      	b.n	8000696 <__aeabi_fdiv+0xbe>
 8000692:	22ff      	movs	r2, #255	; 0xff
 8000694:	2400      	movs	r4, #0
 8000696:	0264      	lsls	r4, r4, #9
 8000698:	05d2      	lsls	r2, r2, #23
 800069a:	0a60      	lsrs	r0, r4, #9
 800069c:	07db      	lsls	r3, r3, #31
 800069e:	4310      	orrs	r0, r2
 80006a0:	4318      	orrs	r0, r3
 80006a2:	bc3c      	pop	{r2, r3, r4, r5}
 80006a4:	4690      	mov	r8, r2
 80006a6:	4699      	mov	r9, r3
 80006a8:	46a2      	mov	sl, r4
 80006aa:	46ab      	mov	fp, r5
 80006ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006ae:	2201      	movs	r2, #1
 80006b0:	1a10      	subs	r0, r2, r0
 80006b2:	281b      	cmp	r0, #27
 80006b4:	dd7c      	ble.n	80007b0 <__aeabi_fdiv+0x1d8>
 80006b6:	2200      	movs	r2, #0
 80006b8:	2400      	movs	r4, #0
 80006ba:	e7ec      	b.n	8000696 <__aeabi_fdiv+0xbe>
 80006bc:	2c00      	cmp	r4, #0
 80006be:	d11d      	bne.n	80006fc <__aeabi_fdiv+0x124>
 80006c0:	2304      	movs	r3, #4
 80006c2:	4699      	mov	r9, r3
 80006c4:	3b03      	subs	r3, #3
 80006c6:	2600      	movs	r6, #0
 80006c8:	469b      	mov	fp, r3
 80006ca:	e79d      	b.n	8000608 <__aeabi_fdiv+0x30>
 80006cc:	3eff      	subs	r6, #255	; 0xff
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d120      	bne.n	8000714 <__aeabi_fdiv+0x13c>
 80006d2:	2102      	movs	r1, #2
 80006d4:	4643      	mov	r3, r8
 80006d6:	464a      	mov	r2, r9
 80006d8:	407b      	eors	r3, r7
 80006da:	430a      	orrs	r2, r1
 80006dc:	2a0f      	cmp	r2, #15
 80006de:	d8d8      	bhi.n	8000692 <__aeabi_fdiv+0xba>
 80006e0:	4845      	ldr	r0, [pc, #276]	; (80007f8 <__aeabi_fdiv+0x220>)
 80006e2:	0092      	lsls	r2, r2, #2
 80006e4:	5882      	ldr	r2, [r0, r2]
 80006e6:	4697      	mov	pc, r2
 80006e8:	2d00      	cmp	r5, #0
 80006ea:	d119      	bne.n	8000720 <__aeabi_fdiv+0x148>
 80006ec:	2101      	movs	r1, #1
 80006ee:	e7f1      	b.n	80006d4 <__aeabi_fdiv+0xfc>
 80006f0:	230c      	movs	r3, #12
 80006f2:	4699      	mov	r9, r3
 80006f4:	3b09      	subs	r3, #9
 80006f6:	26ff      	movs	r6, #255	; 0xff
 80006f8:	469b      	mov	fp, r3
 80006fa:	e785      	b.n	8000608 <__aeabi_fdiv+0x30>
 80006fc:	0020      	movs	r0, r4
 80006fe:	f002 faf1 	bl	8002ce4 <__clzsi2>
 8000702:	2676      	movs	r6, #118	; 0x76
 8000704:	1f43      	subs	r3, r0, #5
 8000706:	409c      	lsls	r4, r3
 8000708:	2300      	movs	r3, #0
 800070a:	4276      	negs	r6, r6
 800070c:	1a36      	subs	r6, r6, r0
 800070e:	4699      	mov	r9, r3
 8000710:	469b      	mov	fp, r3
 8000712:	e779      	b.n	8000608 <__aeabi_fdiv+0x30>
 8000714:	464a      	mov	r2, r9
 8000716:	2303      	movs	r3, #3
 8000718:	431a      	orrs	r2, r3
 800071a:	4691      	mov	r9, r2
 800071c:	2103      	movs	r1, #3
 800071e:	e786      	b.n	800062e <__aeabi_fdiv+0x56>
 8000720:	0028      	movs	r0, r5
 8000722:	f002 fadf 	bl	8002ce4 <__clzsi2>
 8000726:	1f43      	subs	r3, r0, #5
 8000728:	1836      	adds	r6, r6, r0
 800072a:	409d      	lsls	r5, r3
 800072c:	3676      	adds	r6, #118	; 0x76
 800072e:	2100      	movs	r1, #0
 8000730:	e77d      	b.n	800062e <__aeabi_fdiv+0x56>
 8000732:	2480      	movs	r4, #128	; 0x80
 8000734:	2300      	movs	r3, #0
 8000736:	03e4      	lsls	r4, r4, #15
 8000738:	22ff      	movs	r2, #255	; 0xff
 800073a:	e7ac      	b.n	8000696 <__aeabi_fdiv+0xbe>
 800073c:	2500      	movs	r5, #0
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	03db      	lsls	r3, r3, #15
 8000742:	421c      	tst	r4, r3
 8000744:	d028      	beq.n	8000798 <__aeabi_fdiv+0x1c0>
 8000746:	421d      	tst	r5, r3
 8000748:	d126      	bne.n	8000798 <__aeabi_fdiv+0x1c0>
 800074a:	432b      	orrs	r3, r5
 800074c:	025c      	lsls	r4, r3, #9
 800074e:	0a64      	lsrs	r4, r4, #9
 8000750:	4643      	mov	r3, r8
 8000752:	22ff      	movs	r2, #255	; 0xff
 8000754:	e79f      	b.n	8000696 <__aeabi_fdiv+0xbe>
 8000756:	0162      	lsls	r2, r4, #5
 8000758:	016c      	lsls	r4, r5, #5
 800075a:	42a2      	cmp	r2, r4
 800075c:	d224      	bcs.n	80007a8 <__aeabi_fdiv+0x1d0>
 800075e:	211b      	movs	r1, #27
 8000760:	2500      	movs	r5, #0
 8000762:	3e01      	subs	r6, #1
 8000764:	2701      	movs	r7, #1
 8000766:	0010      	movs	r0, r2
 8000768:	006d      	lsls	r5, r5, #1
 800076a:	0052      	lsls	r2, r2, #1
 800076c:	2800      	cmp	r0, #0
 800076e:	db01      	blt.n	8000774 <__aeabi_fdiv+0x19c>
 8000770:	4294      	cmp	r4, r2
 8000772:	d801      	bhi.n	8000778 <__aeabi_fdiv+0x1a0>
 8000774:	1b12      	subs	r2, r2, r4
 8000776:	433d      	orrs	r5, r7
 8000778:	3901      	subs	r1, #1
 800077a:	2900      	cmp	r1, #0
 800077c:	d1f3      	bne.n	8000766 <__aeabi_fdiv+0x18e>
 800077e:	0014      	movs	r4, r2
 8000780:	1e62      	subs	r2, r4, #1
 8000782:	4194      	sbcs	r4, r2
 8000784:	4325      	orrs	r5, r4
 8000786:	e76d      	b.n	8000664 <__aeabi_fdiv+0x8c>
 8000788:	46ba      	mov	sl, r7
 800078a:	4659      	mov	r1, fp
 800078c:	0025      	movs	r5, r4
 800078e:	4653      	mov	r3, sl
 8000790:	2902      	cmp	r1, #2
 8000792:	d000      	beq.n	8000796 <__aeabi_fdiv+0x1be>
 8000794:	e761      	b.n	800065a <__aeabi_fdiv+0x82>
 8000796:	e77c      	b.n	8000692 <__aeabi_fdiv+0xba>
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	03db      	lsls	r3, r3, #15
 800079c:	431c      	orrs	r4, r3
 800079e:	0264      	lsls	r4, r4, #9
 80007a0:	0a64      	lsrs	r4, r4, #9
 80007a2:	003b      	movs	r3, r7
 80007a4:	22ff      	movs	r2, #255	; 0xff
 80007a6:	e776      	b.n	8000696 <__aeabi_fdiv+0xbe>
 80007a8:	1b12      	subs	r2, r2, r4
 80007aa:	211a      	movs	r1, #26
 80007ac:	2501      	movs	r5, #1
 80007ae:	e7d9      	b.n	8000764 <__aeabi_fdiv+0x18c>
 80007b0:	369e      	adds	r6, #158	; 0x9e
 80007b2:	002a      	movs	r2, r5
 80007b4:	40b5      	lsls	r5, r6
 80007b6:	002c      	movs	r4, r5
 80007b8:	40c2      	lsrs	r2, r0
 80007ba:	1e65      	subs	r5, r4, #1
 80007bc:	41ac      	sbcs	r4, r5
 80007be:	4314      	orrs	r4, r2
 80007c0:	0762      	lsls	r2, r4, #29
 80007c2:	d004      	beq.n	80007ce <__aeabi_fdiv+0x1f6>
 80007c4:	220f      	movs	r2, #15
 80007c6:	4022      	ands	r2, r4
 80007c8:	2a04      	cmp	r2, #4
 80007ca:	d000      	beq.n	80007ce <__aeabi_fdiv+0x1f6>
 80007cc:	3404      	adds	r4, #4
 80007ce:	0162      	lsls	r2, r4, #5
 80007d0:	d403      	bmi.n	80007da <__aeabi_fdiv+0x202>
 80007d2:	01a4      	lsls	r4, r4, #6
 80007d4:	0a64      	lsrs	r4, r4, #9
 80007d6:	2200      	movs	r2, #0
 80007d8:	e75d      	b.n	8000696 <__aeabi_fdiv+0xbe>
 80007da:	2201      	movs	r2, #1
 80007dc:	2400      	movs	r4, #0
 80007de:	e75a      	b.n	8000696 <__aeabi_fdiv+0xbe>
 80007e0:	2480      	movs	r4, #128	; 0x80
 80007e2:	03e4      	lsls	r4, r4, #15
 80007e4:	432c      	orrs	r4, r5
 80007e6:	0264      	lsls	r4, r4, #9
 80007e8:	0a64      	lsrs	r4, r4, #9
 80007ea:	22ff      	movs	r2, #255	; 0xff
 80007ec:	e753      	b.n	8000696 <__aeabi_fdiv+0xbe>
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	08016364 	.word	0x08016364
 80007f4:	f7ffffff 	.word	0xf7ffffff
 80007f8:	080163a4 	.word	0x080163a4

080007fc <__eqsf2>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	0042      	lsls	r2, r0, #1
 8000800:	024e      	lsls	r6, r1, #9
 8000802:	004c      	lsls	r4, r1, #1
 8000804:	0245      	lsls	r5, r0, #9
 8000806:	0a6d      	lsrs	r5, r5, #9
 8000808:	0e12      	lsrs	r2, r2, #24
 800080a:	0fc3      	lsrs	r3, r0, #31
 800080c:	0a76      	lsrs	r6, r6, #9
 800080e:	0e24      	lsrs	r4, r4, #24
 8000810:	0fc9      	lsrs	r1, r1, #31
 8000812:	2aff      	cmp	r2, #255	; 0xff
 8000814:	d00f      	beq.n	8000836 <__eqsf2+0x3a>
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d011      	beq.n	800083e <__eqsf2+0x42>
 800081a:	2001      	movs	r0, #1
 800081c:	42a2      	cmp	r2, r4
 800081e:	d000      	beq.n	8000822 <__eqsf2+0x26>
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	42b5      	cmp	r5, r6
 8000824:	d1fc      	bne.n	8000820 <__eqsf2+0x24>
 8000826:	428b      	cmp	r3, r1
 8000828:	d00d      	beq.n	8000846 <__eqsf2+0x4a>
 800082a:	2a00      	cmp	r2, #0
 800082c:	d1f8      	bne.n	8000820 <__eqsf2+0x24>
 800082e:	0028      	movs	r0, r5
 8000830:	1e45      	subs	r5, r0, #1
 8000832:	41a8      	sbcs	r0, r5
 8000834:	e7f4      	b.n	8000820 <__eqsf2+0x24>
 8000836:	2001      	movs	r0, #1
 8000838:	2d00      	cmp	r5, #0
 800083a:	d1f1      	bne.n	8000820 <__eqsf2+0x24>
 800083c:	e7eb      	b.n	8000816 <__eqsf2+0x1a>
 800083e:	2001      	movs	r0, #1
 8000840:	2e00      	cmp	r6, #0
 8000842:	d1ed      	bne.n	8000820 <__eqsf2+0x24>
 8000844:	e7e9      	b.n	800081a <__eqsf2+0x1e>
 8000846:	2000      	movs	r0, #0
 8000848:	e7ea      	b.n	8000820 <__eqsf2+0x24>
 800084a:	46c0      	nop			; (mov r8, r8)

0800084c <__gesf2>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	004a      	lsls	r2, r1, #1
 8000850:	024e      	lsls	r6, r1, #9
 8000852:	0245      	lsls	r5, r0, #9
 8000854:	0044      	lsls	r4, r0, #1
 8000856:	0a6d      	lsrs	r5, r5, #9
 8000858:	0e24      	lsrs	r4, r4, #24
 800085a:	0fc3      	lsrs	r3, r0, #31
 800085c:	0a76      	lsrs	r6, r6, #9
 800085e:	0e12      	lsrs	r2, r2, #24
 8000860:	0fc9      	lsrs	r1, r1, #31
 8000862:	2cff      	cmp	r4, #255	; 0xff
 8000864:	d015      	beq.n	8000892 <__gesf2+0x46>
 8000866:	2aff      	cmp	r2, #255	; 0xff
 8000868:	d00e      	beq.n	8000888 <__gesf2+0x3c>
 800086a:	2c00      	cmp	r4, #0
 800086c:	d115      	bne.n	800089a <__gesf2+0x4e>
 800086e:	2a00      	cmp	r2, #0
 8000870:	d101      	bne.n	8000876 <__gesf2+0x2a>
 8000872:	2e00      	cmp	r6, #0
 8000874:	d01c      	beq.n	80008b0 <__gesf2+0x64>
 8000876:	2d00      	cmp	r5, #0
 8000878:	d014      	beq.n	80008a4 <__gesf2+0x58>
 800087a:	428b      	cmp	r3, r1
 800087c:	d027      	beq.n	80008ce <__gesf2+0x82>
 800087e:	2002      	movs	r0, #2
 8000880:	3b01      	subs	r3, #1
 8000882:	4018      	ands	r0, r3
 8000884:	3801      	subs	r0, #1
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	2e00      	cmp	r6, #0
 800088a:	d0ee      	beq.n	800086a <__gesf2+0x1e>
 800088c:	2002      	movs	r0, #2
 800088e:	4240      	negs	r0, r0
 8000890:	e7f9      	b.n	8000886 <__gesf2+0x3a>
 8000892:	2d00      	cmp	r5, #0
 8000894:	d1fa      	bne.n	800088c <__gesf2+0x40>
 8000896:	2aff      	cmp	r2, #255	; 0xff
 8000898:	d00e      	beq.n	80008b8 <__gesf2+0x6c>
 800089a:	2a00      	cmp	r2, #0
 800089c:	d10e      	bne.n	80008bc <__gesf2+0x70>
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d0ed      	beq.n	800087e <__gesf2+0x32>
 80008a2:	e00b      	b.n	80008bc <__gesf2+0x70>
 80008a4:	2301      	movs	r3, #1
 80008a6:	3901      	subs	r1, #1
 80008a8:	4399      	bics	r1, r3
 80008aa:	0008      	movs	r0, r1
 80008ac:	3001      	adds	r0, #1
 80008ae:	e7ea      	b.n	8000886 <__gesf2+0x3a>
 80008b0:	2000      	movs	r0, #0
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	d0e7      	beq.n	8000886 <__gesf2+0x3a>
 80008b6:	e7e2      	b.n	800087e <__gesf2+0x32>
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d1e7      	bne.n	800088c <__gesf2+0x40>
 80008bc:	428b      	cmp	r3, r1
 80008be:	d1de      	bne.n	800087e <__gesf2+0x32>
 80008c0:	4294      	cmp	r4, r2
 80008c2:	dd05      	ble.n	80008d0 <__gesf2+0x84>
 80008c4:	2102      	movs	r1, #2
 80008c6:	1e58      	subs	r0, r3, #1
 80008c8:	4008      	ands	r0, r1
 80008ca:	3801      	subs	r0, #1
 80008cc:	e7db      	b.n	8000886 <__gesf2+0x3a>
 80008ce:	2400      	movs	r4, #0
 80008d0:	42a2      	cmp	r2, r4
 80008d2:	dc04      	bgt.n	80008de <__gesf2+0x92>
 80008d4:	42b5      	cmp	r5, r6
 80008d6:	d8d2      	bhi.n	800087e <__gesf2+0x32>
 80008d8:	2000      	movs	r0, #0
 80008da:	42b5      	cmp	r5, r6
 80008dc:	d2d3      	bcs.n	8000886 <__gesf2+0x3a>
 80008de:	1e58      	subs	r0, r3, #1
 80008e0:	2301      	movs	r3, #1
 80008e2:	4398      	bics	r0, r3
 80008e4:	3001      	adds	r0, #1
 80008e6:	e7ce      	b.n	8000886 <__gesf2+0x3a>

080008e8 <__lesf2>:
 80008e8:	b530      	push	{r4, r5, lr}
 80008ea:	0042      	lsls	r2, r0, #1
 80008ec:	0244      	lsls	r4, r0, #9
 80008ee:	024d      	lsls	r5, r1, #9
 80008f0:	0fc3      	lsrs	r3, r0, #31
 80008f2:	0048      	lsls	r0, r1, #1
 80008f4:	0a64      	lsrs	r4, r4, #9
 80008f6:	0e12      	lsrs	r2, r2, #24
 80008f8:	0a6d      	lsrs	r5, r5, #9
 80008fa:	0e00      	lsrs	r0, r0, #24
 80008fc:	0fc9      	lsrs	r1, r1, #31
 80008fe:	2aff      	cmp	r2, #255	; 0xff
 8000900:	d012      	beq.n	8000928 <__lesf2+0x40>
 8000902:	28ff      	cmp	r0, #255	; 0xff
 8000904:	d00c      	beq.n	8000920 <__lesf2+0x38>
 8000906:	2a00      	cmp	r2, #0
 8000908:	d112      	bne.n	8000930 <__lesf2+0x48>
 800090a:	2800      	cmp	r0, #0
 800090c:	d119      	bne.n	8000942 <__lesf2+0x5a>
 800090e:	2d00      	cmp	r5, #0
 8000910:	d117      	bne.n	8000942 <__lesf2+0x5a>
 8000912:	2c00      	cmp	r4, #0
 8000914:	d02b      	beq.n	800096e <__lesf2+0x86>
 8000916:	2002      	movs	r0, #2
 8000918:	3b01      	subs	r3, #1
 800091a:	4018      	ands	r0, r3
 800091c:	3801      	subs	r0, #1
 800091e:	e026      	b.n	800096e <__lesf2+0x86>
 8000920:	2d00      	cmp	r5, #0
 8000922:	d0f0      	beq.n	8000906 <__lesf2+0x1e>
 8000924:	2002      	movs	r0, #2
 8000926:	e022      	b.n	800096e <__lesf2+0x86>
 8000928:	2c00      	cmp	r4, #0
 800092a:	d1fb      	bne.n	8000924 <__lesf2+0x3c>
 800092c:	28ff      	cmp	r0, #255	; 0xff
 800092e:	d01f      	beq.n	8000970 <__lesf2+0x88>
 8000930:	2800      	cmp	r0, #0
 8000932:	d11f      	bne.n	8000974 <__lesf2+0x8c>
 8000934:	2d00      	cmp	r5, #0
 8000936:	d11d      	bne.n	8000974 <__lesf2+0x8c>
 8000938:	2002      	movs	r0, #2
 800093a:	3b01      	subs	r3, #1
 800093c:	4018      	ands	r0, r3
 800093e:	3801      	subs	r0, #1
 8000940:	e015      	b.n	800096e <__lesf2+0x86>
 8000942:	2c00      	cmp	r4, #0
 8000944:	d00e      	beq.n	8000964 <__lesf2+0x7c>
 8000946:	428b      	cmp	r3, r1
 8000948:	d1e5      	bne.n	8000916 <__lesf2+0x2e>
 800094a:	2200      	movs	r2, #0
 800094c:	4290      	cmp	r0, r2
 800094e:	dc04      	bgt.n	800095a <__lesf2+0x72>
 8000950:	42ac      	cmp	r4, r5
 8000952:	d8e0      	bhi.n	8000916 <__lesf2+0x2e>
 8000954:	2000      	movs	r0, #0
 8000956:	42ac      	cmp	r4, r5
 8000958:	d209      	bcs.n	800096e <__lesf2+0x86>
 800095a:	1e58      	subs	r0, r3, #1
 800095c:	2301      	movs	r3, #1
 800095e:	4398      	bics	r0, r3
 8000960:	3001      	adds	r0, #1
 8000962:	e004      	b.n	800096e <__lesf2+0x86>
 8000964:	2301      	movs	r3, #1
 8000966:	3901      	subs	r1, #1
 8000968:	4399      	bics	r1, r3
 800096a:	0008      	movs	r0, r1
 800096c:	3001      	adds	r0, #1
 800096e:	bd30      	pop	{r4, r5, pc}
 8000970:	2d00      	cmp	r5, #0
 8000972:	d1d7      	bne.n	8000924 <__lesf2+0x3c>
 8000974:	428b      	cmp	r3, r1
 8000976:	d1ce      	bne.n	8000916 <__lesf2+0x2e>
 8000978:	4282      	cmp	r2, r0
 800097a:	dde7      	ble.n	800094c <__lesf2+0x64>
 800097c:	2102      	movs	r1, #2
 800097e:	1e58      	subs	r0, r3, #1
 8000980:	4008      	ands	r0, r1
 8000982:	3801      	subs	r0, #1
 8000984:	e7f3      	b.n	800096e <__lesf2+0x86>
 8000986:	46c0      	nop			; (mov r8, r8)

08000988 <__aeabi_fmul>:
 8000988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098a:	464e      	mov	r6, r9
 800098c:	4657      	mov	r7, sl
 800098e:	4645      	mov	r5, r8
 8000990:	46de      	mov	lr, fp
 8000992:	b5e0      	push	{r5, r6, r7, lr}
 8000994:	0243      	lsls	r3, r0, #9
 8000996:	0a5b      	lsrs	r3, r3, #9
 8000998:	0045      	lsls	r5, r0, #1
 800099a:	b083      	sub	sp, #12
 800099c:	1c0f      	adds	r7, r1, #0
 800099e:	4699      	mov	r9, r3
 80009a0:	0e2d      	lsrs	r5, r5, #24
 80009a2:	0fc6      	lsrs	r6, r0, #31
 80009a4:	2d00      	cmp	r5, #0
 80009a6:	d057      	beq.n	8000a58 <__aeabi_fmul+0xd0>
 80009a8:	2dff      	cmp	r5, #255	; 0xff
 80009aa:	d024      	beq.n	80009f6 <__aeabi_fmul+0x6e>
 80009ac:	2080      	movs	r0, #128	; 0x80
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	04c0      	lsls	r0, r0, #19
 80009b2:	4318      	orrs	r0, r3
 80009b4:	2300      	movs	r3, #0
 80009b6:	4681      	mov	r9, r0
 80009b8:	469a      	mov	sl, r3
 80009ba:	469b      	mov	fp, r3
 80009bc:	3d7f      	subs	r5, #127	; 0x7f
 80009be:	027c      	lsls	r4, r7, #9
 80009c0:	007a      	lsls	r2, r7, #1
 80009c2:	0ffb      	lsrs	r3, r7, #31
 80009c4:	0a64      	lsrs	r4, r4, #9
 80009c6:	0e12      	lsrs	r2, r2, #24
 80009c8:	4698      	mov	r8, r3
 80009ca:	d023      	beq.n	8000a14 <__aeabi_fmul+0x8c>
 80009cc:	2aff      	cmp	r2, #255	; 0xff
 80009ce:	d04b      	beq.n	8000a68 <__aeabi_fmul+0xe0>
 80009d0:	00e3      	lsls	r3, r4, #3
 80009d2:	2480      	movs	r4, #128	; 0x80
 80009d4:	2000      	movs	r0, #0
 80009d6:	04e4      	lsls	r4, r4, #19
 80009d8:	3a7f      	subs	r2, #127	; 0x7f
 80009da:	431c      	orrs	r4, r3
 80009dc:	18ad      	adds	r5, r5, r2
 80009de:	1c6b      	adds	r3, r5, #1
 80009e0:	4647      	mov	r7, r8
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	4653      	mov	r3, sl
 80009e6:	4077      	eors	r7, r6
 80009e8:	003a      	movs	r2, r7
 80009ea:	2b0f      	cmp	r3, #15
 80009ec:	d848      	bhi.n	8000a80 <__aeabi_fmul+0xf8>
 80009ee:	497d      	ldr	r1, [pc, #500]	; (8000be4 <__aeabi_fmul+0x25c>)
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	58cb      	ldr	r3, [r1, r3]
 80009f4:	469f      	mov	pc, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d000      	beq.n	80009fc <__aeabi_fmul+0x74>
 80009fa:	e085      	b.n	8000b08 <__aeabi_fmul+0x180>
 80009fc:	3308      	adds	r3, #8
 80009fe:	469a      	mov	sl, r3
 8000a00:	3b06      	subs	r3, #6
 8000a02:	469b      	mov	fp, r3
 8000a04:	027c      	lsls	r4, r7, #9
 8000a06:	007a      	lsls	r2, r7, #1
 8000a08:	0ffb      	lsrs	r3, r7, #31
 8000a0a:	25ff      	movs	r5, #255	; 0xff
 8000a0c:	0a64      	lsrs	r4, r4, #9
 8000a0e:	0e12      	lsrs	r2, r2, #24
 8000a10:	4698      	mov	r8, r3
 8000a12:	d1db      	bne.n	80009cc <__aeabi_fmul+0x44>
 8000a14:	2c00      	cmp	r4, #0
 8000a16:	d000      	beq.n	8000a1a <__aeabi_fmul+0x92>
 8000a18:	e090      	b.n	8000b3c <__aeabi_fmul+0x1b4>
 8000a1a:	4652      	mov	r2, sl
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	4692      	mov	sl, r2
 8000a22:	2001      	movs	r0, #1
 8000a24:	e7db      	b.n	80009de <__aeabi_fmul+0x56>
 8000a26:	464c      	mov	r4, r9
 8000a28:	4658      	mov	r0, fp
 8000a2a:	0017      	movs	r7, r2
 8000a2c:	2802      	cmp	r0, #2
 8000a2e:	d024      	beq.n	8000a7a <__aeabi_fmul+0xf2>
 8000a30:	2803      	cmp	r0, #3
 8000a32:	d100      	bne.n	8000a36 <__aeabi_fmul+0xae>
 8000a34:	e0cf      	b.n	8000bd6 <__aeabi_fmul+0x24e>
 8000a36:	2200      	movs	r2, #0
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2801      	cmp	r0, #1
 8000a3c:	d14d      	bne.n	8000ada <__aeabi_fmul+0x152>
 8000a3e:	0258      	lsls	r0, r3, #9
 8000a40:	05d2      	lsls	r2, r2, #23
 8000a42:	0a40      	lsrs	r0, r0, #9
 8000a44:	07ff      	lsls	r7, r7, #31
 8000a46:	4310      	orrs	r0, r2
 8000a48:	4338      	orrs	r0, r7
 8000a4a:	b003      	add	sp, #12
 8000a4c:	bc3c      	pop	{r2, r3, r4, r5}
 8000a4e:	4690      	mov	r8, r2
 8000a50:	4699      	mov	r9, r3
 8000a52:	46a2      	mov	sl, r4
 8000a54:	46ab      	mov	fp, r5
 8000a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d15b      	bne.n	8000b14 <__aeabi_fmul+0x18c>
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	469a      	mov	sl, r3
 8000a60:	3b03      	subs	r3, #3
 8000a62:	2500      	movs	r5, #0
 8000a64:	469b      	mov	fp, r3
 8000a66:	e7aa      	b.n	80009be <__aeabi_fmul+0x36>
 8000a68:	35ff      	adds	r5, #255	; 0xff
 8000a6a:	2c00      	cmp	r4, #0
 8000a6c:	d160      	bne.n	8000b30 <__aeabi_fmul+0x1a8>
 8000a6e:	4652      	mov	r2, sl
 8000a70:	2302      	movs	r3, #2
 8000a72:	431a      	orrs	r2, r3
 8000a74:	4692      	mov	sl, r2
 8000a76:	2002      	movs	r0, #2
 8000a78:	e7b1      	b.n	80009de <__aeabi_fmul+0x56>
 8000a7a:	22ff      	movs	r2, #255	; 0xff
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e7de      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000a80:	464b      	mov	r3, r9
 8000a82:	0c1b      	lsrs	r3, r3, #16
 8000a84:	469c      	mov	ip, r3
 8000a86:	464b      	mov	r3, r9
 8000a88:	0426      	lsls	r6, r4, #16
 8000a8a:	0c36      	lsrs	r6, r6, #16
 8000a8c:	0418      	lsls	r0, r3, #16
 8000a8e:	4661      	mov	r1, ip
 8000a90:	0033      	movs	r3, r6
 8000a92:	0c22      	lsrs	r2, r4, #16
 8000a94:	4664      	mov	r4, ip
 8000a96:	0c00      	lsrs	r0, r0, #16
 8000a98:	4343      	muls	r3, r0
 8000a9a:	434e      	muls	r6, r1
 8000a9c:	4350      	muls	r0, r2
 8000a9e:	4354      	muls	r4, r2
 8000aa0:	1980      	adds	r0, r0, r6
 8000aa2:	0c1a      	lsrs	r2, r3, #16
 8000aa4:	1812      	adds	r2, r2, r0
 8000aa6:	4296      	cmp	r6, r2
 8000aa8:	d903      	bls.n	8000ab2 <__aeabi_fmul+0x12a>
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	0249      	lsls	r1, r1, #9
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4464      	add	r4, ip
 8000ab2:	041b      	lsls	r3, r3, #16
 8000ab4:	0c1b      	lsrs	r3, r3, #16
 8000ab6:	0410      	lsls	r0, r2, #16
 8000ab8:	18c0      	adds	r0, r0, r3
 8000aba:	0183      	lsls	r3, r0, #6
 8000abc:	1e5e      	subs	r6, r3, #1
 8000abe:	41b3      	sbcs	r3, r6
 8000ac0:	0e80      	lsrs	r0, r0, #26
 8000ac2:	4318      	orrs	r0, r3
 8000ac4:	0c13      	lsrs	r3, r2, #16
 8000ac6:	191b      	adds	r3, r3, r4
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	4303      	orrs	r3, r0
 8000acc:	001c      	movs	r4, r3
 8000ace:	0123      	lsls	r3, r4, #4
 8000ad0:	d579      	bpl.n	8000bc6 <__aeabi_fmul+0x23e>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	0862      	lsrs	r2, r4, #1
 8000ad6:	401c      	ands	r4, r3
 8000ad8:	4314      	orrs	r4, r2
 8000ada:	9a01      	ldr	r2, [sp, #4]
 8000adc:	327f      	adds	r2, #127	; 0x7f
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	dd4d      	ble.n	8000b7e <__aeabi_fmul+0x1f6>
 8000ae2:	0763      	lsls	r3, r4, #29
 8000ae4:	d004      	beq.n	8000af0 <__aeabi_fmul+0x168>
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	4023      	ands	r3, r4
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d000      	beq.n	8000af0 <__aeabi_fmul+0x168>
 8000aee:	3404      	adds	r4, #4
 8000af0:	0123      	lsls	r3, r4, #4
 8000af2:	d503      	bpl.n	8000afc <__aeabi_fmul+0x174>
 8000af4:	4b3c      	ldr	r3, [pc, #240]	; (8000be8 <__aeabi_fmul+0x260>)
 8000af6:	9a01      	ldr	r2, [sp, #4]
 8000af8:	401c      	ands	r4, r3
 8000afa:	3280      	adds	r2, #128	; 0x80
 8000afc:	2afe      	cmp	r2, #254	; 0xfe
 8000afe:	dcbc      	bgt.n	8000a7a <__aeabi_fmul+0xf2>
 8000b00:	01a3      	lsls	r3, r4, #6
 8000b02:	0a5b      	lsrs	r3, r3, #9
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	e79a      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000b08:	230c      	movs	r3, #12
 8000b0a:	469a      	mov	sl, r3
 8000b0c:	3b09      	subs	r3, #9
 8000b0e:	25ff      	movs	r5, #255	; 0xff
 8000b10:	469b      	mov	fp, r3
 8000b12:	e754      	b.n	80009be <__aeabi_fmul+0x36>
 8000b14:	0018      	movs	r0, r3
 8000b16:	f002 f8e5 	bl	8002ce4 <__clzsi2>
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	1f43      	subs	r3, r0, #5
 8000b1e:	2576      	movs	r5, #118	; 0x76
 8000b20:	409a      	lsls	r2, r3
 8000b22:	2300      	movs	r3, #0
 8000b24:	426d      	negs	r5, r5
 8000b26:	4691      	mov	r9, r2
 8000b28:	1a2d      	subs	r5, r5, r0
 8000b2a:	469a      	mov	sl, r3
 8000b2c:	469b      	mov	fp, r3
 8000b2e:	e746      	b.n	80009be <__aeabi_fmul+0x36>
 8000b30:	4652      	mov	r2, sl
 8000b32:	2303      	movs	r3, #3
 8000b34:	431a      	orrs	r2, r3
 8000b36:	4692      	mov	sl, r2
 8000b38:	2003      	movs	r0, #3
 8000b3a:	e750      	b.n	80009de <__aeabi_fmul+0x56>
 8000b3c:	0020      	movs	r0, r4
 8000b3e:	f002 f8d1 	bl	8002ce4 <__clzsi2>
 8000b42:	1f43      	subs	r3, r0, #5
 8000b44:	1a2d      	subs	r5, r5, r0
 8000b46:	409c      	lsls	r4, r3
 8000b48:	3d76      	subs	r5, #118	; 0x76
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	e747      	b.n	80009de <__aeabi_fmul+0x56>
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	2700      	movs	r7, #0
 8000b52:	03db      	lsls	r3, r3, #15
 8000b54:	22ff      	movs	r2, #255	; 0xff
 8000b56:	e772      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000b58:	4642      	mov	r2, r8
 8000b5a:	e766      	b.n	8000a2a <__aeabi_fmul+0xa2>
 8000b5c:	464c      	mov	r4, r9
 8000b5e:	0032      	movs	r2, r6
 8000b60:	4658      	mov	r0, fp
 8000b62:	e762      	b.n	8000a2a <__aeabi_fmul+0xa2>
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	464a      	mov	r2, r9
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	421a      	tst	r2, r3
 8000b6c:	d022      	beq.n	8000bb4 <__aeabi_fmul+0x22c>
 8000b6e:	421c      	tst	r4, r3
 8000b70:	d120      	bne.n	8000bb4 <__aeabi_fmul+0x22c>
 8000b72:	4323      	orrs	r3, r4
 8000b74:	025b      	lsls	r3, r3, #9
 8000b76:	0a5b      	lsrs	r3, r3, #9
 8000b78:	4647      	mov	r7, r8
 8000b7a:	22ff      	movs	r2, #255	; 0xff
 8000b7c:	e75f      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	1a9a      	subs	r2, r3, r2
 8000b82:	2a1b      	cmp	r2, #27
 8000b84:	dc21      	bgt.n	8000bca <__aeabi_fmul+0x242>
 8000b86:	0023      	movs	r3, r4
 8000b88:	9901      	ldr	r1, [sp, #4]
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	319e      	adds	r1, #158	; 0x9e
 8000b8e:	408c      	lsls	r4, r1
 8000b90:	001a      	movs	r2, r3
 8000b92:	0023      	movs	r3, r4
 8000b94:	1e5c      	subs	r4, r3, #1
 8000b96:	41a3      	sbcs	r3, r4
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	075a      	lsls	r2, r3, #29
 8000b9c:	d004      	beq.n	8000ba8 <__aeabi_fmul+0x220>
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	2a04      	cmp	r2, #4
 8000ba4:	d000      	beq.n	8000ba8 <__aeabi_fmul+0x220>
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	015a      	lsls	r2, r3, #5
 8000baa:	d411      	bmi.n	8000bd0 <__aeabi_fmul+0x248>
 8000bac:	019b      	lsls	r3, r3, #6
 8000bae:	0a5b      	lsrs	r3, r3, #9
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e744      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	464a      	mov	r2, r9
 8000bb8:	03db      	lsls	r3, r3, #15
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	025b      	lsls	r3, r3, #9
 8000bbe:	0a5b      	lsrs	r3, r3, #9
 8000bc0:	0037      	movs	r7, r6
 8000bc2:	22ff      	movs	r2, #255	; 0xff
 8000bc4:	e73b      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000bc6:	9501      	str	r5, [sp, #4]
 8000bc8:	e787      	b.n	8000ada <__aeabi_fmul+0x152>
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e736      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e733      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	03db      	lsls	r3, r3, #15
 8000bda:	4323      	orrs	r3, r4
 8000bdc:	025b      	lsls	r3, r3, #9
 8000bde:	0a5b      	lsrs	r3, r3, #9
 8000be0:	22ff      	movs	r2, #255	; 0xff
 8000be2:	e72c      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000be4:	080163e4 	.word	0x080163e4
 8000be8:	f7ffffff 	.word	0xf7ffffff

08000bec <__aeabi_fsub>:
 8000bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bee:	4647      	mov	r7, r8
 8000bf0:	46ce      	mov	lr, r9
 8000bf2:	0044      	lsls	r4, r0, #1
 8000bf4:	0fc2      	lsrs	r2, r0, #31
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	0247      	lsls	r7, r0, #9
 8000bfa:	0248      	lsls	r0, r1, #9
 8000bfc:	0a40      	lsrs	r0, r0, #9
 8000bfe:	4684      	mov	ip, r0
 8000c00:	4666      	mov	r6, ip
 8000c02:	0048      	lsls	r0, r1, #1
 8000c04:	0a7f      	lsrs	r7, r7, #9
 8000c06:	0e24      	lsrs	r4, r4, #24
 8000c08:	00f6      	lsls	r6, r6, #3
 8000c0a:	0025      	movs	r5, r4
 8000c0c:	4690      	mov	r8, r2
 8000c0e:	00fb      	lsls	r3, r7, #3
 8000c10:	0e00      	lsrs	r0, r0, #24
 8000c12:	0fc9      	lsrs	r1, r1, #31
 8000c14:	46b1      	mov	r9, r6
 8000c16:	28ff      	cmp	r0, #255	; 0xff
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fsub+0x30>
 8000c1a:	e085      	b.n	8000d28 <__aeabi_fsub+0x13c>
 8000c1c:	2601      	movs	r6, #1
 8000c1e:	4071      	eors	r1, r6
 8000c20:	1a26      	subs	r6, r4, r0
 8000c22:	4291      	cmp	r1, r2
 8000c24:	d057      	beq.n	8000cd6 <__aeabi_fsub+0xea>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	dd43      	ble.n	8000cb2 <__aeabi_fsub+0xc6>
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_fsub+0x44>
 8000c2e:	e07f      	b.n	8000d30 <__aeabi_fsub+0x144>
 8000c30:	4649      	mov	r1, r9
 8000c32:	2900      	cmp	r1, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fsub+0x4c>
 8000c36:	e0aa      	b.n	8000d8e <__aeabi_fsub+0x1a2>
 8000c38:	3e01      	subs	r6, #1
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_fsub+0x54>
 8000c3e:	e0f7      	b.n	8000e30 <__aeabi_fsub+0x244>
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	015a      	lsls	r2, r3, #5
 8000c44:	d400      	bmi.n	8000c48 <__aeabi_fsub+0x5c>
 8000c46:	e08b      	b.n	8000d60 <__aeabi_fsub+0x174>
 8000c48:	019b      	lsls	r3, r3, #6
 8000c4a:	099c      	lsrs	r4, r3, #6
 8000c4c:	0020      	movs	r0, r4
 8000c4e:	f002 f849 	bl	8002ce4 <__clzsi2>
 8000c52:	3805      	subs	r0, #5
 8000c54:	4084      	lsls	r4, r0
 8000c56:	4285      	cmp	r5, r0
 8000c58:	dd00      	ble.n	8000c5c <__aeabi_fsub+0x70>
 8000c5a:	e0d3      	b.n	8000e04 <__aeabi_fsub+0x218>
 8000c5c:	1b45      	subs	r5, r0, r5
 8000c5e:	0023      	movs	r3, r4
 8000c60:	2020      	movs	r0, #32
 8000c62:	3501      	adds	r5, #1
 8000c64:	40eb      	lsrs	r3, r5
 8000c66:	1b45      	subs	r5, r0, r5
 8000c68:	40ac      	lsls	r4, r5
 8000c6a:	1e62      	subs	r2, r4, #1
 8000c6c:	4194      	sbcs	r4, r2
 8000c6e:	4323      	orrs	r3, r4
 8000c70:	2407      	movs	r4, #7
 8000c72:	2500      	movs	r5, #0
 8000c74:	401c      	ands	r4, r3
 8000c76:	2201      	movs	r2, #1
 8000c78:	4641      	mov	r1, r8
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	2c00      	cmp	r4, #0
 8000c7e:	d004      	beq.n	8000c8a <__aeabi_fsub+0x9e>
 8000c80:	210f      	movs	r1, #15
 8000c82:	4019      	ands	r1, r3
 8000c84:	2904      	cmp	r1, #4
 8000c86:	d000      	beq.n	8000c8a <__aeabi_fsub+0x9e>
 8000c88:	3304      	adds	r3, #4
 8000c8a:	0159      	lsls	r1, r3, #5
 8000c8c:	d400      	bmi.n	8000c90 <__aeabi_fsub+0xa4>
 8000c8e:	e080      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000c90:	3501      	adds	r5, #1
 8000c92:	b2ec      	uxtb	r4, r5
 8000c94:	2dff      	cmp	r5, #255	; 0xff
 8000c96:	d000      	beq.n	8000c9a <__aeabi_fsub+0xae>
 8000c98:	e0a3      	b.n	8000de2 <__aeabi_fsub+0x1f6>
 8000c9a:	24ff      	movs	r4, #255	; 0xff
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	025b      	lsls	r3, r3, #9
 8000ca0:	05e4      	lsls	r4, r4, #23
 8000ca2:	0a58      	lsrs	r0, r3, #9
 8000ca4:	07d2      	lsls	r2, r2, #31
 8000ca6:	4320      	orrs	r0, r4
 8000ca8:	4310      	orrs	r0, r2
 8000caa:	bc0c      	pop	{r2, r3}
 8000cac:	4690      	mov	r8, r2
 8000cae:	4699      	mov	r9, r3
 8000cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d174      	bne.n	8000da0 <__aeabi_fsub+0x1b4>
 8000cb6:	1c60      	adds	r0, r4, #1
 8000cb8:	b2c0      	uxtb	r0, r0
 8000cba:	2801      	cmp	r0, #1
 8000cbc:	dc00      	bgt.n	8000cc0 <__aeabi_fsub+0xd4>
 8000cbe:	e0a7      	b.n	8000e10 <__aeabi_fsub+0x224>
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	1a9c      	subs	r4, r3, r2
 8000cc4:	0162      	lsls	r2, r4, #5
 8000cc6:	d500      	bpl.n	8000cca <__aeabi_fsub+0xde>
 8000cc8:	e0b6      	b.n	8000e38 <__aeabi_fsub+0x24c>
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d1be      	bne.n	8000c4c <__aeabi_fsub+0x60>
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e7e3      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	dc00      	bgt.n	8000cdc <__aeabi_fsub+0xf0>
 8000cda:	e085      	b.n	8000de8 <__aeabi_fsub+0x1fc>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d046      	beq.n	8000d6e <__aeabi_fsub+0x182>
 8000ce0:	2cff      	cmp	r4, #255	; 0xff
 8000ce2:	d049      	beq.n	8000d78 <__aeabi_fsub+0x18c>
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	4648      	mov	r0, r9
 8000ce8:	04d2      	lsls	r2, r2, #19
 8000cea:	4310      	orrs	r0, r2
 8000cec:	4681      	mov	r9, r0
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2e1b      	cmp	r6, #27
 8000cf2:	dc09      	bgt.n	8000d08 <__aeabi_fsub+0x11c>
 8000cf4:	2020      	movs	r0, #32
 8000cf6:	464c      	mov	r4, r9
 8000cf8:	1b80      	subs	r0, r0, r6
 8000cfa:	4084      	lsls	r4, r0
 8000cfc:	464a      	mov	r2, r9
 8000cfe:	0020      	movs	r0, r4
 8000d00:	40f2      	lsrs	r2, r6
 8000d02:	1e44      	subs	r4, r0, #1
 8000d04:	41a0      	sbcs	r0, r4
 8000d06:	4302      	orrs	r2, r0
 8000d08:	189b      	adds	r3, r3, r2
 8000d0a:	015a      	lsls	r2, r3, #5
 8000d0c:	d528      	bpl.n	8000d60 <__aeabi_fsub+0x174>
 8000d0e:	3501      	adds	r5, #1
 8000d10:	2dff      	cmp	r5, #255	; 0xff
 8000d12:	d100      	bne.n	8000d16 <__aeabi_fsub+0x12a>
 8000d14:	e0a8      	b.n	8000e68 <__aeabi_fsub+0x27c>
 8000d16:	2201      	movs	r2, #1
 8000d18:	2407      	movs	r4, #7
 8000d1a:	4994      	ldr	r1, [pc, #592]	; (8000f6c <__aeabi_fsub+0x380>)
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	085b      	lsrs	r3, r3, #1
 8000d20:	400b      	ands	r3, r1
 8000d22:	4313      	orrs	r3, r2
 8000d24:	401c      	ands	r4, r3
 8000d26:	e7a6      	b.n	8000c76 <__aeabi_fsub+0x8a>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d000      	beq.n	8000d2e <__aeabi_fsub+0x142>
 8000d2c:	e778      	b.n	8000c20 <__aeabi_fsub+0x34>
 8000d2e:	e775      	b.n	8000c1c <__aeabi_fsub+0x30>
 8000d30:	2cff      	cmp	r4, #255	; 0xff
 8000d32:	d054      	beq.n	8000dde <__aeabi_fsub+0x1f2>
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	4649      	mov	r1, r9
 8000d38:	04d2      	lsls	r2, r2, #19
 8000d3a:	4311      	orrs	r1, r2
 8000d3c:	4689      	mov	r9, r1
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2e1b      	cmp	r6, #27
 8000d42:	dc09      	bgt.n	8000d58 <__aeabi_fsub+0x16c>
 8000d44:	2120      	movs	r1, #32
 8000d46:	4648      	mov	r0, r9
 8000d48:	1b89      	subs	r1, r1, r6
 8000d4a:	4088      	lsls	r0, r1
 8000d4c:	464a      	mov	r2, r9
 8000d4e:	0001      	movs	r1, r0
 8000d50:	40f2      	lsrs	r2, r6
 8000d52:	1e48      	subs	r0, r1, #1
 8000d54:	4181      	sbcs	r1, r0
 8000d56:	430a      	orrs	r2, r1
 8000d58:	1a9b      	subs	r3, r3, r2
 8000d5a:	015a      	lsls	r2, r3, #5
 8000d5c:	d500      	bpl.n	8000d60 <__aeabi_fsub+0x174>
 8000d5e:	e773      	b.n	8000c48 <__aeabi_fsub+0x5c>
 8000d60:	2201      	movs	r2, #1
 8000d62:	4641      	mov	r1, r8
 8000d64:	400a      	ands	r2, r1
 8000d66:	0759      	lsls	r1, r3, #29
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fsub+0x180>
 8000d6a:	e789      	b.n	8000c80 <__aeabi_fsub+0x94>
 8000d6c:	e011      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000d6e:	4648      	mov	r0, r9
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d158      	bne.n	8000e26 <__aeabi_fsub+0x23a>
 8000d74:	2cff      	cmp	r4, #255	; 0xff
 8000d76:	d10c      	bne.n	8000d92 <__aeabi_fsub+0x1a6>
 8000d78:	08db      	lsrs	r3, r3, #3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_fsub+0x194>
 8000d7e:	e78c      	b.n	8000c9a <__aeabi_fsub+0xae>
 8000d80:	2080      	movs	r0, #128	; 0x80
 8000d82:	03c0      	lsls	r0, r0, #15
 8000d84:	4303      	orrs	r3, r0
 8000d86:	025b      	lsls	r3, r3, #9
 8000d88:	0a5b      	lsrs	r3, r3, #9
 8000d8a:	24ff      	movs	r4, #255	; 0xff
 8000d8c:	e787      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000d8e:	2cff      	cmp	r4, #255	; 0xff
 8000d90:	d025      	beq.n	8000dde <__aeabi_fsub+0x1f2>
 8000d92:	08db      	lsrs	r3, r3, #3
 8000d94:	2dff      	cmp	r5, #255	; 0xff
 8000d96:	d0f0      	beq.n	8000d7a <__aeabi_fsub+0x18e>
 8000d98:	025b      	lsls	r3, r3, #9
 8000d9a:	0a5b      	lsrs	r3, r3, #9
 8000d9c:	b2ec      	uxtb	r4, r5
 8000d9e:	e77e      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000da0:	2c00      	cmp	r4, #0
 8000da2:	d04d      	beq.n	8000e40 <__aeabi_fsub+0x254>
 8000da4:	28ff      	cmp	r0, #255	; 0xff
 8000da6:	d018      	beq.n	8000dda <__aeabi_fsub+0x1ee>
 8000da8:	2480      	movs	r4, #128	; 0x80
 8000daa:	04e4      	lsls	r4, r4, #19
 8000dac:	4272      	negs	r2, r6
 8000dae:	4323      	orrs	r3, r4
 8000db0:	2a1b      	cmp	r2, #27
 8000db2:	dd00      	ble.n	8000db6 <__aeabi_fsub+0x1ca>
 8000db4:	e0c4      	b.n	8000f40 <__aeabi_fsub+0x354>
 8000db6:	001c      	movs	r4, r3
 8000db8:	2520      	movs	r5, #32
 8000dba:	40d4      	lsrs	r4, r2
 8000dbc:	1aaa      	subs	r2, r5, r2
 8000dbe:	4093      	lsls	r3, r2
 8000dc0:	1e5a      	subs	r2, r3, #1
 8000dc2:	4193      	sbcs	r3, r2
 8000dc4:	4323      	orrs	r3, r4
 8000dc6:	464a      	mov	r2, r9
 8000dc8:	0005      	movs	r5, r0
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	4688      	mov	r8, r1
 8000dce:	e738      	b.n	8000c42 <__aeabi_fsub+0x56>
 8000dd0:	1c72      	adds	r2, r6, #1
 8000dd2:	d0f8      	beq.n	8000dc6 <__aeabi_fsub+0x1da>
 8000dd4:	43f2      	mvns	r2, r6
 8000dd6:	28ff      	cmp	r0, #255	; 0xff
 8000dd8:	d1ea      	bne.n	8000db0 <__aeabi_fsub+0x1c4>
 8000dda:	000a      	movs	r2, r1
 8000ddc:	464b      	mov	r3, r9
 8000dde:	25ff      	movs	r5, #255	; 0xff
 8000de0:	e7d7      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000de2:	019b      	lsls	r3, r3, #6
 8000de4:	0a5b      	lsrs	r3, r3, #9
 8000de6:	e75a      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d141      	bne.n	8000e70 <__aeabi_fsub+0x284>
 8000dec:	1c65      	adds	r5, r4, #1
 8000dee:	b2e9      	uxtb	r1, r5
 8000df0:	2901      	cmp	r1, #1
 8000df2:	dd45      	ble.n	8000e80 <__aeabi_fsub+0x294>
 8000df4:	2dff      	cmp	r5, #255	; 0xff
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x20e>
 8000df8:	e74f      	b.n	8000c9a <__aeabi_fsub+0xae>
 8000dfa:	2407      	movs	r4, #7
 8000dfc:	444b      	add	r3, r9
 8000dfe:	085b      	lsrs	r3, r3, #1
 8000e00:	401c      	ands	r4, r3
 8000e02:	e738      	b.n	8000c76 <__aeabi_fsub+0x8a>
 8000e04:	2207      	movs	r2, #7
 8000e06:	4b5a      	ldr	r3, [pc, #360]	; (8000f70 <__aeabi_fsub+0x384>)
 8000e08:	1a2d      	subs	r5, r5, r0
 8000e0a:	4023      	ands	r3, r4
 8000e0c:	4014      	ands	r4, r2
 8000e0e:	e732      	b.n	8000c76 <__aeabi_fsub+0x8a>
 8000e10:	2c00      	cmp	r4, #0
 8000e12:	d11d      	bne.n	8000e50 <__aeabi_fsub+0x264>
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d17a      	bne.n	8000f0e <__aeabi_fsub+0x322>
 8000e18:	464b      	mov	r3, r9
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_fsub+0x234>
 8000e1e:	e091      	b.n	8000f44 <__aeabi_fsub+0x358>
 8000e20:	000a      	movs	r2, r1
 8000e22:	2500      	movs	r5, #0
 8000e24:	e7b5      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000e26:	3e01      	subs	r6, #1
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d119      	bne.n	8000e60 <__aeabi_fsub+0x274>
 8000e2c:	444b      	add	r3, r9
 8000e2e:	e76c      	b.n	8000d0a <__aeabi_fsub+0x11e>
 8000e30:	2cff      	cmp	r4, #255	; 0xff
 8000e32:	d184      	bne.n	8000d3e <__aeabi_fsub+0x152>
 8000e34:	25ff      	movs	r5, #255	; 0xff
 8000e36:	e7ac      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000e38:	464a      	mov	r2, r9
 8000e3a:	4688      	mov	r8, r1
 8000e3c:	1ad4      	subs	r4, r2, r3
 8000e3e:	e705      	b.n	8000c4c <__aeabi_fsub+0x60>
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1c5      	bne.n	8000dd0 <__aeabi_fsub+0x1e4>
 8000e44:	000a      	movs	r2, r1
 8000e46:	28ff      	cmp	r0, #255	; 0xff
 8000e48:	d0c8      	beq.n	8000ddc <__aeabi_fsub+0x1f0>
 8000e4a:	0005      	movs	r5, r0
 8000e4c:	464b      	mov	r3, r9
 8000e4e:	e7a0      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d149      	bne.n	8000ee8 <__aeabi_fsub+0x2fc>
 8000e54:	464b      	mov	r3, r9
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d077      	beq.n	8000f4a <__aeabi_fsub+0x35e>
 8000e5a:	000a      	movs	r2, r1
 8000e5c:	25ff      	movs	r5, #255	; 0xff
 8000e5e:	e798      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000e60:	2cff      	cmp	r4, #255	; 0xff
 8000e62:	d000      	beq.n	8000e66 <__aeabi_fsub+0x27a>
 8000e64:	e743      	b.n	8000cee <__aeabi_fsub+0x102>
 8000e66:	e787      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000e68:	000a      	movs	r2, r1
 8000e6a:	24ff      	movs	r4, #255	; 0xff
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	e716      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000e70:	2c00      	cmp	r4, #0
 8000e72:	d115      	bne.n	8000ea0 <__aeabi_fsub+0x2b4>
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d157      	bne.n	8000f28 <__aeabi_fsub+0x33c>
 8000e78:	28ff      	cmp	r0, #255	; 0xff
 8000e7a:	d1e6      	bne.n	8000e4a <__aeabi_fsub+0x25e>
 8000e7c:	464b      	mov	r3, r9
 8000e7e:	e77b      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d120      	bne.n	8000ec6 <__aeabi_fsub+0x2da>
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d057      	beq.n	8000f38 <__aeabi_fsub+0x34c>
 8000e88:	4649      	mov	r1, r9
 8000e8a:	2900      	cmp	r1, #0
 8000e8c:	d053      	beq.n	8000f36 <__aeabi_fsub+0x34a>
 8000e8e:	444b      	add	r3, r9
 8000e90:	015a      	lsls	r2, r3, #5
 8000e92:	d568      	bpl.n	8000f66 <__aeabi_fsub+0x37a>
 8000e94:	2407      	movs	r4, #7
 8000e96:	4a36      	ldr	r2, [pc, #216]	; (8000f70 <__aeabi_fsub+0x384>)
 8000e98:	401c      	ands	r4, r3
 8000e9a:	2501      	movs	r5, #1
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	e6ea      	b.n	8000c76 <__aeabi_fsub+0x8a>
 8000ea0:	28ff      	cmp	r0, #255	; 0xff
 8000ea2:	d0eb      	beq.n	8000e7c <__aeabi_fsub+0x290>
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	04d2      	lsls	r2, r2, #19
 8000ea8:	4276      	negs	r6, r6
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	2e1b      	cmp	r6, #27
 8000eae:	dc53      	bgt.n	8000f58 <__aeabi_fsub+0x36c>
 8000eb0:	2520      	movs	r5, #32
 8000eb2:	1bad      	subs	r5, r5, r6
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	40ab      	lsls	r3, r5
 8000eb8:	40f2      	lsrs	r2, r6
 8000eba:	1e5c      	subs	r4, r3, #1
 8000ebc:	41a3      	sbcs	r3, r4
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	444b      	add	r3, r9
 8000ec2:	0005      	movs	r5, r0
 8000ec4:	e721      	b.n	8000d0a <__aeabi_fsub+0x11e>
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0d8      	beq.n	8000e7c <__aeabi_fsub+0x290>
 8000eca:	4649      	mov	r1, r9
 8000ecc:	2900      	cmp	r1, #0
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_fsub+0x2e6>
 8000ed0:	e752      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	03c9      	lsls	r1, r1, #15
 8000ed6:	420f      	tst	r7, r1
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x2f0>
 8000eda:	e74d      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000edc:	4660      	mov	r0, ip
 8000ede:	4208      	tst	r0, r1
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_fsub+0x2f8>
 8000ee2:	e749      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000ee4:	464b      	mov	r3, r9
 8000ee6:	e747      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000ee8:	4648      	mov	r0, r9
 8000eea:	25ff      	movs	r5, #255	; 0xff
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x306>
 8000ef0:	e74f      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	03d2      	lsls	r2, r2, #15
 8000ef6:	4217      	tst	r7, r2
 8000ef8:	d004      	beq.n	8000f04 <__aeabi_fsub+0x318>
 8000efa:	4660      	mov	r0, ip
 8000efc:	4210      	tst	r0, r2
 8000efe:	d101      	bne.n	8000f04 <__aeabi_fsub+0x318>
 8000f00:	464b      	mov	r3, r9
 8000f02:	4688      	mov	r8, r1
 8000f04:	2201      	movs	r2, #1
 8000f06:	4641      	mov	r1, r8
 8000f08:	25ff      	movs	r5, #255	; 0xff
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	e741      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000f0e:	4648      	mov	r0, r9
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d01f      	beq.n	8000f54 <__aeabi_fsub+0x368>
 8000f14:	1a1a      	subs	r2, r3, r0
 8000f16:	0150      	lsls	r0, r2, #5
 8000f18:	d520      	bpl.n	8000f5c <__aeabi_fsub+0x370>
 8000f1a:	464a      	mov	r2, r9
 8000f1c:	2407      	movs	r4, #7
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	401c      	ands	r4, r3
 8000f22:	4688      	mov	r8, r1
 8000f24:	2500      	movs	r5, #0
 8000f26:	e6a6      	b.n	8000c76 <__aeabi_fsub+0x8a>
 8000f28:	1c74      	adds	r4, r6, #1
 8000f2a:	d0c9      	beq.n	8000ec0 <__aeabi_fsub+0x2d4>
 8000f2c:	43f6      	mvns	r6, r6
 8000f2e:	28ff      	cmp	r0, #255	; 0xff
 8000f30:	d1bc      	bne.n	8000eac <__aeabi_fsub+0x2c0>
 8000f32:	464b      	mov	r3, r9
 8000f34:	e720      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000f36:	4699      	mov	r9, r3
 8000f38:	464b      	mov	r3, r9
 8000f3a:	2500      	movs	r5, #0
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	e72b      	b.n	8000d98 <__aeabi_fsub+0x1ac>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e740      	b.n	8000dc6 <__aeabi_fsub+0x1da>
 8000f44:	2200      	movs	r2, #0
 8000f46:	2300      	movs	r3, #0
 8000f48:	e6a9      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	03db      	lsls	r3, r3, #15
 8000f50:	24ff      	movs	r4, #255	; 0xff
 8000f52:	e6a4      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000f54:	2500      	movs	r5, #0
 8000f56:	e71c      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e7b1      	b.n	8000ec0 <__aeabi_fsub+0x2d4>
 8000f5c:	2a00      	cmp	r2, #0
 8000f5e:	d0f1      	beq.n	8000f44 <__aeabi_fsub+0x358>
 8000f60:	0013      	movs	r3, r2
 8000f62:	2500      	movs	r5, #0
 8000f64:	e6fc      	b.n	8000d60 <__aeabi_fsub+0x174>
 8000f66:	2500      	movs	r5, #0
 8000f68:	e6fa      	b.n	8000d60 <__aeabi_fsub+0x174>
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	7dffffff 	.word	0x7dffffff
 8000f70:	fbffffff 	.word	0xfbffffff

08000f74 <__aeabi_f2iz>:
 8000f74:	0241      	lsls	r1, r0, #9
 8000f76:	0042      	lsls	r2, r0, #1
 8000f78:	0fc3      	lsrs	r3, r0, #31
 8000f7a:	0a49      	lsrs	r1, r1, #9
 8000f7c:	0e12      	lsrs	r2, r2, #24
 8000f7e:	2000      	movs	r0, #0
 8000f80:	2a7e      	cmp	r2, #126	; 0x7e
 8000f82:	d90d      	bls.n	8000fa0 <__aeabi_f2iz+0x2c>
 8000f84:	2a9d      	cmp	r2, #157	; 0x9d
 8000f86:	d80c      	bhi.n	8000fa2 <__aeabi_f2iz+0x2e>
 8000f88:	2080      	movs	r0, #128	; 0x80
 8000f8a:	0400      	lsls	r0, r0, #16
 8000f8c:	4301      	orrs	r1, r0
 8000f8e:	2a95      	cmp	r2, #149	; 0x95
 8000f90:	dc0a      	bgt.n	8000fa8 <__aeabi_f2iz+0x34>
 8000f92:	2096      	movs	r0, #150	; 0x96
 8000f94:	1a82      	subs	r2, r0, r2
 8000f96:	40d1      	lsrs	r1, r2
 8000f98:	4248      	negs	r0, r1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_f2iz+0x2c>
 8000f9e:	0008      	movs	r0, r1
 8000fa0:	4770      	bx	lr
 8000fa2:	4a03      	ldr	r2, [pc, #12]	; (8000fb0 <__aeabi_f2iz+0x3c>)
 8000fa4:	1898      	adds	r0, r3, r2
 8000fa6:	e7fb      	b.n	8000fa0 <__aeabi_f2iz+0x2c>
 8000fa8:	3a96      	subs	r2, #150	; 0x96
 8000faa:	4091      	lsls	r1, r2
 8000fac:	e7f4      	b.n	8000f98 <__aeabi_f2iz+0x24>
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	7fffffff 	.word	0x7fffffff

08000fb4 <__aeabi_ui2f>:
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	1e04      	subs	r4, r0, #0
 8000fb8:	d034      	beq.n	8001024 <__aeabi_ui2f+0x70>
 8000fba:	f001 fe93 	bl	8002ce4 <__clzsi2>
 8000fbe:	229e      	movs	r2, #158	; 0x9e
 8000fc0:	1a12      	subs	r2, r2, r0
 8000fc2:	2a96      	cmp	r2, #150	; 0x96
 8000fc4:	dc07      	bgt.n	8000fd6 <__aeabi_ui2f+0x22>
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	2808      	cmp	r0, #8
 8000fca:	dd2e      	ble.n	800102a <__aeabi_ui2f+0x76>
 8000fcc:	3808      	subs	r0, #8
 8000fce:	4084      	lsls	r4, r0
 8000fd0:	0260      	lsls	r0, r4, #9
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	e021      	b.n	800101a <__aeabi_ui2f+0x66>
 8000fd6:	2a99      	cmp	r2, #153	; 0x99
 8000fd8:	dd09      	ble.n	8000fee <__aeabi_ui2f+0x3a>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	0021      	movs	r1, r4
 8000fde:	331b      	adds	r3, #27
 8000fe0:	4099      	lsls	r1, r3
 8000fe2:	1e4b      	subs	r3, r1, #1
 8000fe4:	4199      	sbcs	r1, r3
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	1a1b      	subs	r3, r3, r0
 8000fea:	40dc      	lsrs	r4, r3
 8000fec:	430c      	orrs	r4, r1
 8000fee:	2805      	cmp	r0, #5
 8000ff0:	dd01      	ble.n	8000ff6 <__aeabi_ui2f+0x42>
 8000ff2:	1f43      	subs	r3, r0, #5
 8000ff4:	409c      	lsls	r4, r3
 8000ff6:	0023      	movs	r3, r4
 8000ff8:	490d      	ldr	r1, [pc, #52]	; (8001030 <__aeabi_ui2f+0x7c>)
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	0765      	lsls	r5, r4, #29
 8000ffe:	d009      	beq.n	8001014 <__aeabi_ui2f+0x60>
 8001000:	250f      	movs	r5, #15
 8001002:	402c      	ands	r4, r5
 8001004:	2c04      	cmp	r4, #4
 8001006:	d005      	beq.n	8001014 <__aeabi_ui2f+0x60>
 8001008:	3304      	adds	r3, #4
 800100a:	015c      	lsls	r4, r3, #5
 800100c:	d502      	bpl.n	8001014 <__aeabi_ui2f+0x60>
 800100e:	229f      	movs	r2, #159	; 0x9f
 8001010:	400b      	ands	r3, r1
 8001012:	1a12      	subs	r2, r2, r0
 8001014:	019b      	lsls	r3, r3, #6
 8001016:	0a58      	lsrs	r0, r3, #9
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	0240      	lsls	r0, r0, #9
 800101c:	05d2      	lsls	r2, r2, #23
 800101e:	0a40      	lsrs	r0, r0, #9
 8001020:	4310      	orrs	r0, r2
 8001022:	bd70      	pop	{r4, r5, r6, pc}
 8001024:	2200      	movs	r2, #0
 8001026:	2000      	movs	r0, #0
 8001028:	e7f7      	b.n	800101a <__aeabi_ui2f+0x66>
 800102a:	0260      	lsls	r0, r4, #9
 800102c:	0a40      	lsrs	r0, r0, #9
 800102e:	e7f4      	b.n	800101a <__aeabi_ui2f+0x66>
 8001030:	fbffffff 	.word	0xfbffffff

08001034 <__aeabi_dadd>:
 8001034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001036:	464f      	mov	r7, r9
 8001038:	4646      	mov	r6, r8
 800103a:	46d6      	mov	lr, sl
 800103c:	000c      	movs	r4, r1
 800103e:	0309      	lsls	r1, r1, #12
 8001040:	b5c0      	push	{r6, r7, lr}
 8001042:	0a49      	lsrs	r1, r1, #9
 8001044:	0f47      	lsrs	r7, r0, #29
 8001046:	005e      	lsls	r6, r3, #1
 8001048:	4339      	orrs	r1, r7
 800104a:	031f      	lsls	r7, r3, #12
 800104c:	0fdb      	lsrs	r3, r3, #31
 800104e:	469c      	mov	ip, r3
 8001050:	0065      	lsls	r5, r4, #1
 8001052:	0a7b      	lsrs	r3, r7, #9
 8001054:	0f57      	lsrs	r7, r2, #29
 8001056:	431f      	orrs	r7, r3
 8001058:	0d6d      	lsrs	r5, r5, #21
 800105a:	0fe4      	lsrs	r4, r4, #31
 800105c:	0d76      	lsrs	r6, r6, #21
 800105e:	46a1      	mov	r9, r4
 8001060:	00c0      	lsls	r0, r0, #3
 8001062:	46b8      	mov	r8, r7
 8001064:	00d2      	lsls	r2, r2, #3
 8001066:	1bab      	subs	r3, r5, r6
 8001068:	4564      	cmp	r4, ip
 800106a:	d07b      	beq.n	8001164 <__aeabi_dadd+0x130>
 800106c:	2b00      	cmp	r3, #0
 800106e:	dd5f      	ble.n	8001130 <__aeabi_dadd+0xfc>
 8001070:	2e00      	cmp	r6, #0
 8001072:	d000      	beq.n	8001076 <__aeabi_dadd+0x42>
 8001074:	e0a4      	b.n	80011c0 <__aeabi_dadd+0x18c>
 8001076:	003e      	movs	r6, r7
 8001078:	4316      	orrs	r6, r2
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x4a>
 800107c:	e112      	b.n	80012a4 <__aeabi_dadd+0x270>
 800107e:	1e5e      	subs	r6, r3, #1
 8001080:	2e00      	cmp	r6, #0
 8001082:	d000      	beq.n	8001086 <__aeabi_dadd+0x52>
 8001084:	e19e      	b.n	80013c4 <__aeabi_dadd+0x390>
 8001086:	1a87      	subs	r7, r0, r2
 8001088:	4643      	mov	r3, r8
 800108a:	42b8      	cmp	r0, r7
 800108c:	4180      	sbcs	r0, r0
 800108e:	2501      	movs	r5, #1
 8001090:	1ac9      	subs	r1, r1, r3
 8001092:	4240      	negs	r0, r0
 8001094:	1a09      	subs	r1, r1, r0
 8001096:	020b      	lsls	r3, r1, #8
 8001098:	d400      	bmi.n	800109c <__aeabi_dadd+0x68>
 800109a:	e131      	b.n	8001300 <__aeabi_dadd+0x2cc>
 800109c:	0249      	lsls	r1, r1, #9
 800109e:	0a4e      	lsrs	r6, r1, #9
 80010a0:	2e00      	cmp	r6, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dadd+0x72>
 80010a4:	e16e      	b.n	8001384 <__aeabi_dadd+0x350>
 80010a6:	0030      	movs	r0, r6
 80010a8:	f001 fe1c 	bl	8002ce4 <__clzsi2>
 80010ac:	0003      	movs	r3, r0
 80010ae:	3b08      	subs	r3, #8
 80010b0:	2b1f      	cmp	r3, #31
 80010b2:	dd00      	ble.n	80010b6 <__aeabi_dadd+0x82>
 80010b4:	e161      	b.n	800137a <__aeabi_dadd+0x346>
 80010b6:	2220      	movs	r2, #32
 80010b8:	0039      	movs	r1, r7
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	409e      	lsls	r6, r3
 80010be:	40d1      	lsrs	r1, r2
 80010c0:	409f      	lsls	r7, r3
 80010c2:	430e      	orrs	r6, r1
 80010c4:	429d      	cmp	r5, r3
 80010c6:	dd00      	ble.n	80010ca <__aeabi_dadd+0x96>
 80010c8:	e151      	b.n	800136e <__aeabi_dadd+0x33a>
 80010ca:	1b5d      	subs	r5, r3, r5
 80010cc:	1c6b      	adds	r3, r5, #1
 80010ce:	2b1f      	cmp	r3, #31
 80010d0:	dd00      	ble.n	80010d4 <__aeabi_dadd+0xa0>
 80010d2:	e17c      	b.n	80013ce <__aeabi_dadd+0x39a>
 80010d4:	2120      	movs	r1, #32
 80010d6:	1ac9      	subs	r1, r1, r3
 80010d8:	003d      	movs	r5, r7
 80010da:	0030      	movs	r0, r6
 80010dc:	408f      	lsls	r7, r1
 80010de:	4088      	lsls	r0, r1
 80010e0:	40dd      	lsrs	r5, r3
 80010e2:	1e79      	subs	r1, r7, #1
 80010e4:	418f      	sbcs	r7, r1
 80010e6:	0031      	movs	r1, r6
 80010e8:	2207      	movs	r2, #7
 80010ea:	4328      	orrs	r0, r5
 80010ec:	40d9      	lsrs	r1, r3
 80010ee:	2500      	movs	r5, #0
 80010f0:	4307      	orrs	r7, r0
 80010f2:	403a      	ands	r2, r7
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	d009      	beq.n	800110c <__aeabi_dadd+0xd8>
 80010f8:	230f      	movs	r3, #15
 80010fa:	403b      	ands	r3, r7
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d005      	beq.n	800110c <__aeabi_dadd+0xd8>
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	42bb      	cmp	r3, r7
 8001104:	41bf      	sbcs	r7, r7
 8001106:	427f      	negs	r7, r7
 8001108:	19c9      	adds	r1, r1, r7
 800110a:	001f      	movs	r7, r3
 800110c:	020b      	lsls	r3, r1, #8
 800110e:	d400      	bmi.n	8001112 <__aeabi_dadd+0xde>
 8001110:	e226      	b.n	8001560 <__aeabi_dadd+0x52c>
 8001112:	1c6a      	adds	r2, r5, #1
 8001114:	4bc6      	ldr	r3, [pc, #792]	; (8001430 <__aeabi_dadd+0x3fc>)
 8001116:	0555      	lsls	r5, r2, #21
 8001118:	0d6d      	lsrs	r5, r5, #21
 800111a:	429a      	cmp	r2, r3
 800111c:	d100      	bne.n	8001120 <__aeabi_dadd+0xec>
 800111e:	e106      	b.n	800132e <__aeabi_dadd+0x2fa>
 8001120:	4ac4      	ldr	r2, [pc, #784]	; (8001434 <__aeabi_dadd+0x400>)
 8001122:	08ff      	lsrs	r7, r7, #3
 8001124:	400a      	ands	r2, r1
 8001126:	0753      	lsls	r3, r2, #29
 8001128:	0252      	lsls	r2, r2, #9
 800112a:	433b      	orrs	r3, r7
 800112c:	0b12      	lsrs	r2, r2, #12
 800112e:	e08e      	b.n	800124e <__aeabi_dadd+0x21a>
 8001130:	2b00      	cmp	r3, #0
 8001132:	d000      	beq.n	8001136 <__aeabi_dadd+0x102>
 8001134:	e0b8      	b.n	80012a8 <__aeabi_dadd+0x274>
 8001136:	1c6b      	adds	r3, r5, #1
 8001138:	055b      	lsls	r3, r3, #21
 800113a:	0d5b      	lsrs	r3, r3, #21
 800113c:	2b01      	cmp	r3, #1
 800113e:	dc00      	bgt.n	8001142 <__aeabi_dadd+0x10e>
 8001140:	e130      	b.n	80013a4 <__aeabi_dadd+0x370>
 8001142:	1a87      	subs	r7, r0, r2
 8001144:	4643      	mov	r3, r8
 8001146:	42b8      	cmp	r0, r7
 8001148:	41b6      	sbcs	r6, r6
 800114a:	1acb      	subs	r3, r1, r3
 800114c:	4276      	negs	r6, r6
 800114e:	1b9e      	subs	r6, r3, r6
 8001150:	0233      	lsls	r3, r6, #8
 8001152:	d500      	bpl.n	8001156 <__aeabi_dadd+0x122>
 8001154:	e14c      	b.n	80013f0 <__aeabi_dadd+0x3bc>
 8001156:	003b      	movs	r3, r7
 8001158:	4333      	orrs	r3, r6
 800115a:	d1a1      	bne.n	80010a0 <__aeabi_dadd+0x6c>
 800115c:	2200      	movs	r2, #0
 800115e:	2400      	movs	r4, #0
 8001160:	2500      	movs	r5, #0
 8001162:	e070      	b.n	8001246 <__aeabi_dadd+0x212>
 8001164:	2b00      	cmp	r3, #0
 8001166:	dc00      	bgt.n	800116a <__aeabi_dadd+0x136>
 8001168:	e0e5      	b.n	8001336 <__aeabi_dadd+0x302>
 800116a:	2e00      	cmp	r6, #0
 800116c:	d100      	bne.n	8001170 <__aeabi_dadd+0x13c>
 800116e:	e083      	b.n	8001278 <__aeabi_dadd+0x244>
 8001170:	4eaf      	ldr	r6, [pc, #700]	; (8001430 <__aeabi_dadd+0x3fc>)
 8001172:	42b5      	cmp	r5, r6
 8001174:	d060      	beq.n	8001238 <__aeabi_dadd+0x204>
 8001176:	2680      	movs	r6, #128	; 0x80
 8001178:	0436      	lsls	r6, r6, #16
 800117a:	4337      	orrs	r7, r6
 800117c:	46b8      	mov	r8, r7
 800117e:	2b38      	cmp	r3, #56	; 0x38
 8001180:	dc00      	bgt.n	8001184 <__aeabi_dadd+0x150>
 8001182:	e13e      	b.n	8001402 <__aeabi_dadd+0x3ce>
 8001184:	4643      	mov	r3, r8
 8001186:	4313      	orrs	r3, r2
 8001188:	001f      	movs	r7, r3
 800118a:	1e7a      	subs	r2, r7, #1
 800118c:	4197      	sbcs	r7, r2
 800118e:	183f      	adds	r7, r7, r0
 8001190:	4287      	cmp	r7, r0
 8001192:	4180      	sbcs	r0, r0
 8001194:	4240      	negs	r0, r0
 8001196:	1809      	adds	r1, r1, r0
 8001198:	020b      	lsls	r3, r1, #8
 800119a:	d400      	bmi.n	800119e <__aeabi_dadd+0x16a>
 800119c:	e0b0      	b.n	8001300 <__aeabi_dadd+0x2cc>
 800119e:	4ba4      	ldr	r3, [pc, #656]	; (8001430 <__aeabi_dadd+0x3fc>)
 80011a0:	3501      	adds	r5, #1
 80011a2:	429d      	cmp	r5, r3
 80011a4:	d100      	bne.n	80011a8 <__aeabi_dadd+0x174>
 80011a6:	e0c3      	b.n	8001330 <__aeabi_dadd+0x2fc>
 80011a8:	4aa2      	ldr	r2, [pc, #648]	; (8001434 <__aeabi_dadd+0x400>)
 80011aa:	087b      	lsrs	r3, r7, #1
 80011ac:	400a      	ands	r2, r1
 80011ae:	2101      	movs	r1, #1
 80011b0:	400f      	ands	r7, r1
 80011b2:	431f      	orrs	r7, r3
 80011b4:	0851      	lsrs	r1, r2, #1
 80011b6:	07d3      	lsls	r3, r2, #31
 80011b8:	2207      	movs	r2, #7
 80011ba:	431f      	orrs	r7, r3
 80011bc:	403a      	ands	r2, r7
 80011be:	e799      	b.n	80010f4 <__aeabi_dadd+0xc0>
 80011c0:	4e9b      	ldr	r6, [pc, #620]	; (8001430 <__aeabi_dadd+0x3fc>)
 80011c2:	42b5      	cmp	r5, r6
 80011c4:	d038      	beq.n	8001238 <__aeabi_dadd+0x204>
 80011c6:	2680      	movs	r6, #128	; 0x80
 80011c8:	0436      	lsls	r6, r6, #16
 80011ca:	4337      	orrs	r7, r6
 80011cc:	46b8      	mov	r8, r7
 80011ce:	2b38      	cmp	r3, #56	; 0x38
 80011d0:	dd00      	ble.n	80011d4 <__aeabi_dadd+0x1a0>
 80011d2:	e0dc      	b.n	800138e <__aeabi_dadd+0x35a>
 80011d4:	2b1f      	cmp	r3, #31
 80011d6:	dc00      	bgt.n	80011da <__aeabi_dadd+0x1a6>
 80011d8:	e130      	b.n	800143c <__aeabi_dadd+0x408>
 80011da:	001e      	movs	r6, r3
 80011dc:	4647      	mov	r7, r8
 80011de:	3e20      	subs	r6, #32
 80011e0:	40f7      	lsrs	r7, r6
 80011e2:	46bc      	mov	ip, r7
 80011e4:	2b20      	cmp	r3, #32
 80011e6:	d004      	beq.n	80011f2 <__aeabi_dadd+0x1be>
 80011e8:	2640      	movs	r6, #64	; 0x40
 80011ea:	1af3      	subs	r3, r6, r3
 80011ec:	4646      	mov	r6, r8
 80011ee:	409e      	lsls	r6, r3
 80011f0:	4332      	orrs	r2, r6
 80011f2:	0017      	movs	r7, r2
 80011f4:	4663      	mov	r3, ip
 80011f6:	1e7a      	subs	r2, r7, #1
 80011f8:	4197      	sbcs	r7, r2
 80011fa:	431f      	orrs	r7, r3
 80011fc:	e0cc      	b.n	8001398 <__aeabi_dadd+0x364>
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d100      	bne.n	8001204 <__aeabi_dadd+0x1d0>
 8001202:	e204      	b.n	800160e <__aeabi_dadd+0x5da>
 8001204:	4643      	mov	r3, r8
 8001206:	4313      	orrs	r3, r2
 8001208:	d100      	bne.n	800120c <__aeabi_dadd+0x1d8>
 800120a:	e159      	b.n	80014c0 <__aeabi_dadd+0x48c>
 800120c:	074b      	lsls	r3, r1, #29
 800120e:	08c0      	lsrs	r0, r0, #3
 8001210:	4318      	orrs	r0, r3
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	08c9      	lsrs	r1, r1, #3
 8001216:	031b      	lsls	r3, r3, #12
 8001218:	4219      	tst	r1, r3
 800121a:	d008      	beq.n	800122e <__aeabi_dadd+0x1fa>
 800121c:	4645      	mov	r5, r8
 800121e:	08ed      	lsrs	r5, r5, #3
 8001220:	421d      	tst	r5, r3
 8001222:	d104      	bne.n	800122e <__aeabi_dadd+0x1fa>
 8001224:	4643      	mov	r3, r8
 8001226:	08d0      	lsrs	r0, r2, #3
 8001228:	0759      	lsls	r1, r3, #29
 800122a:	4308      	orrs	r0, r1
 800122c:	0029      	movs	r1, r5
 800122e:	0f42      	lsrs	r2, r0, #29
 8001230:	00c9      	lsls	r1, r1, #3
 8001232:	4d7f      	ldr	r5, [pc, #508]	; (8001430 <__aeabi_dadd+0x3fc>)
 8001234:	4311      	orrs	r1, r2
 8001236:	00c0      	lsls	r0, r0, #3
 8001238:	074b      	lsls	r3, r1, #29
 800123a:	08ca      	lsrs	r2, r1, #3
 800123c:	497c      	ldr	r1, [pc, #496]	; (8001430 <__aeabi_dadd+0x3fc>)
 800123e:	08c0      	lsrs	r0, r0, #3
 8001240:	4303      	orrs	r3, r0
 8001242:	428d      	cmp	r5, r1
 8001244:	d068      	beq.n	8001318 <__aeabi_dadd+0x2e4>
 8001246:	0312      	lsls	r2, r2, #12
 8001248:	056d      	lsls	r5, r5, #21
 800124a:	0b12      	lsrs	r2, r2, #12
 800124c:	0d6d      	lsrs	r5, r5, #21
 800124e:	2100      	movs	r1, #0
 8001250:	0312      	lsls	r2, r2, #12
 8001252:	0018      	movs	r0, r3
 8001254:	0b13      	lsrs	r3, r2, #12
 8001256:	0d0a      	lsrs	r2, r1, #20
 8001258:	0512      	lsls	r2, r2, #20
 800125a:	431a      	orrs	r2, r3
 800125c:	4b76      	ldr	r3, [pc, #472]	; (8001438 <__aeabi_dadd+0x404>)
 800125e:	052d      	lsls	r5, r5, #20
 8001260:	4013      	ands	r3, r2
 8001262:	432b      	orrs	r3, r5
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	07e4      	lsls	r4, r4, #31
 8001268:	085b      	lsrs	r3, r3, #1
 800126a:	4323      	orrs	r3, r4
 800126c:	0019      	movs	r1, r3
 800126e:	bc1c      	pop	{r2, r3, r4}
 8001270:	4690      	mov	r8, r2
 8001272:	4699      	mov	r9, r3
 8001274:	46a2      	mov	sl, r4
 8001276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001278:	003e      	movs	r6, r7
 800127a:	4316      	orrs	r6, r2
 800127c:	d012      	beq.n	80012a4 <__aeabi_dadd+0x270>
 800127e:	1e5e      	subs	r6, r3, #1
 8001280:	2e00      	cmp	r6, #0
 8001282:	d000      	beq.n	8001286 <__aeabi_dadd+0x252>
 8001284:	e100      	b.n	8001488 <__aeabi_dadd+0x454>
 8001286:	1887      	adds	r7, r0, r2
 8001288:	4287      	cmp	r7, r0
 800128a:	4180      	sbcs	r0, r0
 800128c:	4441      	add	r1, r8
 800128e:	4240      	negs	r0, r0
 8001290:	1809      	adds	r1, r1, r0
 8001292:	2501      	movs	r5, #1
 8001294:	020b      	lsls	r3, r1, #8
 8001296:	d533      	bpl.n	8001300 <__aeabi_dadd+0x2cc>
 8001298:	2502      	movs	r5, #2
 800129a:	e785      	b.n	80011a8 <__aeabi_dadd+0x174>
 800129c:	4664      	mov	r4, ip
 800129e:	0033      	movs	r3, r6
 80012a0:	4641      	mov	r1, r8
 80012a2:	0010      	movs	r0, r2
 80012a4:	001d      	movs	r5, r3
 80012a6:	e7c7      	b.n	8001238 <__aeabi_dadd+0x204>
 80012a8:	2d00      	cmp	r5, #0
 80012aa:	d000      	beq.n	80012ae <__aeabi_dadd+0x27a>
 80012ac:	e0da      	b.n	8001464 <__aeabi_dadd+0x430>
 80012ae:	000c      	movs	r4, r1
 80012b0:	4304      	orrs	r4, r0
 80012b2:	d0f3      	beq.n	800129c <__aeabi_dadd+0x268>
 80012b4:	1c5c      	adds	r4, r3, #1
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0x286>
 80012b8:	e19f      	b.n	80015fa <__aeabi_dadd+0x5c6>
 80012ba:	4c5d      	ldr	r4, [pc, #372]	; (8001430 <__aeabi_dadd+0x3fc>)
 80012bc:	42a6      	cmp	r6, r4
 80012be:	d100      	bne.n	80012c2 <__aeabi_dadd+0x28e>
 80012c0:	e12f      	b.n	8001522 <__aeabi_dadd+0x4ee>
 80012c2:	43db      	mvns	r3, r3
 80012c4:	2b38      	cmp	r3, #56	; 0x38
 80012c6:	dd00      	ble.n	80012ca <__aeabi_dadd+0x296>
 80012c8:	e166      	b.n	8001598 <__aeabi_dadd+0x564>
 80012ca:	2b1f      	cmp	r3, #31
 80012cc:	dd00      	ble.n	80012d0 <__aeabi_dadd+0x29c>
 80012ce:	e183      	b.n	80015d8 <__aeabi_dadd+0x5a4>
 80012d0:	2420      	movs	r4, #32
 80012d2:	0005      	movs	r5, r0
 80012d4:	1ae4      	subs	r4, r4, r3
 80012d6:	000f      	movs	r7, r1
 80012d8:	40dd      	lsrs	r5, r3
 80012da:	40d9      	lsrs	r1, r3
 80012dc:	40a0      	lsls	r0, r4
 80012de:	4643      	mov	r3, r8
 80012e0:	40a7      	lsls	r7, r4
 80012e2:	1a5b      	subs	r3, r3, r1
 80012e4:	1e44      	subs	r4, r0, #1
 80012e6:	41a0      	sbcs	r0, r4
 80012e8:	4698      	mov	r8, r3
 80012ea:	432f      	orrs	r7, r5
 80012ec:	4338      	orrs	r0, r7
 80012ee:	1a17      	subs	r7, r2, r0
 80012f0:	42ba      	cmp	r2, r7
 80012f2:	4192      	sbcs	r2, r2
 80012f4:	4643      	mov	r3, r8
 80012f6:	4252      	negs	r2, r2
 80012f8:	1a99      	subs	r1, r3, r2
 80012fa:	4664      	mov	r4, ip
 80012fc:	0035      	movs	r5, r6
 80012fe:	e6ca      	b.n	8001096 <__aeabi_dadd+0x62>
 8001300:	2207      	movs	r2, #7
 8001302:	403a      	ands	r2, r7
 8001304:	2a00      	cmp	r2, #0
 8001306:	d000      	beq.n	800130a <__aeabi_dadd+0x2d6>
 8001308:	e6f6      	b.n	80010f8 <__aeabi_dadd+0xc4>
 800130a:	074b      	lsls	r3, r1, #29
 800130c:	08ca      	lsrs	r2, r1, #3
 800130e:	4948      	ldr	r1, [pc, #288]	; (8001430 <__aeabi_dadd+0x3fc>)
 8001310:	08ff      	lsrs	r7, r7, #3
 8001312:	433b      	orrs	r3, r7
 8001314:	428d      	cmp	r5, r1
 8001316:	d196      	bne.n	8001246 <__aeabi_dadd+0x212>
 8001318:	0019      	movs	r1, r3
 800131a:	4311      	orrs	r1, r2
 800131c:	d100      	bne.n	8001320 <__aeabi_dadd+0x2ec>
 800131e:	e19e      	b.n	800165e <__aeabi_dadd+0x62a>
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	0309      	lsls	r1, r1, #12
 8001324:	430a      	orrs	r2, r1
 8001326:	0312      	lsls	r2, r2, #12
 8001328:	0b12      	lsrs	r2, r2, #12
 800132a:	4d41      	ldr	r5, [pc, #260]	; (8001430 <__aeabi_dadd+0x3fc>)
 800132c:	e78f      	b.n	800124e <__aeabi_dadd+0x21a>
 800132e:	0015      	movs	r5, r2
 8001330:	2200      	movs	r2, #0
 8001332:	2300      	movs	r3, #0
 8001334:	e78b      	b.n	800124e <__aeabi_dadd+0x21a>
 8001336:	2b00      	cmp	r3, #0
 8001338:	d000      	beq.n	800133c <__aeabi_dadd+0x308>
 800133a:	e0c7      	b.n	80014cc <__aeabi_dadd+0x498>
 800133c:	1c6b      	adds	r3, r5, #1
 800133e:	055f      	lsls	r7, r3, #21
 8001340:	0d7f      	lsrs	r7, r7, #21
 8001342:	2f01      	cmp	r7, #1
 8001344:	dc00      	bgt.n	8001348 <__aeabi_dadd+0x314>
 8001346:	e0f1      	b.n	800152c <__aeabi_dadd+0x4f8>
 8001348:	4d39      	ldr	r5, [pc, #228]	; (8001430 <__aeabi_dadd+0x3fc>)
 800134a:	42ab      	cmp	r3, r5
 800134c:	d100      	bne.n	8001350 <__aeabi_dadd+0x31c>
 800134e:	e0b9      	b.n	80014c4 <__aeabi_dadd+0x490>
 8001350:	1885      	adds	r5, r0, r2
 8001352:	000a      	movs	r2, r1
 8001354:	4285      	cmp	r5, r0
 8001356:	4189      	sbcs	r1, r1
 8001358:	4442      	add	r2, r8
 800135a:	4249      	negs	r1, r1
 800135c:	1851      	adds	r1, r2, r1
 800135e:	2207      	movs	r2, #7
 8001360:	07cf      	lsls	r7, r1, #31
 8001362:	086d      	lsrs	r5, r5, #1
 8001364:	432f      	orrs	r7, r5
 8001366:	0849      	lsrs	r1, r1, #1
 8001368:	403a      	ands	r2, r7
 800136a:	001d      	movs	r5, r3
 800136c:	e6c2      	b.n	80010f4 <__aeabi_dadd+0xc0>
 800136e:	2207      	movs	r2, #7
 8001370:	4930      	ldr	r1, [pc, #192]	; (8001434 <__aeabi_dadd+0x400>)
 8001372:	1aed      	subs	r5, r5, r3
 8001374:	4031      	ands	r1, r6
 8001376:	403a      	ands	r2, r7
 8001378:	e6bc      	b.n	80010f4 <__aeabi_dadd+0xc0>
 800137a:	003e      	movs	r6, r7
 800137c:	3828      	subs	r0, #40	; 0x28
 800137e:	4086      	lsls	r6, r0
 8001380:	2700      	movs	r7, #0
 8001382:	e69f      	b.n	80010c4 <__aeabi_dadd+0x90>
 8001384:	0038      	movs	r0, r7
 8001386:	f001 fcad 	bl	8002ce4 <__clzsi2>
 800138a:	3020      	adds	r0, #32
 800138c:	e68e      	b.n	80010ac <__aeabi_dadd+0x78>
 800138e:	4643      	mov	r3, r8
 8001390:	4313      	orrs	r3, r2
 8001392:	001f      	movs	r7, r3
 8001394:	1e7a      	subs	r2, r7, #1
 8001396:	4197      	sbcs	r7, r2
 8001398:	1bc7      	subs	r7, r0, r7
 800139a:	42b8      	cmp	r0, r7
 800139c:	4180      	sbcs	r0, r0
 800139e:	4240      	negs	r0, r0
 80013a0:	1a09      	subs	r1, r1, r0
 80013a2:	e678      	b.n	8001096 <__aeabi_dadd+0x62>
 80013a4:	000e      	movs	r6, r1
 80013a6:	003b      	movs	r3, r7
 80013a8:	4306      	orrs	r6, r0
 80013aa:	4313      	orrs	r3, r2
 80013ac:	2d00      	cmp	r5, #0
 80013ae:	d161      	bne.n	8001474 <__aeabi_dadd+0x440>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d000      	beq.n	80013b6 <__aeabi_dadd+0x382>
 80013b4:	e0f4      	b.n	80015a0 <__aeabi_dadd+0x56c>
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d100      	bne.n	80013bc <__aeabi_dadd+0x388>
 80013ba:	e11b      	b.n	80015f4 <__aeabi_dadd+0x5c0>
 80013bc:	4664      	mov	r4, ip
 80013be:	0039      	movs	r1, r7
 80013c0:	0010      	movs	r0, r2
 80013c2:	e739      	b.n	8001238 <__aeabi_dadd+0x204>
 80013c4:	4f1a      	ldr	r7, [pc, #104]	; (8001430 <__aeabi_dadd+0x3fc>)
 80013c6:	42bb      	cmp	r3, r7
 80013c8:	d07a      	beq.n	80014c0 <__aeabi_dadd+0x48c>
 80013ca:	0033      	movs	r3, r6
 80013cc:	e6ff      	b.n	80011ce <__aeabi_dadd+0x19a>
 80013ce:	0030      	movs	r0, r6
 80013d0:	3d1f      	subs	r5, #31
 80013d2:	40e8      	lsrs	r0, r5
 80013d4:	2b20      	cmp	r3, #32
 80013d6:	d003      	beq.n	80013e0 <__aeabi_dadd+0x3ac>
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	1acb      	subs	r3, r1, r3
 80013dc:	409e      	lsls	r6, r3
 80013de:	4337      	orrs	r7, r6
 80013e0:	1e7b      	subs	r3, r7, #1
 80013e2:	419f      	sbcs	r7, r3
 80013e4:	2207      	movs	r2, #7
 80013e6:	4307      	orrs	r7, r0
 80013e8:	403a      	ands	r2, r7
 80013ea:	2100      	movs	r1, #0
 80013ec:	2500      	movs	r5, #0
 80013ee:	e789      	b.n	8001304 <__aeabi_dadd+0x2d0>
 80013f0:	1a17      	subs	r7, r2, r0
 80013f2:	4643      	mov	r3, r8
 80013f4:	42ba      	cmp	r2, r7
 80013f6:	41b6      	sbcs	r6, r6
 80013f8:	1a59      	subs	r1, r3, r1
 80013fa:	4276      	negs	r6, r6
 80013fc:	1b8e      	subs	r6, r1, r6
 80013fe:	4664      	mov	r4, ip
 8001400:	e64e      	b.n	80010a0 <__aeabi_dadd+0x6c>
 8001402:	2b1f      	cmp	r3, #31
 8001404:	dd00      	ble.n	8001408 <__aeabi_dadd+0x3d4>
 8001406:	e0ad      	b.n	8001564 <__aeabi_dadd+0x530>
 8001408:	2620      	movs	r6, #32
 800140a:	4647      	mov	r7, r8
 800140c:	1af6      	subs	r6, r6, r3
 800140e:	40b7      	lsls	r7, r6
 8001410:	46b9      	mov	r9, r7
 8001412:	0017      	movs	r7, r2
 8001414:	46b2      	mov	sl, r6
 8001416:	40df      	lsrs	r7, r3
 8001418:	464e      	mov	r6, r9
 800141a:	433e      	orrs	r6, r7
 800141c:	0037      	movs	r7, r6
 800141e:	4656      	mov	r6, sl
 8001420:	40b2      	lsls	r2, r6
 8001422:	1e56      	subs	r6, r2, #1
 8001424:	41b2      	sbcs	r2, r6
 8001426:	4317      	orrs	r7, r2
 8001428:	4642      	mov	r2, r8
 800142a:	40da      	lsrs	r2, r3
 800142c:	1889      	adds	r1, r1, r2
 800142e:	e6ae      	b.n	800118e <__aeabi_dadd+0x15a>
 8001430:	000007ff 	.word	0x000007ff
 8001434:	ff7fffff 	.word	0xff7fffff
 8001438:	800fffff 	.word	0x800fffff
 800143c:	2620      	movs	r6, #32
 800143e:	4647      	mov	r7, r8
 8001440:	1af6      	subs	r6, r6, r3
 8001442:	40b7      	lsls	r7, r6
 8001444:	46b9      	mov	r9, r7
 8001446:	0017      	movs	r7, r2
 8001448:	46b2      	mov	sl, r6
 800144a:	40df      	lsrs	r7, r3
 800144c:	464e      	mov	r6, r9
 800144e:	433e      	orrs	r6, r7
 8001450:	0037      	movs	r7, r6
 8001452:	4656      	mov	r6, sl
 8001454:	40b2      	lsls	r2, r6
 8001456:	1e56      	subs	r6, r2, #1
 8001458:	41b2      	sbcs	r2, r6
 800145a:	4317      	orrs	r7, r2
 800145c:	4642      	mov	r2, r8
 800145e:	40da      	lsrs	r2, r3
 8001460:	1a89      	subs	r1, r1, r2
 8001462:	e799      	b.n	8001398 <__aeabi_dadd+0x364>
 8001464:	4c7f      	ldr	r4, [pc, #508]	; (8001664 <__aeabi_dadd+0x630>)
 8001466:	42a6      	cmp	r6, r4
 8001468:	d05b      	beq.n	8001522 <__aeabi_dadd+0x4ee>
 800146a:	2480      	movs	r4, #128	; 0x80
 800146c:	0424      	lsls	r4, r4, #16
 800146e:	425b      	negs	r3, r3
 8001470:	4321      	orrs	r1, r4
 8001472:	e727      	b.n	80012c4 <__aeabi_dadd+0x290>
 8001474:	2e00      	cmp	r6, #0
 8001476:	d10c      	bne.n	8001492 <__aeabi_dadd+0x45e>
 8001478:	2b00      	cmp	r3, #0
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x44a>
 800147c:	e0cb      	b.n	8001616 <__aeabi_dadd+0x5e2>
 800147e:	4664      	mov	r4, ip
 8001480:	0039      	movs	r1, r7
 8001482:	0010      	movs	r0, r2
 8001484:	4d77      	ldr	r5, [pc, #476]	; (8001664 <__aeabi_dadd+0x630>)
 8001486:	e6d7      	b.n	8001238 <__aeabi_dadd+0x204>
 8001488:	4f76      	ldr	r7, [pc, #472]	; (8001664 <__aeabi_dadd+0x630>)
 800148a:	42bb      	cmp	r3, r7
 800148c:	d018      	beq.n	80014c0 <__aeabi_dadd+0x48c>
 800148e:	0033      	movs	r3, r6
 8001490:	e675      	b.n	800117e <__aeabi_dadd+0x14a>
 8001492:	2b00      	cmp	r3, #0
 8001494:	d014      	beq.n	80014c0 <__aeabi_dadd+0x48c>
 8001496:	074b      	lsls	r3, r1, #29
 8001498:	08c0      	lsrs	r0, r0, #3
 800149a:	4318      	orrs	r0, r3
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	08c9      	lsrs	r1, r1, #3
 80014a0:	031b      	lsls	r3, r3, #12
 80014a2:	4219      	tst	r1, r3
 80014a4:	d007      	beq.n	80014b6 <__aeabi_dadd+0x482>
 80014a6:	08fc      	lsrs	r4, r7, #3
 80014a8:	421c      	tst	r4, r3
 80014aa:	d104      	bne.n	80014b6 <__aeabi_dadd+0x482>
 80014ac:	0779      	lsls	r1, r7, #29
 80014ae:	08d0      	lsrs	r0, r2, #3
 80014b0:	4308      	orrs	r0, r1
 80014b2:	46e1      	mov	r9, ip
 80014b4:	0021      	movs	r1, r4
 80014b6:	464c      	mov	r4, r9
 80014b8:	0f42      	lsrs	r2, r0, #29
 80014ba:	00c9      	lsls	r1, r1, #3
 80014bc:	4311      	orrs	r1, r2
 80014be:	00c0      	lsls	r0, r0, #3
 80014c0:	4d68      	ldr	r5, [pc, #416]	; (8001664 <__aeabi_dadd+0x630>)
 80014c2:	e6b9      	b.n	8001238 <__aeabi_dadd+0x204>
 80014c4:	001d      	movs	r5, r3
 80014c6:	2200      	movs	r2, #0
 80014c8:	2300      	movs	r3, #0
 80014ca:	e6c0      	b.n	800124e <__aeabi_dadd+0x21a>
 80014cc:	2d00      	cmp	r5, #0
 80014ce:	d15b      	bne.n	8001588 <__aeabi_dadd+0x554>
 80014d0:	000d      	movs	r5, r1
 80014d2:	4305      	orrs	r5, r0
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dadd+0x4a4>
 80014d6:	e6e2      	b.n	800129e <__aeabi_dadd+0x26a>
 80014d8:	1c5d      	adds	r5, r3, #1
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x4aa>
 80014dc:	e0b0      	b.n	8001640 <__aeabi_dadd+0x60c>
 80014de:	4d61      	ldr	r5, [pc, #388]	; (8001664 <__aeabi_dadd+0x630>)
 80014e0:	42ae      	cmp	r6, r5
 80014e2:	d01f      	beq.n	8001524 <__aeabi_dadd+0x4f0>
 80014e4:	43db      	mvns	r3, r3
 80014e6:	2b38      	cmp	r3, #56	; 0x38
 80014e8:	dc71      	bgt.n	80015ce <__aeabi_dadd+0x59a>
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	dd00      	ble.n	80014f0 <__aeabi_dadd+0x4bc>
 80014ee:	e096      	b.n	800161e <__aeabi_dadd+0x5ea>
 80014f0:	2520      	movs	r5, #32
 80014f2:	000f      	movs	r7, r1
 80014f4:	1aed      	subs	r5, r5, r3
 80014f6:	40af      	lsls	r7, r5
 80014f8:	46b9      	mov	r9, r7
 80014fa:	0007      	movs	r7, r0
 80014fc:	46aa      	mov	sl, r5
 80014fe:	40df      	lsrs	r7, r3
 8001500:	464d      	mov	r5, r9
 8001502:	433d      	orrs	r5, r7
 8001504:	002f      	movs	r7, r5
 8001506:	4655      	mov	r5, sl
 8001508:	40a8      	lsls	r0, r5
 800150a:	40d9      	lsrs	r1, r3
 800150c:	1e45      	subs	r5, r0, #1
 800150e:	41a8      	sbcs	r0, r5
 8001510:	4488      	add	r8, r1
 8001512:	4307      	orrs	r7, r0
 8001514:	18bf      	adds	r7, r7, r2
 8001516:	4297      	cmp	r7, r2
 8001518:	4192      	sbcs	r2, r2
 800151a:	4251      	negs	r1, r2
 800151c:	4441      	add	r1, r8
 800151e:	0035      	movs	r5, r6
 8001520:	e63a      	b.n	8001198 <__aeabi_dadd+0x164>
 8001522:	4664      	mov	r4, ip
 8001524:	0035      	movs	r5, r6
 8001526:	4641      	mov	r1, r8
 8001528:	0010      	movs	r0, r2
 800152a:	e685      	b.n	8001238 <__aeabi_dadd+0x204>
 800152c:	000b      	movs	r3, r1
 800152e:	4303      	orrs	r3, r0
 8001530:	2d00      	cmp	r5, #0
 8001532:	d000      	beq.n	8001536 <__aeabi_dadd+0x502>
 8001534:	e663      	b.n	80011fe <__aeabi_dadd+0x1ca>
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f5      	beq.n	8001526 <__aeabi_dadd+0x4f2>
 800153a:	4643      	mov	r3, r8
 800153c:	4313      	orrs	r3, r2
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x50e>
 8001540:	e67a      	b.n	8001238 <__aeabi_dadd+0x204>
 8001542:	1887      	adds	r7, r0, r2
 8001544:	4287      	cmp	r7, r0
 8001546:	4180      	sbcs	r0, r0
 8001548:	2207      	movs	r2, #7
 800154a:	4441      	add	r1, r8
 800154c:	4240      	negs	r0, r0
 800154e:	1809      	adds	r1, r1, r0
 8001550:	403a      	ands	r2, r7
 8001552:	020b      	lsls	r3, r1, #8
 8001554:	d400      	bmi.n	8001558 <__aeabi_dadd+0x524>
 8001556:	e6d5      	b.n	8001304 <__aeabi_dadd+0x2d0>
 8001558:	4b43      	ldr	r3, [pc, #268]	; (8001668 <__aeabi_dadd+0x634>)
 800155a:	3501      	adds	r5, #1
 800155c:	4019      	ands	r1, r3
 800155e:	e5c9      	b.n	80010f4 <__aeabi_dadd+0xc0>
 8001560:	0038      	movs	r0, r7
 8001562:	e669      	b.n	8001238 <__aeabi_dadd+0x204>
 8001564:	001e      	movs	r6, r3
 8001566:	4647      	mov	r7, r8
 8001568:	3e20      	subs	r6, #32
 800156a:	40f7      	lsrs	r7, r6
 800156c:	46bc      	mov	ip, r7
 800156e:	2b20      	cmp	r3, #32
 8001570:	d004      	beq.n	800157c <__aeabi_dadd+0x548>
 8001572:	2640      	movs	r6, #64	; 0x40
 8001574:	1af3      	subs	r3, r6, r3
 8001576:	4646      	mov	r6, r8
 8001578:	409e      	lsls	r6, r3
 800157a:	4332      	orrs	r2, r6
 800157c:	0017      	movs	r7, r2
 800157e:	4663      	mov	r3, ip
 8001580:	1e7a      	subs	r2, r7, #1
 8001582:	4197      	sbcs	r7, r2
 8001584:	431f      	orrs	r7, r3
 8001586:	e602      	b.n	800118e <__aeabi_dadd+0x15a>
 8001588:	4d36      	ldr	r5, [pc, #216]	; (8001664 <__aeabi_dadd+0x630>)
 800158a:	42ae      	cmp	r6, r5
 800158c:	d0ca      	beq.n	8001524 <__aeabi_dadd+0x4f0>
 800158e:	2580      	movs	r5, #128	; 0x80
 8001590:	042d      	lsls	r5, r5, #16
 8001592:	425b      	negs	r3, r3
 8001594:	4329      	orrs	r1, r5
 8001596:	e7a6      	b.n	80014e6 <__aeabi_dadd+0x4b2>
 8001598:	4308      	orrs	r0, r1
 800159a:	1e41      	subs	r1, r0, #1
 800159c:	4188      	sbcs	r0, r1
 800159e:	e6a6      	b.n	80012ee <__aeabi_dadd+0x2ba>
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dadd+0x572>
 80015a4:	e648      	b.n	8001238 <__aeabi_dadd+0x204>
 80015a6:	1a87      	subs	r7, r0, r2
 80015a8:	4643      	mov	r3, r8
 80015aa:	42b8      	cmp	r0, r7
 80015ac:	41b6      	sbcs	r6, r6
 80015ae:	1acb      	subs	r3, r1, r3
 80015b0:	4276      	negs	r6, r6
 80015b2:	1b9e      	subs	r6, r3, r6
 80015b4:	0233      	lsls	r3, r6, #8
 80015b6:	d54b      	bpl.n	8001650 <__aeabi_dadd+0x61c>
 80015b8:	1a17      	subs	r7, r2, r0
 80015ba:	4643      	mov	r3, r8
 80015bc:	42ba      	cmp	r2, r7
 80015be:	4192      	sbcs	r2, r2
 80015c0:	1a59      	subs	r1, r3, r1
 80015c2:	4252      	negs	r2, r2
 80015c4:	1a89      	subs	r1, r1, r2
 80015c6:	2207      	movs	r2, #7
 80015c8:	4664      	mov	r4, ip
 80015ca:	403a      	ands	r2, r7
 80015cc:	e592      	b.n	80010f4 <__aeabi_dadd+0xc0>
 80015ce:	4301      	orrs	r1, r0
 80015d0:	000f      	movs	r7, r1
 80015d2:	1e79      	subs	r1, r7, #1
 80015d4:	418f      	sbcs	r7, r1
 80015d6:	e79d      	b.n	8001514 <__aeabi_dadd+0x4e0>
 80015d8:	001c      	movs	r4, r3
 80015da:	000f      	movs	r7, r1
 80015dc:	3c20      	subs	r4, #32
 80015de:	40e7      	lsrs	r7, r4
 80015e0:	2b20      	cmp	r3, #32
 80015e2:	d003      	beq.n	80015ec <__aeabi_dadd+0x5b8>
 80015e4:	2440      	movs	r4, #64	; 0x40
 80015e6:	1ae3      	subs	r3, r4, r3
 80015e8:	4099      	lsls	r1, r3
 80015ea:	4308      	orrs	r0, r1
 80015ec:	1e41      	subs	r1, r0, #1
 80015ee:	4188      	sbcs	r0, r1
 80015f0:	4338      	orrs	r0, r7
 80015f2:	e67c      	b.n	80012ee <__aeabi_dadd+0x2ba>
 80015f4:	2200      	movs	r2, #0
 80015f6:	2400      	movs	r4, #0
 80015f8:	e625      	b.n	8001246 <__aeabi_dadd+0x212>
 80015fa:	1a17      	subs	r7, r2, r0
 80015fc:	4643      	mov	r3, r8
 80015fe:	42ba      	cmp	r2, r7
 8001600:	4192      	sbcs	r2, r2
 8001602:	1a59      	subs	r1, r3, r1
 8001604:	4252      	negs	r2, r2
 8001606:	1a89      	subs	r1, r1, r2
 8001608:	4664      	mov	r4, ip
 800160a:	0035      	movs	r5, r6
 800160c:	e543      	b.n	8001096 <__aeabi_dadd+0x62>
 800160e:	4641      	mov	r1, r8
 8001610:	0010      	movs	r0, r2
 8001612:	4d14      	ldr	r5, [pc, #80]	; (8001664 <__aeabi_dadd+0x630>)
 8001614:	e610      	b.n	8001238 <__aeabi_dadd+0x204>
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	2400      	movs	r4, #0
 800161a:	0312      	lsls	r2, r2, #12
 800161c:	e680      	b.n	8001320 <__aeabi_dadd+0x2ec>
 800161e:	001d      	movs	r5, r3
 8001620:	000f      	movs	r7, r1
 8001622:	3d20      	subs	r5, #32
 8001624:	40ef      	lsrs	r7, r5
 8001626:	46bc      	mov	ip, r7
 8001628:	2b20      	cmp	r3, #32
 800162a:	d003      	beq.n	8001634 <__aeabi_dadd+0x600>
 800162c:	2540      	movs	r5, #64	; 0x40
 800162e:	1aeb      	subs	r3, r5, r3
 8001630:	4099      	lsls	r1, r3
 8001632:	4308      	orrs	r0, r1
 8001634:	0007      	movs	r7, r0
 8001636:	4663      	mov	r3, ip
 8001638:	1e78      	subs	r0, r7, #1
 800163a:	4187      	sbcs	r7, r0
 800163c:	431f      	orrs	r7, r3
 800163e:	e769      	b.n	8001514 <__aeabi_dadd+0x4e0>
 8001640:	1887      	adds	r7, r0, r2
 8001642:	4297      	cmp	r7, r2
 8001644:	419b      	sbcs	r3, r3
 8001646:	4441      	add	r1, r8
 8001648:	425b      	negs	r3, r3
 800164a:	18c9      	adds	r1, r1, r3
 800164c:	0035      	movs	r5, r6
 800164e:	e5a3      	b.n	8001198 <__aeabi_dadd+0x164>
 8001650:	003b      	movs	r3, r7
 8001652:	4333      	orrs	r3, r6
 8001654:	d0ce      	beq.n	80015f4 <__aeabi_dadd+0x5c0>
 8001656:	2207      	movs	r2, #7
 8001658:	0031      	movs	r1, r6
 800165a:	403a      	ands	r2, r7
 800165c:	e652      	b.n	8001304 <__aeabi_dadd+0x2d0>
 800165e:	2300      	movs	r3, #0
 8001660:	001a      	movs	r2, r3
 8001662:	e5f4      	b.n	800124e <__aeabi_dadd+0x21a>
 8001664:	000007ff 	.word	0x000007ff
 8001668:	ff7fffff 	.word	0xff7fffff

0800166c <__aeabi_ddiv>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4657      	mov	r7, sl
 8001670:	46de      	mov	lr, fp
 8001672:	464e      	mov	r6, r9
 8001674:	4645      	mov	r5, r8
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	4683      	mov	fp, r0
 800167a:	0007      	movs	r7, r0
 800167c:	030e      	lsls	r6, r1, #12
 800167e:	0048      	lsls	r0, r1, #1
 8001680:	b085      	sub	sp, #20
 8001682:	4692      	mov	sl, r2
 8001684:	001c      	movs	r4, r3
 8001686:	0b36      	lsrs	r6, r6, #12
 8001688:	0d40      	lsrs	r0, r0, #21
 800168a:	0fcd      	lsrs	r5, r1, #31
 800168c:	2800      	cmp	r0, #0
 800168e:	d100      	bne.n	8001692 <__aeabi_ddiv+0x26>
 8001690:	e09d      	b.n	80017ce <__aeabi_ddiv+0x162>
 8001692:	4b95      	ldr	r3, [pc, #596]	; (80018e8 <__aeabi_ddiv+0x27c>)
 8001694:	4298      	cmp	r0, r3
 8001696:	d039      	beq.n	800170c <__aeabi_ddiv+0xa0>
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	00f6      	lsls	r6, r6, #3
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	431e      	orrs	r6, r3
 80016a0:	4a92      	ldr	r2, [pc, #584]	; (80018ec <__aeabi_ddiv+0x280>)
 80016a2:	0f7b      	lsrs	r3, r7, #29
 80016a4:	4333      	orrs	r3, r6
 80016a6:	4699      	mov	r9, r3
 80016a8:	4694      	mov	ip, r2
 80016aa:	0003      	movs	r3, r0
 80016ac:	4463      	add	r3, ip
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2300      	movs	r3, #0
 80016b2:	2600      	movs	r6, #0
 80016b4:	00ff      	lsls	r7, r7, #3
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	0323      	lsls	r3, r4, #12
 80016ba:	0b1b      	lsrs	r3, r3, #12
 80016bc:	4698      	mov	r8, r3
 80016be:	0063      	lsls	r3, r4, #1
 80016c0:	0fe4      	lsrs	r4, r4, #31
 80016c2:	4652      	mov	r2, sl
 80016c4:	0d5b      	lsrs	r3, r3, #21
 80016c6:	9401      	str	r4, [sp, #4]
 80016c8:	d100      	bne.n	80016cc <__aeabi_ddiv+0x60>
 80016ca:	e0b3      	b.n	8001834 <__aeabi_ddiv+0x1c8>
 80016cc:	4986      	ldr	r1, [pc, #536]	; (80018e8 <__aeabi_ddiv+0x27c>)
 80016ce:	428b      	cmp	r3, r1
 80016d0:	d100      	bne.n	80016d4 <__aeabi_ddiv+0x68>
 80016d2:	e09e      	b.n	8001812 <__aeabi_ddiv+0x1a6>
 80016d4:	4642      	mov	r2, r8
 80016d6:	00d1      	lsls	r1, r2, #3
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	0412      	lsls	r2, r2, #16
 80016dc:	430a      	orrs	r2, r1
 80016de:	4651      	mov	r1, sl
 80016e0:	0f49      	lsrs	r1, r1, #29
 80016e2:	4311      	orrs	r1, r2
 80016e4:	468b      	mov	fp, r1
 80016e6:	4981      	ldr	r1, [pc, #516]	; (80018ec <__aeabi_ddiv+0x280>)
 80016e8:	4652      	mov	r2, sl
 80016ea:	468c      	mov	ip, r1
 80016ec:	9900      	ldr	r1, [sp, #0]
 80016ee:	4463      	add	r3, ip
 80016f0:	1acb      	subs	r3, r1, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	00d2      	lsls	r2, r2, #3
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	002b      	movs	r3, r5
 80016fa:	4063      	eors	r3, r4
 80016fc:	469a      	mov	sl, r3
 80016fe:	2e0f      	cmp	r6, #15
 8001700:	d900      	bls.n	8001704 <__aeabi_ddiv+0x98>
 8001702:	e105      	b.n	8001910 <__aeabi_ddiv+0x2a4>
 8001704:	4b7a      	ldr	r3, [pc, #488]	; (80018f0 <__aeabi_ddiv+0x284>)
 8001706:	00b6      	lsls	r6, r6, #2
 8001708:	599b      	ldr	r3, [r3, r6]
 800170a:	469f      	mov	pc, r3
 800170c:	465b      	mov	r3, fp
 800170e:	4333      	orrs	r3, r6
 8001710:	4699      	mov	r9, r3
 8001712:	d000      	beq.n	8001716 <__aeabi_ddiv+0xaa>
 8001714:	e0b8      	b.n	8001888 <__aeabi_ddiv+0x21c>
 8001716:	2302      	movs	r3, #2
 8001718:	2608      	movs	r6, #8
 800171a:	2700      	movs	r7, #0
 800171c:	9000      	str	r0, [sp, #0]
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	e7ca      	b.n	80016b8 <__aeabi_ddiv+0x4c>
 8001722:	46cb      	mov	fp, r9
 8001724:	003a      	movs	r2, r7
 8001726:	9902      	ldr	r1, [sp, #8]
 8001728:	9501      	str	r5, [sp, #4]
 800172a:	9b01      	ldr	r3, [sp, #4]
 800172c:	469a      	mov	sl, r3
 800172e:	2902      	cmp	r1, #2
 8001730:	d027      	beq.n	8001782 <__aeabi_ddiv+0x116>
 8001732:	2903      	cmp	r1, #3
 8001734:	d100      	bne.n	8001738 <__aeabi_ddiv+0xcc>
 8001736:	e280      	b.n	8001c3a <__aeabi_ddiv+0x5ce>
 8001738:	2901      	cmp	r1, #1
 800173a:	d044      	beq.n	80017c6 <__aeabi_ddiv+0x15a>
 800173c:	496d      	ldr	r1, [pc, #436]	; (80018f4 <__aeabi_ddiv+0x288>)
 800173e:	9b00      	ldr	r3, [sp, #0]
 8001740:	468c      	mov	ip, r1
 8001742:	4463      	add	r3, ip
 8001744:	001c      	movs	r4, r3
 8001746:	2c00      	cmp	r4, #0
 8001748:	dd38      	ble.n	80017bc <__aeabi_ddiv+0x150>
 800174a:	0753      	lsls	r3, r2, #29
 800174c:	d000      	beq.n	8001750 <__aeabi_ddiv+0xe4>
 800174e:	e213      	b.n	8001b78 <__aeabi_ddiv+0x50c>
 8001750:	08d2      	lsrs	r2, r2, #3
 8001752:	465b      	mov	r3, fp
 8001754:	01db      	lsls	r3, r3, #7
 8001756:	d509      	bpl.n	800176c <__aeabi_ddiv+0x100>
 8001758:	4659      	mov	r1, fp
 800175a:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <__aeabi_ddiv+0x28c>)
 800175c:	4019      	ands	r1, r3
 800175e:	468b      	mov	fp, r1
 8001760:	2180      	movs	r1, #128	; 0x80
 8001762:	00c9      	lsls	r1, r1, #3
 8001764:	468c      	mov	ip, r1
 8001766:	9b00      	ldr	r3, [sp, #0]
 8001768:	4463      	add	r3, ip
 800176a:	001c      	movs	r4, r3
 800176c:	4b63      	ldr	r3, [pc, #396]	; (80018fc <__aeabi_ddiv+0x290>)
 800176e:	429c      	cmp	r4, r3
 8001770:	dc07      	bgt.n	8001782 <__aeabi_ddiv+0x116>
 8001772:	465b      	mov	r3, fp
 8001774:	0564      	lsls	r4, r4, #21
 8001776:	075f      	lsls	r7, r3, #29
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	4317      	orrs	r7, r2
 800177c:	0b1b      	lsrs	r3, r3, #12
 800177e:	0d62      	lsrs	r2, r4, #21
 8001780:	e002      	b.n	8001788 <__aeabi_ddiv+0x11c>
 8001782:	2300      	movs	r3, #0
 8001784:	2700      	movs	r7, #0
 8001786:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <__aeabi_ddiv+0x27c>)
 8001788:	2100      	movs	r1, #0
 800178a:	031b      	lsls	r3, r3, #12
 800178c:	0b1c      	lsrs	r4, r3, #12
 800178e:	0d0b      	lsrs	r3, r1, #20
 8001790:	051b      	lsls	r3, r3, #20
 8001792:	4323      	orrs	r3, r4
 8001794:	0514      	lsls	r4, r2, #20
 8001796:	4a5a      	ldr	r2, [pc, #360]	; (8001900 <__aeabi_ddiv+0x294>)
 8001798:	0038      	movs	r0, r7
 800179a:	4013      	ands	r3, r2
 800179c:	431c      	orrs	r4, r3
 800179e:	4653      	mov	r3, sl
 80017a0:	0064      	lsls	r4, r4, #1
 80017a2:	07db      	lsls	r3, r3, #31
 80017a4:	0864      	lsrs	r4, r4, #1
 80017a6:	431c      	orrs	r4, r3
 80017a8:	0021      	movs	r1, r4
 80017aa:	b005      	add	sp, #20
 80017ac:	bc3c      	pop	{r2, r3, r4, r5}
 80017ae:	4690      	mov	r8, r2
 80017b0:	4699      	mov	r9, r3
 80017b2:	46a2      	mov	sl, r4
 80017b4:	46ab      	mov	fp, r5
 80017b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b8:	2201      	movs	r2, #1
 80017ba:	4252      	negs	r2, r2
 80017bc:	2301      	movs	r3, #1
 80017be:	1b1b      	subs	r3, r3, r4
 80017c0:	2b38      	cmp	r3, #56	; 0x38
 80017c2:	dc00      	bgt.n	80017c6 <__aeabi_ddiv+0x15a>
 80017c4:	e1ad      	b.n	8001b22 <__aeabi_ddiv+0x4b6>
 80017c6:	2200      	movs	r2, #0
 80017c8:	2300      	movs	r3, #0
 80017ca:	2700      	movs	r7, #0
 80017cc:	e7dc      	b.n	8001788 <__aeabi_ddiv+0x11c>
 80017ce:	465b      	mov	r3, fp
 80017d0:	4333      	orrs	r3, r6
 80017d2:	4699      	mov	r9, r3
 80017d4:	d05e      	beq.n	8001894 <__aeabi_ddiv+0x228>
 80017d6:	2e00      	cmp	r6, #0
 80017d8:	d100      	bne.n	80017dc <__aeabi_ddiv+0x170>
 80017da:	e18a      	b.n	8001af2 <__aeabi_ddiv+0x486>
 80017dc:	0030      	movs	r0, r6
 80017de:	f001 fa81 	bl	8002ce4 <__clzsi2>
 80017e2:	0003      	movs	r3, r0
 80017e4:	3b0b      	subs	r3, #11
 80017e6:	2b1c      	cmp	r3, #28
 80017e8:	dd00      	ble.n	80017ec <__aeabi_ddiv+0x180>
 80017ea:	e17b      	b.n	8001ae4 <__aeabi_ddiv+0x478>
 80017ec:	221d      	movs	r2, #29
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	465a      	mov	r2, fp
 80017f2:	0001      	movs	r1, r0
 80017f4:	40da      	lsrs	r2, r3
 80017f6:	3908      	subs	r1, #8
 80017f8:	408e      	lsls	r6, r1
 80017fa:	0013      	movs	r3, r2
 80017fc:	465f      	mov	r7, fp
 80017fe:	4333      	orrs	r3, r6
 8001800:	4699      	mov	r9, r3
 8001802:	408f      	lsls	r7, r1
 8001804:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <__aeabi_ddiv+0x298>)
 8001806:	2600      	movs	r6, #0
 8001808:	1a1b      	subs	r3, r3, r0
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2300      	movs	r3, #0
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	e752      	b.n	80016b8 <__aeabi_ddiv+0x4c>
 8001812:	4641      	mov	r1, r8
 8001814:	4653      	mov	r3, sl
 8001816:	430b      	orrs	r3, r1
 8001818:	493b      	ldr	r1, [pc, #236]	; (8001908 <__aeabi_ddiv+0x29c>)
 800181a:	469b      	mov	fp, r3
 800181c:	468c      	mov	ip, r1
 800181e:	9b00      	ldr	r3, [sp, #0]
 8001820:	4463      	add	r3, ip
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	465b      	mov	r3, fp
 8001826:	2b00      	cmp	r3, #0
 8001828:	d13b      	bne.n	80018a2 <__aeabi_ddiv+0x236>
 800182a:	2302      	movs	r3, #2
 800182c:	2200      	movs	r2, #0
 800182e:	431e      	orrs	r6, r3
 8001830:	2102      	movs	r1, #2
 8001832:	e761      	b.n	80016f8 <__aeabi_ddiv+0x8c>
 8001834:	4643      	mov	r3, r8
 8001836:	4313      	orrs	r3, r2
 8001838:	469b      	mov	fp, r3
 800183a:	d037      	beq.n	80018ac <__aeabi_ddiv+0x240>
 800183c:	4643      	mov	r3, r8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d100      	bne.n	8001844 <__aeabi_ddiv+0x1d8>
 8001842:	e162      	b.n	8001b0a <__aeabi_ddiv+0x49e>
 8001844:	4640      	mov	r0, r8
 8001846:	f001 fa4d 	bl	8002ce4 <__clzsi2>
 800184a:	0003      	movs	r3, r0
 800184c:	3b0b      	subs	r3, #11
 800184e:	2b1c      	cmp	r3, #28
 8001850:	dd00      	ble.n	8001854 <__aeabi_ddiv+0x1e8>
 8001852:	e153      	b.n	8001afc <__aeabi_ddiv+0x490>
 8001854:	0002      	movs	r2, r0
 8001856:	4641      	mov	r1, r8
 8001858:	3a08      	subs	r2, #8
 800185a:	4091      	lsls	r1, r2
 800185c:	4688      	mov	r8, r1
 800185e:	211d      	movs	r1, #29
 8001860:	1acb      	subs	r3, r1, r3
 8001862:	4651      	mov	r1, sl
 8001864:	40d9      	lsrs	r1, r3
 8001866:	000b      	movs	r3, r1
 8001868:	4641      	mov	r1, r8
 800186a:	430b      	orrs	r3, r1
 800186c:	469b      	mov	fp, r3
 800186e:	4653      	mov	r3, sl
 8001870:	4093      	lsls	r3, r2
 8001872:	001a      	movs	r2, r3
 8001874:	9b00      	ldr	r3, [sp, #0]
 8001876:	4925      	ldr	r1, [pc, #148]	; (800190c <__aeabi_ddiv+0x2a0>)
 8001878:	469c      	mov	ip, r3
 800187a:	4460      	add	r0, ip
 800187c:	0003      	movs	r3, r0
 800187e:	468c      	mov	ip, r1
 8001880:	4463      	add	r3, ip
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2100      	movs	r1, #0
 8001886:	e737      	b.n	80016f8 <__aeabi_ddiv+0x8c>
 8001888:	2303      	movs	r3, #3
 800188a:	46b1      	mov	r9, r6
 800188c:	9000      	str	r0, [sp, #0]
 800188e:	260c      	movs	r6, #12
 8001890:	9302      	str	r3, [sp, #8]
 8001892:	e711      	b.n	80016b8 <__aeabi_ddiv+0x4c>
 8001894:	2300      	movs	r3, #0
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	2604      	movs	r6, #4
 800189c:	2700      	movs	r7, #0
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	e70a      	b.n	80016b8 <__aeabi_ddiv+0x4c>
 80018a2:	2303      	movs	r3, #3
 80018a4:	46c3      	mov	fp, r8
 80018a6:	431e      	orrs	r6, r3
 80018a8:	2103      	movs	r1, #3
 80018aa:	e725      	b.n	80016f8 <__aeabi_ddiv+0x8c>
 80018ac:	3301      	adds	r3, #1
 80018ae:	431e      	orrs	r6, r3
 80018b0:	2200      	movs	r2, #0
 80018b2:	2101      	movs	r1, #1
 80018b4:	e720      	b.n	80016f8 <__aeabi_ddiv+0x8c>
 80018b6:	2300      	movs	r3, #0
 80018b8:	469a      	mov	sl, r3
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	2700      	movs	r7, #0
 80018be:	031b      	lsls	r3, r3, #12
 80018c0:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <__aeabi_ddiv+0x27c>)
 80018c2:	e761      	b.n	8001788 <__aeabi_ddiv+0x11c>
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	4649      	mov	r1, r9
 80018c8:	031b      	lsls	r3, r3, #12
 80018ca:	4219      	tst	r1, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_ddiv+0x264>
 80018ce:	e0e2      	b.n	8001a96 <__aeabi_ddiv+0x42a>
 80018d0:	4659      	mov	r1, fp
 80018d2:	4219      	tst	r1, r3
 80018d4:	d000      	beq.n	80018d8 <__aeabi_ddiv+0x26c>
 80018d6:	e0de      	b.n	8001a96 <__aeabi_ddiv+0x42a>
 80018d8:	430b      	orrs	r3, r1
 80018da:	031b      	lsls	r3, r3, #12
 80018dc:	0017      	movs	r7, r2
 80018de:	0b1b      	lsrs	r3, r3, #12
 80018e0:	46a2      	mov	sl, r4
 80018e2:	4a01      	ldr	r2, [pc, #4]	; (80018e8 <__aeabi_ddiv+0x27c>)
 80018e4:	e750      	b.n	8001788 <__aeabi_ddiv+0x11c>
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	000007ff 	.word	0x000007ff
 80018ec:	fffffc01 	.word	0xfffffc01
 80018f0:	08016424 	.word	0x08016424
 80018f4:	000003ff 	.word	0x000003ff
 80018f8:	feffffff 	.word	0xfeffffff
 80018fc:	000007fe 	.word	0x000007fe
 8001900:	800fffff 	.word	0x800fffff
 8001904:	fffffc0d 	.word	0xfffffc0d
 8001908:	fffff801 	.word	0xfffff801
 800190c:	000003f3 	.word	0x000003f3
 8001910:	45d9      	cmp	r9, fp
 8001912:	d900      	bls.n	8001916 <__aeabi_ddiv+0x2aa>
 8001914:	e0cb      	b.n	8001aae <__aeabi_ddiv+0x442>
 8001916:	d100      	bne.n	800191a <__aeabi_ddiv+0x2ae>
 8001918:	e0c6      	b.n	8001aa8 <__aeabi_ddiv+0x43c>
 800191a:	003c      	movs	r4, r7
 800191c:	4648      	mov	r0, r9
 800191e:	2700      	movs	r7, #0
 8001920:	9b00      	ldr	r3, [sp, #0]
 8001922:	3b01      	subs	r3, #1
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	465b      	mov	r3, fp
 8001928:	0e16      	lsrs	r6, r2, #24
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	431e      	orrs	r6, r3
 800192e:	0213      	lsls	r3, r2, #8
 8001930:	4698      	mov	r8, r3
 8001932:	0433      	lsls	r3, r6, #16
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	4699      	mov	r9, r3
 8001938:	0c31      	lsrs	r1, r6, #16
 800193a:	9101      	str	r1, [sp, #4]
 800193c:	f7fe fc84 	bl	8000248 <__aeabi_uidivmod>
 8001940:	464a      	mov	r2, r9
 8001942:	4342      	muls	r2, r0
 8001944:	040b      	lsls	r3, r1, #16
 8001946:	0c21      	lsrs	r1, r4, #16
 8001948:	0005      	movs	r5, r0
 800194a:	4319      	orrs	r1, r3
 800194c:	428a      	cmp	r2, r1
 800194e:	d907      	bls.n	8001960 <__aeabi_ddiv+0x2f4>
 8001950:	1989      	adds	r1, r1, r6
 8001952:	3d01      	subs	r5, #1
 8001954:	428e      	cmp	r6, r1
 8001956:	d803      	bhi.n	8001960 <__aeabi_ddiv+0x2f4>
 8001958:	428a      	cmp	r2, r1
 800195a:	d901      	bls.n	8001960 <__aeabi_ddiv+0x2f4>
 800195c:	1e85      	subs	r5, r0, #2
 800195e:	1989      	adds	r1, r1, r6
 8001960:	1a88      	subs	r0, r1, r2
 8001962:	9901      	ldr	r1, [sp, #4]
 8001964:	f7fe fc70 	bl	8000248 <__aeabi_uidivmod>
 8001968:	0409      	lsls	r1, r1, #16
 800196a:	468c      	mov	ip, r1
 800196c:	464a      	mov	r2, r9
 800196e:	0421      	lsls	r1, r4, #16
 8001970:	4664      	mov	r4, ip
 8001972:	4342      	muls	r2, r0
 8001974:	0c09      	lsrs	r1, r1, #16
 8001976:	0003      	movs	r3, r0
 8001978:	4321      	orrs	r1, r4
 800197a:	428a      	cmp	r2, r1
 800197c:	d904      	bls.n	8001988 <__aeabi_ddiv+0x31c>
 800197e:	1989      	adds	r1, r1, r6
 8001980:	3b01      	subs	r3, #1
 8001982:	428e      	cmp	r6, r1
 8001984:	d800      	bhi.n	8001988 <__aeabi_ddiv+0x31c>
 8001986:	e0f1      	b.n	8001b6c <__aeabi_ddiv+0x500>
 8001988:	042d      	lsls	r5, r5, #16
 800198a:	431d      	orrs	r5, r3
 800198c:	46ab      	mov	fp, r5
 800198e:	4643      	mov	r3, r8
 8001990:	1a89      	subs	r1, r1, r2
 8001992:	4642      	mov	r2, r8
 8001994:	0c28      	lsrs	r0, r5, #16
 8001996:	0412      	lsls	r2, r2, #16
 8001998:	0c1d      	lsrs	r5, r3, #16
 800199a:	465b      	mov	r3, fp
 800199c:	0c14      	lsrs	r4, r2, #16
 800199e:	0022      	movs	r2, r4
 80019a0:	041b      	lsls	r3, r3, #16
 80019a2:	0c1b      	lsrs	r3, r3, #16
 80019a4:	435a      	muls	r2, r3
 80019a6:	9403      	str	r4, [sp, #12]
 80019a8:	436b      	muls	r3, r5
 80019aa:	4344      	muls	r4, r0
 80019ac:	9502      	str	r5, [sp, #8]
 80019ae:	4368      	muls	r0, r5
 80019b0:	191b      	adds	r3, r3, r4
 80019b2:	0c15      	lsrs	r5, r2, #16
 80019b4:	18eb      	adds	r3, r5, r3
 80019b6:	429c      	cmp	r4, r3
 80019b8:	d903      	bls.n	80019c2 <__aeabi_ddiv+0x356>
 80019ba:	2480      	movs	r4, #128	; 0x80
 80019bc:	0264      	lsls	r4, r4, #9
 80019be:	46a4      	mov	ip, r4
 80019c0:	4460      	add	r0, ip
 80019c2:	0c1c      	lsrs	r4, r3, #16
 80019c4:	0415      	lsls	r5, r2, #16
 80019c6:	041b      	lsls	r3, r3, #16
 80019c8:	0c2d      	lsrs	r5, r5, #16
 80019ca:	1820      	adds	r0, r4, r0
 80019cc:	195d      	adds	r5, r3, r5
 80019ce:	4281      	cmp	r1, r0
 80019d0:	d377      	bcc.n	8001ac2 <__aeabi_ddiv+0x456>
 80019d2:	d073      	beq.n	8001abc <__aeabi_ddiv+0x450>
 80019d4:	1a0c      	subs	r4, r1, r0
 80019d6:	4aa2      	ldr	r2, [pc, #648]	; (8001c60 <__aeabi_ddiv+0x5f4>)
 80019d8:	1b7d      	subs	r5, r7, r5
 80019da:	42af      	cmp	r7, r5
 80019dc:	41bf      	sbcs	r7, r7
 80019de:	4694      	mov	ip, r2
 80019e0:	9b00      	ldr	r3, [sp, #0]
 80019e2:	427f      	negs	r7, r7
 80019e4:	4463      	add	r3, ip
 80019e6:	1be0      	subs	r0, r4, r7
 80019e8:	001c      	movs	r4, r3
 80019ea:	4286      	cmp	r6, r0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_ddiv+0x384>
 80019ee:	e0db      	b.n	8001ba8 <__aeabi_ddiv+0x53c>
 80019f0:	9901      	ldr	r1, [sp, #4]
 80019f2:	f7fe fc29 	bl	8000248 <__aeabi_uidivmod>
 80019f6:	464a      	mov	r2, r9
 80019f8:	4342      	muls	r2, r0
 80019fa:	040b      	lsls	r3, r1, #16
 80019fc:	0c29      	lsrs	r1, r5, #16
 80019fe:	0007      	movs	r7, r0
 8001a00:	4319      	orrs	r1, r3
 8001a02:	428a      	cmp	r2, r1
 8001a04:	d907      	bls.n	8001a16 <__aeabi_ddiv+0x3aa>
 8001a06:	1989      	adds	r1, r1, r6
 8001a08:	3f01      	subs	r7, #1
 8001a0a:	428e      	cmp	r6, r1
 8001a0c:	d803      	bhi.n	8001a16 <__aeabi_ddiv+0x3aa>
 8001a0e:	428a      	cmp	r2, r1
 8001a10:	d901      	bls.n	8001a16 <__aeabi_ddiv+0x3aa>
 8001a12:	1e87      	subs	r7, r0, #2
 8001a14:	1989      	adds	r1, r1, r6
 8001a16:	1a88      	subs	r0, r1, r2
 8001a18:	9901      	ldr	r1, [sp, #4]
 8001a1a:	f7fe fc15 	bl	8000248 <__aeabi_uidivmod>
 8001a1e:	0409      	lsls	r1, r1, #16
 8001a20:	464a      	mov	r2, r9
 8001a22:	4689      	mov	r9, r1
 8001a24:	0429      	lsls	r1, r5, #16
 8001a26:	464d      	mov	r5, r9
 8001a28:	4342      	muls	r2, r0
 8001a2a:	0c09      	lsrs	r1, r1, #16
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	4329      	orrs	r1, r5
 8001a30:	428a      	cmp	r2, r1
 8001a32:	d907      	bls.n	8001a44 <__aeabi_ddiv+0x3d8>
 8001a34:	1989      	adds	r1, r1, r6
 8001a36:	3b01      	subs	r3, #1
 8001a38:	428e      	cmp	r6, r1
 8001a3a:	d803      	bhi.n	8001a44 <__aeabi_ddiv+0x3d8>
 8001a3c:	428a      	cmp	r2, r1
 8001a3e:	d901      	bls.n	8001a44 <__aeabi_ddiv+0x3d8>
 8001a40:	1e83      	subs	r3, r0, #2
 8001a42:	1989      	adds	r1, r1, r6
 8001a44:	043f      	lsls	r7, r7, #16
 8001a46:	1a89      	subs	r1, r1, r2
 8001a48:	003a      	movs	r2, r7
 8001a4a:	9f03      	ldr	r7, [sp, #12]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	0038      	movs	r0, r7
 8001a50:	0413      	lsls	r3, r2, #16
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	4358      	muls	r0, r3
 8001a56:	4681      	mov	r9, r0
 8001a58:	9802      	ldr	r0, [sp, #8]
 8001a5a:	0c15      	lsrs	r5, r2, #16
 8001a5c:	436f      	muls	r7, r5
 8001a5e:	4343      	muls	r3, r0
 8001a60:	4345      	muls	r5, r0
 8001a62:	4648      	mov	r0, r9
 8001a64:	0c00      	lsrs	r0, r0, #16
 8001a66:	4684      	mov	ip, r0
 8001a68:	19db      	adds	r3, r3, r7
 8001a6a:	4463      	add	r3, ip
 8001a6c:	429f      	cmp	r7, r3
 8001a6e:	d903      	bls.n	8001a78 <__aeabi_ddiv+0x40c>
 8001a70:	2080      	movs	r0, #128	; 0x80
 8001a72:	0240      	lsls	r0, r0, #9
 8001a74:	4684      	mov	ip, r0
 8001a76:	4465      	add	r5, ip
 8001a78:	4648      	mov	r0, r9
 8001a7a:	0c1f      	lsrs	r7, r3, #16
 8001a7c:	0400      	lsls	r0, r0, #16
 8001a7e:	041b      	lsls	r3, r3, #16
 8001a80:	0c00      	lsrs	r0, r0, #16
 8001a82:	197d      	adds	r5, r7, r5
 8001a84:	1818      	adds	r0, r3, r0
 8001a86:	42a9      	cmp	r1, r5
 8001a88:	d200      	bcs.n	8001a8c <__aeabi_ddiv+0x420>
 8001a8a:	e084      	b.n	8001b96 <__aeabi_ddiv+0x52a>
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_ddiv+0x424>
 8001a8e:	e07f      	b.n	8001b90 <__aeabi_ddiv+0x524>
 8001a90:	2301      	movs	r3, #1
 8001a92:	431a      	orrs	r2, r3
 8001a94:	e657      	b.n	8001746 <__aeabi_ddiv+0xda>
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	464a      	mov	r2, r9
 8001a9a:	031b      	lsls	r3, r3, #12
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	031b      	lsls	r3, r3, #12
 8001aa0:	0b1b      	lsrs	r3, r3, #12
 8001aa2:	46aa      	mov	sl, r5
 8001aa4:	4a6f      	ldr	r2, [pc, #444]	; (8001c64 <__aeabi_ddiv+0x5f8>)
 8001aa6:	e66f      	b.n	8001788 <__aeabi_ddiv+0x11c>
 8001aa8:	42ba      	cmp	r2, r7
 8001aaa:	d900      	bls.n	8001aae <__aeabi_ddiv+0x442>
 8001aac:	e735      	b.n	800191a <__aeabi_ddiv+0x2ae>
 8001aae:	464b      	mov	r3, r9
 8001ab0:	07dc      	lsls	r4, r3, #31
 8001ab2:	0858      	lsrs	r0, r3, #1
 8001ab4:	087b      	lsrs	r3, r7, #1
 8001ab6:	431c      	orrs	r4, r3
 8001ab8:	07ff      	lsls	r7, r7, #31
 8001aba:	e734      	b.n	8001926 <__aeabi_ddiv+0x2ba>
 8001abc:	2400      	movs	r4, #0
 8001abe:	42af      	cmp	r7, r5
 8001ac0:	d289      	bcs.n	80019d6 <__aeabi_ddiv+0x36a>
 8001ac2:	4447      	add	r7, r8
 8001ac4:	4547      	cmp	r7, r8
 8001ac6:	41a4      	sbcs	r4, r4
 8001ac8:	465b      	mov	r3, fp
 8001aca:	4264      	negs	r4, r4
 8001acc:	19a4      	adds	r4, r4, r6
 8001ace:	1864      	adds	r4, r4, r1
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	42a6      	cmp	r6, r4
 8001ad4:	d21e      	bcs.n	8001b14 <__aeabi_ddiv+0x4a8>
 8001ad6:	42a0      	cmp	r0, r4
 8001ad8:	d86d      	bhi.n	8001bb6 <__aeabi_ddiv+0x54a>
 8001ada:	d100      	bne.n	8001ade <__aeabi_ddiv+0x472>
 8001adc:	e0b6      	b.n	8001c4c <__aeabi_ddiv+0x5e0>
 8001ade:	1a24      	subs	r4, r4, r0
 8001ae0:	469b      	mov	fp, r3
 8001ae2:	e778      	b.n	80019d6 <__aeabi_ddiv+0x36a>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	465a      	mov	r2, fp
 8001ae8:	3b28      	subs	r3, #40	; 0x28
 8001aea:	409a      	lsls	r2, r3
 8001aec:	2700      	movs	r7, #0
 8001aee:	4691      	mov	r9, r2
 8001af0:	e688      	b.n	8001804 <__aeabi_ddiv+0x198>
 8001af2:	4658      	mov	r0, fp
 8001af4:	f001 f8f6 	bl	8002ce4 <__clzsi2>
 8001af8:	3020      	adds	r0, #32
 8001afa:	e672      	b.n	80017e2 <__aeabi_ddiv+0x176>
 8001afc:	0003      	movs	r3, r0
 8001afe:	4652      	mov	r2, sl
 8001b00:	3b28      	subs	r3, #40	; 0x28
 8001b02:	409a      	lsls	r2, r3
 8001b04:	4693      	mov	fp, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	e6b4      	b.n	8001874 <__aeabi_ddiv+0x208>
 8001b0a:	4650      	mov	r0, sl
 8001b0c:	f001 f8ea 	bl	8002ce4 <__clzsi2>
 8001b10:	3020      	adds	r0, #32
 8001b12:	e69a      	b.n	800184a <__aeabi_ddiv+0x1de>
 8001b14:	42a6      	cmp	r6, r4
 8001b16:	d1e2      	bne.n	8001ade <__aeabi_ddiv+0x472>
 8001b18:	45b8      	cmp	r8, r7
 8001b1a:	d9dc      	bls.n	8001ad6 <__aeabi_ddiv+0x46a>
 8001b1c:	1a34      	subs	r4, r6, r0
 8001b1e:	469b      	mov	fp, r3
 8001b20:	e759      	b.n	80019d6 <__aeabi_ddiv+0x36a>
 8001b22:	2b1f      	cmp	r3, #31
 8001b24:	dc65      	bgt.n	8001bf2 <__aeabi_ddiv+0x586>
 8001b26:	4c50      	ldr	r4, [pc, #320]	; (8001c68 <__aeabi_ddiv+0x5fc>)
 8001b28:	9900      	ldr	r1, [sp, #0]
 8001b2a:	46a4      	mov	ip, r4
 8001b2c:	465c      	mov	r4, fp
 8001b2e:	4461      	add	r1, ip
 8001b30:	0008      	movs	r0, r1
 8001b32:	408c      	lsls	r4, r1
 8001b34:	0011      	movs	r1, r2
 8001b36:	4082      	lsls	r2, r0
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	1e50      	subs	r0, r2, #1
 8001b3c:	4182      	sbcs	r2, r0
 8001b3e:	430c      	orrs	r4, r1
 8001b40:	4314      	orrs	r4, r2
 8001b42:	465a      	mov	r2, fp
 8001b44:	40da      	lsrs	r2, r3
 8001b46:	0013      	movs	r3, r2
 8001b48:	0762      	lsls	r2, r4, #29
 8001b4a:	d009      	beq.n	8001b60 <__aeabi_ddiv+0x4f4>
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	4022      	ands	r2, r4
 8001b50:	2a04      	cmp	r2, #4
 8001b52:	d005      	beq.n	8001b60 <__aeabi_ddiv+0x4f4>
 8001b54:	0022      	movs	r2, r4
 8001b56:	1d14      	adds	r4, r2, #4
 8001b58:	4294      	cmp	r4, r2
 8001b5a:	4189      	sbcs	r1, r1
 8001b5c:	4249      	negs	r1, r1
 8001b5e:	185b      	adds	r3, r3, r1
 8001b60:	021a      	lsls	r2, r3, #8
 8001b62:	d562      	bpl.n	8001c2a <__aeabi_ddiv+0x5be>
 8001b64:	2201      	movs	r2, #1
 8001b66:	2300      	movs	r3, #0
 8001b68:	2700      	movs	r7, #0
 8001b6a:	e60d      	b.n	8001788 <__aeabi_ddiv+0x11c>
 8001b6c:	428a      	cmp	r2, r1
 8001b6e:	d800      	bhi.n	8001b72 <__aeabi_ddiv+0x506>
 8001b70:	e70a      	b.n	8001988 <__aeabi_ddiv+0x31c>
 8001b72:	1e83      	subs	r3, r0, #2
 8001b74:	1989      	adds	r1, r1, r6
 8001b76:	e707      	b.n	8001988 <__aeabi_ddiv+0x31c>
 8001b78:	230f      	movs	r3, #15
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0x516>
 8001b80:	e5e6      	b.n	8001750 <__aeabi_ddiv+0xe4>
 8001b82:	1d17      	adds	r7, r2, #4
 8001b84:	4297      	cmp	r7, r2
 8001b86:	4192      	sbcs	r2, r2
 8001b88:	4253      	negs	r3, r2
 8001b8a:	449b      	add	fp, r3
 8001b8c:	08fa      	lsrs	r2, r7, #3
 8001b8e:	e5e0      	b.n	8001752 <__aeabi_ddiv+0xe6>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d100      	bne.n	8001b96 <__aeabi_ddiv+0x52a>
 8001b94:	e5d7      	b.n	8001746 <__aeabi_ddiv+0xda>
 8001b96:	1871      	adds	r1, r6, r1
 8001b98:	1e53      	subs	r3, r2, #1
 8001b9a:	42b1      	cmp	r1, r6
 8001b9c:	d327      	bcc.n	8001bee <__aeabi_ddiv+0x582>
 8001b9e:	42a9      	cmp	r1, r5
 8001ba0:	d315      	bcc.n	8001bce <__aeabi_ddiv+0x562>
 8001ba2:	d058      	beq.n	8001c56 <__aeabi_ddiv+0x5ea>
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	e773      	b.n	8001a90 <__aeabi_ddiv+0x424>
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	dc00      	bgt.n	8001bae <__aeabi_ddiv+0x542>
 8001bac:	e604      	b.n	80017b8 <__aeabi_ddiv+0x14c>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	449b      	add	fp, r3
 8001bb4:	e5cd      	b.n	8001752 <__aeabi_ddiv+0xe6>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	4447      	add	r7, r8
 8001bba:	4547      	cmp	r7, r8
 8001bbc:	4189      	sbcs	r1, r1
 8001bbe:	425b      	negs	r3, r3
 8001bc0:	469c      	mov	ip, r3
 8001bc2:	4249      	negs	r1, r1
 8001bc4:	1989      	adds	r1, r1, r6
 8001bc6:	190c      	adds	r4, r1, r4
 8001bc8:	44e3      	add	fp, ip
 8001bca:	1a24      	subs	r4, r4, r0
 8001bcc:	e703      	b.n	80019d6 <__aeabi_ddiv+0x36a>
 8001bce:	4643      	mov	r3, r8
 8001bd0:	005f      	lsls	r7, r3, #1
 8001bd2:	4547      	cmp	r7, r8
 8001bd4:	419b      	sbcs	r3, r3
 8001bd6:	46b8      	mov	r8, r7
 8001bd8:	425b      	negs	r3, r3
 8001bda:	199e      	adds	r6, r3, r6
 8001bdc:	3a02      	subs	r2, #2
 8001bde:	1989      	adds	r1, r1, r6
 8001be0:	42a9      	cmp	r1, r5
 8001be2:	d000      	beq.n	8001be6 <__aeabi_ddiv+0x57a>
 8001be4:	e754      	b.n	8001a90 <__aeabi_ddiv+0x424>
 8001be6:	4540      	cmp	r0, r8
 8001be8:	d000      	beq.n	8001bec <__aeabi_ddiv+0x580>
 8001bea:	e751      	b.n	8001a90 <__aeabi_ddiv+0x424>
 8001bec:	e5ab      	b.n	8001746 <__aeabi_ddiv+0xda>
 8001bee:	001a      	movs	r2, r3
 8001bf0:	e7f6      	b.n	8001be0 <__aeabi_ddiv+0x574>
 8001bf2:	211f      	movs	r1, #31
 8001bf4:	465f      	mov	r7, fp
 8001bf6:	4249      	negs	r1, r1
 8001bf8:	1b0c      	subs	r4, r1, r4
 8001bfa:	40e7      	lsrs	r7, r4
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d007      	beq.n	8001c10 <__aeabi_ddiv+0x5a4>
 8001c00:	491a      	ldr	r1, [pc, #104]	; (8001c6c <__aeabi_ddiv+0x600>)
 8001c02:	9b00      	ldr	r3, [sp, #0]
 8001c04:	468c      	mov	ip, r1
 8001c06:	4463      	add	r3, ip
 8001c08:	0018      	movs	r0, r3
 8001c0a:	465b      	mov	r3, fp
 8001c0c:	4083      	lsls	r3, r0
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	1e50      	subs	r0, r2, #1
 8001c12:	4182      	sbcs	r2, r0
 8001c14:	433a      	orrs	r2, r7
 8001c16:	2707      	movs	r7, #7
 8001c18:	2300      	movs	r3, #0
 8001c1a:	4017      	ands	r7, r2
 8001c1c:	d009      	beq.n	8001c32 <__aeabi_ddiv+0x5c6>
 8001c1e:	210f      	movs	r1, #15
 8001c20:	2300      	movs	r3, #0
 8001c22:	4011      	ands	r1, r2
 8001c24:	0014      	movs	r4, r2
 8001c26:	2904      	cmp	r1, #4
 8001c28:	d195      	bne.n	8001b56 <__aeabi_ddiv+0x4ea>
 8001c2a:	0022      	movs	r2, r4
 8001c2c:	075f      	lsls	r7, r3, #29
 8001c2e:	025b      	lsls	r3, r3, #9
 8001c30:	0b1b      	lsrs	r3, r3, #12
 8001c32:	08d2      	lsrs	r2, r2, #3
 8001c34:	4317      	orrs	r7, r2
 8001c36:	2200      	movs	r2, #0
 8001c38:	e5a6      	b.n	8001788 <__aeabi_ddiv+0x11c>
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	4659      	mov	r1, fp
 8001c3e:	031b      	lsls	r3, r3, #12
 8001c40:	430b      	orrs	r3, r1
 8001c42:	031b      	lsls	r3, r3, #12
 8001c44:	0017      	movs	r7, r2
 8001c46:	0b1b      	lsrs	r3, r3, #12
 8001c48:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <__aeabi_ddiv+0x5f8>)
 8001c4a:	e59d      	b.n	8001788 <__aeabi_ddiv+0x11c>
 8001c4c:	42bd      	cmp	r5, r7
 8001c4e:	d8b2      	bhi.n	8001bb6 <__aeabi_ddiv+0x54a>
 8001c50:	469b      	mov	fp, r3
 8001c52:	2400      	movs	r4, #0
 8001c54:	e6bf      	b.n	80019d6 <__aeabi_ddiv+0x36a>
 8001c56:	4580      	cmp	r8, r0
 8001c58:	d3b9      	bcc.n	8001bce <__aeabi_ddiv+0x562>
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	e7c3      	b.n	8001be6 <__aeabi_ddiv+0x57a>
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	000003ff 	.word	0x000003ff
 8001c64:	000007ff 	.word	0x000007ff
 8001c68:	0000041e 	.word	0x0000041e
 8001c6c:	0000043e 	.word	0x0000043e

08001c70 <__eqdf2>:
 8001c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c72:	464f      	mov	r7, r9
 8001c74:	4646      	mov	r6, r8
 8001c76:	46d6      	mov	lr, sl
 8001c78:	4684      	mov	ip, r0
 8001c7a:	b5c0      	push	{r6, r7, lr}
 8001c7c:	4680      	mov	r8, r0
 8001c7e:	4e19      	ldr	r6, [pc, #100]	; (8001ce4 <__eqdf2+0x74>)
 8001c80:	0318      	lsls	r0, r3, #12
 8001c82:	030f      	lsls	r7, r1, #12
 8001c84:	004d      	lsls	r5, r1, #1
 8001c86:	0b00      	lsrs	r0, r0, #12
 8001c88:	005c      	lsls	r4, r3, #1
 8001c8a:	4682      	mov	sl, r0
 8001c8c:	0b3f      	lsrs	r7, r7, #12
 8001c8e:	0d6d      	lsrs	r5, r5, #21
 8001c90:	0fc9      	lsrs	r1, r1, #31
 8001c92:	4691      	mov	r9, r2
 8001c94:	0d64      	lsrs	r4, r4, #21
 8001c96:	0fdb      	lsrs	r3, r3, #31
 8001c98:	2001      	movs	r0, #1
 8001c9a:	42b5      	cmp	r5, r6
 8001c9c:	d00a      	beq.n	8001cb4 <__eqdf2+0x44>
 8001c9e:	42b4      	cmp	r4, r6
 8001ca0:	d003      	beq.n	8001caa <__eqdf2+0x3a>
 8001ca2:	42a5      	cmp	r5, r4
 8001ca4:	d101      	bne.n	8001caa <__eqdf2+0x3a>
 8001ca6:	4557      	cmp	r7, sl
 8001ca8:	d00c      	beq.n	8001cc4 <__eqdf2+0x54>
 8001caa:	bc1c      	pop	{r2, r3, r4}
 8001cac:	4690      	mov	r8, r2
 8001cae:	4699      	mov	r9, r3
 8001cb0:	46a2      	mov	sl, r4
 8001cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb4:	4666      	mov	r6, ip
 8001cb6:	433e      	orrs	r6, r7
 8001cb8:	d1f7      	bne.n	8001caa <__eqdf2+0x3a>
 8001cba:	42ac      	cmp	r4, r5
 8001cbc:	d1f5      	bne.n	8001caa <__eqdf2+0x3a>
 8001cbe:	4654      	mov	r4, sl
 8001cc0:	4314      	orrs	r4, r2
 8001cc2:	d1f2      	bne.n	8001caa <__eqdf2+0x3a>
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	45c8      	cmp	r8, r9
 8001cc8:	d1ef      	bne.n	8001caa <__eqdf2+0x3a>
 8001cca:	4299      	cmp	r1, r3
 8001ccc:	d007      	beq.n	8001cde <__eqdf2+0x6e>
 8001cce:	2d00      	cmp	r5, #0
 8001cd0:	d1eb      	bne.n	8001caa <__eqdf2+0x3a>
 8001cd2:	4663      	mov	r3, ip
 8001cd4:	431f      	orrs	r7, r3
 8001cd6:	0038      	movs	r0, r7
 8001cd8:	1e47      	subs	r7, r0, #1
 8001cda:	41b8      	sbcs	r0, r7
 8001cdc:	e7e5      	b.n	8001caa <__eqdf2+0x3a>
 8001cde:	2000      	movs	r0, #0
 8001ce0:	e7e3      	b.n	8001caa <__eqdf2+0x3a>
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	000007ff 	.word	0x000007ff

08001ce8 <__gedf2>:
 8001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cea:	464f      	mov	r7, r9
 8001cec:	4646      	mov	r6, r8
 8001cee:	46d6      	mov	lr, sl
 8001cf0:	004d      	lsls	r5, r1, #1
 8001cf2:	b5c0      	push	{r6, r7, lr}
 8001cf4:	030e      	lsls	r6, r1, #12
 8001cf6:	0fc9      	lsrs	r1, r1, #31
 8001cf8:	468a      	mov	sl, r1
 8001cfa:	492c      	ldr	r1, [pc, #176]	; (8001dac <__gedf2+0xc4>)
 8001cfc:	031f      	lsls	r7, r3, #12
 8001cfe:	005c      	lsls	r4, r3, #1
 8001d00:	4680      	mov	r8, r0
 8001d02:	0b36      	lsrs	r6, r6, #12
 8001d04:	0d6d      	lsrs	r5, r5, #21
 8001d06:	4691      	mov	r9, r2
 8001d08:	0b3f      	lsrs	r7, r7, #12
 8001d0a:	0d64      	lsrs	r4, r4, #21
 8001d0c:	0fdb      	lsrs	r3, r3, #31
 8001d0e:	428d      	cmp	r5, r1
 8001d10:	d01e      	beq.n	8001d50 <__gedf2+0x68>
 8001d12:	428c      	cmp	r4, r1
 8001d14:	d016      	beq.n	8001d44 <__gedf2+0x5c>
 8001d16:	2d00      	cmp	r5, #0
 8001d18:	d11e      	bne.n	8001d58 <__gedf2+0x70>
 8001d1a:	4330      	orrs	r0, r6
 8001d1c:	4684      	mov	ip, r0
 8001d1e:	2c00      	cmp	r4, #0
 8001d20:	d101      	bne.n	8001d26 <__gedf2+0x3e>
 8001d22:	433a      	orrs	r2, r7
 8001d24:	d023      	beq.n	8001d6e <__gedf2+0x86>
 8001d26:	4662      	mov	r2, ip
 8001d28:	2a00      	cmp	r2, #0
 8001d2a:	d01a      	beq.n	8001d62 <__gedf2+0x7a>
 8001d2c:	459a      	cmp	sl, r3
 8001d2e:	d029      	beq.n	8001d84 <__gedf2+0x9c>
 8001d30:	4651      	mov	r1, sl
 8001d32:	2002      	movs	r0, #2
 8001d34:	3901      	subs	r1, #1
 8001d36:	4008      	ands	r0, r1
 8001d38:	3801      	subs	r0, #1
 8001d3a:	bc1c      	pop	{r2, r3, r4}
 8001d3c:	4690      	mov	r8, r2
 8001d3e:	4699      	mov	r9, r3
 8001d40:	46a2      	mov	sl, r4
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d44:	0039      	movs	r1, r7
 8001d46:	4311      	orrs	r1, r2
 8001d48:	d0e5      	beq.n	8001d16 <__gedf2+0x2e>
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	4240      	negs	r0, r0
 8001d4e:	e7f4      	b.n	8001d3a <__gedf2+0x52>
 8001d50:	4330      	orrs	r0, r6
 8001d52:	d1fa      	bne.n	8001d4a <__gedf2+0x62>
 8001d54:	42ac      	cmp	r4, r5
 8001d56:	d00f      	beq.n	8001d78 <__gedf2+0x90>
 8001d58:	2c00      	cmp	r4, #0
 8001d5a:	d10f      	bne.n	8001d7c <__gedf2+0x94>
 8001d5c:	433a      	orrs	r2, r7
 8001d5e:	d0e7      	beq.n	8001d30 <__gedf2+0x48>
 8001d60:	e00c      	b.n	8001d7c <__gedf2+0x94>
 8001d62:	2201      	movs	r2, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	4393      	bics	r3, r2
 8001d68:	0018      	movs	r0, r3
 8001d6a:	3001      	adds	r0, #1
 8001d6c:	e7e5      	b.n	8001d3a <__gedf2+0x52>
 8001d6e:	4663      	mov	r3, ip
 8001d70:	2000      	movs	r0, #0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0e1      	beq.n	8001d3a <__gedf2+0x52>
 8001d76:	e7db      	b.n	8001d30 <__gedf2+0x48>
 8001d78:	433a      	orrs	r2, r7
 8001d7a:	d1e6      	bne.n	8001d4a <__gedf2+0x62>
 8001d7c:	459a      	cmp	sl, r3
 8001d7e:	d1d7      	bne.n	8001d30 <__gedf2+0x48>
 8001d80:	42a5      	cmp	r5, r4
 8001d82:	dcd5      	bgt.n	8001d30 <__gedf2+0x48>
 8001d84:	42a5      	cmp	r5, r4
 8001d86:	db05      	blt.n	8001d94 <__gedf2+0xac>
 8001d88:	42be      	cmp	r6, r7
 8001d8a:	d8d1      	bhi.n	8001d30 <__gedf2+0x48>
 8001d8c:	d008      	beq.n	8001da0 <__gedf2+0xb8>
 8001d8e:	2000      	movs	r0, #0
 8001d90:	42be      	cmp	r6, r7
 8001d92:	d2d2      	bcs.n	8001d3a <__gedf2+0x52>
 8001d94:	4650      	mov	r0, sl
 8001d96:	2301      	movs	r3, #1
 8001d98:	3801      	subs	r0, #1
 8001d9a:	4398      	bics	r0, r3
 8001d9c:	3001      	adds	r0, #1
 8001d9e:	e7cc      	b.n	8001d3a <__gedf2+0x52>
 8001da0:	45c8      	cmp	r8, r9
 8001da2:	d8c5      	bhi.n	8001d30 <__gedf2+0x48>
 8001da4:	2000      	movs	r0, #0
 8001da6:	45c8      	cmp	r8, r9
 8001da8:	d3f4      	bcc.n	8001d94 <__gedf2+0xac>
 8001daa:	e7c6      	b.n	8001d3a <__gedf2+0x52>
 8001dac:	000007ff 	.word	0x000007ff

08001db0 <__ledf2>:
 8001db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db2:	464f      	mov	r7, r9
 8001db4:	4646      	mov	r6, r8
 8001db6:	46d6      	mov	lr, sl
 8001db8:	004d      	lsls	r5, r1, #1
 8001dba:	b5c0      	push	{r6, r7, lr}
 8001dbc:	030e      	lsls	r6, r1, #12
 8001dbe:	0fc9      	lsrs	r1, r1, #31
 8001dc0:	468a      	mov	sl, r1
 8001dc2:	492e      	ldr	r1, [pc, #184]	; (8001e7c <__ledf2+0xcc>)
 8001dc4:	031f      	lsls	r7, r3, #12
 8001dc6:	005c      	lsls	r4, r3, #1
 8001dc8:	4680      	mov	r8, r0
 8001dca:	0b36      	lsrs	r6, r6, #12
 8001dcc:	0d6d      	lsrs	r5, r5, #21
 8001dce:	4691      	mov	r9, r2
 8001dd0:	0b3f      	lsrs	r7, r7, #12
 8001dd2:	0d64      	lsrs	r4, r4, #21
 8001dd4:	0fdb      	lsrs	r3, r3, #31
 8001dd6:	428d      	cmp	r5, r1
 8001dd8:	d018      	beq.n	8001e0c <__ledf2+0x5c>
 8001dda:	428c      	cmp	r4, r1
 8001ddc:	d011      	beq.n	8001e02 <__ledf2+0x52>
 8001dde:	2d00      	cmp	r5, #0
 8001de0:	d118      	bne.n	8001e14 <__ledf2+0x64>
 8001de2:	4330      	orrs	r0, r6
 8001de4:	4684      	mov	ip, r0
 8001de6:	2c00      	cmp	r4, #0
 8001de8:	d11e      	bne.n	8001e28 <__ledf2+0x78>
 8001dea:	433a      	orrs	r2, r7
 8001dec:	d11c      	bne.n	8001e28 <__ledf2+0x78>
 8001dee:	4663      	mov	r3, ip
 8001df0:	2000      	movs	r0, #0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d030      	beq.n	8001e58 <__ledf2+0xa8>
 8001df6:	4651      	mov	r1, sl
 8001df8:	2002      	movs	r0, #2
 8001dfa:	3901      	subs	r1, #1
 8001dfc:	4008      	ands	r0, r1
 8001dfe:	3801      	subs	r0, #1
 8001e00:	e02a      	b.n	8001e58 <__ledf2+0xa8>
 8001e02:	0039      	movs	r1, r7
 8001e04:	4311      	orrs	r1, r2
 8001e06:	d0ea      	beq.n	8001dde <__ledf2+0x2e>
 8001e08:	2002      	movs	r0, #2
 8001e0a:	e025      	b.n	8001e58 <__ledf2+0xa8>
 8001e0c:	4330      	orrs	r0, r6
 8001e0e:	d1fb      	bne.n	8001e08 <__ledf2+0x58>
 8001e10:	42ac      	cmp	r4, r5
 8001e12:	d026      	beq.n	8001e62 <__ledf2+0xb2>
 8001e14:	2c00      	cmp	r4, #0
 8001e16:	d126      	bne.n	8001e66 <__ledf2+0xb6>
 8001e18:	433a      	orrs	r2, r7
 8001e1a:	d124      	bne.n	8001e66 <__ledf2+0xb6>
 8001e1c:	4651      	mov	r1, sl
 8001e1e:	2002      	movs	r0, #2
 8001e20:	3901      	subs	r1, #1
 8001e22:	4008      	ands	r0, r1
 8001e24:	3801      	subs	r0, #1
 8001e26:	e017      	b.n	8001e58 <__ledf2+0xa8>
 8001e28:	4662      	mov	r2, ip
 8001e2a:	2a00      	cmp	r2, #0
 8001e2c:	d00f      	beq.n	8001e4e <__ledf2+0x9e>
 8001e2e:	459a      	cmp	sl, r3
 8001e30:	d1e1      	bne.n	8001df6 <__ledf2+0x46>
 8001e32:	42a5      	cmp	r5, r4
 8001e34:	db05      	blt.n	8001e42 <__ledf2+0x92>
 8001e36:	42be      	cmp	r6, r7
 8001e38:	d8dd      	bhi.n	8001df6 <__ledf2+0x46>
 8001e3a:	d019      	beq.n	8001e70 <__ledf2+0xc0>
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	42be      	cmp	r6, r7
 8001e40:	d20a      	bcs.n	8001e58 <__ledf2+0xa8>
 8001e42:	4650      	mov	r0, sl
 8001e44:	2301      	movs	r3, #1
 8001e46:	3801      	subs	r0, #1
 8001e48:	4398      	bics	r0, r3
 8001e4a:	3001      	adds	r0, #1
 8001e4c:	e004      	b.n	8001e58 <__ledf2+0xa8>
 8001e4e:	2201      	movs	r2, #1
 8001e50:	3b01      	subs	r3, #1
 8001e52:	4393      	bics	r3, r2
 8001e54:	0018      	movs	r0, r3
 8001e56:	3001      	adds	r0, #1
 8001e58:	bc1c      	pop	{r2, r3, r4}
 8001e5a:	4690      	mov	r8, r2
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	46a2      	mov	sl, r4
 8001e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e62:	433a      	orrs	r2, r7
 8001e64:	d1d0      	bne.n	8001e08 <__ledf2+0x58>
 8001e66:	459a      	cmp	sl, r3
 8001e68:	d1c5      	bne.n	8001df6 <__ledf2+0x46>
 8001e6a:	42a5      	cmp	r5, r4
 8001e6c:	dcc3      	bgt.n	8001df6 <__ledf2+0x46>
 8001e6e:	e7e0      	b.n	8001e32 <__ledf2+0x82>
 8001e70:	45c8      	cmp	r8, r9
 8001e72:	d8c0      	bhi.n	8001df6 <__ledf2+0x46>
 8001e74:	2000      	movs	r0, #0
 8001e76:	45c8      	cmp	r8, r9
 8001e78:	d3e3      	bcc.n	8001e42 <__ledf2+0x92>
 8001e7a:	e7ed      	b.n	8001e58 <__ledf2+0xa8>
 8001e7c:	000007ff 	.word	0x000007ff

08001e80 <__aeabi_dmul>:
 8001e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e82:	4657      	mov	r7, sl
 8001e84:	46de      	mov	lr, fp
 8001e86:	464e      	mov	r6, r9
 8001e88:	4645      	mov	r5, r8
 8001e8a:	b5e0      	push	{r5, r6, r7, lr}
 8001e8c:	4683      	mov	fp, r0
 8001e8e:	0006      	movs	r6, r0
 8001e90:	030f      	lsls	r7, r1, #12
 8001e92:	0048      	lsls	r0, r1, #1
 8001e94:	b087      	sub	sp, #28
 8001e96:	4692      	mov	sl, r2
 8001e98:	001d      	movs	r5, r3
 8001e9a:	0b3f      	lsrs	r7, r7, #12
 8001e9c:	0d40      	lsrs	r0, r0, #21
 8001e9e:	0fcc      	lsrs	r4, r1, #31
 8001ea0:	2800      	cmp	r0, #0
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dmul+0x26>
 8001ea4:	e06f      	b.n	8001f86 <__aeabi_dmul+0x106>
 8001ea6:	4bde      	ldr	r3, [pc, #888]	; (8002220 <__aeabi_dmul+0x3a0>)
 8001ea8:	4298      	cmp	r0, r3
 8001eaa:	d038      	beq.n	8001f1e <__aeabi_dmul+0x9e>
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	00ff      	lsls	r7, r7, #3
 8001eb0:	041b      	lsls	r3, r3, #16
 8001eb2:	431f      	orrs	r7, r3
 8001eb4:	0f73      	lsrs	r3, r6, #29
 8001eb6:	433b      	orrs	r3, r7
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	4bda      	ldr	r3, [pc, #872]	; (8002224 <__aeabi_dmul+0x3a4>)
 8001ebc:	2700      	movs	r7, #0
 8001ebe:	4699      	mov	r9, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	469b      	mov	fp, r3
 8001ec4:	00f6      	lsls	r6, r6, #3
 8001ec6:	4481      	add	r9, r0
 8001ec8:	032b      	lsls	r3, r5, #12
 8001eca:	0069      	lsls	r1, r5, #1
 8001ecc:	0b1b      	lsrs	r3, r3, #12
 8001ece:	4652      	mov	r2, sl
 8001ed0:	4698      	mov	r8, r3
 8001ed2:	0d49      	lsrs	r1, r1, #21
 8001ed4:	0fed      	lsrs	r5, r5, #31
 8001ed6:	2900      	cmp	r1, #0
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dmul+0x5c>
 8001eda:	e085      	b.n	8001fe8 <__aeabi_dmul+0x168>
 8001edc:	4bd0      	ldr	r3, [pc, #832]	; (8002220 <__aeabi_dmul+0x3a0>)
 8001ede:	4299      	cmp	r1, r3
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dmul+0x64>
 8001ee2:	e073      	b.n	8001fcc <__aeabi_dmul+0x14c>
 8001ee4:	4643      	mov	r3, r8
 8001ee6:	00da      	lsls	r2, r3, #3
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	4313      	orrs	r3, r2
 8001eee:	4652      	mov	r2, sl
 8001ef0:	48cc      	ldr	r0, [pc, #816]	; (8002224 <__aeabi_dmul+0x3a4>)
 8001ef2:	0f52      	lsrs	r2, r2, #29
 8001ef4:	4684      	mov	ip, r0
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	4652      	mov	r2, sl
 8001efa:	2000      	movs	r0, #0
 8001efc:	4461      	add	r1, ip
 8001efe:	00d2      	lsls	r2, r2, #3
 8001f00:	4489      	add	r9, r1
 8001f02:	0021      	movs	r1, r4
 8001f04:	4069      	eors	r1, r5
 8001f06:	9100      	str	r1, [sp, #0]
 8001f08:	468c      	mov	ip, r1
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4449      	add	r1, r9
 8001f0e:	468a      	mov	sl, r1
 8001f10:	2f0f      	cmp	r7, #15
 8001f12:	d900      	bls.n	8001f16 <__aeabi_dmul+0x96>
 8001f14:	e090      	b.n	8002038 <__aeabi_dmul+0x1b8>
 8001f16:	49c4      	ldr	r1, [pc, #784]	; (8002228 <__aeabi_dmul+0x3a8>)
 8001f18:	00bf      	lsls	r7, r7, #2
 8001f1a:	59cf      	ldr	r7, [r1, r7]
 8001f1c:	46bf      	mov	pc, r7
 8001f1e:	465b      	mov	r3, fp
 8001f20:	433b      	orrs	r3, r7
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dmul+0xa8>
 8001f26:	e16a      	b.n	80021fe <__aeabi_dmul+0x37e>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	2708      	movs	r7, #8
 8001f2c:	2600      	movs	r6, #0
 8001f2e:	4681      	mov	r9, r0
 8001f30:	469b      	mov	fp, r3
 8001f32:	e7c9      	b.n	8001ec8 <__aeabi_dmul+0x48>
 8001f34:	0032      	movs	r2, r6
 8001f36:	4658      	mov	r0, fp
 8001f38:	9b01      	ldr	r3, [sp, #4]
 8001f3a:	4661      	mov	r1, ip
 8001f3c:	9100      	str	r1, [sp, #0]
 8001f3e:	2802      	cmp	r0, #2
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0xc4>
 8001f42:	e075      	b.n	8002030 <__aeabi_dmul+0x1b0>
 8001f44:	2803      	cmp	r0, #3
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0xca>
 8001f48:	e1fe      	b.n	8002348 <__aeabi_dmul+0x4c8>
 8001f4a:	2801      	cmp	r0, #1
 8001f4c:	d000      	beq.n	8001f50 <__aeabi_dmul+0xd0>
 8001f4e:	e12c      	b.n	80021aa <__aeabi_dmul+0x32a>
 8001f50:	2300      	movs	r3, #0
 8001f52:	2700      	movs	r7, #0
 8001f54:	2600      	movs	r6, #0
 8001f56:	2500      	movs	r5, #0
 8001f58:	033f      	lsls	r7, r7, #12
 8001f5a:	0d2a      	lsrs	r2, r5, #20
 8001f5c:	0b3f      	lsrs	r7, r7, #12
 8001f5e:	48b3      	ldr	r0, [pc, #716]	; (800222c <__aeabi_dmul+0x3ac>)
 8001f60:	0512      	lsls	r2, r2, #20
 8001f62:	433a      	orrs	r2, r7
 8001f64:	4002      	ands	r2, r0
 8001f66:	051b      	lsls	r3, r3, #20
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	9a00      	ldr	r2, [sp, #0]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	07d1      	lsls	r1, r2, #31
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	430b      	orrs	r3, r1
 8001f74:	0030      	movs	r0, r6
 8001f76:	0019      	movs	r1, r3
 8001f78:	b007      	add	sp, #28
 8001f7a:	bc3c      	pop	{r2, r3, r4, r5}
 8001f7c:	4690      	mov	r8, r2
 8001f7e:	4699      	mov	r9, r3
 8001f80:	46a2      	mov	sl, r4
 8001f82:	46ab      	mov	fp, r5
 8001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f86:	465b      	mov	r3, fp
 8001f88:	433b      	orrs	r3, r7
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dmul+0x110>
 8001f8e:	e12f      	b.n	80021f0 <__aeabi_dmul+0x370>
 8001f90:	2f00      	cmp	r7, #0
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dmul+0x116>
 8001f94:	e1a5      	b.n	80022e2 <__aeabi_dmul+0x462>
 8001f96:	0038      	movs	r0, r7
 8001f98:	f000 fea4 	bl	8002ce4 <__clzsi2>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	3b0b      	subs	r3, #11
 8001fa0:	2b1c      	cmp	r3, #28
 8001fa2:	dd00      	ble.n	8001fa6 <__aeabi_dmul+0x126>
 8001fa4:	e196      	b.n	80022d4 <__aeabi_dmul+0x454>
 8001fa6:	221d      	movs	r2, #29
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	465a      	mov	r2, fp
 8001fac:	0001      	movs	r1, r0
 8001fae:	40da      	lsrs	r2, r3
 8001fb0:	465e      	mov	r6, fp
 8001fb2:	3908      	subs	r1, #8
 8001fb4:	408f      	lsls	r7, r1
 8001fb6:	0013      	movs	r3, r2
 8001fb8:	408e      	lsls	r6, r1
 8001fba:	433b      	orrs	r3, r7
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	4b9c      	ldr	r3, [pc, #624]	; (8002230 <__aeabi_dmul+0x3b0>)
 8001fc0:	2700      	movs	r7, #0
 8001fc2:	1a1b      	subs	r3, r3, r0
 8001fc4:	4699      	mov	r9, r3
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	469b      	mov	fp, r3
 8001fca:	e77d      	b.n	8001ec8 <__aeabi_dmul+0x48>
 8001fcc:	4641      	mov	r1, r8
 8001fce:	4653      	mov	r3, sl
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	4993      	ldr	r1, [pc, #588]	; (8002220 <__aeabi_dmul+0x3a0>)
 8001fd4:	468c      	mov	ip, r1
 8001fd6:	44e1      	add	r9, ip
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dmul+0x15e>
 8001fdc:	e11a      	b.n	8002214 <__aeabi_dmul+0x394>
 8001fde:	2202      	movs	r2, #2
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	4317      	orrs	r7, r2
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	e78c      	b.n	8001f02 <__aeabi_dmul+0x82>
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	d100      	bne.n	8001fee <__aeabi_dmul+0x16e>
 8001fec:	e10d      	b.n	800220a <__aeabi_dmul+0x38a>
 8001fee:	4643      	mov	r3, r8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_dmul+0x176>
 8001ff4:	e181      	b.n	80022fa <__aeabi_dmul+0x47a>
 8001ff6:	4640      	mov	r0, r8
 8001ff8:	f000 fe74 	bl	8002ce4 <__clzsi2>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	3a0b      	subs	r2, #11
 8002000:	2a1c      	cmp	r2, #28
 8002002:	dd00      	ble.n	8002006 <__aeabi_dmul+0x186>
 8002004:	e172      	b.n	80022ec <__aeabi_dmul+0x46c>
 8002006:	0001      	movs	r1, r0
 8002008:	4643      	mov	r3, r8
 800200a:	3908      	subs	r1, #8
 800200c:	408b      	lsls	r3, r1
 800200e:	4698      	mov	r8, r3
 8002010:	231d      	movs	r3, #29
 8002012:	1a9a      	subs	r2, r3, r2
 8002014:	4653      	mov	r3, sl
 8002016:	40d3      	lsrs	r3, r2
 8002018:	001a      	movs	r2, r3
 800201a:	4643      	mov	r3, r8
 800201c:	4313      	orrs	r3, r2
 800201e:	4652      	mov	r2, sl
 8002020:	408a      	lsls	r2, r1
 8002022:	4649      	mov	r1, r9
 8002024:	1a08      	subs	r0, r1, r0
 8002026:	4982      	ldr	r1, [pc, #520]	; (8002230 <__aeabi_dmul+0x3b0>)
 8002028:	4689      	mov	r9, r1
 800202a:	4481      	add	r9, r0
 800202c:	2000      	movs	r0, #0
 800202e:	e768      	b.n	8001f02 <__aeabi_dmul+0x82>
 8002030:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <__aeabi_dmul+0x3a0>)
 8002032:	2700      	movs	r7, #0
 8002034:	2600      	movs	r6, #0
 8002036:	e78e      	b.n	8001f56 <__aeabi_dmul+0xd6>
 8002038:	0c14      	lsrs	r4, r2, #16
 800203a:	0412      	lsls	r2, r2, #16
 800203c:	0c12      	lsrs	r2, r2, #16
 800203e:	0011      	movs	r1, r2
 8002040:	0c37      	lsrs	r7, r6, #16
 8002042:	0436      	lsls	r6, r6, #16
 8002044:	0c35      	lsrs	r5, r6, #16
 8002046:	4379      	muls	r1, r7
 8002048:	0028      	movs	r0, r5
 800204a:	468c      	mov	ip, r1
 800204c:	002e      	movs	r6, r5
 800204e:	4360      	muls	r0, r4
 8002050:	4460      	add	r0, ip
 8002052:	4683      	mov	fp, r0
 8002054:	4356      	muls	r6, r2
 8002056:	0021      	movs	r1, r4
 8002058:	0c30      	lsrs	r0, r6, #16
 800205a:	4680      	mov	r8, r0
 800205c:	4658      	mov	r0, fp
 800205e:	4379      	muls	r1, r7
 8002060:	4440      	add	r0, r8
 8002062:	9102      	str	r1, [sp, #8]
 8002064:	4584      	cmp	ip, r0
 8002066:	d906      	bls.n	8002076 <__aeabi_dmul+0x1f6>
 8002068:	4688      	mov	r8, r1
 800206a:	2180      	movs	r1, #128	; 0x80
 800206c:	0249      	lsls	r1, r1, #9
 800206e:	468c      	mov	ip, r1
 8002070:	44e0      	add	r8, ip
 8002072:	4641      	mov	r1, r8
 8002074:	9102      	str	r1, [sp, #8]
 8002076:	0436      	lsls	r6, r6, #16
 8002078:	0c01      	lsrs	r1, r0, #16
 800207a:	0c36      	lsrs	r6, r6, #16
 800207c:	0400      	lsls	r0, r0, #16
 800207e:	468b      	mov	fp, r1
 8002080:	1981      	adds	r1, r0, r6
 8002082:	0c1e      	lsrs	r6, r3, #16
 8002084:	041b      	lsls	r3, r3, #16
 8002086:	0c1b      	lsrs	r3, r3, #16
 8002088:	9103      	str	r1, [sp, #12]
 800208a:	0019      	movs	r1, r3
 800208c:	4379      	muls	r1, r7
 800208e:	468c      	mov	ip, r1
 8002090:	0028      	movs	r0, r5
 8002092:	4375      	muls	r5, r6
 8002094:	4465      	add	r5, ip
 8002096:	46a8      	mov	r8, r5
 8002098:	4358      	muls	r0, r3
 800209a:	0c05      	lsrs	r5, r0, #16
 800209c:	4445      	add	r5, r8
 800209e:	4377      	muls	r7, r6
 80020a0:	42a9      	cmp	r1, r5
 80020a2:	d903      	bls.n	80020ac <__aeabi_dmul+0x22c>
 80020a4:	2180      	movs	r1, #128	; 0x80
 80020a6:	0249      	lsls	r1, r1, #9
 80020a8:	468c      	mov	ip, r1
 80020aa:	4467      	add	r7, ip
 80020ac:	0c29      	lsrs	r1, r5, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	0400      	lsls	r0, r0, #16
 80020b4:	0c00      	lsrs	r0, r0, #16
 80020b6:	042d      	lsls	r5, r5, #16
 80020b8:	182d      	adds	r5, r5, r0
 80020ba:	4461      	add	r1, ip
 80020bc:	44ab      	add	fp, r5
 80020be:	9105      	str	r1, [sp, #20]
 80020c0:	4659      	mov	r1, fp
 80020c2:	9104      	str	r1, [sp, #16]
 80020c4:	9901      	ldr	r1, [sp, #4]
 80020c6:	040f      	lsls	r7, r1, #16
 80020c8:	0c3f      	lsrs	r7, r7, #16
 80020ca:	0c08      	lsrs	r0, r1, #16
 80020cc:	0039      	movs	r1, r7
 80020ce:	4351      	muls	r1, r2
 80020d0:	4342      	muls	r2, r0
 80020d2:	4690      	mov	r8, r2
 80020d4:	0002      	movs	r2, r0
 80020d6:	468c      	mov	ip, r1
 80020d8:	0c09      	lsrs	r1, r1, #16
 80020da:	468b      	mov	fp, r1
 80020dc:	4362      	muls	r2, r4
 80020de:	437c      	muls	r4, r7
 80020e0:	4444      	add	r4, r8
 80020e2:	445c      	add	r4, fp
 80020e4:	45a0      	cmp	r8, r4
 80020e6:	d903      	bls.n	80020f0 <__aeabi_dmul+0x270>
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0249      	lsls	r1, r1, #9
 80020ec:	4688      	mov	r8, r1
 80020ee:	4442      	add	r2, r8
 80020f0:	0c21      	lsrs	r1, r4, #16
 80020f2:	4688      	mov	r8, r1
 80020f4:	4661      	mov	r1, ip
 80020f6:	0409      	lsls	r1, r1, #16
 80020f8:	0c09      	lsrs	r1, r1, #16
 80020fa:	468c      	mov	ip, r1
 80020fc:	0039      	movs	r1, r7
 80020fe:	4359      	muls	r1, r3
 8002100:	4343      	muls	r3, r0
 8002102:	4370      	muls	r0, r6
 8002104:	437e      	muls	r6, r7
 8002106:	0c0f      	lsrs	r7, r1, #16
 8002108:	18f6      	adds	r6, r6, r3
 800210a:	0424      	lsls	r4, r4, #16
 800210c:	19be      	adds	r6, r7, r6
 800210e:	4464      	add	r4, ip
 8002110:	4442      	add	r2, r8
 8002112:	468c      	mov	ip, r1
 8002114:	42b3      	cmp	r3, r6
 8002116:	d903      	bls.n	8002120 <__aeabi_dmul+0x2a0>
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	025b      	lsls	r3, r3, #9
 800211c:	4698      	mov	r8, r3
 800211e:	4440      	add	r0, r8
 8002120:	9b02      	ldr	r3, [sp, #8]
 8002122:	4661      	mov	r1, ip
 8002124:	4698      	mov	r8, r3
 8002126:	9b04      	ldr	r3, [sp, #16]
 8002128:	0437      	lsls	r7, r6, #16
 800212a:	4443      	add	r3, r8
 800212c:	469b      	mov	fp, r3
 800212e:	45ab      	cmp	fp, r5
 8002130:	41ad      	sbcs	r5, r5
 8002132:	426b      	negs	r3, r5
 8002134:	040d      	lsls	r5, r1, #16
 8002136:	9905      	ldr	r1, [sp, #20]
 8002138:	0c2d      	lsrs	r5, r5, #16
 800213a:	468c      	mov	ip, r1
 800213c:	197f      	adds	r7, r7, r5
 800213e:	4467      	add	r7, ip
 8002140:	18fd      	adds	r5, r7, r3
 8002142:	46a8      	mov	r8, r5
 8002144:	465d      	mov	r5, fp
 8002146:	192d      	adds	r5, r5, r4
 8002148:	42a5      	cmp	r5, r4
 800214a:	41a4      	sbcs	r4, r4
 800214c:	4693      	mov	fp, r2
 800214e:	4264      	negs	r4, r4
 8002150:	46a4      	mov	ip, r4
 8002152:	44c3      	add	fp, r8
 8002154:	44dc      	add	ip, fp
 8002156:	428f      	cmp	r7, r1
 8002158:	41bf      	sbcs	r7, r7
 800215a:	4598      	cmp	r8, r3
 800215c:	419b      	sbcs	r3, r3
 800215e:	4593      	cmp	fp, r2
 8002160:	4192      	sbcs	r2, r2
 8002162:	45a4      	cmp	ip, r4
 8002164:	41a4      	sbcs	r4, r4
 8002166:	425b      	negs	r3, r3
 8002168:	427f      	negs	r7, r7
 800216a:	431f      	orrs	r7, r3
 800216c:	0c36      	lsrs	r6, r6, #16
 800216e:	4252      	negs	r2, r2
 8002170:	4264      	negs	r4, r4
 8002172:	19bf      	adds	r7, r7, r6
 8002174:	4322      	orrs	r2, r4
 8002176:	18bf      	adds	r7, r7, r2
 8002178:	4662      	mov	r2, ip
 800217a:	1838      	adds	r0, r7, r0
 800217c:	0243      	lsls	r3, r0, #9
 800217e:	0dd2      	lsrs	r2, r2, #23
 8002180:	9903      	ldr	r1, [sp, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	026a      	lsls	r2, r5, #9
 8002186:	430a      	orrs	r2, r1
 8002188:	1e50      	subs	r0, r2, #1
 800218a:	4182      	sbcs	r2, r0
 800218c:	4661      	mov	r1, ip
 800218e:	0ded      	lsrs	r5, r5, #23
 8002190:	432a      	orrs	r2, r5
 8002192:	024e      	lsls	r6, r1, #9
 8002194:	4332      	orrs	r2, r6
 8002196:	01d9      	lsls	r1, r3, #7
 8002198:	d400      	bmi.n	800219c <__aeabi_dmul+0x31c>
 800219a:	e0b3      	b.n	8002304 <__aeabi_dmul+0x484>
 800219c:	2601      	movs	r6, #1
 800219e:	0850      	lsrs	r0, r2, #1
 80021a0:	4032      	ands	r2, r6
 80021a2:	4302      	orrs	r2, r0
 80021a4:	07de      	lsls	r6, r3, #31
 80021a6:	4332      	orrs	r2, r6
 80021a8:	085b      	lsrs	r3, r3, #1
 80021aa:	4c22      	ldr	r4, [pc, #136]	; (8002234 <__aeabi_dmul+0x3b4>)
 80021ac:	4454      	add	r4, sl
 80021ae:	2c00      	cmp	r4, #0
 80021b0:	dd62      	ble.n	8002278 <__aeabi_dmul+0x3f8>
 80021b2:	0751      	lsls	r1, r2, #29
 80021b4:	d009      	beq.n	80021ca <__aeabi_dmul+0x34a>
 80021b6:	200f      	movs	r0, #15
 80021b8:	4010      	ands	r0, r2
 80021ba:	2804      	cmp	r0, #4
 80021bc:	d005      	beq.n	80021ca <__aeabi_dmul+0x34a>
 80021be:	1d10      	adds	r0, r2, #4
 80021c0:	4290      	cmp	r0, r2
 80021c2:	4192      	sbcs	r2, r2
 80021c4:	4252      	negs	r2, r2
 80021c6:	189b      	adds	r3, r3, r2
 80021c8:	0002      	movs	r2, r0
 80021ca:	01d9      	lsls	r1, r3, #7
 80021cc:	d504      	bpl.n	80021d8 <__aeabi_dmul+0x358>
 80021ce:	2480      	movs	r4, #128	; 0x80
 80021d0:	4819      	ldr	r0, [pc, #100]	; (8002238 <__aeabi_dmul+0x3b8>)
 80021d2:	00e4      	lsls	r4, r4, #3
 80021d4:	4003      	ands	r3, r0
 80021d6:	4454      	add	r4, sl
 80021d8:	4818      	ldr	r0, [pc, #96]	; (800223c <__aeabi_dmul+0x3bc>)
 80021da:	4284      	cmp	r4, r0
 80021dc:	dd00      	ble.n	80021e0 <__aeabi_dmul+0x360>
 80021de:	e727      	b.n	8002030 <__aeabi_dmul+0x1b0>
 80021e0:	075e      	lsls	r6, r3, #29
 80021e2:	025b      	lsls	r3, r3, #9
 80021e4:	08d2      	lsrs	r2, r2, #3
 80021e6:	0b1f      	lsrs	r7, r3, #12
 80021e8:	0563      	lsls	r3, r4, #21
 80021ea:	4316      	orrs	r6, r2
 80021ec:	0d5b      	lsrs	r3, r3, #21
 80021ee:	e6b2      	b.n	8001f56 <__aeabi_dmul+0xd6>
 80021f0:	2300      	movs	r3, #0
 80021f2:	4699      	mov	r9, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	2704      	movs	r7, #4
 80021f8:	2600      	movs	r6, #0
 80021fa:	469b      	mov	fp, r3
 80021fc:	e664      	b.n	8001ec8 <__aeabi_dmul+0x48>
 80021fe:	2303      	movs	r3, #3
 8002200:	9701      	str	r7, [sp, #4]
 8002202:	4681      	mov	r9, r0
 8002204:	270c      	movs	r7, #12
 8002206:	469b      	mov	fp, r3
 8002208:	e65e      	b.n	8001ec8 <__aeabi_dmul+0x48>
 800220a:	2201      	movs	r2, #1
 800220c:	2001      	movs	r0, #1
 800220e:	4317      	orrs	r7, r2
 8002210:	2200      	movs	r2, #0
 8002212:	e676      	b.n	8001f02 <__aeabi_dmul+0x82>
 8002214:	2303      	movs	r3, #3
 8002216:	2003      	movs	r0, #3
 8002218:	431f      	orrs	r7, r3
 800221a:	4643      	mov	r3, r8
 800221c:	e671      	b.n	8001f02 <__aeabi_dmul+0x82>
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	000007ff 	.word	0x000007ff
 8002224:	fffffc01 	.word	0xfffffc01
 8002228:	08016464 	.word	0x08016464
 800222c:	800fffff 	.word	0x800fffff
 8002230:	fffffc0d 	.word	0xfffffc0d
 8002234:	000003ff 	.word	0x000003ff
 8002238:	feffffff 	.word	0xfeffffff
 800223c:	000007fe 	.word	0x000007fe
 8002240:	2300      	movs	r3, #0
 8002242:	2780      	movs	r7, #128	; 0x80
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	033f      	lsls	r7, r7, #12
 8002248:	2600      	movs	r6, #0
 800224a:	4b43      	ldr	r3, [pc, #268]	; (8002358 <__aeabi_dmul+0x4d8>)
 800224c:	e683      	b.n	8001f56 <__aeabi_dmul+0xd6>
 800224e:	9b01      	ldr	r3, [sp, #4]
 8002250:	0032      	movs	r2, r6
 8002252:	46a4      	mov	ip, r4
 8002254:	4658      	mov	r0, fp
 8002256:	e670      	b.n	8001f3a <__aeabi_dmul+0xba>
 8002258:	46ac      	mov	ip, r5
 800225a:	e66e      	b.n	8001f3a <__aeabi_dmul+0xba>
 800225c:	2780      	movs	r7, #128	; 0x80
 800225e:	9901      	ldr	r1, [sp, #4]
 8002260:	033f      	lsls	r7, r7, #12
 8002262:	4239      	tst	r1, r7
 8002264:	d02d      	beq.n	80022c2 <__aeabi_dmul+0x442>
 8002266:	423b      	tst	r3, r7
 8002268:	d12b      	bne.n	80022c2 <__aeabi_dmul+0x442>
 800226a:	431f      	orrs	r7, r3
 800226c:	033f      	lsls	r7, r7, #12
 800226e:	0b3f      	lsrs	r7, r7, #12
 8002270:	9500      	str	r5, [sp, #0]
 8002272:	0016      	movs	r6, r2
 8002274:	4b38      	ldr	r3, [pc, #224]	; (8002358 <__aeabi_dmul+0x4d8>)
 8002276:	e66e      	b.n	8001f56 <__aeabi_dmul+0xd6>
 8002278:	2501      	movs	r5, #1
 800227a:	1b2d      	subs	r5, r5, r4
 800227c:	2d38      	cmp	r5, #56	; 0x38
 800227e:	dd00      	ble.n	8002282 <__aeabi_dmul+0x402>
 8002280:	e666      	b.n	8001f50 <__aeabi_dmul+0xd0>
 8002282:	2d1f      	cmp	r5, #31
 8002284:	dc40      	bgt.n	8002308 <__aeabi_dmul+0x488>
 8002286:	4835      	ldr	r0, [pc, #212]	; (800235c <__aeabi_dmul+0x4dc>)
 8002288:	001c      	movs	r4, r3
 800228a:	4450      	add	r0, sl
 800228c:	0016      	movs	r6, r2
 800228e:	4082      	lsls	r2, r0
 8002290:	4084      	lsls	r4, r0
 8002292:	40ee      	lsrs	r6, r5
 8002294:	1e50      	subs	r0, r2, #1
 8002296:	4182      	sbcs	r2, r0
 8002298:	4334      	orrs	r4, r6
 800229a:	4314      	orrs	r4, r2
 800229c:	40eb      	lsrs	r3, r5
 800229e:	0762      	lsls	r2, r4, #29
 80022a0:	d009      	beq.n	80022b6 <__aeabi_dmul+0x436>
 80022a2:	220f      	movs	r2, #15
 80022a4:	4022      	ands	r2, r4
 80022a6:	2a04      	cmp	r2, #4
 80022a8:	d005      	beq.n	80022b6 <__aeabi_dmul+0x436>
 80022aa:	0022      	movs	r2, r4
 80022ac:	1d14      	adds	r4, r2, #4
 80022ae:	4294      	cmp	r4, r2
 80022b0:	4180      	sbcs	r0, r0
 80022b2:	4240      	negs	r0, r0
 80022b4:	181b      	adds	r3, r3, r0
 80022b6:	021a      	lsls	r2, r3, #8
 80022b8:	d53e      	bpl.n	8002338 <__aeabi_dmul+0x4b8>
 80022ba:	2301      	movs	r3, #1
 80022bc:	2700      	movs	r7, #0
 80022be:	2600      	movs	r6, #0
 80022c0:	e649      	b.n	8001f56 <__aeabi_dmul+0xd6>
 80022c2:	2780      	movs	r7, #128	; 0x80
 80022c4:	9b01      	ldr	r3, [sp, #4]
 80022c6:	033f      	lsls	r7, r7, #12
 80022c8:	431f      	orrs	r7, r3
 80022ca:	033f      	lsls	r7, r7, #12
 80022cc:	0b3f      	lsrs	r7, r7, #12
 80022ce:	9400      	str	r4, [sp, #0]
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <__aeabi_dmul+0x4d8>)
 80022d2:	e640      	b.n	8001f56 <__aeabi_dmul+0xd6>
 80022d4:	0003      	movs	r3, r0
 80022d6:	465a      	mov	r2, fp
 80022d8:	3b28      	subs	r3, #40	; 0x28
 80022da:	409a      	lsls	r2, r3
 80022dc:	2600      	movs	r6, #0
 80022de:	9201      	str	r2, [sp, #4]
 80022e0:	e66d      	b.n	8001fbe <__aeabi_dmul+0x13e>
 80022e2:	4658      	mov	r0, fp
 80022e4:	f000 fcfe 	bl	8002ce4 <__clzsi2>
 80022e8:	3020      	adds	r0, #32
 80022ea:	e657      	b.n	8001f9c <__aeabi_dmul+0x11c>
 80022ec:	0003      	movs	r3, r0
 80022ee:	4652      	mov	r2, sl
 80022f0:	3b28      	subs	r3, #40	; 0x28
 80022f2:	409a      	lsls	r2, r3
 80022f4:	0013      	movs	r3, r2
 80022f6:	2200      	movs	r2, #0
 80022f8:	e693      	b.n	8002022 <__aeabi_dmul+0x1a2>
 80022fa:	4650      	mov	r0, sl
 80022fc:	f000 fcf2 	bl	8002ce4 <__clzsi2>
 8002300:	3020      	adds	r0, #32
 8002302:	e67b      	b.n	8001ffc <__aeabi_dmul+0x17c>
 8002304:	46ca      	mov	sl, r9
 8002306:	e750      	b.n	80021aa <__aeabi_dmul+0x32a>
 8002308:	201f      	movs	r0, #31
 800230a:	001e      	movs	r6, r3
 800230c:	4240      	negs	r0, r0
 800230e:	1b04      	subs	r4, r0, r4
 8002310:	40e6      	lsrs	r6, r4
 8002312:	2d20      	cmp	r5, #32
 8002314:	d003      	beq.n	800231e <__aeabi_dmul+0x49e>
 8002316:	4c12      	ldr	r4, [pc, #72]	; (8002360 <__aeabi_dmul+0x4e0>)
 8002318:	4454      	add	r4, sl
 800231a:	40a3      	lsls	r3, r4
 800231c:	431a      	orrs	r2, r3
 800231e:	1e50      	subs	r0, r2, #1
 8002320:	4182      	sbcs	r2, r0
 8002322:	4332      	orrs	r2, r6
 8002324:	2607      	movs	r6, #7
 8002326:	2700      	movs	r7, #0
 8002328:	4016      	ands	r6, r2
 800232a:	d009      	beq.n	8002340 <__aeabi_dmul+0x4c0>
 800232c:	200f      	movs	r0, #15
 800232e:	2300      	movs	r3, #0
 8002330:	4010      	ands	r0, r2
 8002332:	0014      	movs	r4, r2
 8002334:	2804      	cmp	r0, #4
 8002336:	d1b9      	bne.n	80022ac <__aeabi_dmul+0x42c>
 8002338:	0022      	movs	r2, r4
 800233a:	075e      	lsls	r6, r3, #29
 800233c:	025b      	lsls	r3, r3, #9
 800233e:	0b1f      	lsrs	r7, r3, #12
 8002340:	08d2      	lsrs	r2, r2, #3
 8002342:	4316      	orrs	r6, r2
 8002344:	2300      	movs	r3, #0
 8002346:	e606      	b.n	8001f56 <__aeabi_dmul+0xd6>
 8002348:	2780      	movs	r7, #128	; 0x80
 800234a:	033f      	lsls	r7, r7, #12
 800234c:	431f      	orrs	r7, r3
 800234e:	033f      	lsls	r7, r7, #12
 8002350:	0b3f      	lsrs	r7, r7, #12
 8002352:	0016      	movs	r6, r2
 8002354:	4b00      	ldr	r3, [pc, #0]	; (8002358 <__aeabi_dmul+0x4d8>)
 8002356:	e5fe      	b.n	8001f56 <__aeabi_dmul+0xd6>
 8002358:	000007ff 	.word	0x000007ff
 800235c:	0000041e 	.word	0x0000041e
 8002360:	0000043e 	.word	0x0000043e

08002364 <__aeabi_dsub>:
 8002364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002366:	4657      	mov	r7, sl
 8002368:	464e      	mov	r6, r9
 800236a:	4645      	mov	r5, r8
 800236c:	46de      	mov	lr, fp
 800236e:	000c      	movs	r4, r1
 8002370:	0309      	lsls	r1, r1, #12
 8002372:	b5e0      	push	{r5, r6, r7, lr}
 8002374:	0a49      	lsrs	r1, r1, #9
 8002376:	0f46      	lsrs	r6, r0, #29
 8002378:	005f      	lsls	r7, r3, #1
 800237a:	4331      	orrs	r1, r6
 800237c:	031e      	lsls	r6, r3, #12
 800237e:	0fdb      	lsrs	r3, r3, #31
 8002380:	0a76      	lsrs	r6, r6, #9
 8002382:	469b      	mov	fp, r3
 8002384:	0f53      	lsrs	r3, r2, #29
 8002386:	4333      	orrs	r3, r6
 8002388:	4ec8      	ldr	r6, [pc, #800]	; (80026ac <__aeabi_dsub+0x348>)
 800238a:	0065      	lsls	r5, r4, #1
 800238c:	00c0      	lsls	r0, r0, #3
 800238e:	0fe4      	lsrs	r4, r4, #31
 8002390:	00d2      	lsls	r2, r2, #3
 8002392:	0d6d      	lsrs	r5, r5, #21
 8002394:	46a2      	mov	sl, r4
 8002396:	4681      	mov	r9, r0
 8002398:	0d7f      	lsrs	r7, r7, #21
 800239a:	469c      	mov	ip, r3
 800239c:	4690      	mov	r8, r2
 800239e:	42b7      	cmp	r7, r6
 80023a0:	d100      	bne.n	80023a4 <__aeabi_dsub+0x40>
 80023a2:	e0b9      	b.n	8002518 <__aeabi_dsub+0x1b4>
 80023a4:	465b      	mov	r3, fp
 80023a6:	2601      	movs	r6, #1
 80023a8:	4073      	eors	r3, r6
 80023aa:	469b      	mov	fp, r3
 80023ac:	1bee      	subs	r6, r5, r7
 80023ae:	45a3      	cmp	fp, r4
 80023b0:	d100      	bne.n	80023b4 <__aeabi_dsub+0x50>
 80023b2:	e083      	b.n	80024bc <__aeabi_dsub+0x158>
 80023b4:	2e00      	cmp	r6, #0
 80023b6:	dd63      	ble.n	8002480 <__aeabi_dsub+0x11c>
 80023b8:	2f00      	cmp	r7, #0
 80023ba:	d000      	beq.n	80023be <__aeabi_dsub+0x5a>
 80023bc:	e0b1      	b.n	8002522 <__aeabi_dsub+0x1be>
 80023be:	4663      	mov	r3, ip
 80023c0:	4313      	orrs	r3, r2
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dsub+0x62>
 80023c4:	e123      	b.n	800260e <__aeabi_dsub+0x2aa>
 80023c6:	1e73      	subs	r3, r6, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d000      	beq.n	80023ce <__aeabi_dsub+0x6a>
 80023cc:	e1ba      	b.n	8002744 <__aeabi_dsub+0x3e0>
 80023ce:	1a86      	subs	r6, r0, r2
 80023d0:	4663      	mov	r3, ip
 80023d2:	42b0      	cmp	r0, r6
 80023d4:	4180      	sbcs	r0, r0
 80023d6:	2501      	movs	r5, #1
 80023d8:	1ac9      	subs	r1, r1, r3
 80023da:	4240      	negs	r0, r0
 80023dc:	1a09      	subs	r1, r1, r0
 80023de:	020b      	lsls	r3, r1, #8
 80023e0:	d400      	bmi.n	80023e4 <__aeabi_dsub+0x80>
 80023e2:	e147      	b.n	8002674 <__aeabi_dsub+0x310>
 80023e4:	0249      	lsls	r1, r1, #9
 80023e6:	0a4b      	lsrs	r3, r1, #9
 80023e8:	4698      	mov	r8, r3
 80023ea:	4643      	mov	r3, r8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d100      	bne.n	80023f2 <__aeabi_dsub+0x8e>
 80023f0:	e189      	b.n	8002706 <__aeabi_dsub+0x3a2>
 80023f2:	4640      	mov	r0, r8
 80023f4:	f000 fc76 	bl	8002ce4 <__clzsi2>
 80023f8:	0003      	movs	r3, r0
 80023fa:	3b08      	subs	r3, #8
 80023fc:	2b1f      	cmp	r3, #31
 80023fe:	dd00      	ble.n	8002402 <__aeabi_dsub+0x9e>
 8002400:	e17c      	b.n	80026fc <__aeabi_dsub+0x398>
 8002402:	2220      	movs	r2, #32
 8002404:	0030      	movs	r0, r6
 8002406:	1ad2      	subs	r2, r2, r3
 8002408:	4641      	mov	r1, r8
 800240a:	40d0      	lsrs	r0, r2
 800240c:	4099      	lsls	r1, r3
 800240e:	0002      	movs	r2, r0
 8002410:	409e      	lsls	r6, r3
 8002412:	430a      	orrs	r2, r1
 8002414:	429d      	cmp	r5, r3
 8002416:	dd00      	ble.n	800241a <__aeabi_dsub+0xb6>
 8002418:	e16a      	b.n	80026f0 <__aeabi_dsub+0x38c>
 800241a:	1b5d      	subs	r5, r3, r5
 800241c:	1c6b      	adds	r3, r5, #1
 800241e:	2b1f      	cmp	r3, #31
 8002420:	dd00      	ble.n	8002424 <__aeabi_dsub+0xc0>
 8002422:	e194      	b.n	800274e <__aeabi_dsub+0x3ea>
 8002424:	2120      	movs	r1, #32
 8002426:	0010      	movs	r0, r2
 8002428:	0035      	movs	r5, r6
 800242a:	1ac9      	subs	r1, r1, r3
 800242c:	408e      	lsls	r6, r1
 800242e:	40da      	lsrs	r2, r3
 8002430:	4088      	lsls	r0, r1
 8002432:	40dd      	lsrs	r5, r3
 8002434:	1e71      	subs	r1, r6, #1
 8002436:	418e      	sbcs	r6, r1
 8002438:	0011      	movs	r1, r2
 800243a:	2207      	movs	r2, #7
 800243c:	4328      	orrs	r0, r5
 800243e:	2500      	movs	r5, #0
 8002440:	4306      	orrs	r6, r0
 8002442:	4032      	ands	r2, r6
 8002444:	2a00      	cmp	r2, #0
 8002446:	d009      	beq.n	800245c <__aeabi_dsub+0xf8>
 8002448:	230f      	movs	r3, #15
 800244a:	4033      	ands	r3, r6
 800244c:	2b04      	cmp	r3, #4
 800244e:	d005      	beq.n	800245c <__aeabi_dsub+0xf8>
 8002450:	1d33      	adds	r3, r6, #4
 8002452:	42b3      	cmp	r3, r6
 8002454:	41b6      	sbcs	r6, r6
 8002456:	4276      	negs	r6, r6
 8002458:	1989      	adds	r1, r1, r6
 800245a:	001e      	movs	r6, r3
 800245c:	020b      	lsls	r3, r1, #8
 800245e:	d400      	bmi.n	8002462 <__aeabi_dsub+0xfe>
 8002460:	e23d      	b.n	80028de <__aeabi_dsub+0x57a>
 8002462:	1c6a      	adds	r2, r5, #1
 8002464:	4b91      	ldr	r3, [pc, #580]	; (80026ac <__aeabi_dsub+0x348>)
 8002466:	0555      	lsls	r5, r2, #21
 8002468:	0d6d      	lsrs	r5, r5, #21
 800246a:	429a      	cmp	r2, r3
 800246c:	d100      	bne.n	8002470 <__aeabi_dsub+0x10c>
 800246e:	e119      	b.n	80026a4 <__aeabi_dsub+0x340>
 8002470:	4a8f      	ldr	r2, [pc, #572]	; (80026b0 <__aeabi_dsub+0x34c>)
 8002472:	08f6      	lsrs	r6, r6, #3
 8002474:	400a      	ands	r2, r1
 8002476:	0757      	lsls	r7, r2, #29
 8002478:	0252      	lsls	r2, r2, #9
 800247a:	4337      	orrs	r7, r6
 800247c:	0b12      	lsrs	r2, r2, #12
 800247e:	e09b      	b.n	80025b8 <__aeabi_dsub+0x254>
 8002480:	2e00      	cmp	r6, #0
 8002482:	d000      	beq.n	8002486 <__aeabi_dsub+0x122>
 8002484:	e0c5      	b.n	8002612 <__aeabi_dsub+0x2ae>
 8002486:	1c6e      	adds	r6, r5, #1
 8002488:	0576      	lsls	r6, r6, #21
 800248a:	0d76      	lsrs	r6, r6, #21
 800248c:	2e01      	cmp	r6, #1
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x12e>
 8002490:	e148      	b.n	8002724 <__aeabi_dsub+0x3c0>
 8002492:	4667      	mov	r7, ip
 8002494:	1a86      	subs	r6, r0, r2
 8002496:	1bcb      	subs	r3, r1, r7
 8002498:	42b0      	cmp	r0, r6
 800249a:	41bf      	sbcs	r7, r7
 800249c:	427f      	negs	r7, r7
 800249e:	46b8      	mov	r8, r7
 80024a0:	001f      	movs	r7, r3
 80024a2:	4643      	mov	r3, r8
 80024a4:	1aff      	subs	r7, r7, r3
 80024a6:	003b      	movs	r3, r7
 80024a8:	46b8      	mov	r8, r7
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	d500      	bpl.n	80024b0 <__aeabi_dsub+0x14c>
 80024ae:	e15f      	b.n	8002770 <__aeabi_dsub+0x40c>
 80024b0:	4337      	orrs	r7, r6
 80024b2:	d19a      	bne.n	80023ea <__aeabi_dsub+0x86>
 80024b4:	2200      	movs	r2, #0
 80024b6:	2400      	movs	r4, #0
 80024b8:	2500      	movs	r5, #0
 80024ba:	e079      	b.n	80025b0 <__aeabi_dsub+0x24c>
 80024bc:	2e00      	cmp	r6, #0
 80024be:	dc00      	bgt.n	80024c2 <__aeabi_dsub+0x15e>
 80024c0:	e0fa      	b.n	80026b8 <__aeabi_dsub+0x354>
 80024c2:	2f00      	cmp	r7, #0
 80024c4:	d100      	bne.n	80024c8 <__aeabi_dsub+0x164>
 80024c6:	e08d      	b.n	80025e4 <__aeabi_dsub+0x280>
 80024c8:	4b78      	ldr	r3, [pc, #480]	; (80026ac <__aeabi_dsub+0x348>)
 80024ca:	429d      	cmp	r5, r3
 80024cc:	d067      	beq.n	800259e <__aeabi_dsub+0x23a>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	4667      	mov	r7, ip
 80024d2:	041b      	lsls	r3, r3, #16
 80024d4:	431f      	orrs	r7, r3
 80024d6:	46bc      	mov	ip, r7
 80024d8:	2e38      	cmp	r6, #56	; 0x38
 80024da:	dc00      	bgt.n	80024de <__aeabi_dsub+0x17a>
 80024dc:	e152      	b.n	8002784 <__aeabi_dsub+0x420>
 80024de:	4663      	mov	r3, ip
 80024e0:	4313      	orrs	r3, r2
 80024e2:	1e5a      	subs	r2, r3, #1
 80024e4:	4193      	sbcs	r3, r2
 80024e6:	181e      	adds	r6, r3, r0
 80024e8:	4286      	cmp	r6, r0
 80024ea:	4180      	sbcs	r0, r0
 80024ec:	4240      	negs	r0, r0
 80024ee:	1809      	adds	r1, r1, r0
 80024f0:	020b      	lsls	r3, r1, #8
 80024f2:	d400      	bmi.n	80024f6 <__aeabi_dsub+0x192>
 80024f4:	e0be      	b.n	8002674 <__aeabi_dsub+0x310>
 80024f6:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <__aeabi_dsub+0x348>)
 80024f8:	3501      	adds	r5, #1
 80024fa:	429d      	cmp	r5, r3
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x19c>
 80024fe:	e0d2      	b.n	80026a6 <__aeabi_dsub+0x342>
 8002500:	4a6b      	ldr	r2, [pc, #428]	; (80026b0 <__aeabi_dsub+0x34c>)
 8002502:	0873      	lsrs	r3, r6, #1
 8002504:	400a      	ands	r2, r1
 8002506:	2101      	movs	r1, #1
 8002508:	400e      	ands	r6, r1
 800250a:	431e      	orrs	r6, r3
 800250c:	0851      	lsrs	r1, r2, #1
 800250e:	07d3      	lsls	r3, r2, #31
 8002510:	2207      	movs	r2, #7
 8002512:	431e      	orrs	r6, r3
 8002514:	4032      	ands	r2, r6
 8002516:	e795      	b.n	8002444 <__aeabi_dsub+0xe0>
 8002518:	001e      	movs	r6, r3
 800251a:	4316      	orrs	r6, r2
 800251c:	d000      	beq.n	8002520 <__aeabi_dsub+0x1bc>
 800251e:	e745      	b.n	80023ac <__aeabi_dsub+0x48>
 8002520:	e740      	b.n	80023a4 <__aeabi_dsub+0x40>
 8002522:	4b62      	ldr	r3, [pc, #392]	; (80026ac <__aeabi_dsub+0x348>)
 8002524:	429d      	cmp	r5, r3
 8002526:	d03a      	beq.n	800259e <__aeabi_dsub+0x23a>
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	4667      	mov	r7, ip
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	431f      	orrs	r7, r3
 8002530:	46bc      	mov	ip, r7
 8002532:	2e38      	cmp	r6, #56	; 0x38
 8002534:	dd00      	ble.n	8002538 <__aeabi_dsub+0x1d4>
 8002536:	e0eb      	b.n	8002710 <__aeabi_dsub+0x3ac>
 8002538:	2e1f      	cmp	r6, #31
 800253a:	dc00      	bgt.n	800253e <__aeabi_dsub+0x1da>
 800253c:	e13a      	b.n	80027b4 <__aeabi_dsub+0x450>
 800253e:	0033      	movs	r3, r6
 8002540:	4667      	mov	r7, ip
 8002542:	3b20      	subs	r3, #32
 8002544:	40df      	lsrs	r7, r3
 8002546:	003b      	movs	r3, r7
 8002548:	2e20      	cmp	r6, #32
 800254a:	d005      	beq.n	8002558 <__aeabi_dsub+0x1f4>
 800254c:	2740      	movs	r7, #64	; 0x40
 800254e:	1bbf      	subs	r7, r7, r6
 8002550:	4666      	mov	r6, ip
 8002552:	40be      	lsls	r6, r7
 8002554:	4332      	orrs	r2, r6
 8002556:	4690      	mov	r8, r2
 8002558:	4646      	mov	r6, r8
 800255a:	1e72      	subs	r2, r6, #1
 800255c:	4196      	sbcs	r6, r2
 800255e:	4333      	orrs	r3, r6
 8002560:	e0da      	b.n	8002718 <__aeabi_dsub+0x3b4>
 8002562:	2b00      	cmp	r3, #0
 8002564:	d100      	bne.n	8002568 <__aeabi_dsub+0x204>
 8002566:	e214      	b.n	8002992 <__aeabi_dsub+0x62e>
 8002568:	4663      	mov	r3, ip
 800256a:	4313      	orrs	r3, r2
 800256c:	d100      	bne.n	8002570 <__aeabi_dsub+0x20c>
 800256e:	e168      	b.n	8002842 <__aeabi_dsub+0x4de>
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	074e      	lsls	r6, r1, #29
 8002574:	08c0      	lsrs	r0, r0, #3
 8002576:	08c9      	lsrs	r1, r1, #3
 8002578:	031b      	lsls	r3, r3, #12
 800257a:	4306      	orrs	r6, r0
 800257c:	4219      	tst	r1, r3
 800257e:	d008      	beq.n	8002592 <__aeabi_dsub+0x22e>
 8002580:	4660      	mov	r0, ip
 8002582:	08c0      	lsrs	r0, r0, #3
 8002584:	4218      	tst	r0, r3
 8002586:	d104      	bne.n	8002592 <__aeabi_dsub+0x22e>
 8002588:	4663      	mov	r3, ip
 800258a:	0001      	movs	r1, r0
 800258c:	08d2      	lsrs	r2, r2, #3
 800258e:	075e      	lsls	r6, r3, #29
 8002590:	4316      	orrs	r6, r2
 8002592:	00f3      	lsls	r3, r6, #3
 8002594:	4699      	mov	r9, r3
 8002596:	00c9      	lsls	r1, r1, #3
 8002598:	0f72      	lsrs	r2, r6, #29
 800259a:	4d44      	ldr	r5, [pc, #272]	; (80026ac <__aeabi_dsub+0x348>)
 800259c:	4311      	orrs	r1, r2
 800259e:	464b      	mov	r3, r9
 80025a0:	08de      	lsrs	r6, r3, #3
 80025a2:	4b42      	ldr	r3, [pc, #264]	; (80026ac <__aeabi_dsub+0x348>)
 80025a4:	074f      	lsls	r7, r1, #29
 80025a6:	4337      	orrs	r7, r6
 80025a8:	08ca      	lsrs	r2, r1, #3
 80025aa:	429d      	cmp	r5, r3
 80025ac:	d100      	bne.n	80025b0 <__aeabi_dsub+0x24c>
 80025ae:	e06e      	b.n	800268e <__aeabi_dsub+0x32a>
 80025b0:	0312      	lsls	r2, r2, #12
 80025b2:	056d      	lsls	r5, r5, #21
 80025b4:	0b12      	lsrs	r2, r2, #12
 80025b6:	0d6d      	lsrs	r5, r5, #21
 80025b8:	2100      	movs	r1, #0
 80025ba:	0312      	lsls	r2, r2, #12
 80025bc:	0b13      	lsrs	r3, r2, #12
 80025be:	0d0a      	lsrs	r2, r1, #20
 80025c0:	0512      	lsls	r2, r2, #20
 80025c2:	431a      	orrs	r2, r3
 80025c4:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <__aeabi_dsub+0x350>)
 80025c6:	052d      	lsls	r5, r5, #20
 80025c8:	4013      	ands	r3, r2
 80025ca:	432b      	orrs	r3, r5
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	07e4      	lsls	r4, r4, #31
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	4323      	orrs	r3, r4
 80025d4:	0038      	movs	r0, r7
 80025d6:	0019      	movs	r1, r3
 80025d8:	bc3c      	pop	{r2, r3, r4, r5}
 80025da:	4690      	mov	r8, r2
 80025dc:	4699      	mov	r9, r3
 80025de:	46a2      	mov	sl, r4
 80025e0:	46ab      	mov	fp, r5
 80025e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025e4:	4663      	mov	r3, ip
 80025e6:	4313      	orrs	r3, r2
 80025e8:	d011      	beq.n	800260e <__aeabi_dsub+0x2aa>
 80025ea:	1e73      	subs	r3, r6, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d000      	beq.n	80025f2 <__aeabi_dsub+0x28e>
 80025f0:	e107      	b.n	8002802 <__aeabi_dsub+0x49e>
 80025f2:	1886      	adds	r6, r0, r2
 80025f4:	4286      	cmp	r6, r0
 80025f6:	4180      	sbcs	r0, r0
 80025f8:	4461      	add	r1, ip
 80025fa:	4240      	negs	r0, r0
 80025fc:	1809      	adds	r1, r1, r0
 80025fe:	2501      	movs	r5, #1
 8002600:	020b      	lsls	r3, r1, #8
 8002602:	d537      	bpl.n	8002674 <__aeabi_dsub+0x310>
 8002604:	2502      	movs	r5, #2
 8002606:	e77b      	b.n	8002500 <__aeabi_dsub+0x19c>
 8002608:	003e      	movs	r6, r7
 800260a:	4661      	mov	r1, ip
 800260c:	4691      	mov	r9, r2
 800260e:	0035      	movs	r5, r6
 8002610:	e7c5      	b.n	800259e <__aeabi_dsub+0x23a>
 8002612:	465c      	mov	r4, fp
 8002614:	2d00      	cmp	r5, #0
 8002616:	d000      	beq.n	800261a <__aeabi_dsub+0x2b6>
 8002618:	e0e1      	b.n	80027de <__aeabi_dsub+0x47a>
 800261a:	000b      	movs	r3, r1
 800261c:	4303      	orrs	r3, r0
 800261e:	d0f3      	beq.n	8002608 <__aeabi_dsub+0x2a4>
 8002620:	1c73      	adds	r3, r6, #1
 8002622:	d100      	bne.n	8002626 <__aeabi_dsub+0x2c2>
 8002624:	e1ac      	b.n	8002980 <__aeabi_dsub+0x61c>
 8002626:	4b21      	ldr	r3, [pc, #132]	; (80026ac <__aeabi_dsub+0x348>)
 8002628:	429f      	cmp	r7, r3
 800262a:	d100      	bne.n	800262e <__aeabi_dsub+0x2ca>
 800262c:	e13a      	b.n	80028a4 <__aeabi_dsub+0x540>
 800262e:	43f3      	mvns	r3, r6
 8002630:	2b38      	cmp	r3, #56	; 0x38
 8002632:	dd00      	ble.n	8002636 <__aeabi_dsub+0x2d2>
 8002634:	e16f      	b.n	8002916 <__aeabi_dsub+0x5b2>
 8002636:	2b1f      	cmp	r3, #31
 8002638:	dd00      	ble.n	800263c <__aeabi_dsub+0x2d8>
 800263a:	e18c      	b.n	8002956 <__aeabi_dsub+0x5f2>
 800263c:	2520      	movs	r5, #32
 800263e:	000e      	movs	r6, r1
 8002640:	1aed      	subs	r5, r5, r3
 8002642:	40ae      	lsls	r6, r5
 8002644:	46b0      	mov	r8, r6
 8002646:	0006      	movs	r6, r0
 8002648:	46aa      	mov	sl, r5
 800264a:	40de      	lsrs	r6, r3
 800264c:	4645      	mov	r5, r8
 800264e:	4335      	orrs	r5, r6
 8002650:	002e      	movs	r6, r5
 8002652:	4655      	mov	r5, sl
 8002654:	40d9      	lsrs	r1, r3
 8002656:	40a8      	lsls	r0, r5
 8002658:	4663      	mov	r3, ip
 800265a:	1e45      	subs	r5, r0, #1
 800265c:	41a8      	sbcs	r0, r5
 800265e:	1a5b      	subs	r3, r3, r1
 8002660:	469c      	mov	ip, r3
 8002662:	4330      	orrs	r0, r6
 8002664:	1a16      	subs	r6, r2, r0
 8002666:	42b2      	cmp	r2, r6
 8002668:	4192      	sbcs	r2, r2
 800266a:	4663      	mov	r3, ip
 800266c:	4252      	negs	r2, r2
 800266e:	1a99      	subs	r1, r3, r2
 8002670:	003d      	movs	r5, r7
 8002672:	e6b4      	b.n	80023de <__aeabi_dsub+0x7a>
 8002674:	2207      	movs	r2, #7
 8002676:	4032      	ands	r2, r6
 8002678:	2a00      	cmp	r2, #0
 800267a:	d000      	beq.n	800267e <__aeabi_dsub+0x31a>
 800267c:	e6e4      	b.n	8002448 <__aeabi_dsub+0xe4>
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <__aeabi_dsub+0x348>)
 8002680:	08f6      	lsrs	r6, r6, #3
 8002682:	074f      	lsls	r7, r1, #29
 8002684:	4337      	orrs	r7, r6
 8002686:	08ca      	lsrs	r2, r1, #3
 8002688:	429d      	cmp	r5, r3
 800268a:	d000      	beq.n	800268e <__aeabi_dsub+0x32a>
 800268c:	e790      	b.n	80025b0 <__aeabi_dsub+0x24c>
 800268e:	003b      	movs	r3, r7
 8002690:	4313      	orrs	r3, r2
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x332>
 8002694:	e1a6      	b.n	80029e4 <__aeabi_dsub+0x680>
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	031b      	lsls	r3, r3, #12
 800269a:	431a      	orrs	r2, r3
 800269c:	0312      	lsls	r2, r2, #12
 800269e:	0b12      	lsrs	r2, r2, #12
 80026a0:	4d02      	ldr	r5, [pc, #8]	; (80026ac <__aeabi_dsub+0x348>)
 80026a2:	e789      	b.n	80025b8 <__aeabi_dsub+0x254>
 80026a4:	0015      	movs	r5, r2
 80026a6:	2200      	movs	r2, #0
 80026a8:	2700      	movs	r7, #0
 80026aa:	e785      	b.n	80025b8 <__aeabi_dsub+0x254>
 80026ac:	000007ff 	.word	0x000007ff
 80026b0:	ff7fffff 	.word	0xff7fffff
 80026b4:	800fffff 	.word	0x800fffff
 80026b8:	2e00      	cmp	r6, #0
 80026ba:	d000      	beq.n	80026be <__aeabi_dsub+0x35a>
 80026bc:	e0c7      	b.n	800284e <__aeabi_dsub+0x4ea>
 80026be:	1c6b      	adds	r3, r5, #1
 80026c0:	055e      	lsls	r6, r3, #21
 80026c2:	0d76      	lsrs	r6, r6, #21
 80026c4:	2e01      	cmp	r6, #1
 80026c6:	dc00      	bgt.n	80026ca <__aeabi_dsub+0x366>
 80026c8:	e0f0      	b.n	80028ac <__aeabi_dsub+0x548>
 80026ca:	4dc8      	ldr	r5, [pc, #800]	; (80029ec <__aeabi_dsub+0x688>)
 80026cc:	42ab      	cmp	r3, r5
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dsub+0x36e>
 80026d0:	e0b9      	b.n	8002846 <__aeabi_dsub+0x4e2>
 80026d2:	1885      	adds	r5, r0, r2
 80026d4:	000a      	movs	r2, r1
 80026d6:	4285      	cmp	r5, r0
 80026d8:	4189      	sbcs	r1, r1
 80026da:	4462      	add	r2, ip
 80026dc:	4249      	negs	r1, r1
 80026de:	1851      	adds	r1, r2, r1
 80026e0:	2207      	movs	r2, #7
 80026e2:	07ce      	lsls	r6, r1, #31
 80026e4:	086d      	lsrs	r5, r5, #1
 80026e6:	432e      	orrs	r6, r5
 80026e8:	0849      	lsrs	r1, r1, #1
 80026ea:	4032      	ands	r2, r6
 80026ec:	001d      	movs	r5, r3
 80026ee:	e6a9      	b.n	8002444 <__aeabi_dsub+0xe0>
 80026f0:	49bf      	ldr	r1, [pc, #764]	; (80029f0 <__aeabi_dsub+0x68c>)
 80026f2:	1aed      	subs	r5, r5, r3
 80026f4:	4011      	ands	r1, r2
 80026f6:	2207      	movs	r2, #7
 80026f8:	4032      	ands	r2, r6
 80026fa:	e6a3      	b.n	8002444 <__aeabi_dsub+0xe0>
 80026fc:	0032      	movs	r2, r6
 80026fe:	3828      	subs	r0, #40	; 0x28
 8002700:	4082      	lsls	r2, r0
 8002702:	2600      	movs	r6, #0
 8002704:	e686      	b.n	8002414 <__aeabi_dsub+0xb0>
 8002706:	0030      	movs	r0, r6
 8002708:	f000 faec 	bl	8002ce4 <__clzsi2>
 800270c:	3020      	adds	r0, #32
 800270e:	e673      	b.n	80023f8 <__aeabi_dsub+0x94>
 8002710:	4663      	mov	r3, ip
 8002712:	4313      	orrs	r3, r2
 8002714:	1e5a      	subs	r2, r3, #1
 8002716:	4193      	sbcs	r3, r2
 8002718:	1ac6      	subs	r6, r0, r3
 800271a:	42b0      	cmp	r0, r6
 800271c:	4180      	sbcs	r0, r0
 800271e:	4240      	negs	r0, r0
 8002720:	1a09      	subs	r1, r1, r0
 8002722:	e65c      	b.n	80023de <__aeabi_dsub+0x7a>
 8002724:	000e      	movs	r6, r1
 8002726:	4667      	mov	r7, ip
 8002728:	4306      	orrs	r6, r0
 800272a:	4317      	orrs	r7, r2
 800272c:	2d00      	cmp	r5, #0
 800272e:	d15e      	bne.n	80027ee <__aeabi_dsub+0x48a>
 8002730:	2e00      	cmp	r6, #0
 8002732:	d000      	beq.n	8002736 <__aeabi_dsub+0x3d2>
 8002734:	e0f3      	b.n	800291e <__aeabi_dsub+0x5ba>
 8002736:	2f00      	cmp	r7, #0
 8002738:	d100      	bne.n	800273c <__aeabi_dsub+0x3d8>
 800273a:	e11e      	b.n	800297a <__aeabi_dsub+0x616>
 800273c:	465c      	mov	r4, fp
 800273e:	4661      	mov	r1, ip
 8002740:	4691      	mov	r9, r2
 8002742:	e72c      	b.n	800259e <__aeabi_dsub+0x23a>
 8002744:	4fa9      	ldr	r7, [pc, #676]	; (80029ec <__aeabi_dsub+0x688>)
 8002746:	42be      	cmp	r6, r7
 8002748:	d07b      	beq.n	8002842 <__aeabi_dsub+0x4de>
 800274a:	001e      	movs	r6, r3
 800274c:	e6f1      	b.n	8002532 <__aeabi_dsub+0x1ce>
 800274e:	0010      	movs	r0, r2
 8002750:	3d1f      	subs	r5, #31
 8002752:	40e8      	lsrs	r0, r5
 8002754:	2b20      	cmp	r3, #32
 8002756:	d003      	beq.n	8002760 <__aeabi_dsub+0x3fc>
 8002758:	2140      	movs	r1, #64	; 0x40
 800275a:	1acb      	subs	r3, r1, r3
 800275c:	409a      	lsls	r2, r3
 800275e:	4316      	orrs	r6, r2
 8002760:	1e73      	subs	r3, r6, #1
 8002762:	419e      	sbcs	r6, r3
 8002764:	2207      	movs	r2, #7
 8002766:	4306      	orrs	r6, r0
 8002768:	4032      	ands	r2, r6
 800276a:	2100      	movs	r1, #0
 800276c:	2500      	movs	r5, #0
 800276e:	e783      	b.n	8002678 <__aeabi_dsub+0x314>
 8002770:	1a16      	subs	r6, r2, r0
 8002772:	4663      	mov	r3, ip
 8002774:	42b2      	cmp	r2, r6
 8002776:	4180      	sbcs	r0, r0
 8002778:	1a59      	subs	r1, r3, r1
 800277a:	4240      	negs	r0, r0
 800277c:	1a0b      	subs	r3, r1, r0
 800277e:	4698      	mov	r8, r3
 8002780:	465c      	mov	r4, fp
 8002782:	e632      	b.n	80023ea <__aeabi_dsub+0x86>
 8002784:	2e1f      	cmp	r6, #31
 8002786:	dd00      	ble.n	800278a <__aeabi_dsub+0x426>
 8002788:	e0ab      	b.n	80028e2 <__aeabi_dsub+0x57e>
 800278a:	2720      	movs	r7, #32
 800278c:	1bbb      	subs	r3, r7, r6
 800278e:	469a      	mov	sl, r3
 8002790:	4663      	mov	r3, ip
 8002792:	4657      	mov	r7, sl
 8002794:	40bb      	lsls	r3, r7
 8002796:	4699      	mov	r9, r3
 8002798:	0013      	movs	r3, r2
 800279a:	464f      	mov	r7, r9
 800279c:	40f3      	lsrs	r3, r6
 800279e:	431f      	orrs	r7, r3
 80027a0:	003b      	movs	r3, r7
 80027a2:	4657      	mov	r7, sl
 80027a4:	40ba      	lsls	r2, r7
 80027a6:	1e57      	subs	r7, r2, #1
 80027a8:	41ba      	sbcs	r2, r7
 80027aa:	4313      	orrs	r3, r2
 80027ac:	4662      	mov	r2, ip
 80027ae:	40f2      	lsrs	r2, r6
 80027b0:	1889      	adds	r1, r1, r2
 80027b2:	e698      	b.n	80024e6 <__aeabi_dsub+0x182>
 80027b4:	2720      	movs	r7, #32
 80027b6:	1bbb      	subs	r3, r7, r6
 80027b8:	469a      	mov	sl, r3
 80027ba:	4663      	mov	r3, ip
 80027bc:	4657      	mov	r7, sl
 80027be:	40bb      	lsls	r3, r7
 80027c0:	4699      	mov	r9, r3
 80027c2:	0013      	movs	r3, r2
 80027c4:	464f      	mov	r7, r9
 80027c6:	40f3      	lsrs	r3, r6
 80027c8:	431f      	orrs	r7, r3
 80027ca:	003b      	movs	r3, r7
 80027cc:	4657      	mov	r7, sl
 80027ce:	40ba      	lsls	r2, r7
 80027d0:	1e57      	subs	r7, r2, #1
 80027d2:	41ba      	sbcs	r2, r7
 80027d4:	4313      	orrs	r3, r2
 80027d6:	4662      	mov	r2, ip
 80027d8:	40f2      	lsrs	r2, r6
 80027da:	1a89      	subs	r1, r1, r2
 80027dc:	e79c      	b.n	8002718 <__aeabi_dsub+0x3b4>
 80027de:	4b83      	ldr	r3, [pc, #524]	; (80029ec <__aeabi_dsub+0x688>)
 80027e0:	429f      	cmp	r7, r3
 80027e2:	d05f      	beq.n	80028a4 <__aeabi_dsub+0x540>
 80027e4:	2580      	movs	r5, #128	; 0x80
 80027e6:	042d      	lsls	r5, r5, #16
 80027e8:	4273      	negs	r3, r6
 80027ea:	4329      	orrs	r1, r5
 80027ec:	e720      	b.n	8002630 <__aeabi_dsub+0x2cc>
 80027ee:	2e00      	cmp	r6, #0
 80027f0:	d10c      	bne.n	800280c <__aeabi_dsub+0x4a8>
 80027f2:	2f00      	cmp	r7, #0
 80027f4:	d100      	bne.n	80027f8 <__aeabi_dsub+0x494>
 80027f6:	e0d0      	b.n	800299a <__aeabi_dsub+0x636>
 80027f8:	465c      	mov	r4, fp
 80027fa:	4661      	mov	r1, ip
 80027fc:	4691      	mov	r9, r2
 80027fe:	4d7b      	ldr	r5, [pc, #492]	; (80029ec <__aeabi_dsub+0x688>)
 8002800:	e6cd      	b.n	800259e <__aeabi_dsub+0x23a>
 8002802:	4f7a      	ldr	r7, [pc, #488]	; (80029ec <__aeabi_dsub+0x688>)
 8002804:	42be      	cmp	r6, r7
 8002806:	d01c      	beq.n	8002842 <__aeabi_dsub+0x4de>
 8002808:	001e      	movs	r6, r3
 800280a:	e665      	b.n	80024d8 <__aeabi_dsub+0x174>
 800280c:	2f00      	cmp	r7, #0
 800280e:	d018      	beq.n	8002842 <__aeabi_dsub+0x4de>
 8002810:	08c0      	lsrs	r0, r0, #3
 8002812:	074e      	lsls	r6, r1, #29
 8002814:	4306      	orrs	r6, r0
 8002816:	2080      	movs	r0, #128	; 0x80
 8002818:	08c9      	lsrs	r1, r1, #3
 800281a:	0300      	lsls	r0, r0, #12
 800281c:	4201      	tst	r1, r0
 800281e:	d008      	beq.n	8002832 <__aeabi_dsub+0x4ce>
 8002820:	4663      	mov	r3, ip
 8002822:	08dc      	lsrs	r4, r3, #3
 8002824:	4204      	tst	r4, r0
 8002826:	d104      	bne.n	8002832 <__aeabi_dsub+0x4ce>
 8002828:	0021      	movs	r1, r4
 800282a:	46da      	mov	sl, fp
 800282c:	08d2      	lsrs	r2, r2, #3
 800282e:	075e      	lsls	r6, r3, #29
 8002830:	4316      	orrs	r6, r2
 8002832:	00f3      	lsls	r3, r6, #3
 8002834:	4699      	mov	r9, r3
 8002836:	2401      	movs	r4, #1
 8002838:	4653      	mov	r3, sl
 800283a:	00c9      	lsls	r1, r1, #3
 800283c:	0f72      	lsrs	r2, r6, #29
 800283e:	4311      	orrs	r1, r2
 8002840:	401c      	ands	r4, r3
 8002842:	4d6a      	ldr	r5, [pc, #424]	; (80029ec <__aeabi_dsub+0x688>)
 8002844:	e6ab      	b.n	800259e <__aeabi_dsub+0x23a>
 8002846:	001d      	movs	r5, r3
 8002848:	2200      	movs	r2, #0
 800284a:	2700      	movs	r7, #0
 800284c:	e6b4      	b.n	80025b8 <__aeabi_dsub+0x254>
 800284e:	2d00      	cmp	r5, #0
 8002850:	d159      	bne.n	8002906 <__aeabi_dsub+0x5a2>
 8002852:	000b      	movs	r3, r1
 8002854:	4303      	orrs	r3, r0
 8002856:	d100      	bne.n	800285a <__aeabi_dsub+0x4f6>
 8002858:	e6d6      	b.n	8002608 <__aeabi_dsub+0x2a4>
 800285a:	1c73      	adds	r3, r6, #1
 800285c:	d100      	bne.n	8002860 <__aeabi_dsub+0x4fc>
 800285e:	e0b2      	b.n	80029c6 <__aeabi_dsub+0x662>
 8002860:	4b62      	ldr	r3, [pc, #392]	; (80029ec <__aeabi_dsub+0x688>)
 8002862:	429f      	cmp	r7, r3
 8002864:	d01e      	beq.n	80028a4 <__aeabi_dsub+0x540>
 8002866:	43f3      	mvns	r3, r6
 8002868:	2b38      	cmp	r3, #56	; 0x38
 800286a:	dc6f      	bgt.n	800294c <__aeabi_dsub+0x5e8>
 800286c:	2b1f      	cmp	r3, #31
 800286e:	dd00      	ble.n	8002872 <__aeabi_dsub+0x50e>
 8002870:	e097      	b.n	80029a2 <__aeabi_dsub+0x63e>
 8002872:	2520      	movs	r5, #32
 8002874:	000e      	movs	r6, r1
 8002876:	1aed      	subs	r5, r5, r3
 8002878:	40ae      	lsls	r6, r5
 800287a:	46b0      	mov	r8, r6
 800287c:	0006      	movs	r6, r0
 800287e:	46aa      	mov	sl, r5
 8002880:	40de      	lsrs	r6, r3
 8002882:	4645      	mov	r5, r8
 8002884:	4335      	orrs	r5, r6
 8002886:	002e      	movs	r6, r5
 8002888:	4655      	mov	r5, sl
 800288a:	40a8      	lsls	r0, r5
 800288c:	40d9      	lsrs	r1, r3
 800288e:	1e45      	subs	r5, r0, #1
 8002890:	41a8      	sbcs	r0, r5
 8002892:	448c      	add	ip, r1
 8002894:	4306      	orrs	r6, r0
 8002896:	18b6      	adds	r6, r6, r2
 8002898:	4296      	cmp	r6, r2
 800289a:	4192      	sbcs	r2, r2
 800289c:	4251      	negs	r1, r2
 800289e:	4461      	add	r1, ip
 80028a0:	003d      	movs	r5, r7
 80028a2:	e625      	b.n	80024f0 <__aeabi_dsub+0x18c>
 80028a4:	003d      	movs	r5, r7
 80028a6:	4661      	mov	r1, ip
 80028a8:	4691      	mov	r9, r2
 80028aa:	e678      	b.n	800259e <__aeabi_dsub+0x23a>
 80028ac:	000b      	movs	r3, r1
 80028ae:	4303      	orrs	r3, r0
 80028b0:	2d00      	cmp	r5, #0
 80028b2:	d000      	beq.n	80028b6 <__aeabi_dsub+0x552>
 80028b4:	e655      	b.n	8002562 <__aeabi_dsub+0x1fe>
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f5      	beq.n	80028a6 <__aeabi_dsub+0x542>
 80028ba:	4663      	mov	r3, ip
 80028bc:	4313      	orrs	r3, r2
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x55e>
 80028c0:	e66d      	b.n	800259e <__aeabi_dsub+0x23a>
 80028c2:	1886      	adds	r6, r0, r2
 80028c4:	4286      	cmp	r6, r0
 80028c6:	4180      	sbcs	r0, r0
 80028c8:	4461      	add	r1, ip
 80028ca:	4240      	negs	r0, r0
 80028cc:	1809      	adds	r1, r1, r0
 80028ce:	2200      	movs	r2, #0
 80028d0:	020b      	lsls	r3, r1, #8
 80028d2:	d400      	bmi.n	80028d6 <__aeabi_dsub+0x572>
 80028d4:	e6d0      	b.n	8002678 <__aeabi_dsub+0x314>
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <__aeabi_dsub+0x68c>)
 80028d8:	3501      	adds	r5, #1
 80028da:	4019      	ands	r1, r3
 80028dc:	e5b2      	b.n	8002444 <__aeabi_dsub+0xe0>
 80028de:	46b1      	mov	r9, r6
 80028e0:	e65d      	b.n	800259e <__aeabi_dsub+0x23a>
 80028e2:	0033      	movs	r3, r6
 80028e4:	4667      	mov	r7, ip
 80028e6:	3b20      	subs	r3, #32
 80028e8:	40df      	lsrs	r7, r3
 80028ea:	003b      	movs	r3, r7
 80028ec:	2e20      	cmp	r6, #32
 80028ee:	d005      	beq.n	80028fc <__aeabi_dsub+0x598>
 80028f0:	2740      	movs	r7, #64	; 0x40
 80028f2:	1bbf      	subs	r7, r7, r6
 80028f4:	4666      	mov	r6, ip
 80028f6:	40be      	lsls	r6, r7
 80028f8:	4332      	orrs	r2, r6
 80028fa:	4690      	mov	r8, r2
 80028fc:	4646      	mov	r6, r8
 80028fe:	1e72      	subs	r2, r6, #1
 8002900:	4196      	sbcs	r6, r2
 8002902:	4333      	orrs	r3, r6
 8002904:	e5ef      	b.n	80024e6 <__aeabi_dsub+0x182>
 8002906:	4b39      	ldr	r3, [pc, #228]	; (80029ec <__aeabi_dsub+0x688>)
 8002908:	429f      	cmp	r7, r3
 800290a:	d0cb      	beq.n	80028a4 <__aeabi_dsub+0x540>
 800290c:	2580      	movs	r5, #128	; 0x80
 800290e:	042d      	lsls	r5, r5, #16
 8002910:	4273      	negs	r3, r6
 8002912:	4329      	orrs	r1, r5
 8002914:	e7a8      	b.n	8002868 <__aeabi_dsub+0x504>
 8002916:	4308      	orrs	r0, r1
 8002918:	1e41      	subs	r1, r0, #1
 800291a:	4188      	sbcs	r0, r1
 800291c:	e6a2      	b.n	8002664 <__aeabi_dsub+0x300>
 800291e:	2f00      	cmp	r7, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x5c0>
 8002922:	e63c      	b.n	800259e <__aeabi_dsub+0x23a>
 8002924:	4663      	mov	r3, ip
 8002926:	1a86      	subs	r6, r0, r2
 8002928:	1acf      	subs	r7, r1, r3
 800292a:	42b0      	cmp	r0, r6
 800292c:	419b      	sbcs	r3, r3
 800292e:	425b      	negs	r3, r3
 8002930:	1afb      	subs	r3, r7, r3
 8002932:	4698      	mov	r8, r3
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	d54e      	bpl.n	80029d6 <__aeabi_dsub+0x672>
 8002938:	1a16      	subs	r6, r2, r0
 800293a:	4663      	mov	r3, ip
 800293c:	42b2      	cmp	r2, r6
 800293e:	4192      	sbcs	r2, r2
 8002940:	1a59      	subs	r1, r3, r1
 8002942:	4252      	negs	r2, r2
 8002944:	1a89      	subs	r1, r1, r2
 8002946:	465c      	mov	r4, fp
 8002948:	2200      	movs	r2, #0
 800294a:	e57b      	b.n	8002444 <__aeabi_dsub+0xe0>
 800294c:	4301      	orrs	r1, r0
 800294e:	000e      	movs	r6, r1
 8002950:	1e71      	subs	r1, r6, #1
 8002952:	418e      	sbcs	r6, r1
 8002954:	e79f      	b.n	8002896 <__aeabi_dsub+0x532>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x60a>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	4648      	mov	r0, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e41      	subs	r1, r0, #1
 8002974:	4188      	sbcs	r0, r1
 8002976:	4318      	orrs	r0, r3
 8002978:	e674      	b.n	8002664 <__aeabi_dsub+0x300>
 800297a:	2200      	movs	r2, #0
 800297c:	2400      	movs	r4, #0
 800297e:	e617      	b.n	80025b0 <__aeabi_dsub+0x24c>
 8002980:	1a16      	subs	r6, r2, r0
 8002982:	4663      	mov	r3, ip
 8002984:	42b2      	cmp	r2, r6
 8002986:	4192      	sbcs	r2, r2
 8002988:	1a59      	subs	r1, r3, r1
 800298a:	4252      	negs	r2, r2
 800298c:	1a89      	subs	r1, r1, r2
 800298e:	003d      	movs	r5, r7
 8002990:	e525      	b.n	80023de <__aeabi_dsub+0x7a>
 8002992:	4661      	mov	r1, ip
 8002994:	4691      	mov	r9, r2
 8002996:	4d15      	ldr	r5, [pc, #84]	; (80029ec <__aeabi_dsub+0x688>)
 8002998:	e601      	b.n	800259e <__aeabi_dsub+0x23a>
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	2400      	movs	r4, #0
 800299e:	0312      	lsls	r2, r2, #12
 80029a0:	e679      	b.n	8002696 <__aeabi_dsub+0x332>
 80029a2:	001d      	movs	r5, r3
 80029a4:	000e      	movs	r6, r1
 80029a6:	3d20      	subs	r5, #32
 80029a8:	40ee      	lsrs	r6, r5
 80029aa:	46b0      	mov	r8, r6
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d004      	beq.n	80029ba <__aeabi_dsub+0x656>
 80029b0:	2540      	movs	r5, #64	; 0x40
 80029b2:	1aeb      	subs	r3, r5, r3
 80029b4:	4099      	lsls	r1, r3
 80029b6:	4308      	orrs	r0, r1
 80029b8:	4681      	mov	r9, r0
 80029ba:	464e      	mov	r6, r9
 80029bc:	4643      	mov	r3, r8
 80029be:	1e71      	subs	r1, r6, #1
 80029c0:	418e      	sbcs	r6, r1
 80029c2:	431e      	orrs	r6, r3
 80029c4:	e767      	b.n	8002896 <__aeabi_dsub+0x532>
 80029c6:	1886      	adds	r6, r0, r2
 80029c8:	4296      	cmp	r6, r2
 80029ca:	419b      	sbcs	r3, r3
 80029cc:	4461      	add	r1, ip
 80029ce:	425b      	negs	r3, r3
 80029d0:	18c9      	adds	r1, r1, r3
 80029d2:	003d      	movs	r5, r7
 80029d4:	e58c      	b.n	80024f0 <__aeabi_dsub+0x18c>
 80029d6:	4647      	mov	r7, r8
 80029d8:	4337      	orrs	r7, r6
 80029da:	d0ce      	beq.n	800297a <__aeabi_dsub+0x616>
 80029dc:	2207      	movs	r2, #7
 80029de:	4641      	mov	r1, r8
 80029e0:	4032      	ands	r2, r6
 80029e2:	e649      	b.n	8002678 <__aeabi_dsub+0x314>
 80029e4:	2700      	movs	r7, #0
 80029e6:	003a      	movs	r2, r7
 80029e8:	e5e6      	b.n	80025b8 <__aeabi_dsub+0x254>
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	000007ff 	.word	0x000007ff
 80029f0:	ff7fffff 	.word	0xff7fffff

080029f4 <__aeabi_d2iz>:
 80029f4:	b530      	push	{r4, r5, lr}
 80029f6:	4d14      	ldr	r5, [pc, #80]	; (8002a48 <__aeabi_d2iz+0x54>)
 80029f8:	030a      	lsls	r2, r1, #12
 80029fa:	004b      	lsls	r3, r1, #1
 80029fc:	0b12      	lsrs	r2, r2, #12
 80029fe:	0d5b      	lsrs	r3, r3, #21
 8002a00:	0fc9      	lsrs	r1, r1, #31
 8002a02:	2400      	movs	r4, #0
 8002a04:	42ab      	cmp	r3, r5
 8002a06:	dd11      	ble.n	8002a2c <__aeabi_d2iz+0x38>
 8002a08:	4c10      	ldr	r4, [pc, #64]	; (8002a4c <__aeabi_d2iz+0x58>)
 8002a0a:	42a3      	cmp	r3, r4
 8002a0c:	dc10      	bgt.n	8002a30 <__aeabi_d2iz+0x3c>
 8002a0e:	2480      	movs	r4, #128	; 0x80
 8002a10:	0364      	lsls	r4, r4, #13
 8002a12:	4322      	orrs	r2, r4
 8002a14:	4c0e      	ldr	r4, [pc, #56]	; (8002a50 <__aeabi_d2iz+0x5c>)
 8002a16:	1ae4      	subs	r4, r4, r3
 8002a18:	2c1f      	cmp	r4, #31
 8002a1a:	dd0c      	ble.n	8002a36 <__aeabi_d2iz+0x42>
 8002a1c:	480d      	ldr	r0, [pc, #52]	; (8002a54 <__aeabi_d2iz+0x60>)
 8002a1e:	1ac3      	subs	r3, r0, r3
 8002a20:	40da      	lsrs	r2, r3
 8002a22:	0013      	movs	r3, r2
 8002a24:	425c      	negs	r4, r3
 8002a26:	2900      	cmp	r1, #0
 8002a28:	d100      	bne.n	8002a2c <__aeabi_d2iz+0x38>
 8002a2a:	001c      	movs	r4, r3
 8002a2c:	0020      	movs	r0, r4
 8002a2e:	bd30      	pop	{r4, r5, pc}
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <__aeabi_d2iz+0x64>)
 8002a32:	18cc      	adds	r4, r1, r3
 8002a34:	e7fa      	b.n	8002a2c <__aeabi_d2iz+0x38>
 8002a36:	4d09      	ldr	r5, [pc, #36]	; (8002a5c <__aeabi_d2iz+0x68>)
 8002a38:	40e0      	lsrs	r0, r4
 8002a3a:	46ac      	mov	ip, r5
 8002a3c:	4463      	add	r3, ip
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	0013      	movs	r3, r2
 8002a42:	4303      	orrs	r3, r0
 8002a44:	e7ee      	b.n	8002a24 <__aeabi_d2iz+0x30>
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	000003fe 	.word	0x000003fe
 8002a4c:	0000041d 	.word	0x0000041d
 8002a50:	00000433 	.word	0x00000433
 8002a54:	00000413 	.word	0x00000413
 8002a58:	7fffffff 	.word	0x7fffffff
 8002a5c:	fffffbed 	.word	0xfffffbed

08002a60 <__aeabi_i2d>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	2800      	cmp	r0, #0
 8002a64:	d02d      	beq.n	8002ac2 <__aeabi_i2d+0x62>
 8002a66:	17c3      	asrs	r3, r0, #31
 8002a68:	18c5      	adds	r5, r0, r3
 8002a6a:	405d      	eors	r5, r3
 8002a6c:	0fc4      	lsrs	r4, r0, #31
 8002a6e:	0028      	movs	r0, r5
 8002a70:	f000 f938 	bl	8002ce4 <__clzsi2>
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <__aeabi_i2d+0x6c>)
 8002a76:	1a1b      	subs	r3, r3, r0
 8002a78:	055b      	lsls	r3, r3, #21
 8002a7a:	0d5b      	lsrs	r3, r3, #21
 8002a7c:	280a      	cmp	r0, #10
 8002a7e:	dd15      	ble.n	8002aac <__aeabi_i2d+0x4c>
 8002a80:	380b      	subs	r0, #11
 8002a82:	4085      	lsls	r5, r0
 8002a84:	2200      	movs	r2, #0
 8002a86:	032d      	lsls	r5, r5, #12
 8002a88:	0b2d      	lsrs	r5, r5, #12
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	032d      	lsls	r5, r5, #12
 8002a90:	0d0a      	lsrs	r2, r1, #20
 8002a92:	0b2d      	lsrs	r5, r5, #12
 8002a94:	0512      	lsls	r2, r2, #20
 8002a96:	432a      	orrs	r2, r5
 8002a98:	4d0d      	ldr	r5, [pc, #52]	; (8002ad0 <__aeabi_i2d+0x70>)
 8002a9a:	051b      	lsls	r3, r3, #20
 8002a9c:	402a      	ands	r2, r5
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	07e4      	lsls	r4, r4, #31
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	4323      	orrs	r3, r4
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	bd70      	pop	{r4, r5, r6, pc}
 8002aac:	0002      	movs	r2, r0
 8002aae:	0029      	movs	r1, r5
 8002ab0:	3215      	adds	r2, #21
 8002ab2:	4091      	lsls	r1, r2
 8002ab4:	000a      	movs	r2, r1
 8002ab6:	210b      	movs	r1, #11
 8002ab8:	1a08      	subs	r0, r1, r0
 8002aba:	40c5      	lsrs	r5, r0
 8002abc:	032d      	lsls	r5, r5, #12
 8002abe:	0b2d      	lsrs	r5, r5, #12
 8002ac0:	e7e3      	b.n	8002a8a <__aeabi_i2d+0x2a>
 8002ac2:	2400      	movs	r4, #0
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	2500      	movs	r5, #0
 8002ac8:	2200      	movs	r2, #0
 8002aca:	e7de      	b.n	8002a8a <__aeabi_i2d+0x2a>
 8002acc:	0000041e 	.word	0x0000041e
 8002ad0:	800fffff 	.word	0x800fffff

08002ad4 <__aeabi_ui2d>:
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	1e04      	subs	r4, r0, #0
 8002ad8:	d025      	beq.n	8002b26 <__aeabi_ui2d+0x52>
 8002ada:	f000 f903 	bl	8002ce4 <__clzsi2>
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <__aeabi_ui2d+0x5c>)
 8002ae0:	1a1b      	subs	r3, r3, r0
 8002ae2:	055b      	lsls	r3, r3, #21
 8002ae4:	0d5b      	lsrs	r3, r3, #21
 8002ae6:	280a      	cmp	r0, #10
 8002ae8:	dd12      	ble.n	8002b10 <__aeabi_ui2d+0x3c>
 8002aea:	380b      	subs	r0, #11
 8002aec:	4084      	lsls	r4, r0
 8002aee:	2200      	movs	r2, #0
 8002af0:	0324      	lsls	r4, r4, #12
 8002af2:	0b24      	lsrs	r4, r4, #12
 8002af4:	2100      	movs	r1, #0
 8002af6:	0010      	movs	r0, r2
 8002af8:	0324      	lsls	r4, r4, #12
 8002afa:	0d0a      	lsrs	r2, r1, #20
 8002afc:	0b24      	lsrs	r4, r4, #12
 8002afe:	0512      	lsls	r2, r2, #20
 8002b00:	4322      	orrs	r2, r4
 8002b02:	4c0c      	ldr	r4, [pc, #48]	; (8002b34 <__aeabi_ui2d+0x60>)
 8002b04:	051b      	lsls	r3, r3, #20
 8002b06:	4022      	ands	r2, r4
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	0859      	lsrs	r1, r3, #1
 8002b0e:	bd10      	pop	{r4, pc}
 8002b10:	0002      	movs	r2, r0
 8002b12:	0021      	movs	r1, r4
 8002b14:	3215      	adds	r2, #21
 8002b16:	4091      	lsls	r1, r2
 8002b18:	000a      	movs	r2, r1
 8002b1a:	210b      	movs	r1, #11
 8002b1c:	1a08      	subs	r0, r1, r0
 8002b1e:	40c4      	lsrs	r4, r0
 8002b20:	0324      	lsls	r4, r4, #12
 8002b22:	0b24      	lsrs	r4, r4, #12
 8002b24:	e7e6      	b.n	8002af4 <__aeabi_ui2d+0x20>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2400      	movs	r4, #0
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	e7e2      	b.n	8002af4 <__aeabi_ui2d+0x20>
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	0000041e 	.word	0x0000041e
 8002b34:	800fffff 	.word	0x800fffff

08002b38 <__aeabi_f2d>:
 8002b38:	0041      	lsls	r1, r0, #1
 8002b3a:	0e09      	lsrs	r1, r1, #24
 8002b3c:	1c4b      	adds	r3, r1, #1
 8002b3e:	b570      	push	{r4, r5, r6, lr}
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	0246      	lsls	r6, r0, #9
 8002b44:	0a75      	lsrs	r5, r6, #9
 8002b46:	0fc4      	lsrs	r4, r0, #31
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	dd14      	ble.n	8002b76 <__aeabi_f2d+0x3e>
 8002b4c:	23e0      	movs	r3, #224	; 0xe0
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	076d      	lsls	r5, r5, #29
 8002b52:	0b36      	lsrs	r6, r6, #12
 8002b54:	18cb      	adds	r3, r1, r3
 8002b56:	2100      	movs	r1, #0
 8002b58:	0d0a      	lsrs	r2, r1, #20
 8002b5a:	0028      	movs	r0, r5
 8002b5c:	0512      	lsls	r2, r2, #20
 8002b5e:	4d1c      	ldr	r5, [pc, #112]	; (8002bd0 <__aeabi_f2d+0x98>)
 8002b60:	4332      	orrs	r2, r6
 8002b62:	055b      	lsls	r3, r3, #21
 8002b64:	402a      	ands	r2, r5
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	07e4      	lsls	r4, r4, #31
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	4323      	orrs	r3, r4
 8002b72:	0019      	movs	r1, r3
 8002b74:	bd70      	pop	{r4, r5, r6, pc}
 8002b76:	2900      	cmp	r1, #0
 8002b78:	d114      	bne.n	8002ba4 <__aeabi_f2d+0x6c>
 8002b7a:	2d00      	cmp	r5, #0
 8002b7c:	d01e      	beq.n	8002bbc <__aeabi_f2d+0x84>
 8002b7e:	0028      	movs	r0, r5
 8002b80:	f000 f8b0 	bl	8002ce4 <__clzsi2>
 8002b84:	280a      	cmp	r0, #10
 8002b86:	dc1c      	bgt.n	8002bc2 <__aeabi_f2d+0x8a>
 8002b88:	230b      	movs	r3, #11
 8002b8a:	002a      	movs	r2, r5
 8002b8c:	1a1b      	subs	r3, r3, r0
 8002b8e:	40da      	lsrs	r2, r3
 8002b90:	0003      	movs	r3, r0
 8002b92:	3315      	adds	r3, #21
 8002b94:	409d      	lsls	r5, r3
 8002b96:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <__aeabi_f2d+0x9c>)
 8002b98:	0312      	lsls	r2, r2, #12
 8002b9a:	1a1b      	subs	r3, r3, r0
 8002b9c:	055b      	lsls	r3, r3, #21
 8002b9e:	0b16      	lsrs	r6, r2, #12
 8002ba0:	0d5b      	lsrs	r3, r3, #21
 8002ba2:	e7d8      	b.n	8002b56 <__aeabi_f2d+0x1e>
 8002ba4:	2d00      	cmp	r5, #0
 8002ba6:	d006      	beq.n	8002bb6 <__aeabi_f2d+0x7e>
 8002ba8:	0b32      	lsrs	r2, r6, #12
 8002baa:	2680      	movs	r6, #128	; 0x80
 8002bac:	0336      	lsls	r6, r6, #12
 8002bae:	076d      	lsls	r5, r5, #29
 8002bb0:	4316      	orrs	r6, r2
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <__aeabi_f2d+0xa0>)
 8002bb4:	e7cf      	b.n	8002b56 <__aeabi_f2d+0x1e>
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <__aeabi_f2d+0xa0>)
 8002bb8:	2600      	movs	r6, #0
 8002bba:	e7cc      	b.n	8002b56 <__aeabi_f2d+0x1e>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2600      	movs	r6, #0
 8002bc0:	e7c9      	b.n	8002b56 <__aeabi_f2d+0x1e>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	002a      	movs	r2, r5
 8002bc6:	3b0b      	subs	r3, #11
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	2500      	movs	r5, #0
 8002bcc:	e7e3      	b.n	8002b96 <__aeabi_f2d+0x5e>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	800fffff 	.word	0x800fffff
 8002bd4:	00000389 	.word	0x00000389
 8002bd8:	000007ff 	.word	0x000007ff

08002bdc <__aeabi_d2f>:
 8002bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bde:	004c      	lsls	r4, r1, #1
 8002be0:	0d64      	lsrs	r4, r4, #21
 8002be2:	030b      	lsls	r3, r1, #12
 8002be4:	1c62      	adds	r2, r4, #1
 8002be6:	0a5b      	lsrs	r3, r3, #9
 8002be8:	0f46      	lsrs	r6, r0, #29
 8002bea:	0552      	lsls	r2, r2, #21
 8002bec:	0fc9      	lsrs	r1, r1, #31
 8002bee:	431e      	orrs	r6, r3
 8002bf0:	00c5      	lsls	r5, r0, #3
 8002bf2:	0d52      	lsrs	r2, r2, #21
 8002bf4:	2a01      	cmp	r2, #1
 8002bf6:	dd29      	ble.n	8002c4c <__aeabi_d2f+0x70>
 8002bf8:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <__aeabi_d2f+0xfc>)
 8002bfa:	18e7      	adds	r7, r4, r3
 8002bfc:	2ffe      	cmp	r7, #254	; 0xfe
 8002bfe:	dc1c      	bgt.n	8002c3a <__aeabi_d2f+0x5e>
 8002c00:	2f00      	cmp	r7, #0
 8002c02:	dd3b      	ble.n	8002c7c <__aeabi_d2f+0xa0>
 8002c04:	0180      	lsls	r0, r0, #6
 8002c06:	1e43      	subs	r3, r0, #1
 8002c08:	4198      	sbcs	r0, r3
 8002c0a:	2207      	movs	r2, #7
 8002c0c:	00f3      	lsls	r3, r6, #3
 8002c0e:	0f6d      	lsrs	r5, r5, #29
 8002c10:	4303      	orrs	r3, r0
 8002c12:	432b      	orrs	r3, r5
 8002c14:	401a      	ands	r2, r3
 8002c16:	2a00      	cmp	r2, #0
 8002c18:	d004      	beq.n	8002c24 <__aeabi_d2f+0x48>
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	401a      	ands	r2, r3
 8002c1e:	2a04      	cmp	r2, #4
 8002c20:	d000      	beq.n	8002c24 <__aeabi_d2f+0x48>
 8002c22:	3304      	adds	r3, #4
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	04d2      	lsls	r2, r2, #19
 8002c28:	401a      	ands	r2, r3
 8002c2a:	d024      	beq.n	8002c76 <__aeabi_d2f+0x9a>
 8002c2c:	3701      	adds	r7, #1
 8002c2e:	b2fa      	uxtb	r2, r7
 8002c30:	2fff      	cmp	r7, #255	; 0xff
 8002c32:	d002      	beq.n	8002c3a <__aeabi_d2f+0x5e>
 8002c34:	019b      	lsls	r3, r3, #6
 8002c36:	0a58      	lsrs	r0, r3, #9
 8002c38:	e001      	b.n	8002c3e <__aeabi_d2f+0x62>
 8002c3a:	22ff      	movs	r2, #255	; 0xff
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	0240      	lsls	r0, r0, #9
 8002c40:	05d2      	lsls	r2, r2, #23
 8002c42:	0a40      	lsrs	r0, r0, #9
 8002c44:	07c9      	lsls	r1, r1, #31
 8002c46:	4310      	orrs	r0, r2
 8002c48:	4308      	orrs	r0, r1
 8002c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c4c:	4335      	orrs	r5, r6
 8002c4e:	2c00      	cmp	r4, #0
 8002c50:	d104      	bne.n	8002c5c <__aeabi_d2f+0x80>
 8002c52:	2d00      	cmp	r5, #0
 8002c54:	d10a      	bne.n	8002c6c <__aeabi_d2f+0x90>
 8002c56:	2200      	movs	r2, #0
 8002c58:	2000      	movs	r0, #0
 8002c5a:	e7f0      	b.n	8002c3e <__aeabi_d2f+0x62>
 8002c5c:	2d00      	cmp	r5, #0
 8002c5e:	d0ec      	beq.n	8002c3a <__aeabi_d2f+0x5e>
 8002c60:	2080      	movs	r0, #128	; 0x80
 8002c62:	03c0      	lsls	r0, r0, #15
 8002c64:	4330      	orrs	r0, r6
 8002c66:	22ff      	movs	r2, #255	; 0xff
 8002c68:	e7e9      	b.n	8002c3e <__aeabi_d2f+0x62>
 8002c6a:	2400      	movs	r4, #0
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	025b      	lsls	r3, r3, #9
 8002c70:	0a58      	lsrs	r0, r3, #9
 8002c72:	b2e2      	uxtb	r2, r4
 8002c74:	e7e3      	b.n	8002c3e <__aeabi_d2f+0x62>
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	003c      	movs	r4, r7
 8002c7a:	e7f8      	b.n	8002c6e <__aeabi_d2f+0x92>
 8002c7c:	003b      	movs	r3, r7
 8002c7e:	3317      	adds	r3, #23
 8002c80:	dbf3      	blt.n	8002c6a <__aeabi_d2f+0x8e>
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	4333      	orrs	r3, r6
 8002c88:	261e      	movs	r6, #30
 8002c8a:	1bf6      	subs	r6, r6, r7
 8002c8c:	2e1f      	cmp	r6, #31
 8002c8e:	dd14      	ble.n	8002cba <__aeabi_d2f+0xde>
 8002c90:	2202      	movs	r2, #2
 8002c92:	4252      	negs	r2, r2
 8002c94:	1bd7      	subs	r7, r2, r7
 8002c96:	001a      	movs	r2, r3
 8002c98:	40fa      	lsrs	r2, r7
 8002c9a:	0017      	movs	r7, r2
 8002c9c:	2e20      	cmp	r6, #32
 8002c9e:	d004      	beq.n	8002caa <__aeabi_d2f+0xce>
 8002ca0:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <__aeabi_d2f+0x100>)
 8002ca2:	4694      	mov	ip, r2
 8002ca4:	4464      	add	r4, ip
 8002ca6:	40a3      	lsls	r3, r4
 8002ca8:	431d      	orrs	r5, r3
 8002caa:	002b      	movs	r3, r5
 8002cac:	1e5d      	subs	r5, r3, #1
 8002cae:	41ab      	sbcs	r3, r5
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	433b      	orrs	r3, r7
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	2700      	movs	r7, #0
 8002cb8:	e7ad      	b.n	8002c16 <__aeabi_d2f+0x3a>
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <__aeabi_d2f+0x104>)
 8002cbc:	0028      	movs	r0, r5
 8002cbe:	18a2      	adds	r2, r4, r2
 8002cc0:	4095      	lsls	r5, r2
 8002cc2:	4093      	lsls	r3, r2
 8002cc4:	1e6c      	subs	r4, r5, #1
 8002cc6:	41a5      	sbcs	r5, r4
 8002cc8:	40f0      	lsrs	r0, r6
 8002cca:	2207      	movs	r2, #7
 8002ccc:	432b      	orrs	r3, r5
 8002cce:	4303      	orrs	r3, r0
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	2700      	movs	r7, #0
 8002cd4:	e79f      	b.n	8002c16 <__aeabi_d2f+0x3a>
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	fffffc80 	.word	0xfffffc80
 8002cdc:	fffffca2 	.word	0xfffffca2
 8002ce0:	fffffc82 	.word	0xfffffc82

08002ce4 <__clzsi2>:
 8002ce4:	211c      	movs	r1, #28
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0xe>
 8002cee:	0c00      	lsrs	r0, r0, #16
 8002cf0:	3910      	subs	r1, #16
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	4298      	cmp	r0, r3
 8002cf6:	d301      	bcc.n	8002cfc <__clzsi2+0x18>
 8002cf8:	0a00      	lsrs	r0, r0, #8
 8002cfa:	3908      	subs	r1, #8
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	4298      	cmp	r0, r3
 8002d00:	d301      	bcc.n	8002d06 <__clzsi2+0x22>
 8002d02:	0900      	lsrs	r0, r0, #4
 8002d04:	3904      	subs	r1, #4
 8002d06:	a202      	add	r2, pc, #8	; (adr r2, 8002d10 <__clzsi2+0x2c>)
 8002d08:	5c10      	ldrb	r0, [r2, r0]
 8002d0a:	1840      	adds	r0, r0, r1
 8002d0c:	4770      	bx	lr
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	02020304 	.word	0x02020304
 8002d14:	01010101 	.word	0x01010101
	...

08002d20 <NVIC_SystemReset>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d20:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <NVIC_SystemReset+0x14>)
 8002d26:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <NVIC_SystemReset+0x18>)
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	e7fd      	b.n	8002d2e <NVIC_SystemReset+0xe>
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	e000ed00 	.word	0xe000ed00
 8002d38:	05fa0004 	.word	0x05fa0004

08002d3c <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
return 0;
}
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	4770      	bx	lr

08002d40 <resetCommand>:
#endif

/*-----------------------------------------------------------*/

static portBASE_TYPE resetCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8002d40:	b510      	push	{r4, lr}
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8002d42:	2800      	cmp	r0, #0
 8002d44:	d101      	bne.n	8002d4a <resetCommand+0xa>
 8002d46:	b672      	cpsid	i
 8002d48:	e7fe      	b.n	8002d48 <resetCommand+0x8>

	NVIC_SystemReset();	
 8002d4a:	f7ff ffe9 	bl	8002d20 <NVIC_SystemReset>
	...

08002d50 <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	0004      	movs	r4, r0
 8002d56:	0015      	movs	r5, r2
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 8002d5c:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d101      	bne.n	8002d66 <setBaudrateCommand+0x16>
 8002d62:	b672      	cpsid	i
 8002d64:	e7fe      	b.n	8002d64 <setBaudrateCommand+0x14>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8002d66:	aa01      	add	r2, sp, #4
 8002d68:	2101      	movs	r1, #1
 8002d6a:	0028      	movs	r0, r5
 8002d6c:	f00b fc0a 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8002d70:	2300      	movs	r3, #0
 8002d72:	56c3      	ldrsb	r3, [r0, r3]
 8002d74:	2b70      	cmp	r3, #112	; 0x70
 8002d76:	d00c      	beq.n	8002d92 <setBaudrateCommand+0x42>
	else
	{
		result = BOS_ERR_WrongValue;
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8002d78:	466a      	mov	r2, sp
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	0028      	movs	r0, r5
 8002d7e:	f00b fc01 	bl	800e584 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8002d82:	f00f f916 	bl	8011fb2 <atol>

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8002d86:	2213      	movs	r2, #19
 8002d88:	490f      	ldr	r1, [pc, #60]	; (8002dc8 <setBaudrateCommand+0x78>)
 8002d8a:	0020      	movs	r0, r4
 8002d8c:	f00f f983 	bl	8012096 <memcpy>
		UpdateBaudrate(port, baudrate);
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8002d90:	e016      	b.n	8002dc0 <setBaudrateCommand+0x70>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8002d92:	3001      	adds	r0, #1
 8002d94:	f00f f90d 	bl	8011fb2 <atol>
 8002d98:	0006      	movs	r6, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8002d9a:	466a      	mov	r2, sp
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	0028      	movs	r0, r5
 8002da0:	f00b fbf0 	bl	800e584 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8002da4:	f00f f905 	bl	8011fb2 <atol>
 8002da8:	0005      	movs	r5, r0
		UpdateBaudrate(port, baudrate);
 8002daa:	b2f0      	uxtb	r0, r6
 8002dac:	0029      	movs	r1, r5
 8002dae:	f00b fa67 	bl	800e280 <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 8002db2:	23ff      	movs	r3, #255	; 0xff
 8002db4:	4033      	ands	r3, r6
 8002db6:	002a      	movs	r2, r5
 8002db8:	4904      	ldr	r1, [pc, #16]	; (8002dcc <setBaudrateCommand+0x7c>)
 8002dba:	0020      	movs	r0, r4
 8002dbc:	f00f fa72 	bl	80122a4 <siprintf>
}
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	b002      	add	sp, #8
 8002dc4:	bd70      	pop	{r4, r5, r6, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	08017538 	.word	0x08017538
 8002dcc:	08017510 	.word	0x08017510

08002dd0 <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8002dd0:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d101      	bne.n	8002dda <flashsizeCommand+0xa>
 8002dd6:	b672      	cpsid	i
 8002dd8:	e7fe      	b.n	8002dd8 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 8002dda:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <flashsizeCommand+0x18>)
 8002ddc:	881a      	ldrh	r2, [r3, #0]
 8002dde:	4903      	ldr	r1, [pc, #12]	; (8002dec <flashsizeCommand+0x1c>)
 8002de0:	f00f fa60 	bl	80122a4 <siprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8002de4:	2000      	movs	r0, #0
 8002de6:	bd10      	pop	{r4, pc}
 8002de8:	1ffff7cc 	.word	0x1ffff7cc
 8002dec:	08016cb4 	.word	0x08016cb4

08002df0 <pingCommand>:
{
 8002df0:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d01e      	beq.n	8002e34 <pingCommand+0x44>
	if (!moduleAlias[myID][0])
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <pingCommand+0x5c>)
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	0093      	lsls	r3, r2, #2
 8002dfc:	189b      	adds	r3, r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4913      	ldr	r1, [pc, #76]	; (8002e50 <pingCommand+0x60>)
 8002e02:	5c5b      	ldrb	r3, [r3, r1]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d117      	bne.n	8002e38 <pingCommand+0x48>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 8002e08:	4912      	ldr	r1, [pc, #72]	; (8002e54 <pingCommand+0x64>)
 8002e0a:	f00f fa4b 	bl	80122a4 <siprintf>
	RTOS_IND_blink(200);	
 8002e0e:	2580      	movs	r5, #128	; 0x80
 8002e10:	012d      	lsls	r5, r5, #4
 8002e12:	2490      	movs	r4, #144	; 0x90
 8002e14:	05e4      	lsls	r4, r4, #23
 8002e16:	2201      	movs	r2, #1
 8002e18:	0029      	movs	r1, r5
 8002e1a:	0020      	movs	r0, r4
 8002e1c:	f00c ffac 	bl	800fd78 <HAL_GPIO_WritePin>
 8002e20:	20c8      	movs	r0, #200	; 0xc8
 8002e22:	f00b fa96 	bl	800e352 <osDelay>
 8002e26:	2200      	movs	r2, #0
 8002e28:	0029      	movs	r1, r5
 8002e2a:	0020      	movs	r0, r4
 8002e2c:	f00c ffa4 	bl	800fd78 <HAL_GPIO_WritePin>
}
 8002e30:	2000      	movs	r0, #0
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8002e34:	b672      	cpsid	i
 8002e36:	e7fe      	b.n	8002e36 <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 8002e38:	0093      	lsls	r3, r2, #2
 8002e3a:	189b      	adds	r3, r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4904      	ldr	r1, [pc, #16]	; (8002e50 <pingCommand+0x60>)
 8002e40:	185b      	adds	r3, r3, r1
 8002e42:	4905      	ldr	r1, [pc, #20]	; (8002e58 <pingCommand+0x68>)
 8002e44:	f00f fa2e 	bl	80122a4 <siprintf>
 8002e48:	e7e1      	b.n	8002e0e <pingCommand+0x1e>
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	20000b90 	.word	0x20000b90
 8002e50:	20000a8c 	.word	0x20000a8c
 8002e54:	08017190 	.word	0x08017190
 8002e58:	080171a4 	.word	0x080171a4

08002e5c <StreamTimerCallback>:
{
 8002e5c:	b510      	push	{r4, lr}
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 8002e5e:	f012 ffcb 	bl	8015df8 <pvTimerGetTimerID>
	StopStreamDMA(tid);
 8002e62:	b2c4      	uxtb	r4, r0
 8002e64:	0020      	movs	r0, r4
 8002e66:	f007 fb33 	bl	800a4d0 <StopStreamDMA>
	SwitchStreamDMAToMsg(tid);
 8002e6a:	0020      	movs	r0, r4
 8002e6c:	f007 fb5e 	bl	800a52c <SwitchStreamDMAToMsg>
}
 8002e70:	bd10      	pop	{r4, pc}
	...

08002e74 <snipCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE snipCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8002e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e76:	46d6      	mov	lr, sl
 8002e78:	464f      	mov	r7, r9
 8002e7a:	4646      	mov	r6, r8
 8002e7c:	b5c0      	push	{r6, r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	0004      	movs	r4, r0
	static const int8_t *pcMessageSnipButtonEventPressed = ( int8_t * ) "%sif b%d.pressed for %d";
	static const int8_t *pcMessageSnipButtonEventReleased = ( int8_t * ) "%sif b%d.released for %d";	
	static const int8_t *pcMessageSnipModuleParamConst = ( int8_t * ) "%sif %s %s %.1f";
	static const int8_t *pcMessageCmds = ( int8_t * ) "%s\n\r\t%s";
	static const int8_t *pcMessageEnd = ( int8_t * ) "\n\rend if\n\n\r";
	char status[2][7] = {"Paused", "Active"};
 8002e82:	aa06      	add	r2, sp, #24
 8002e84:	4b7a      	ldr	r3, [pc, #488]	; (8003070 <snipCommand+0x1fc>)
 8002e86:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002e88:	c223      	stmia	r2!, {r0, r1, r5}
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	8013      	strh	r3, [r2, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8002e8e:	2c00      	cmp	r4, #0
 8002e90:	d101      	bne.n	8002e96 <snipCommand+0x22>
 8002e92:	b672      	cpsid	i
 8002e94:	e7fe      	b.n	8002e94 <snipCommand+0x20>
	
	/* Respond to the command */
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 8002e96:	4b77      	ldr	r3, [pc, #476]	; (8003074 <snipCommand+0x200>)
 8002e98:	7818      	ldrb	r0, [r3, #0]
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	425b      	negs	r3, r3
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	3333      	adds	r3, #51	; 0x33
 8002ea2:	2237      	movs	r2, #55	; 0x37
 8002ea4:	4974      	ldr	r1, [pc, #464]	; (8003078 <snipCommand+0x204>)
 8002ea6:	f00b f97d 	bl	800e1a4 <writePxMutex>
	
	/* Go through all stored Snippets */
	uint8_t count = 1;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8002eaa:	4b74      	ldr	r3, [pc, #464]	; (800307c <snipCommand+0x208>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d100      	bne.n	8002eb4 <snipCommand+0x40>
 8002eb2:	e0d0      	b.n	8003056 <snipCommand+0x1e2>
 8002eb4:	2500      	movs	r5, #0
  {
		if (snippets[s].cond.conditionType)
 8002eb6:	4b72      	ldr	r3, [pc, #456]	; (8003080 <snipCommand+0x20c>)
 8002eb8:	4698      	mov	r8, r3
 8002eba:	e0ba      	b.n	8003032 <snipCommand+0x1be>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 8002ebc:	4b70      	ldr	r3, [pc, #448]	; (8003080 <snipCommand+0x20c>)
 8002ebe:	4699      	mov	r9, r3
 8002ec0:	00ab      	lsls	r3, r5, #2
 8002ec2:	469a      	mov	sl, r3
 8002ec4:	195b      	adds	r3, r3, r5
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	444b      	add	r3, r9
 8002eca:	7c1a      	ldrb	r2, [r3, #16]
 8002ecc:	00d3      	lsls	r3, r2, #3
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	aa06      	add	r2, sp, #24
 8002ed2:	4694      	mov	ip, r2
 8002ed4:	4463      	add	r3, ip
 8002ed6:	003a      	movs	r2, r7
 8002ed8:	496a      	ldr	r1, [pc, #424]	; (8003084 <snipCommand+0x210>)
 8002eda:	0020      	movs	r0, r4
 8002edc:	f00f f9e2 	bl	80122a4 <siprintf>
		
		// Parse conditions
		switch (snippets[s].cond.conditionType)
 8002ee0:	4653      	mov	r3, sl
 8002ee2:	195b      	adds	r3, r3, r5
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	464a      	mov	r2, r9
 8002ee8:	5c9b      	ldrb	r3, [r3, r2]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d02d      	beq.n	8002f4a <snipCommand+0xd6>
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d000      	beq.n	8002ef4 <snipCommand+0x80>
 8002ef2:	e0a9      	b.n	8003048 <snipCommand+0x1d4>
				
				break;
				
			case SNIP_COND_MODULE_PARAM_CONST:
				// Get the module parameter, math operator and constant values. 
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8002ef4:	00a9      	lsls	r1, r5, #2
 8002ef6:	1949      	adds	r1, r1, r5
 8002ef8:	0089      	lsls	r1, r1, #2
 8002efa:	3106      	adds	r1, #6
 8002efc:	4b60      	ldr	r3, [pc, #384]	; (8003080 <snipCommand+0x20c>)
 8002efe:	4699      	mov	r9, r3
 8002f00:	4449      	add	r1, r9
 8002f02:	2204      	movs	r2, #4
 8002f04:	a805      	add	r0, sp, #20
 8002f06:	f00f f8c6 	bl	8012096 <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 8002f0a:	00ad      	lsls	r5, r5, #2
 8002f0c:	19ad      	adds	r5, r5, r6
 8002f0e:	00ad      	lsls	r5, r5, #2
 8002f10:	444d      	add	r5, r9
 8002f12:	78ea      	ldrb	r2, [r5, #3]
 8002f14:	3a01      	subs	r2, #1
 8002f16:	0053      	lsls	r3, r2, #1
 8002f18:	189b      	adds	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4a5a      	ldr	r2, [pc, #360]	; (8003088 <snipCommand+0x214>)
 8002f1e:	18d3      	adds	r3, r2, r3
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	4699      	mov	r9, r3
 8002f24:	9805      	ldr	r0, [sp, #20]
 8002f26:	f7ff fe07 	bl	8002b38 <__aeabi_f2d>
 8002f2a:	9002      	str	r0, [sp, #8]
 8002f2c:	9103      	str	r1, [sp, #12]
 8002f2e:	786b      	ldrb	r3, [r5, #1]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	005a      	lsls	r2, r3, #1
 8002f34:	18d2      	adds	r2, r2, r3
 8002f36:	4b55      	ldr	r3, [pc, #340]	; (800308c <snipCommand+0x218>)
 8002f38:	189b      	adds	r3, r3, r2
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	464b      	mov	r3, r9
 8002f3e:	0022      	movs	r2, r4
 8002f40:	4953      	ldr	r1, [pc, #332]	; (8003090 <snipCommand+0x21c>)
 8002f42:	0020      	movs	r0, r4
 8002f44:	f00f f9ae 	bl	80122a4 <siprintf>
				break;
 8002f48:	e07e      	b.n	8003048 <snipCommand+0x1d4>
				switch (snippets[s].cond.buffer1[1])
 8002f4a:	00ab      	lsls	r3, r5, #2
 8002f4c:	195b      	adds	r3, r3, r5
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4a4b      	ldr	r2, [pc, #300]	; (8003080 <snipCommand+0x20c>)
 8002f52:	18d3      	adds	r3, r2, r3
 8002f54:	78db      	ldrb	r3, [r3, #3]
 8002f56:	3b05      	subs	r3, #5
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	2a09      	cmp	r2, #9
 8002f5c:	d874      	bhi.n	8003048 <snipCommand+0x1d4>
 8002f5e:	0093      	lsls	r3, r2, #2
 8002f60:	4a4c      	ldr	r2, [pc, #304]	; (8003094 <snipCommand+0x220>)
 8002f62:	58d3      	ldr	r3, [r2, r3]
 8002f64:	469f      	mov	pc, r3
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8002f66:	2314      	movs	r3, #20
 8002f68:	436b      	muls	r3, r5
 8002f6a:	4a45      	ldr	r2, [pc, #276]	; (8003080 <snipCommand+0x20c>)
 8002f6c:	18d2      	adds	r2, r2, r3
 8002f6e:	7893      	ldrb	r3, [r2, #2]
 8002f70:	68d2      	ldr	r2, [r2, #12]
 8002f72:	9200      	str	r2, [sp, #0]
 8002f74:	0022      	movs	r2, r4
 8002f76:	4948      	ldr	r1, [pc, #288]	; (8003098 <snipCommand+0x224>)
 8002f78:	0020      	movs	r0, r4
 8002f7a:	f00f f993 	bl	80122a4 <siprintf>
        		break;
 8002f7e:	e063      	b.n	8003048 <snipCommand+0x1d4>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8002f80:	2314      	movs	r3, #20
 8002f82:	436b      	muls	r3, r5
 8002f84:	4a3e      	ldr	r2, [pc, #248]	; (8003080 <snipCommand+0x20c>)
 8002f86:	18d2      	adds	r2, r2, r3
 8002f88:	7893      	ldrb	r3, [r2, #2]
 8002f8a:	68d2      	ldr	r2, [r2, #12]
 8002f8c:	9200      	str	r2, [sp, #0]
 8002f8e:	0022      	movs	r2, r4
 8002f90:	4942      	ldr	r1, [pc, #264]	; (800309c <snipCommand+0x228>)
 8002f92:	0020      	movs	r0, r4
 8002f94:	f00f f986 	bl	80122a4 <siprintf>
        		break;
 8002f98:	e056      	b.n	8003048 <snipCommand+0x1d4>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8002f9a:	2314      	movs	r3, #20
 8002f9c:	436b      	muls	r3, r5
 8002f9e:	4a38      	ldr	r2, [pc, #224]	; (8003080 <snipCommand+0x20c>)
 8002fa0:	18d2      	adds	r2, r2, r3
 8002fa2:	7893      	ldrb	r3, [r2, #2]
 8002fa4:	68d1      	ldr	r1, [r2, #12]
 8002fa6:	9101      	str	r1, [sp, #4]
 8002fa8:	7912      	ldrb	r2, [r2, #4]
 8002faa:	9200      	str	r2, [sp, #0]
 8002fac:	0022      	movs	r2, r4
 8002fae:	493c      	ldr	r1, [pc, #240]	; (80030a0 <snipCommand+0x22c>)
 8002fb0:	0020      	movs	r0, r4
 8002fb2:	f00f f977 	bl	80122a4 <siprintf>
        		break;
 8002fb6:	e047      	b.n	8003048 <snipCommand+0x1d4>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8002fb8:	2314      	movs	r3, #20
 8002fba:	436b      	muls	r3, r5
 8002fbc:	4a30      	ldr	r2, [pc, #192]	; (8003080 <snipCommand+0x20c>)
 8002fbe:	18d2      	adds	r2, r2, r3
 8002fc0:	7893      	ldrb	r3, [r2, #2]
 8002fc2:	68d1      	ldr	r1, [r2, #12]
 8002fc4:	9101      	str	r1, [sp, #4]
 8002fc6:	7912      	ldrb	r2, [r2, #4]
 8002fc8:	9200      	str	r2, [sp, #0]
 8002fca:	0022      	movs	r2, r4
 8002fcc:	4935      	ldr	r1, [pc, #212]	; (80030a4 <snipCommand+0x230>)
 8002fce:	0020      	movs	r0, r4
 8002fd0:	f00f f968 	bl	80122a4 <siprintf>
        		break;						
 8002fd4:	e038      	b.n	8003048 <snipCommand+0x1d4>
		}
		
		// Parse commands
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
		{
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 8002fd6:	4b34      	ldr	r3, [pc, #208]	; (80030a8 <snipCommand+0x234>)
 8002fd8:	0022      	movs	r2, r4
 8002fda:	4934      	ldr	r1, [pc, #208]	; (80030ac <snipCommand+0x238>)
 8002fdc:	0020      	movs	r0, r4
 8002fde:	f00f f961 	bl	80122a4 <siprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 8002fe2:	4831      	ldr	r0, [pc, #196]	; (80030a8 <snipCommand+0x234>)
 8002fe4:	f7fd f898 	bl	8000118 <strlen>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	2100      	movs	r1, #0
 8002fec:	482e      	ldr	r0, [pc, #184]	; (80030a8 <snipCommand+0x234>)
 8002fee:	f00f f85b 	bl	80120a8 <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8002ff2:	0029      	movs	r1, r5
 8002ff4:	68f0      	ldr	r0, [r6, #12]
 8002ff6:	f007 f941 	bl	800a27c <ParseSnippetCommand>
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	d1eb      	bne.n	8002fd6 <snipCommand+0x162>
		}
		
		// Finish and write the buffer
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 8002ffe:	0020      	movs	r0, r4
 8003000:	f7fd f88a 	bl	8000118 <strlen>
 8003004:	1820      	adds	r0, r4, r0
 8003006:	220c      	movs	r2, #12
 8003008:	4929      	ldr	r1, [pc, #164]	; (80030b0 <snipCommand+0x23c>)
 800300a:	f00f f844 	bl	8012096 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800300e:	0020      	movs	r0, r4
 8003010:	f7fd f882 	bl	8000118 <strlen>
 8003014:	b282      	uxth	r2, r0
 8003016:	4b17      	ldr	r3, [pc, #92]	; (8003074 <snipCommand+0x200>)
 8003018:	7818      	ldrb	r0, [r3, #0]
 800301a:	2301      	movs	r3, #1
 800301c:	425b      	negs	r3, r3
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	3333      	adds	r3, #51	; 0x33
 8003022:	0021      	movs	r1, r4
 8003024:	f00b f8be 	bl	800e1a4 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8003028:	003d      	movs	r5, r7
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <snipCommand+0x208>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	42bb      	cmp	r3, r7
 8003030:	d911      	bls.n	8003056 <snipCommand+0x1e2>
 8003032:	1c6f      	adds	r7, r5, #1
 8003034:	b2ff      	uxtb	r7, r7
		if (snippets[s].cond.conditionType)
 8003036:	002e      	movs	r6, r5
 8003038:	00ab      	lsls	r3, r5, #2
 800303a:	195b      	adds	r3, r3, r5
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4642      	mov	r2, r8
 8003040:	5c9b      	ldrb	r3, [r3, r2]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d000      	beq.n	8003048 <snipCommand+0x1d4>
 8003046:	e739      	b.n	8002ebc <snipCommand+0x48>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8003048:	4d17      	ldr	r5, [pc, #92]	; (80030a8 <snipCommand+0x234>)
 800304a:	00b3      	lsls	r3, r6, #2
 800304c:	199b      	adds	r3, r3, r6
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4e0b      	ldr	r6, [pc, #44]	; (8003080 <snipCommand+0x20c>)
 8003052:	18f6      	adds	r6, r6, r3
 8003054:	e7cd      	b.n	8002ff2 <snipCommand+0x17e>
		
		++count;
	}

	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 8003056:	22a7      	movs	r2, #167	; 0xa7
 8003058:	4916      	ldr	r1, [pc, #88]	; (80030b4 <snipCommand+0x240>)
 800305a:	0020      	movs	r0, r4
 800305c:	f00f f81b 	bl	8012096 <memcpy>

	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8003060:	2000      	movs	r0, #0
 8003062:	b00a      	add	sp, #40	; 0x28
 8003064:	bc1c      	pop	{r2, r3, r4}
 8003066:	4690      	mov	r8, r2
 8003068:	4699      	mov	r9, r3
 800306a:	46a2      	mov	sl, r4
 800306c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	08016308 	.word	0x08016308
 8003074:	200003b7 	.word	0x200003b7
 8003078:	08017758 	.word	0x08017758
 800307c:	20000ddb 	.word	0x20000ddb
 8003080:	200061d8 	.word	0x200061d8
 8003084:	08017790 	.word	0x08017790
 8003088:	20000040 	.word	0x20000040
 800308c:	08016fa8 	.word	0x08016fa8
 8003090:	080177fc 	.word	0x080177fc
 8003094:	080164a4 	.word	0x080164a4
 8003098:	0801779c 	.word	0x0801779c
 800309c:	080177b0 	.word	0x080177b0
 80030a0:	080177c8 	.word	0x080177c8
 80030a4:	080177e0 	.word	0x080177e0
 80030a8:	2000082c 	.word	0x2000082c
 80030ac:	0801780c 	.word	0x0801780c
 80030b0:	08017814 	.word	0x08017814
 80030b4:	08017820 	.word	0x08017820

080030b8 <idcodeCommand>:
{	
 80030b8:	b510      	push	{r4, lr}
 80030ba:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80030bc:	d101      	bne.n	80030c2 <idcodeCommand+0xa>
 80030be:	b672      	cpsid	i
 80030c0:	e7fe      	b.n	80030c0 <idcodeCommand+0x8>
	dev = HAL_GetDEVID();
 80030c2:	f00b fda1 	bl	800ec08 <HAL_GetDEVID>
	switch (dev)
 80030c6:	0403      	lsls	r3, r0, #16
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	4a1b      	ldr	r2, [pc, #108]	; (8003138 <idcodeCommand+0x80>)
 80030cc:	4694      	mov	ip, r2
 80030ce:	4463      	add	r3, ip
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d82a      	bhi.n	800312a <idcodeCommand+0x72>
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4a19      	ldr	r2, [pc, #100]	; (800313c <idcodeCommand+0x84>)
 80030d8:	58d3      	ldr	r3, [r2, r3]
 80030da:	469f      	mov	pc, r3
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 80030dc:	4a18      	ldr	r2, [pc, #96]	; (8003140 <idcodeCommand+0x88>)
 80030de:	4919      	ldr	r1, [pc, #100]	; (8003144 <idcodeCommand+0x8c>)
 80030e0:	0020      	movs	r0, r4
 80030e2:	f00f f8df 	bl	80122a4 <siprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 80030e6:	f00b fd89 	bl	800ebfc <HAL_GetREVID>
 80030ea:	0b03      	lsrs	r3, r0, #12
 80030ec:	0022      	movs	r2, r4
 80030ee:	4916      	ldr	r1, [pc, #88]	; (8003148 <idcodeCommand+0x90>)
 80030f0:	0020      	movs	r0, r4
 80030f2:	f00f f8d7 	bl	80122a4 <siprintf>
}
 80030f6:	2000      	movs	r0, #0
 80030f8:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 80030fa:	4a14      	ldr	r2, [pc, #80]	; (800314c <idcodeCommand+0x94>)
 80030fc:	4911      	ldr	r1, [pc, #68]	; (8003144 <idcodeCommand+0x8c>)
 80030fe:	0020      	movs	r0, r4
 8003100:	f00f f8d0 	bl	80122a4 <siprintf>
  		break;
 8003104:	e7ef      	b.n	80030e6 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 8003106:	4a12      	ldr	r2, [pc, #72]	; (8003150 <idcodeCommand+0x98>)
 8003108:	490e      	ldr	r1, [pc, #56]	; (8003144 <idcodeCommand+0x8c>)
 800310a:	0020      	movs	r0, r4
 800310c:	f00f f8ca 	bl	80122a4 <siprintf>
  		break;
 8003110:	e7e9      	b.n	80030e6 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 8003112:	4a10      	ldr	r2, [pc, #64]	; (8003154 <idcodeCommand+0x9c>)
 8003114:	490b      	ldr	r1, [pc, #44]	; (8003144 <idcodeCommand+0x8c>)
 8003116:	0020      	movs	r0, r4
 8003118:	f00f f8c4 	bl	80122a4 <siprintf>
  		break;
 800311c:	e7e3      	b.n	80030e6 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 800311e:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <idcodeCommand+0xa0>)
 8003120:	4908      	ldr	r1, [pc, #32]	; (8003144 <idcodeCommand+0x8c>)
 8003122:	0020      	movs	r0, r4
 8003124:	f00f f8be 	bl	80122a4 <siprintf>
  		break;
 8003128:	e7dd      	b.n	80030e6 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 800312a:	4a0c      	ldr	r2, [pc, #48]	; (800315c <idcodeCommand+0xa4>)
 800312c:	4905      	ldr	r1, [pc, #20]	; (8003144 <idcodeCommand+0x8c>)
 800312e:	0020      	movs	r0, r4
 8003130:	f00f f8b8 	bl	80122a4 <siprintf>
  		break;
 8003134:	e7d7      	b.n	80030e6 <idcodeCommand+0x2e>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	fffffbc0 	.word	0xfffffbc0
 800313c:	080164cc 	.word	0x080164cc
 8003140:	08016ea4 	.word	0x08016ea4
 8003144:	08016eb0 	.word	0x08016eb0
 8003148:	08016efc 	.word	0x08016efc
 800314c:	08016ec4 	.word	0x08016ec4
 8003150:	08016ed0 	.word	0x08016ed0
 8003154:	08016edc 	.word	0x08016edc
 8003158:	08016ee8 	.word	0x08016ee8
 800315c:	08016ef4 	.word	0x08016ef4

08003160 <uuidCommand>:
{
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8003164:	d101      	bne.n	800316a <uuidCommand+0xa>
 8003166:	b672      	cpsid	i
 8003168:	e7fe      	b.n	8003168 <uuidCommand+0x8>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 800316a:	220e      	movs	r2, #14
 800316c:	4911      	ldr	r1, [pc, #68]	; (80031b4 <uuidCommand+0x54>)
 800316e:	f00e ff92 	bl	8012096 <memcpy>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <uuidCommand+0x58>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4d11      	ldr	r5, [pc, #68]	; (80031bc <uuidCommand+0x5c>)
 8003178:	0022      	movs	r2, r4
 800317a:	0029      	movs	r1, r5
 800317c:	0020      	movs	r0, r4
 800317e:	f00f f891 	bl	80122a4 <siprintf>
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <uuidCommand+0x60>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	0022      	movs	r2, r4
 8003188:	0029      	movs	r1, r5
 800318a:	0020      	movs	r0, r4
 800318c:	f00f f88a 	bl	80122a4 <siprintf>
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <uuidCommand+0x64>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	0022      	movs	r2, r4
 8003196:	0029      	movs	r1, r5
 8003198:	0020      	movs	r0, r4
 800319a:	f00f f883 	bl	80122a4 <siprintf>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 800319e:	0020      	movs	r0, r4
 80031a0:	f7fc ffba 	bl	8000118 <strlen>
 80031a4:	1820      	adds	r0, r4, r0
 80031a6:	2203      	movs	r2, #3
 80031a8:	4907      	ldr	r1, [pc, #28]	; (80031c8 <uuidCommand+0x68>)
 80031aa:	f00e ff74 	bl	8012096 <memcpy>
}
 80031ae:	2000      	movs	r0, #0
 80031b0:	bd70      	pop	{r4, r5, r6, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	080187ac 	.word	0x080187ac
 80031b8:	1ffff7ac 	.word	0x1ffff7ac
 80031bc:	080187bc 	.word	0x080187bc
 80031c0:	1ffff7b0 	.word	0x1ffff7b0
 80031c4:	1ffff7b4 	.word	0x1ffff7b4
 80031c8:	0801964c 	.word	0x0801964c

080031cc <prvRunTimeStatsCommand>:
{
 80031cc:	b510      	push	{r4, lr}
 80031ce:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80031d0:	d101      	bne.n	80031d6 <prvRunTimeStatsCommand+0xa>
 80031d2:	b672      	cpsid	i
 80031d4:	e7fe      	b.n	80031d4 <prvRunTimeStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 80031d6:	2251      	movs	r2, #81	; 0x51
 80031d8:	4904      	ldr	r1, [pc, #16]	; (80031ec <prvRunTimeStatsCommand+0x20>)
 80031da:	f00e ff5c 	bl	8012096 <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 80031de:	0020      	movs	r0, r4
 80031e0:	3050      	adds	r0, #80	; 0x50
 80031e2:	f012 fd49 	bl	8015c78 <vTaskGetRunTimeStats>
}
 80031e6:	2000      	movs	r0, #0
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	080171d0 	.word	0x080171d0

080031f0 <prvTaskStatsCommand>:
{
 80031f0:	b510      	push	{r4, lr}
 80031f2:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80031f4:	d101      	bne.n	80031fa <prvTaskStatsCommand+0xa>
 80031f6:	b672      	cpsid	i
 80031f8:	e7fe      	b.n	80031f8 <prvTaskStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 80031fa:	225b      	movs	r2, #91	; 0x5b
 80031fc:	4904      	ldr	r1, [pc, #16]	; (8003210 <prvTaskStatsCommand+0x20>)
 80031fe:	f00e ff4a 	bl	8012096 <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 8003202:	0020      	movs	r0, r4
 8003204:	305a      	adds	r0, #90	; 0x5a
 8003206:	f012 fcd7 	bl	8015bb8 <vTaskList>
}
 800320a:	2000      	movs	r0, #0
 800320c:	bd10      	pop	{r4, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	08017234 	.word	0x08017234

08003214 <getCommand>:
{
 8003214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003216:	46c6      	mov	lr, r8
 8003218:	b500      	push	{lr}
 800321a:	b082      	sub	sp, #8
 800321c:	0004      	movs	r4, r0
 800321e:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8003226:	2800      	cmp	r0, #0
 8003228:	d101      	bne.n	800322e <getCommand+0x1a>
 800322a:	b672      	cpsid	i
 800322c:	e7fe      	b.n	800322c <getCommand+0x18>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800322e:	aa01      	add	r2, sp, #4
 8003230:	2101      	movs	r1, #1
 8003232:	0030      	movs	r0, r6
 8003234:	f00b f9a6 	bl	800e584 <FreeRTOS_CLIGetParameter>
 8003238:	0005      	movs	r5, r0
 800323a:	4b74      	ldr	r3, [pc, #464]	; (800340c <getCommand+0x1f8>)
 800323c:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 800323e:	2204      	movs	r2, #4
 8003240:	4973      	ldr	r1, [pc, #460]	; (8003410 <getCommand+0x1fc>)
 8003242:	f00f f873 	bl	801232c <strncmp>
 8003246:	2800      	cmp	r0, #0
 8003248:	d000      	beq.n	800324c <getCommand+0x38>
 800324a:	e090      	b.n	800336e <getCommand+0x15a>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 800324c:	1d2f      	adds	r7, r5, #4
 800324e:	9b01      	ldr	r3, [sp, #4]
 8003250:	1f1e      	subs	r6, r3, #4
 8003252:	0032      	movs	r2, r6
 8003254:	496f      	ldr	r1, [pc, #444]	; (8003414 <getCommand+0x200>)
 8003256:	0038      	movs	r0, r7
 8003258:	f00f f868 	bl	801232c <strncmp>
 800325c:	2800      	cmp	r0, #0
 800325e:	d11e      	bne.n	800329e <getCommand+0x8a>
			if (BOS.response == BOS_RESPONSE_ALL)
 8003260:	4b6d      	ldr	r3, [pc, #436]	; (8003418 <getCommand+0x204>)
 8003262:	799b      	ldrb	r3, [r3, #6]
 8003264:	2b60      	cmp	r3, #96	; 0x60
 8003266:	d109      	bne.n	800327c <getCommand+0x68>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8003268:	4a6c      	ldr	r2, [pc, #432]	; (800341c <getCommand+0x208>)
 800326a:	496d      	ldr	r1, [pc, #436]	; (8003420 <getCommand+0x20c>)
 800326c:	0020      	movs	r0, r4
 800326e:	f00f f819 	bl	80122a4 <siprintf>
}
 8003272:	2000      	movs	r0, #0
 8003274:	b002      	add	sp, #8
 8003276:	bc04      	pop	{r2}
 8003278:	4690      	mov	r8, r2
 800327a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (BOS.response == BOS_RESPONSE_MSG)
 800327c:	2b20      	cmp	r3, #32
 800327e:	d105      	bne.n	800328c <getCommand+0x78>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8003280:	4a68      	ldr	r2, [pc, #416]	; (8003424 <getCommand+0x210>)
 8003282:	4967      	ldr	r1, [pc, #412]	; (8003420 <getCommand+0x20c>)
 8003284:	0020      	movs	r0, r4
 8003286:	f00f f80d 	bl	80122a4 <siprintf>
 800328a:	e7f2      	b.n	8003272 <getCommand+0x5e>
			else if (BOS.response == BOS_RESPONSE_NONE)
 800328c:	2b00      	cmp	r3, #0
 800328e:	d000      	beq.n	8003292 <getCommand+0x7e>
 8003290:	e0b6      	b.n	8003400 <getCommand+0x1ec>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 8003292:	4a65      	ldr	r2, [pc, #404]	; (8003428 <getCommand+0x214>)
 8003294:	4962      	ldr	r1, [pc, #392]	; (8003420 <getCommand+0x20c>)
 8003296:	0020      	movs	r0, r4
 8003298:	f00f f804 	bl	80122a4 <siprintf>
 800329c:	e7e9      	b.n	8003272 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 800329e:	0032      	movs	r2, r6
 80032a0:	4962      	ldr	r1, [pc, #392]	; (800342c <getCommand+0x218>)
 80032a2:	0038      	movs	r0, r7
 80032a4:	f00f f842 	bl	801232c <strncmp>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	d11a      	bne.n	80032e2 <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 80032ac:	4b5a      	ldr	r3, [pc, #360]	; (8003418 <getCommand+0x204>)
 80032ae:	79db      	ldrb	r3, [r3, #7]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d105      	bne.n	80032c0 <getCommand+0xac>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 80032b4:	4a59      	ldr	r2, [pc, #356]	; (800341c <getCommand+0x208>)
 80032b6:	495a      	ldr	r1, [pc, #360]	; (8003420 <getCommand+0x20c>)
 80032b8:	0020      	movs	r0, r4
 80032ba:	f00e fff3 	bl	80122a4 <siprintf>
 80032be:	e7d8      	b.n	8003272 <getCommand+0x5e>
			else if (BOS.trace == TRACE_MESSAGE)
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <getCommand+0xbc>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 80032c4:	4a57      	ldr	r2, [pc, #348]	; (8003424 <getCommand+0x210>)
 80032c6:	4956      	ldr	r1, [pc, #344]	; (8003420 <getCommand+0x20c>)
 80032c8:	0020      	movs	r0, r4
 80032ca:	f00e ffeb 	bl	80122a4 <siprintf>
 80032ce:	e7d0      	b.n	8003272 <getCommand+0x5e>
			else if (BOS.trace == TRACE_NONE)
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d000      	beq.n	80032d6 <getCommand+0xc2>
 80032d4:	e094      	b.n	8003400 <getCommand+0x1ec>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 80032d6:	4a54      	ldr	r2, [pc, #336]	; (8003428 <getCommand+0x214>)
 80032d8:	4951      	ldr	r1, [pc, #324]	; (8003420 <getCommand+0x20c>)
 80032da:	0020      	movs	r0, r4
 80032dc:	f00e ffe2 	bl	80122a4 <siprintf>
 80032e0:	e7c7      	b.n	8003272 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 80032e2:	0032      	movs	r2, r6
 80032e4:	4952      	ldr	r1, [pc, #328]	; (8003430 <getCommand+0x21c>)
 80032e6:	0038      	movs	r0, r7
 80032e8:	f00f f820 	bl	801232c <strncmp>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d106      	bne.n	80032fe <getCommand+0xea>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 80032f0:	4b49      	ldr	r3, [pc, #292]	; (8003418 <getCommand+0x204>)
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	494f      	ldr	r1, [pc, #316]	; (8003434 <getCommand+0x220>)
 80032f6:	0020      	movs	r0, r4
 80032f8:	f00e ffd4 	bl	80122a4 <siprintf>
 80032fc:	e7b9      	b.n	8003272 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 80032fe:	0032      	movs	r2, r6
 8003300:	494d      	ldr	r1, [pc, #308]	; (8003438 <getCommand+0x224>)
 8003302:	0038      	movs	r0, r7
 8003304:	f00f f812 	bl	801232c <strncmp>
 8003308:	2800      	cmp	r0, #0
 800330a:	d106      	bne.n	800331a <getCommand+0x106>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 800330c:	4b42      	ldr	r3, [pc, #264]	; (8003418 <getCommand+0x204>)
 800330e:	881a      	ldrh	r2, [r3, #0]
 8003310:	4948      	ldr	r1, [pc, #288]	; (8003434 <getCommand+0x220>)
 8003312:	0020      	movs	r0, r4
 8003314:	f00e ffc6 	bl	80122a4 <siprintf>
 8003318:	e7ab      	b.n	8003272 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 800331a:	0032      	movs	r2, r6
 800331c:	4947      	ldr	r1, [pc, #284]	; (800343c <getCommand+0x228>)
 800331e:	0038      	movs	r0, r7
 8003320:	f00f f804 	bl	801232c <strncmp>
 8003324:	2800      	cmp	r0, #0
 8003326:	d106      	bne.n	8003336 <getCommand+0x122>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 8003328:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <getCommand+0x204>)
 800332a:	885a      	ldrh	r2, [r3, #2]
 800332c:	4941      	ldr	r1, [pc, #260]	; (8003434 <getCommand+0x220>)
 800332e:	0020      	movs	r0, r4
 8003330:	f00e ffb8 	bl	80122a4 <siprintf>
 8003334:	e79d      	b.n	8003272 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8003336:	0032      	movs	r2, r6
 8003338:	4941      	ldr	r1, [pc, #260]	; (8003440 <getCommand+0x22c>)
 800333a:	0038      	movs	r0, r7
 800333c:	f00e fff6 	bl	801232c <strncmp>
 8003340:	2800      	cmp	r0, #0
 8003342:	d106      	bne.n	8003352 <getCommand+0x13e>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 8003344:	4b34      	ldr	r3, [pc, #208]	; (8003418 <getCommand+0x204>)
 8003346:	791a      	ldrb	r2, [r3, #4]
 8003348:	493a      	ldr	r1, [pc, #232]	; (8003434 <getCommand+0x220>)
 800334a:	0020      	movs	r0, r4
 800334c:	f00e ffaa 	bl	80122a4 <siprintf>
 8003350:	e78f      	b.n	8003272 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8003352:	0032      	movs	r2, r6
 8003354:	493b      	ldr	r1, [pc, #236]	; (8003444 <getCommand+0x230>)
 8003356:	0038      	movs	r0, r7
 8003358:	f00e ffe8 	bl	801232c <strncmp>
 800335c:	2800      	cmp	r0, #0
 800335e:	d10d      	bne.n	800337c <getCommand+0x168>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 8003360:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <getCommand+0x204>)
 8003362:	795a      	ldrb	r2, [r3, #5]
 8003364:	4933      	ldr	r1, [pc, #204]	; (8003434 <getCommand+0x220>)
 8003366:	0020      	movs	r0, r4
 8003368:	f00e ff9c 	bl	80122a4 <siprintf>
 800336c:	e781      	b.n	8003272 <getCommand+0x5e>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 800336e:	2205      	movs	r2, #5
 8003370:	4935      	ldr	r1, [pc, #212]	; (8003448 <getCommand+0x234>)
 8003372:	0028      	movs	r0, r5
 8003374:	f00e ffda 	bl	801232c <strncmp>
 8003378:	2800      	cmp	r0, #0
 800337a:	d005      	beq.n	8003388 <getCommand+0x174>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800337c:	2213      	movs	r2, #19
 800337e:	4933      	ldr	r1, [pc, #204]	; (800344c <getCommand+0x238>)
 8003380:	0020      	movs	r0, r4
 8003382:	f00e fe88 	bl	8012096 <memcpy>
 8003386:	e774      	b.n	8003272 <getCommand+0x5e>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8003388:	466a      	mov	r2, sp
 800338a:	2102      	movs	r1, #2
 800338c:	0030      	movs	r0, r6
 800338e:	f00b f8f9 	bl	800e584 <FreeRTOS_CLIGetParameter>
 8003392:	0005      	movs	r5, r0
 8003394:	4f2e      	ldr	r7, [pc, #184]	; (8003450 <getCommand+0x23c>)
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8003396:	2600      	movs	r6, #0
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 8003398:	0039      	movs	r1, r7
 800339a:	0028      	movs	r0, r5
 800339c:	f7fc feb2 	bl	8000104 <strcmp>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d011      	beq.n	80033c8 <getCommand+0x1b4>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 80033a4:	3601      	adds	r6, #1
 80033a6:	b2f6      	uxtb	r6, r6
 80033a8:	370a      	adds	r7, #10
 80033aa:	2e0a      	cmp	r6, #10
 80033ac:	d1f4      	bne.n	8003398 <getCommand+0x184>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 80033ae:	002a      	movs	r2, r5
 80033b0:	4928      	ldr	r1, [pc, #160]	; (8003454 <getCommand+0x240>)
 80033b2:	0020      	movs	r0, r4
 80033b4:	f00e ff76 	bl	80122a4 <siprintf>
			return pdFALSE;
 80033b8:	e75b      	b.n	8003272 <getCommand+0x5e>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 80033ba:	002b      	movs	r3, r5
 80033bc:	0022      	movs	r2, r4
 80033be:	4926      	ldr	r1, [pc, #152]	; (8003458 <getCommand+0x244>)
 80033c0:	0020      	movs	r0, r4
 80033c2:	f00e ff6f 	bl	80122a4 <siprintf>
 80033c6:	e015      	b.n	80033f4 <getCommand+0x1e0>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 80033c8:	002a      	movs	r2, r5
 80033ca:	4924      	ldr	r1, [pc, #144]	; (800345c <getCommand+0x248>)
 80033cc:	0020      	movs	r0, r4
 80033ce:	f00e ff69 	bl	80122a4 <siprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 80033d2:	4b23      	ldr	r3, [pc, #140]	; (8003460 <getCommand+0x24c>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d100      	bne.n	80033dc <getCommand+0x1c8>
 80033da:	e74a      	b.n	8003272 <getCommand+0x5e>
 80033dc:	2501      	movs	r5, #1
 80033de:	002b      	movs	r3, r5
 80033e0:	40b3      	lsls	r3, r6
 80033e2:	4698      	mov	r8, r3
				if (InGroup(j, i))
 80033e4:	4f1f      	ldr	r7, [pc, #124]	; (8003464 <getCommand+0x250>)
			for(j=1 ; j<=N ; j++)						// N modules
 80033e6:	4e1e      	ldr	r6, [pc, #120]	; (8003460 <getCommand+0x24c>)
				if (InGroup(j, i))
 80033e8:	1e6b      	subs	r3, r5, #1
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	5bdb      	ldrh	r3, [r3, r7]
 80033ee:	4642      	mov	r2, r8
 80033f0:	421a      	tst	r2, r3
 80033f2:	d1e2      	bne.n	80033ba <getCommand+0x1a6>
			for(j=1 ; j<=N ; j++)						// N modules
 80033f4:	3501      	adds	r5, #1
 80033f6:	b2ed      	uxtb	r5, r5
 80033f8:	7833      	ldrb	r3, [r6, #0]
 80033fa:	42ab      	cmp	r3, r5
 80033fc:	d2f4      	bcs.n	80033e8 <getCommand+0x1d4>
 80033fe:	e738      	b.n	8003272 <getCommand+0x5e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 8003400:	002a      	movs	r2, r5
 8003402:	4919      	ldr	r1, [pc, #100]	; (8003468 <getCommand+0x254>)
 8003404:	0020      	movs	r0, r4
 8003406:	f00e ff4d 	bl	80122a4 <siprintf>
 800340a:	e732      	b.n	8003272 <getCommand+0x5e>
 800340c:	20000bd4 	.word	0x20000bd4
 8003410:	08016cf8 	.word	0x08016cf8
 8003414:	08016d00 	.word	0x08016d00
 8003418:	20006160 	.word	0x20006160
 800341c:	08016d0c 	.word	0x08016d0c
 8003420:	0801676c 	.word	0x0801676c
 8003424:	08016d10 	.word	0x08016d10
 8003428:	08016d14 	.word	0x08016d14
 800342c:	08016d1c 	.word	0x08016d1c
 8003430:	08016d24 	.word	0x08016d24
 8003434:	0801896c 	.word	0x0801896c
 8003438:	08016d30 	.word	0x08016d30
 800343c:	08016d3c 	.word	0x08016d3c
 8003440:	08016d4c 	.word	0x08016d4c
 8003444:	08016d60 	.word	0x08016d60
 8003448:	08016d74 	.word	0x08016d74
 800344c:	08016d84 	.word	0x08016d84
 8003450:	2000086c 	.word	0x2000086c
 8003454:	08016d98 	.word	0x08016d98
 8003458:	08016d7c 	.word	0x08016d7c
 800345c:	08016db4 	.word	0x08016db4
 8003460:	2000001c 	.word	0x2000001c
 8003464:	200008d0 	.word	0x200008d0
 8003468:	08016dc8 	.word	0x08016dc8

0800346c <TIM_USEC_Init>:
{
 800346c:	b530      	push	{r4, r5, lr}
 800346e:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 8003470:	4a12      	ldr	r2, [pc, #72]	; (80034bc <TIM_USEC_Init+0x50>)
 8003472:	69d1      	ldr	r1, [r2, #28]
 8003474:	2080      	movs	r0, #128	; 0x80
 8003476:	0040      	lsls	r0, r0, #1
 8003478:	4301      	orrs	r1, r0
 800347a:	61d1      	str	r1, [r2, #28]
 800347c:	69d3      	ldr	r3, [r2, #28]
 800347e:	4003      	ands	r3, r0
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 8003484:	4c0e      	ldr	r4, [pc, #56]	; (80034c0 <TIM_USEC_Init+0x54>)
 8003486:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <TIM_USEC_Init+0x58>)
 8003488:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800348a:	f00d f8eb 	bl	8010664 <HAL_RCC_GetPCLK1Freq>
 800348e:	490e      	ldr	r1, [pc, #56]	; (80034c8 <TIM_USEC_Init+0x5c>)
 8003490:	f7fc fe54 	bl	800013c <__udivsi3>
 8003494:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003496:	2500      	movs	r5, #0
 8003498:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <TIM_USEC_Init+0x60>)
 800349c:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800349e:	0020      	movs	r0, r4
 80034a0:	f00d fe7a 	bl	8011198 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034a4:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a6:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 80034a8:	a902      	add	r1, sp, #8
 80034aa:	0020      	movs	r0, r4
 80034ac:	f00d ff92 	bl	80113d4 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_Base_Start(&htim14);
 80034b0:	0020      	movs	r0, r4
 80034b2:	f00d fc40 	bl	8010d36 <HAL_TIM_Base_Start>
}
 80034b6:	b005      	add	sp, #20
 80034b8:	bd30      	pop	{r4, r5, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	40021000 	.word	0x40021000
 80034c0:	2000617c 	.word	0x2000617c
 80034c4:	40002000 	.word	0x40002000
 80034c8:	000f4240 	.word	0x000f4240
 80034cc:	0000ffff 	.word	0x0000ffff

080034d0 <TIM_MSEC_Init>:
{
 80034d0:	b530      	push	{r4, r5, lr}
 80034d2:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 80034d4:	4a12      	ldr	r2, [pc, #72]	; (8003520 <TIM_MSEC_Init+0x50>)
 80034d6:	6991      	ldr	r1, [r2, #24]
 80034d8:	2080      	movs	r0, #128	; 0x80
 80034da:	0240      	lsls	r0, r0, #9
 80034dc:	4301      	orrs	r1, r0
 80034de:	6191      	str	r1, [r2, #24]
 80034e0:	6993      	ldr	r3, [r2, #24]
 80034e2:	4003      	ands	r3, r0
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 80034e8:	4c0e      	ldr	r4, [pc, #56]	; (8003524 <TIM_MSEC_Init+0x54>)
 80034ea:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <TIM_MSEC_Init+0x58>)
 80034ec:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 80034ee:	f00d f8b9 	bl	8010664 <HAL_RCC_GetPCLK1Freq>
 80034f2:	21fa      	movs	r1, #250	; 0xfa
 80034f4:	0089      	lsls	r1, r1, #2
 80034f6:	f7fc fe21 	bl	800013c <__udivsi3>
 80034fa:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034fc:	2500      	movs	r5, #0
 80034fe:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <TIM_MSEC_Init+0x5c>)
 8003502:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 8003504:	0020      	movs	r0, r4
 8003506:	f00d fe47 	bl	8011198 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800350e:	a902      	add	r1, sp, #8
 8003510:	0020      	movs	r0, r4
 8003512:	f00d ff5f 	bl	80113d4 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_Base_Start(&htim15);
 8003516:	0020      	movs	r0, r4
 8003518:	f00d fc0d 	bl	8010d36 <HAL_TIM_Base_Start>
}
 800351c:	b005      	add	sp, #20
 800351e:	bd30      	pop	{r4, r5, pc}
 8003520:	40021000 	.word	0x40021000
 8003524:	200060ac 	.word	0x200060ac
 8003528:	40014000 	.word	0x40014000
 800352c:	0000ffff 	.word	0x0000ffff

08003530 <minArr>:
{
 8003530:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!Q[0])						// Not visited yet
 8003532:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest = 0xFF; uint8_t index = 0;
 8003534:	24ff      	movs	r4, #255	; 0xff
	if (!Q[0])						// Not visited yet
 8003536:	2b00      	cmp	r3, #0
 8003538:	d100      	bne.n	800353c <minArr+0xc>
		smallest = arr[0];
 800353a:	7804      	ldrb	r4, [r0, #0]
	for (int i=0 ; i<N ; i++) {
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <minArr+0x38>)
 800353e:	781d      	ldrb	r5, [r3, #0]
 8003540:	2d00      	cmp	r5, #0
 8003542:	dd0e      	ble.n	8003562 <minArr+0x32>
 8003544:	2300      	movs	r3, #0
 8003546:	2700      	movs	r7, #0
 8003548:	e002      	b.n	8003550 <minArr+0x20>
 800354a:	3301      	adds	r3, #1
 800354c:	42ab      	cmp	r3, r5
 800354e:	da09      	bge.n	8003564 <minArr+0x34>
		if ((arr[i] < smallest) && !Q[i]) {
 8003550:	5cc2      	ldrb	r2, [r0, r3]
 8003552:	42a2      	cmp	r2, r4
 8003554:	d2f9      	bcs.n	800354a <minArr+0x1a>
 8003556:	5cce      	ldrb	r6, [r1, r3]
 8003558:	2e00      	cmp	r6, #0
 800355a:	d1f6      	bne.n	800354a <minArr+0x1a>
			index = i;
 800355c:	b2df      	uxtb	r7, r3
			smallest = arr[i];
 800355e:	0014      	movs	r4, r2
 8003560:	e7f3      	b.n	800354a <minArr+0x1a>
	for (int i=0 ; i<N ; i++) {
 8003562:	2700      	movs	r7, #0
}
 8003564:	0038      	movs	r0, r7
 8003566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003568:	2000001c 	.word	0x2000001c

0800356c <QnotEmpty>:
	for (int i=0 ; i<N ; i++) {
 800356c:	4b07      	ldr	r3, [pc, #28]	; (800358c <QnotEmpty+0x20>)
 800356e:	7819      	ldrb	r1, [r3, #0]
 8003570:	2900      	cmp	r1, #0
 8003572:	d008      	beq.n	8003586 <QnotEmpty+0x1a>
 8003574:	0003      	movs	r3, r0
 8003576:	1841      	adds	r1, r0, r1
	char temp = 1;
 8003578:	2001      	movs	r0, #1
		temp &= Q[i];
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	4010      	ands	r0, r2
 800357e:	3301      	adds	r3, #1
	for (int i=0 ; i<N ; i++) {
 8003580:	428b      	cmp	r3, r1
 8003582:	d1fa      	bne.n	800357a <QnotEmpty+0xe>
}
 8003584:	4770      	bx	lr
	char temp = 1;
 8003586:	2001      	movs	r0, #1
 8003588:	e7fc      	b.n	8003584 <QnotEmpty+0x18>
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	2000001c 	.word	0x2000001c

08003590 <NotifyMessagingTask>:
{
 8003590:	b510      	push	{r4, lr}
	switch (port)
 8003592:	2806      	cmp	r0, #6
 8003594:	d80a      	bhi.n	80035ac <NotifyMessagingTask+0x1c>
 8003596:	0080      	lsls	r0, r0, #2
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <NotifyMessagingTask+0x70>)
 800359a:	581b      	ldr	r3, [r3, r0]
 800359c:	469f      	mov	pc, r3
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 800359e:	4b19      	ldr	r3, [pc, #100]	; (8003604 <NotifyMessagingTask+0x74>)
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	2300      	movs	r3, #0
 80035a4:	2202      	movs	r2, #2
 80035a6:	2100      	movs	r1, #0
 80035a8:	f00b f9e6 	bl	800e978 <xTaskGenericNotify>
}
 80035ac:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 80035ae:	4b16      	ldr	r3, [pc, #88]	; (8003608 <NotifyMessagingTask+0x78>)
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	2300      	movs	r3, #0
 80035b4:	2202      	movs	r2, #2
 80035b6:	2100      	movs	r1, #0
 80035b8:	f00b f9de 	bl	800e978 <xTaskGenericNotify>
 80035bc:	e7f6      	b.n	80035ac <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <NotifyMessagingTask+0x7c>)
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	2300      	movs	r3, #0
 80035c4:	2202      	movs	r2, #2
 80035c6:	2100      	movs	r1, #0
 80035c8:	f00b f9d6 	bl	800e978 <xTaskGenericNotify>
 80035cc:	e7ee      	b.n	80035ac <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <NotifyMessagingTask+0x80>)
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	2300      	movs	r3, #0
 80035d4:	2202      	movs	r2, #2
 80035d6:	2100      	movs	r1, #0
 80035d8:	f00b f9ce 	bl	800e978 <xTaskGenericNotify>
 80035dc:	e7e6      	b.n	80035ac <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 80035de:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <NotifyMessagingTask+0x84>)
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	2300      	movs	r3, #0
 80035e4:	2202      	movs	r2, #2
 80035e6:	2100      	movs	r1, #0
 80035e8:	f00b f9c6 	bl	800e978 <xTaskGenericNotify>
 80035ec:	e7de      	b.n	80035ac <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle);	break;
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <NotifyMessagingTask+0x88>)
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	2300      	movs	r3, #0
 80035f4:	2202      	movs	r2, #2
 80035f6:	2100      	movs	r1, #0
 80035f8:	f00b f9be 	bl	800e978 <xTaskGenericNotify>
}
 80035fc:	e7d6      	b.n	80035ac <NotifyMessagingTask+0x1c>
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	080164f0 	.word	0x080164f0
 8003604:	20001024 	.word	0x20001024
 8003608:	20001028 	.word	0x20001028
 800360c:	2000102c 	.word	0x2000102c
 8003610:	20001030 	.word	0x20001030
 8003614:	20001034 	.word	0x20001034
 8003618:	20001038 	.word	0x20001038

0800361c <SaveToRO>:
{
 800361c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800361e:	46de      	mov	lr, fp
 8003620:	4657      	mov	r7, sl
 8003622:	464e      	mov	r6, r9
 8003624:	4645      	mov	r5, r8
 8003626:	b5e0      	push	{r5, r6, r7, lr}
 8003628:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800362a:	2215      	movs	r2, #21
 800362c:	2100      	movs	r1, #0
 800362e:	a802      	add	r0, sp, #8
 8003630:	f00e fd3a 	bl	80120a8 <memset>
	HAL_FLASH_Unlock();
 8003634:	f00c f986 	bl	800f944 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 8003638:	4872      	ldr	r0, [pc, #456]	; (8003804 <SaveToRO+0x1e8>)
 800363a:	f00c fa45 	bl	800fac8 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800363e:	4872      	ldr	r0, [pc, #456]	; (8003808 <SaveToRO+0x1ec>)
 8003640:	f00c f99c 	bl	800f97c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 8003644:	2800      	cmp	r0, #0
 8003646:	d112      	bne.n	800366e <SaveToRO+0x52>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003648:	4a70      	ldr	r2, [pc, #448]	; (800380c <SaveToRO+0x1f0>)
 800364a:	6913      	ldr	r3, [r2, #16]
 800364c:	2102      	movs	r1, #2
 800364e:	438b      	bics	r3, r1
 8003650:	6113      	str	r3, [r2, #16]
	if (myID)
 8003652:	4b6f      	ldr	r3, [pc, #444]	; (8003810 <SaveToRO+0x1f4>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d113      	bne.n	8003682 <SaveToRO+0x66>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800365a:	4b6e      	ldr	r3, [pc, #440]	; (8003814 <SaveToRO+0x1f8>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d100      	bne.n	8003664 <SaveToRO+0x48>
 8003662:	e0ca      	b.n	80037fa <SaveToRO+0x1de>
 8003664:	2500      	movs	r5, #0
 8003666:	4c6c      	ldr	r4, [pc, #432]	; (8003818 <SaveToRO+0x1fc>)
		if (snippets[s].cond.conditionType) 
 8003668:	4b6c      	ldr	r3, [pc, #432]	; (800381c <SaveToRO+0x200>)
 800366a:	4698      	mov	r8, r3
 800366c:	e06e      	b.n	800374c <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800366e:	4b6c      	ldr	r3, [pc, #432]	; (8003820 <SaveToRO+0x204>)
 8003670:	69d8      	ldr	r0, [r3, #28]
 8003672:	b2c0      	uxtb	r0, r0
}
 8003674:	b009      	add	sp, #36	; 0x24
 8003676:	bc3c      	pop	{r2, r3, r4, r5}
 8003678:	4690      	mov	r8, r2
 800367a:	4699      	mov	r9, r3
 800367c:	46a2      	mov	sl, r4
 800367e:	46ab      	mov	fp, r5
 8003680:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 8003682:	4a68      	ldr	r2, [pc, #416]	; (8003824 <SaveToRO+0x208>)
 8003684:	7812      	ldrb	r2, [r2, #0]
 8003686:	0212      	lsls	r2, r2, #8
 8003688:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800368a:	b292      	uxth	r2, r2
 800368c:	2300      	movs	r3, #0
 800368e:	495d      	ldr	r1, [pc, #372]	; (8003804 <SaveToRO+0x1e8>)
 8003690:	2001      	movs	r0, #1
 8003692:	f00c f9a1 	bl	800f9d8 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8003696:	485c      	ldr	r0, [pc, #368]	; (8003808 <SaveToRO+0x1ec>)
 8003698:	f00c f970 	bl	800f97c <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800369c:	2800      	cmp	r0, #0
 800369e:	d111      	bne.n	80036c4 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80036a0:	4a5a      	ldr	r2, [pc, #360]	; (800380c <SaveToRO+0x1f0>)
 80036a2:	6913      	ldr	r3, [r2, #16]
 80036a4:	2101      	movs	r1, #1
 80036a6:	438b      	bics	r3, r1
 80036a8:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 80036aa:	4b5e      	ldr	r3, [pc, #376]	; (8003824 <SaveToRO+0x208>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2201      	movs	r2, #1
 80036b0:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 80036b2:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0d0      	beq.n	800365a <SaveToRO+0x3e>
 80036b8:	2316      	movs	r3, #22
 80036ba:	469b      	mov	fp, r3
 80036bc:	4b5a      	ldr	r3, [pc, #360]	; (8003828 <SaveToRO+0x20c>)
 80036be:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 80036c0:	4698      	mov	r8, r3
 80036c2:	e02a      	b.n	800371a <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 80036c4:	4b56      	ldr	r3, [pc, #344]	; (8003820 <SaveToRO+0x204>)
 80036c6:	69d8      	ldr	r0, [r3, #28]
 80036c8:	b2c0      	uxtb	r0, r0
 80036ca:	e7d3      	b.n	8003674 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 80036cc:	4b54      	ldr	r3, [pc, #336]	; (8003820 <SaveToRO+0x204>)
 80036ce:	69d8      	ldr	r0, [r3, #28]
 80036d0:	b2c0      	uxtb	r0, r0
 80036d2:	e7cf      	b.n	8003674 <SaveToRO+0x58>
 80036d4:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 80036d6:	42b4      	cmp	r4, r6
 80036d8:	d017      	beq.n	800370a <SaveToRO+0xee>
				if (array[i-1][0]) {
 80036da:	4643      	mov	r3, r8
 80036dc:	5afb      	ldrh	r3, [r7, r3]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f8      	beq.n	80036d4 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 80036e2:	8822      	ldrh	r2, [r4, #0]
 80036e4:	4b47      	ldr	r3, [pc, #284]	; (8003804 <SaveToRO+0x1e8>)
 80036e6:	18e9      	adds	r1, r5, r3
 80036e8:	2300      	movs	r3, #0
 80036ea:	2001      	movs	r0, #1
 80036ec:	f00c f974 	bl	800f9d8 <HAL_FLASH_Program>
					add += 2;
 80036f0:	3502      	adds	r5, #2
 80036f2:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80036f4:	4844      	ldr	r0, [pc, #272]	; (8003808 <SaveToRO+0x1ec>)
 80036f6:	f00c f941 	bl	800f97c <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 80036fa:	2800      	cmp	r0, #0
 80036fc:	d1e6      	bne.n	80036cc <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80036fe:	4a43      	ldr	r2, [pc, #268]	; (800380c <SaveToRO+0x1f0>)
 8003700:	6913      	ldr	r3, [r2, #16]
 8003702:	2101      	movs	r1, #1
 8003704:	438b      	bics	r3, r1
 8003706:	6113      	str	r3, [r2, #16]
 8003708:	e7e4      	b.n	80036d4 <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 800370a:	464b      	mov	r3, r9
 800370c:	3301      	adds	r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	4699      	mov	r9, r3
 8003712:	4b44      	ldr	r3, [pc, #272]	; (8003824 <SaveToRO+0x208>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	454b      	cmp	r3, r9
 8003718:	d39f      	bcc.n	800365a <SaveToRO+0x3e>
 800371a:	465e      	mov	r6, fp
 800371c:	464b      	mov	r3, r9
 800371e:	435e      	muls	r6, r3
 8003720:	0034      	movs	r4, r6
 8003722:	3c16      	subs	r4, #22
 8003724:	4454      	add	r4, sl
 8003726:	4456      	add	r6, sl
				if (array[i-1][0]) {
 8003728:	1e5f      	subs	r7, r3, #1
 800372a:	465b      	mov	r3, fp
 800372c:	435f      	muls	r7, r3
 800372e:	e7d4      	b.n	80036da <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 8003730:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <SaveToRO+0x204>)
 8003732:	69d8      	ldr	r0, [r3, #28]
 8003734:	b2c0      	uxtb	r0, r0
 8003736:	e79d      	b.n	8003674 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 8003738:	4b39      	ldr	r3, [pc, #228]	; (8003820 <SaveToRO+0x204>)
 800373a:	69d8      	ldr	r0, [r3, #28]
 800373c:	b2c0      	uxtb	r0, r0
 800373e:	e799      	b.n	8003674 <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 8003740:	3501      	adds	r5, #1
 8003742:	b2ed      	uxtb	r5, r5
 8003744:	4b33      	ldr	r3, [pc, #204]	; (8003814 <SaveToRO+0x1f8>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	42ab      	cmp	r3, r5
 800374a:	d956      	bls.n	80037fa <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) 
 800374c:	9501      	str	r5, [sp, #4]
 800374e:	00ab      	lsls	r3, r5, #2
 8003750:	195b      	adds	r3, r3, r5
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4642      	mov	r2, r8
 8003756:	5c9b      	ldrb	r3, [r3, r2]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f1      	beq.n	8003740 <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800375c:	23fe      	movs	r3, #254	; 0xfe
 800375e:	aa02      	add	r2, sp, #8
 8003760:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 8003762:	00a9      	lsls	r1, r5, #2
 8003764:	1949      	adds	r1, r1, r5
 8003766:	0089      	lsls	r1, r1, #2
 8003768:	4b2c      	ldr	r3, [pc, #176]	; (800381c <SaveToRO+0x200>)
 800376a:	469c      	mov	ip, r3
 800376c:	4461      	add	r1, ip
 800376e:	2214      	movs	r2, #20
 8003770:	ab02      	add	r3, sp, #8
 8003772:	1c58      	adds	r0, r3, #1
 8003774:	f00e fc8f 	bl	8012096 <memcpy>
 8003778:	2314      	movs	r3, #20
 800377a:	469b      	mov	fp, r3
 800377c:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800377e:	ae02      	add	r6, sp, #8
 8003780:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003782:	4f22      	ldr	r7, [pc, #136]	; (800380c <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 8003784:	5b32      	ldrh	r2, [r6, r4]
 8003786:	2300      	movs	r3, #0
 8003788:	0021      	movs	r1, r4
 800378a:	2001      	movs	r0, #1
 800378c:	f00c f924 	bl	800f9d8 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8003790:	481d      	ldr	r0, [pc, #116]	; (8003808 <SaveToRO+0x1ec>)
 8003792:	f00c f8f3 	bl	800f97c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8003796:	2800      	cmp	r0, #0
 8003798:	d1ca      	bne.n	8003730 <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2201      	movs	r2, #1
 800379e:	4393      	bics	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 80037a2:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 80037a4:	455c      	cmp	r4, fp
 80037a6:	d1ed      	bne.n	8003784 <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 80037a8:	2700      	movs	r7, #0
 80037aa:	9a01      	ldr	r2, [sp, #4]
 80037ac:	0093      	lsls	r3, r2, #2
 80037ae:	189e      	adds	r6, r3, r2
 80037b0:	00b6      	lsls	r6, r6, #2
 80037b2:	4b1a      	ldr	r3, [pc, #104]	; (800381c <SaveToRO+0x200>)
 80037b4:	469a      	mov	sl, r3
 80037b6:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <SaveToRO+0x1f0>)
 80037ba:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 80037bc:	4653      	mov	r3, sl
 80037be:	68de      	ldr	r6, [r3, #12]
 80037c0:	0030      	movs	r0, r6
 80037c2:	f7fc fca9 	bl	8000118 <strlen>
 80037c6:	3001      	adds	r0, #1
 80037c8:	0840      	lsrs	r0, r0, #1
 80037ca:	4287      	cmp	r7, r0
 80037cc:	d2b8      	bcs.n	8003740 <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 80037ce:	007b      	lsls	r3, r7, #1
 80037d0:	5af2      	ldrh	r2, [r6, r3]
 80037d2:	2300      	movs	r3, #0
 80037d4:	0021      	movs	r1, r4
 80037d6:	2001      	movs	r0, #1
 80037d8:	f00c f8fe 	bl	800f9d8 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80037dc:	480a      	ldr	r0, [pc, #40]	; (8003808 <SaveToRO+0x1ec>)
 80037de:	f00c f8cd 	bl	800f97c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d1a8      	bne.n	8003738 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80037e6:	465b      	mov	r3, fp
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2201      	movs	r2, #1
 80037ec:	4393      	bics	r3, r2
 80037ee:	465a      	mov	r2, fp
 80037f0:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 80037f2:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 80037f4:	3701      	adds	r7, #1
 80037f6:	b2ff      	uxtb	r7, r7
 80037f8:	e7e0      	b.n	80037bc <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 80037fa:	f00c f8b5 	bl	800f968 <HAL_FLASH_Lock>
	return result;
 80037fe:	2000      	movs	r0, #0
 8003800:	e738      	b.n	8003674 <SaveToRO+0x58>
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	0801d800 	.word	0x0801d800
 8003808:	0000c350 	.word	0x0000c350
 800380c:	40022000 	.word	0x40022000
 8003810:	20000b90 	.word	0x20000b90
 8003814:	20000ddb 	.word	0x20000ddb
 8003818:	0801dc00 	.word	0x0801dc00
 800381c:	200061d8 	.word	0x200061d8
 8003820:	200065f8 	.word	0x200065f8
 8003824:	2000001c 	.word	0x2000001c
 8003828:	200003b8 	.word	0x200003b8

0800382c <delSnipCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE delSnipCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 800382c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800382e:	b085      	sub	sp, #20
 8003830:	0005      	movs	r5, r0
 8003832:	0010      	movs	r0, r2
	static const int8_t *pcMessageOK = ( int8_t * ) "Snippet was deleted. Type snip to view updated list\n\r";
	static const int8_t *pcMessageWrong = ( int8_t * ) "The Snippet number was not found\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	9303      	str	r3, [sp, #12]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8003838:	2d00      	cmp	r5, #0
 800383a:	d101      	bne.n	8003840 <delSnipCommand+0x14>
 800383c:	b672      	cpsid	i
 800383e:	e7fe      	b.n	800383e <delSnipCommand+0x12>
	
	/* 1st parameter for Snippet index */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8003840:	aa03      	add	r2, sp, #12
 8003842:	2101      	movs	r1, #1
 8003844:	f00a fe9e 	bl	800e584 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8003848:	f00e fbad 	bl	8011fa6 <atoi>
 800384c:	9001      	str	r0, [sp, #4]
 800384e:	b2c6      	uxtb	r6, r0
	
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8003850:	2e00      	cmp	r6, #0
 8003852:	d003      	beq.n	800385c <delSnipCommand+0x30>
 8003854:	4b27      	ldr	r3, [pc, #156]	; (80038f4 <delSnipCommand+0xc8>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	42b3      	cmp	r3, r6
 800385a:	d207      	bcs.n	800386c <delSnipCommand+0x40>
	
	/* Respond to the command */
	if (result == BOS_OK)
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
	else
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 800385c:	2223      	movs	r2, #35	; 0x23
 800385e:	4926      	ldr	r1, [pc, #152]	; (80038f8 <delSnipCommand+0xcc>)
 8003860:	0028      	movs	r0, r5
 8003862:	f00e fc18 	bl	8012096 <memcpy>

	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8003866:	2000      	movs	r0, #0
 8003868:	b005      	add	sp, #20
 800386a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index-1].cond.conditionType = 0;
 800386c:	466b      	mov	r3, sp
 800386e:	791a      	ldrb	r2, [r3, #4]
 8003870:	3a01      	subs	r2, #1
 8003872:	4822      	ldr	r0, [pc, #136]	; (80038fc <delSnipCommand+0xd0>)
 8003874:	2314      	movs	r3, #20
 8003876:	4353      	muls	r3, r2
 8003878:	2700      	movs	r7, #0
 800387a:	541f      	strb	r7, [r3, r0]
		snippets[index-1].cond.mathOperator = 0;
 800387c:	18c4      	adds	r4, r0, r3
 800387e:	7067      	strb	r7, [r4, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 8003880:	3302      	adds	r3, #2
 8003882:	1818      	adds	r0, r3, r0
 8003884:	2204      	movs	r2, #4
 8003886:	0039      	movs	r1, r7
 8003888:	f00e fc0e 	bl	80120a8 <memset>
		snippets[index-1].state = false;
 800388c:	7427      	strb	r7, [r4, #16]
		free(snippets[index-1].cmd);
 800388e:	68e0      	ldr	r0, [r4, #12]
 8003890:	f00e fbd6 	bl	8012040 <free>
		snippets[index-1].cmd = NULL;
 8003894:	60e7      	str	r7, [r4, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8003896:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <delSnipCommand+0xc8>)
 8003898:	781f      	ldrb	r7, [r3, #0]
 800389a:	42be      	cmp	r6, r7
 800389c:	d213      	bcs.n	80038c6 <delSnipCommand+0x9a>
 800389e:	466b      	mov	r3, sp
 80038a0:	7919      	ldrb	r1, [r3, #4]
 80038a2:	2214      	movs	r2, #20
 80038a4:	0014      	movs	r4, r2
 80038a6:	434c      	muls	r4, r1
 80038a8:	4814      	ldr	r0, [pc, #80]	; (80038fc <delSnipCommand+0xd0>)
 80038aa:	1824      	adds	r4, r4, r0
 80038ac:	1e7b      	subs	r3, r7, #1
 80038ae:	1b9b      	subs	r3, r3, r6
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	185b      	adds	r3, r3, r1
 80038b4:	4353      	muls	r3, r2
 80038b6:	1880      	adds	r0, r0, r2
 80038b8:	181e      	adds	r6, r3, r0
			if (snippets[s].cond.conditionType) {
 80038ba:	7823      	ldrb	r3, [r4, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10d      	bne.n	80038dc <delSnipCommand+0xb0>
 80038c0:	3414      	adds	r4, #20
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 80038c2:	42b4      	cmp	r4, r6
 80038c4:	d1f9      	bne.n	80038ba <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 80038c6:	1e7b      	subs	r3, r7, #1
 80038c8:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <delSnipCommand+0xc8>)
 80038ca:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 80038cc:	f7ff fea6 	bl	800361c <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 80038d0:	2236      	movs	r2, #54	; 0x36
 80038d2:	490b      	ldr	r1, [pc, #44]	; (8003900 <delSnipCommand+0xd4>)
 80038d4:	0028      	movs	r0, r5
 80038d6:	f00e fbde 	bl	8012096 <memcpy>
 80038da:	e7c4      	b.n	8003866 <delSnipCommand+0x3a>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 80038dc:	2214      	movs	r2, #20
 80038de:	0021      	movs	r1, r4
 80038e0:	0020      	movs	r0, r4
 80038e2:	3814      	subs	r0, #20
 80038e4:	f00e fbd7 	bl	8012096 <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 80038e8:	2214      	movs	r2, #20
 80038ea:	2100      	movs	r1, #0
 80038ec:	0020      	movs	r0, r4
 80038ee:	f00e fbdb 	bl	80120a8 <memset>
 80038f2:	e7e5      	b.n	80038c0 <delSnipCommand+0x94>
 80038f4:	20000ddb 	.word	0x20000ddb
 80038f8:	08016c70 	.word	0x08016c70
 80038fc:	200061d8 	.word	0x200061d8
 8003900:	08016c38 	.word	0x08016c38

08003904 <pauseSnipCommand>:
{	
 8003904:	b510      	push	{r4, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	0004      	movs	r4, r0
 800390a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8003910:	2c00      	cmp	r4, #0
 8003912:	d101      	bne.n	8003918 <pauseSnipCommand+0x14>
 8003914:	b672      	cpsid	i
 8003916:	e7fe      	b.n	8003916 <pauseSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8003918:	aa01      	add	r2, sp, #4
 800391a:	2101      	movs	r1, #1
 800391c:	f00a fe32 	bl	800e584 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8003920:	f00e fb41 	bl	8011fa6 <atoi>
 8003924:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <pauseSnipCommand+0x2e>
 800392a:	4a0e      	ldr	r2, [pc, #56]	; (8003964 <pauseSnipCommand+0x60>)
 800392c:	7812      	ldrb	r2, [r2, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d207      	bcs.n	8003942 <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8003932:	2223      	movs	r2, #35	; 0x23
 8003934:	490c      	ldr	r1, [pc, #48]	; (8003968 <pauseSnipCommand+0x64>)
 8003936:	0020      	movs	r0, r4
 8003938:	f00e fbad 	bl	8012096 <memcpy>
}
 800393c:	2000      	movs	r0, #0
 800393e:	b002      	add	sp, #8
 8003940:	bd10      	pop	{r4, pc}
		snippets[index-1].state = false;
 8003942:	b2c0      	uxtb	r0, r0
 8003944:	3801      	subs	r0, #1
 8003946:	2314      	movs	r3, #20
 8003948:	4343      	muls	r3, r0
 800394a:	4808      	ldr	r0, [pc, #32]	; (800396c <pauseSnipCommand+0x68>)
 800394c:	18c0      	adds	r0, r0, r3
 800394e:	2300      	movs	r3, #0
 8003950:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8003952:	f7ff fe63 	bl	800361c <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8003956:	2235      	movs	r2, #53	; 0x35
 8003958:	4905      	ldr	r1, [pc, #20]	; (8003970 <pauseSnipCommand+0x6c>)
 800395a:	0020      	movs	r0, r4
 800395c:	f00e fb9b 	bl	8012096 <memcpy>
 8003960:	e7ec      	b.n	800393c <pauseSnipCommand+0x38>
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	20000ddb 	.word	0x20000ddb
 8003968:	08016c70 	.word	0x08016c70
 800396c:	200061d8 	.word	0x200061d8
 8003970:	08017148 	.word	0x08017148

08003974 <actSnipCommand>:
{	
 8003974:	b510      	push	{r4, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	0004      	movs	r4, r0
 800397a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8003980:	2c00      	cmp	r4, #0
 8003982:	d101      	bne.n	8003988 <actSnipCommand+0x14>
 8003984:	b672      	cpsid	i
 8003986:	e7fe      	b.n	8003986 <actSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8003988:	aa01      	add	r2, sp, #4
 800398a:	2101      	movs	r1, #1
 800398c:	f00a fdfa 	bl	800e584 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8003990:	f00e fb09 	bl	8011fa6 <atoi>
 8003994:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <actSnipCommand+0x2e>
 800399a:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <actSnipCommand+0x60>)
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d207      	bcs.n	80039b2 <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 80039a2:	2223      	movs	r2, #35	; 0x23
 80039a4:	490c      	ldr	r1, [pc, #48]	; (80039d8 <actSnipCommand+0x64>)
 80039a6:	0020      	movs	r0, r4
 80039a8:	f00e fb75 	bl	8012096 <memcpy>
}
 80039ac:	2000      	movs	r0, #0
 80039ae:	b002      	add	sp, #8
 80039b0:	bd10      	pop	{r4, pc}
		snippets[index-1].state = true;
 80039b2:	b2c0      	uxtb	r0, r0
 80039b4:	3801      	subs	r0, #1
 80039b6:	2314      	movs	r3, #20
 80039b8:	4343      	muls	r3, r0
 80039ba:	4808      	ldr	r0, [pc, #32]	; (80039dc <actSnipCommand+0x68>)
 80039bc:	18c0      	adds	r0, r0, r3
 80039be:	2301      	movs	r3, #1
 80039c0:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 80039c2:	f7ff fe2b 	bl	800361c <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 80039c6:	2238      	movs	r2, #56	; 0x38
 80039c8:	4905      	ldr	r1, [pc, #20]	; (80039e0 <actSnipCommand+0x6c>)
 80039ca:	0020      	movs	r0, r4
 80039cc:	f00e fb63 	bl	8012096 <memcpy>
 80039d0:	e7ec      	b.n	80039ac <actSnipCommand+0x38>
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	20000ddb 	.word	0x20000ddb
 80039d8:	08016c70 	.word	0x08016c70
 80039dc:	200061d8 	.word	0x200061d8
 80039e0:	08016950 	.word	0x08016950

080039e4 <ClearROtopology>:
{
 80039e4:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 80039e6:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <ClearROtopology+0x20>)
 80039e8:	2100      	movs	r1, #0
 80039ea:	4807      	ldr	r0, [pc, #28]	; (8003a08 <ClearROtopology+0x24>)
 80039ec:	f00e fb5c 	bl	80120a8 <memset>
	N = 1; myID = 0;
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <ClearROtopology+0x28>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <ClearROtopology+0x2c>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 80039fc:	f7ff fe0e 	bl	800361c <SaveToRO>
}
 8003a00:	bd10      	pop	{r4, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	00000226 	.word	0x00000226
 8003a08:	200003b8 	.word	0x200003b8
 8003a0c:	2000001c 	.word	0x2000001c
 8003a10:	20000b90 	.word	0x20000b90

08003a14 <LoadROsnippets>:
{
 8003a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a16:	46de      	mov	lr, fp
 8003a18:	4657      	mov	r7, sl
 8003a1a:	464e      	mov	r6, r9
 8003a1c:	b5c0      	push	{r6, r7, lr}
 8003a1e:	b082      	sub	sp, #8
	char *snipBuffer = (char *) malloc(cmdMAX_INPUT_SIZE);
 8003a20:	2032      	movs	r0, #50	; 0x32
 8003a22:	f00e fb03 	bl	801202c <malloc>
 8003a26:	1e07      	subs	r7, r0, #0
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8003a28:	d100      	bne.n	8003a2c <LoadROsnippets+0x18>
 8003a2a:	e071      	b.n	8003b10 <LoadROsnippets+0xfc>
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 8003a2c:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <LoadROsnippets+0x100>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	20ff      	movs	r0, #255	; 0xff
 8003a32:	2bfe      	cmp	r3, #254	; 0xfe
 8003a34:	d166      	bne.n	8003b04 <LoadROsnippets+0xf0>
 8003a36:	4e38      	ldr	r6, [pc, #224]	; (8003b18 <LoadROsnippets+0x104>)
 8003a38:	3b9a      	subs	r3, #154	; 0x9a
 8003a3a:	469b      	mov	fp, r3
 8003a3c:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 8003a3e:	4d35      	ldr	r5, [pc, #212]	; (8003b14 <LoadROsnippets+0x100>)
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 8003a40:	1c7b      	adds	r3, r7, #1
 8003a42:	9301      	str	r3, [sp, #4]
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003a44:	4b35      	ldr	r3, [pc, #212]	; (8003b1c <LoadROsnippets+0x108>)
 8003a46:	4699      	mov	r9, r3
 8003a48:	e023      	b.n	8003a92 <LoadROsnippets+0x7e>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003a4a:	2400      	movs	r4, #0
		if (snipBuffer[i-1] != 0)		++i;	// String termination char was not recorded, then add one
 8003a4c:	193b      	adds	r3, r7, r4
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <LoadROsnippets+0x46>
 8003a56:	3401      	adds	r4, #1
 8003a58:	b2e4      	uxtb	r4, r4
		snippets[s].cmd = (char *) malloc(i);
 8003a5a:	0020      	movs	r0, r4
 8003a5c:	f00e fae6 	bl	801202c <malloc>
 8003a60:	4653      	mov	r3, sl
 8003a62:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d03f      	beq.n	8003ae8 <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd, snipBuffer, i);
 8003a68:	0022      	movs	r2, r4
 8003a6a:	0039      	movs	r1, r7
 8003a6c:	f00e fb13 	bl	8012096 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003a70:	464b      	mov	r3, r9
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	464a      	mov	r2, r9
 8003a78:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);		
 8003a7a:	0022      	movs	r2, r4
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	0038      	movs	r0, r7
 8003a80:	f00e fb12 	bl	80120a8 <memset>
		if (*(uint8_t *)currentAdd != 0xFE)	break;
 8003a84:	9b00      	ldr	r3, [sp, #0]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2bfe      	cmp	r3, #254	; 0xfe
 8003a8a:	d137      	bne.n	8003afc <LoadROsnippets+0xe8>
 8003a8c:	3614      	adds	r6, #20
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 8003a8e:	455e      	cmp	r6, fp
 8003a90:	d034      	beq.n	8003afc <LoadROsnippets+0xe8>
 8003a92:	0028      	movs	r0, r5
 8003a94:	3014      	adds	r0, #20
{
 8003a96:	002b      	movs	r3, r5
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 8003a98:	1b79      	subs	r1, r7, r5
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	54ca      	strb	r2, [r1, r3]
 8003a9e:	3301      	adds	r3, #1
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 8003aa0:	4283      	cmp	r3, r0
 8003aa2:	d1fa      	bne.n	8003a9a <LoadROsnippets+0x86>
 8003aa4:	3514      	adds	r5, #20
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 8003aa6:	46b2      	mov	sl, r6
 8003aa8:	2214      	movs	r2, #20
 8003aaa:	9901      	ldr	r1, [sp, #4]
 8003aac:	0030      	movs	r0, r6
 8003aae:	f00e faf2 	bl	8012096 <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003ab2:	2214      	movs	r2, #20
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	0038      	movs	r0, r7
 8003ab8:	f00e faf6 	bl	80120a8 <memset>
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8003abc:	9500      	str	r5, [sp, #0]
 8003abe:	782a      	ldrb	r2, [r5, #0]
 8003ac0:	1c93      	adds	r3, r2, #2
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d9c0      	bls.n	8003a4a <LoadROsnippets+0x36>
 8003ac8:	0039      	movs	r1, r7
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003aca:	2400      	movs	r4, #0
			snipBuffer[i] = *(uint8_t *)currentAdd;
 8003acc:	700a      	strb	r2, [r1, #0]
			++currentAdd; ++i;
 8003ace:	3501      	adds	r5, #1
 8003ad0:	3401      	adds	r4, #1
 8003ad2:	b2e4      	uxtb	r4, r4
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8003ad4:	9500      	str	r5, [sp, #0]
 8003ad6:	782a      	ldrb	r2, [r5, #0]
 8003ad8:	1c93      	adds	r3, r2, #2
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d9b5      	bls.n	8003a4c <LoadROsnippets+0x38>
 8003ae0:	3101      	adds	r1, #1
 8003ae2:	2c32      	cmp	r4, #50	; 0x32
 8003ae4:	d1f2      	bne.n	8003acc <LoadROsnippets+0xb8>
 8003ae6:	e7b1      	b.n	8003a4c <LoadROsnippets+0x38>
			memset(&snippets[s], 0, sizeof(snippet_t) );
 8003ae8:	2214      	movs	r2, #20
 8003aea:	2100      	movs	r1, #0
 8003aec:	4650      	mov	r0, sl
 8003aee:	f00e fadb 	bl	80120a8 <memset>
			free(snipBuffer);			
 8003af2:	0038      	movs	r0, r7
 8003af4:	f00e faa4 	bl	8012040 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003af8:	200e      	movs	r0, #14
 8003afa:	e003      	b.n	8003b04 <LoadROsnippets+0xf0>
	free(snipBuffer);
 8003afc:	0038      	movs	r0, r7
 8003afe:	f00e fa9f 	bl	8012040 <free>
	return BOS_OK;
 8003b02:	2000      	movs	r0, #0
}
 8003b04:	b002      	add	sp, #8
 8003b06:	bc1c      	pop	{r2, r3, r4}
 8003b08:	4691      	mov	r9, r2
 8003b0a:	469a      	mov	sl, r3
 8003b0c:	46a3      	mov	fp, r4
 8003b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8003b10:	20fb      	movs	r0, #251	; 0xfb
 8003b12:	e7f7      	b.n	8003b04 <LoadROsnippets+0xf0>
 8003b14:	0801dc00 	.word	0x0801dc00
 8003b18:	200061d8 	.word	0x200061d8
 8003b1c:	20000ddb 	.word	0x20000ddb

08003b20 <LoadROtopology>:
{
 8003b20:	b5f0      	push	{r4, r5, r6, r7, lr}
	temp = (*(__IO uint16_t*)(RO_START_ADDRESS));
 8003b22:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <LoadROtopology+0x74>)
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
	if (temp == 0xFFFF)				// Memory has been erased
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <LoadROtopology+0x78>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d025      	beq.n	8003b7a <LoadROtopology+0x5a>
		N = (uint8_t) (temp>>8);
 8003b2e:	0a1a      	lsrs	r2, r3, #8
		if (N == 0)	N = 1;
 8003b30:	d02b      	beq.n	8003b8a <LoadROtopology+0x6a>
		N = (uint8_t) (temp>>8);
 8003b32:	491a      	ldr	r1, [pc, #104]	; (8003b9c <LoadROtopology+0x7c>)
 8003b34:	700a      	strb	r2, [r1, #0]
		myID = (uint8_t) temp;
 8003b36:	4a1a      	ldr	r2, [pc, #104]	; (8003ba0 <LoadROtopology+0x80>)
 8003b38:	7013      	strb	r3, [r2, #0]
		for(uint8_t i=1 ; i<=N ; i++)
 8003b3a:	4b18      	ldr	r3, [pc, #96]	; (8003b9c <LoadROtopology+0x7c>)
 8003b3c:	781d      	ldrb	r5, [r3, #0]
	return result;
 8003b3e:	2000      	movs	r0, #0
		for(uint8_t i=1 ; i<=N ; i++)
 8003b40:	2d00      	cmp	r5, #0
 8003b42:	d019      	beq.n	8003b78 <LoadROtopology+0x58>
 8003b44:	2401      	movs	r4, #1
	uint16_t add = 2, temp = 0;
 8003b46:	2302      	movs	r3, #2
 8003b48:	2716      	movs	r7, #22
 8003b4a:	4e16      	ldr	r6, [pc, #88]	; (8003ba4 <LoadROtopology+0x84>)
 8003b4c:	003a      	movs	r2, r7
 8003b4e:	4362      	muls	r2, r4
 8003b50:	3a16      	subs	r2, #22
 8003b52:	1992      	adds	r2, r2, r6
 8003b54:	0018      	movs	r0, r3
 8003b56:	3016      	adds	r0, #22
 8003b58:	b280      	uxth	r0, r0
				array[i-1][j] = (*(__IO uint16_t*)(RO_START_ADDRESS+add));
 8003b5a:	490e      	ldr	r1, [pc, #56]	; (8003b94 <LoadROtopology+0x74>)
 8003b5c:	1859      	adds	r1, r3, r1
 8003b5e:	8809      	ldrh	r1, [r1, #0]
 8003b60:	8011      	strh	r1, [r2, #0]
				add += 2;			
 8003b62:	3302      	adds	r3, #2
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3202      	adds	r2, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8003b68:	4283      	cmp	r3, r0
 8003b6a:	d1f6      	bne.n	8003b5a <LoadROtopology+0x3a>
		for(uint8_t i=1 ; i<=N ; i++)
 8003b6c:	3401      	adds	r4, #1
 8003b6e:	b2e4      	uxtb	r4, r4
				add += 2;			
 8003b70:	0003      	movs	r3, r0
		for(uint8_t i=1 ; i<=N ; i++)
 8003b72:	42ac      	cmp	r4, r5
 8003b74:	d9ea      	bls.n	8003b4c <LoadROtopology+0x2c>
	return result;
 8003b76:	2000      	movs	r0, #0
}
 8003b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N = 1;
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <LoadROtopology+0x7c>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	701a      	strb	r2, [r3, #0]
		myID = 0;
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <LoadROtopology+0x80>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003b86:	20fa      	movs	r0, #250	; 0xfa
 8003b88:	e7f6      	b.n	8003b78 <LoadROtopology+0x58>
		if (N == 0)	N = 1;
 8003b8a:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <LoadROtopology+0x7c>)
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	7011      	strb	r1, [r2, #0]
 8003b90:	e7d1      	b.n	8003b36 <LoadROtopology+0x16>
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	0801d800 	.word	0x0801d800
 8003b98:	0000ffff 	.word	0x0000ffff
 8003b9c:	2000001c 	.word	0x2000001c
 8003ba0:	20000b90 	.word	0x20000b90
 8003ba4:	200003b8 	.word	0x200003b8

08003ba8 <SaveEEportsDir>:
{
 8003ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003baa:	b083      	sub	sp, #12
	for(uint8_t i=1 ; i<=N ; i++)
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <SaveEEportsDir+0x4c>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01a      	beq.n	8003bea <SaveEEportsDir+0x42>
 8003bb4:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9301      	str	r3, [sp, #4]
		if (arrayPortsDir[i-1])
 8003bba:	4e0f      	ldr	r6, [pc, #60]	; (8003bf8 <SaveEEportsDir+0x50>)
	for(uint8_t i=1 ; i<=N ; i++)
 8003bbc:	4f0d      	ldr	r7, [pc, #52]	; (8003bf4 <SaveEEportsDir+0x4c>)
 8003bbe:	e008      	b.n	8003bd2 <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8003bc0:	1c60      	adds	r0, r4, #1
 8003bc2:	f006 fdfb 	bl	800a7bc <EE_WriteVariable>
 8003bc6:	e00a      	b.n	8003bde <SaveEEportsDir+0x36>
	for(uint8_t i=1 ; i<=N ; i++)
 8003bc8:	3401      	adds	r4, #1
 8003bca:	b2e4      	uxtb	r4, r4
 8003bcc:	783b      	ldrb	r3, [r7, #0]
 8003bce:	42a3      	cmp	r3, r4
 8003bd0:	d30d      	bcc.n	8003bee <SaveEEportsDir+0x46>
		if (arrayPortsDir[i-1])
 8003bd2:	0025      	movs	r5, r4
 8003bd4:	1e63      	subs	r3, r4, #1
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	5b99      	ldrh	r1, [r3, r6]
 8003bda:	2900      	cmp	r1, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <SaveEEportsDir+0x18>
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003bde:	3502      	adds	r5, #2
 8003be0:	2d1b      	cmp	r5, #27
 8003be2:	ddf1      	ble.n	8003bc8 <SaveEEportsDir+0x20>
			result = BOS_ERR_EEPROM;
 8003be4:	230a      	movs	r3, #10
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	e7ee      	b.n	8003bc8 <SaveEEportsDir+0x20>
	BOS_Status result = BOS_OK; 
 8003bea:	2300      	movs	r3, #0
 8003bec:	9301      	str	r3, [sp, #4]
}
 8003bee:	9801      	ldr	r0, [sp, #4]
 8003bf0:	b003      	add	sp, #12
 8003bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf4:	2000001c 	.word	0x2000001c
 8003bf8:	200005e0 	.word	0x200005e0

08003bfc <ClearEEportsDir>:
{
 8003bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfe:	b083      	sub	sp, #12
	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 8003c00:	2232      	movs	r2, #50	; 0x32
 8003c02:	2100      	movs	r1, #0
 8003c04:	4813      	ldr	r0, [pc, #76]	; (8003c54 <ClearEEportsDir+0x58>)
 8003c06:	f00e fa4f 	bl	80120a8 <memset>
	for(uint8_t i=1 ; i<=N ; i++)
 8003c0a:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <ClearEEportsDir+0x5c>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01a      	beq.n	8003c48 <ClearEEportsDir+0x4c>
 8003c12:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003c14:	2300      	movs	r3, #0
 8003c16:	9301      	str	r3, [sp, #4]
		if (arrayPortsDir[i-1])
 8003c18:	4e0e      	ldr	r6, [pc, #56]	; (8003c54 <ClearEEportsDir+0x58>)
	for(uint8_t i=1 ; i<=N ; i++)
 8003c1a:	4f0f      	ldr	r7, [pc, #60]	; (8003c58 <ClearEEportsDir+0x5c>)
 8003c1c:	e008      	b.n	8003c30 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8003c1e:	1c60      	adds	r0, r4, #1
 8003c20:	f006 fdcc 	bl	800a7bc <EE_WriteVariable>
 8003c24:	e00a      	b.n	8003c3c <ClearEEportsDir+0x40>
	for(uint8_t i=1 ; i<=N ; i++)
 8003c26:	3401      	adds	r4, #1
 8003c28:	b2e4      	uxtb	r4, r4
 8003c2a:	783b      	ldrb	r3, [r7, #0]
 8003c2c:	42a3      	cmp	r3, r4
 8003c2e:	d30d      	bcc.n	8003c4c <ClearEEportsDir+0x50>
		if (arrayPortsDir[i-1])
 8003c30:	0025      	movs	r5, r4
 8003c32:	1e63      	subs	r3, r4, #1
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	5b99      	ldrh	r1, [r3, r6]
 8003c38:	2900      	cmp	r1, #0
 8003c3a:	d1f0      	bne.n	8003c1e <ClearEEportsDir+0x22>
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003c3c:	3502      	adds	r5, #2
 8003c3e:	2d1b      	cmp	r5, #27
 8003c40:	ddf1      	ble.n	8003c26 <ClearEEportsDir+0x2a>
			result = BOS_ERR_EEPROM;
 8003c42:	230a      	movs	r3, #10
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	e7ee      	b.n	8003c26 <ClearEEportsDir+0x2a>
	BOS_Status result = BOS_OK; 
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9301      	str	r3, [sp, #4]
}
 8003c4c:	9801      	ldr	r0, [sp, #4]
 8003c4e:	b003      	add	sp, #12
 8003c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	200005e0 	.word	0x200005e0
 8003c58:	2000001c 	.word	0x2000001c

08003c5c <LoadEEportsDir>:
{
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(uint8_t i=1 ; i<=N ; i++)
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <LoadEEportsDir+0x40>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 8003c62:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d017      	beq.n	8003c98 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8003c68:	490d      	ldr	r1, [pc, #52]	; (8003ca0 <LoadEEportsDir+0x44>)
 8003c6a:	2002      	movs	r0, #2
 8003c6c:	f006 fd76 	bl	800a75c <EE_ReadVariable>
	for(uint8_t i=1 ; i<=N ; i++)
 8003c70:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003c72:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 8003c74:	4f09      	ldr	r7, [pc, #36]	; (8003c9c <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8003c76:	4e0a      	ldr	r6, [pc, #40]	; (8003ca0 <LoadEEportsDir+0x44>)
	for(uint8_t i=1 ; i<=N ; i++)
 8003c78:	3401      	adds	r4, #1
 8003c7a:	b2e4      	uxtb	r4, r4
 8003c7c:	783b      	ldrb	r3, [r7, #0]
 8003c7e:	42a3      	cmp	r3, r4
 8003c80:	d30a      	bcc.n	8003c98 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8003c82:	1e61      	subs	r1, r4, #1
 8003c84:	0049      	lsls	r1, r1, #1
 8003c86:	1871      	adds	r1, r6, r1
 8003c88:	1c60      	adds	r0, r4, #1
 8003c8a:	f006 fd67 	bl	800a75c <EE_ReadVariable>
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003c8e:	1ca3      	adds	r3, r4, #2
 8003c90:	2b1b      	cmp	r3, #27
 8003c92:	ddf1      	ble.n	8003c78 <LoadEEportsDir+0x1c>
			result = BOS_ERR_EEPROM;
 8003c94:	250a      	movs	r5, #10
 8003c96:	e7ef      	b.n	8003c78 <LoadEEportsDir+0x1c>
}
 8003c98:	0028      	movs	r0, r5
 8003c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c9c:	2000001c 	.word	0x2000001c
 8003ca0:	200005e0 	.word	0x200005e0

08003ca4 <SaveEEalias>:
{
 8003ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca6:	46d6      	mov	lr, sl
 8003ca8:	464f      	mov	r7, r9
 8003caa:	4646      	mov	r6, r8
 8003cac:	b5c0      	push	{r6, r7, lr}
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003cae:	2600      	movs	r6, #0
	uint16_t add = 0, temp = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	4698      	mov	r8, r3
		if (moduleAlias[i][0]) 				
 8003cb4:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <SaveEEalias+0x7c>)
 8003cb6:	469a      	mov	sl, r3
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <SaveEEalias+0x80>)
 8003cba:	4699      	mov	r9, r3
 8003cbc:	e005      	b.n	8003cca <SaveEEalias+0x26>
 8003cbe:	3601      	adds	r6, #1
 8003cc0:	b2f6      	uxtb	r6, r6
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	42b3      	cmp	r3, r6
 8003cc8:	d324      	bcc.n	8003d14 <SaveEEalias+0x70>
		if (moduleAlias[i][0]) 				
 8003cca:	00b3      	lsls	r3, r6, #2
 8003ccc:	199b      	adds	r3, r3, r6
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4652      	mov	r2, sl
 8003cd2:	5c9b      	ldrb	r3, [r3, r2]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f2      	beq.n	8003cbe <SaveEEalias+0x1a>
 8003cd8:	00b5      	lsls	r5, r6, #2
 8003cda:	19ad      	adds	r5, r5, r6
 8003cdc:	006d      	lsls	r5, r5, #1
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <SaveEEalias+0x7c>)
 8003ce0:	469c      	mov	ip, r3
 8003ce2:	4465      	add	r5, ip
 8003ce4:	4644      	mov	r4, r8
 8003ce6:	341c      	adds	r4, #28
 8003ce8:	b2a4      	uxth	r4, r4
 8003cea:	4647      	mov	r7, r8
 8003cec:	3721      	adds	r7, #33	; 0x21
 8003cee:	b2bf      	uxth	r7, r7
				temp = (uint16_t) (moduleAlias[i][j-1]<<8) + moduleAlias[i][j];
 8003cf0:	782b      	ldrb	r3, [r5, #0]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	7869      	ldrb	r1, [r5, #1]
 8003cf6:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE+add, temp);
 8003cf8:	b289      	uxth	r1, r1
 8003cfa:	0020      	movs	r0, r4
 8003cfc:	f006 fd5e 	bl	800a7bc <EE_WriteVariable>
 8003d00:	3502      	adds	r5, #2
 8003d02:	3401      	adds	r4, #1
 8003d04:	b2a4      	uxth	r4, r4
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003d06:	42bc      	cmp	r4, r7
 8003d08:	d1f2      	bne.n	8003cf0 <SaveEEalias+0x4c>
 8003d0a:	4643      	mov	r3, r8
 8003d0c:	3305      	adds	r3, #5
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	4698      	mov	r8, r3
 8003d12:	e7d4      	b.n	8003cbe <SaveEEalias+0x1a>
}
 8003d14:	2000      	movs	r0, #0
 8003d16:	bc1c      	pop	{r2, r3, r4}
 8003d18:	4690      	mov	r8, r2
 8003d1a:	4699      	mov	r9, r3
 8003d1c:	46a2      	mov	sl, r4
 8003d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d20:	20000a8c 	.word	0x20000a8c
 8003d24:	2000001c 	.word	0x2000001c

08003d28 <LoadEEalias>:
{
 8003d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2a:	46de      	mov	lr, fp
 8003d2c:	4657      	mov	r7, sl
 8003d2e:	464e      	mov	r6, r9
 8003d30:	4645      	mov	r5, r8
 8003d32:	b5e0      	push	{r5, r6, r7, lr}
 8003d34:	b083      	sub	sp, #12
	uint16_t add = 0, temp = 0;
 8003d36:	466b      	mov	r3, sp
 8003d38:	2200      	movs	r2, #0
 8003d3a:	80da      	strh	r2, [r3, #6]
 8003d3c:	241c      	movs	r4, #28
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003d3e:	2700      	movs	r7, #0
 8003d40:	4b18      	ldr	r3, [pc, #96]	; (8003da4 <LoadEEalias+0x7c>)
 8003d42:	469a      	mov	sl, r3
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 8003d44:	469b      	mov	fp, r3
 8003d46:	e00c      	b.n	8003d62 <LoadEEalias+0x3a>
 8003d48:	464b      	mov	r3, r9
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	444b      	add	r3, r9
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	445b      	add	r3, fp
 8003d52:	2200      	movs	r2, #0
 8003d54:	725a      	strb	r2, [r3, #9]
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003d56:	3701      	adds	r7, #1
 8003d58:	b2ff      	uxtb	r7, r7
 8003d5a:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <LoadEEalias+0x80>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	42bb      	cmp	r3, r7
 8003d60:	d317      	bcc.n	8003d92 <LoadEEalias+0x6a>
 8003d62:	00bd      	lsls	r5, r7, #2
 8003d64:	19ed      	adds	r5, r5, r7
 8003d66:	006d      	lsls	r5, r5, #1
 8003d68:	4455      	add	r5, sl
 8003d6a:	1d63      	adds	r3, r4, #5
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8003d70:	466b      	mov	r3, sp
 8003d72:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] = (uint8_t) temp;
 8003d74:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8003d76:	0031      	movs	r1, r6
 8003d78:	0020      	movs	r0, r4
 8003d7a:	f006 fcef 	bl	800a75c <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 8003d7e:	8833      	ldrh	r3, [r6, #0]
 8003d80:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	702b      	strb	r3, [r5, #0]
 8003d86:	3401      	adds	r4, #1
 8003d88:	b2a4      	uxth	r4, r4
 8003d8a:	3502      	adds	r5, #2
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003d8c:	45a0      	cmp	r8, r4
 8003d8e:	d1f2      	bne.n	8003d76 <LoadEEalias+0x4e>
 8003d90:	e7da      	b.n	8003d48 <LoadEEalias+0x20>
}
 8003d92:	2000      	movs	r0, #0
 8003d94:	b003      	add	sp, #12
 8003d96:	bc3c      	pop	{r2, r3, r4, r5}
 8003d98:	4690      	mov	r8, r2
 8003d9a:	4699      	mov	r9, r3
 8003d9c:	46a2      	mov	sl, r4
 8003d9e:	46ab      	mov	fp, r5
 8003da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	20000a8c 	.word	0x20000a8c
 8003da8:	2000001c 	.word	0x2000001c

08003dac <LoadEEgroup>:
{
 8003dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dae:	46d6      	mov	lr, sl
 8003db0:	464f      	mov	r7, r9
 8003db2:	4646      	mov	r6, r8
 8003db4:	b5c0      	push	{r6, r7, lr}
 8003db6:	b082      	sub	sp, #8
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8003db8:	466b      	mov	r3, sp
 8003dba:	2200      	movs	r2, #0
 8003dbc:	80da      	strh	r2, [r3, #6]
	for(i=0 ; i<N ; i++)			// N modules
 8003dbe:	4b22      	ldr	r3, [pc, #136]	; (8003e48 <LoadEEgroup+0x9c>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01d      	beq.n	8003e02 <LoadEEgroup+0x56>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8003dc6:	2500      	movs	r5, #0
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 8003dc8:	4e20      	ldr	r6, [pc, #128]	; (8003e4c <LoadEEgroup+0xa0>)
	for(i=0 ; i<N ; i++)			// N modules
 8003dca:	4c1f      	ldr	r4, [pc, #124]	; (8003e48 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 8003dcc:	b2e9      	uxtb	r1, r5
 8003dce:	0049      	lsls	r1, r1, #1
 8003dd0:	1871      	adds	r1, r6, r1
 8003dd2:	0028      	movs	r0, r5
 8003dd4:	30cb      	adds	r0, #203	; 0xcb
 8003dd6:	b280      	uxth	r0, r0
 8003dd8:	f006 fcc0 	bl	800a75c <EE_ReadVariable>
		add++;
 8003ddc:	3501      	adds	r5, #1
 8003dde:	b2ad      	uxth	r5, r5
	for(i=0 ; i<N ; i++)			// N modules
 8003de0:	7822      	ldrb	r2, [r4, #0]
 8003de2:	b2eb      	uxtb	r3, r5
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d8f1      	bhi.n	8003dcc <LoadEEgroup+0x20>
 8003de8:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <LoadEEgroup+0xa4>)
 8003dea:	4699      	mov	r9, r3
 8003dec:	002c      	movs	r4, r5
 8003dee:	3499      	adds	r4, #153	; 0x99
 8003df0:	b2a4      	uxth	r4, r4
 8003df2:	35cb      	adds	r5, #203	; 0xcb
 8003df4:	b2ab      	uxth	r3, r5
 8003df6:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8003df8:	466b      	mov	r3, sp
 8003dfa:	1d9e      	adds	r6, r3, #6
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	469a      	mov	sl, r3
 8003e00:	e009      	b.n	8003e16 <LoadEEgroup+0x6a>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8003e02:	2500      	movs	r5, #0
 8003e04:	e7f0      	b.n	8003de8 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8003e06:	464b      	mov	r3, r9
 8003e08:	4652      	mov	r2, sl
 8003e0a:	725a      	strb	r2, [r3, #9]
 8003e0c:	230a      	movs	r3, #10
 8003e0e:	469c      	mov	ip, r3
 8003e10:	44e1      	add	r9, ip
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8003e12:	4544      	cmp	r4, r8
 8003e14:	d010      	beq.n	8003e38 <LoadEEgroup+0x8c>
 8003e16:	1d67      	adds	r7, r4, #5
 8003e18:	b2bf      	uxth	r7, r7
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8003e1a:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8003e1c:	0031      	movs	r1, r6
 8003e1e:	0020      	movs	r0, r4
 8003e20:	f006 fc9c 	bl	800a75c <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 8003e24:	8833      	ldrh	r3, [r6, #0]
 8003e26:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
 8003e28:	0a1b      	lsrs	r3, r3, #8
 8003e2a:	702b      	strb	r3, [r5, #0]
 8003e2c:	3401      	adds	r4, #1
 8003e2e:	b2a4      	uxth	r4, r4
 8003e30:	3502      	adds	r5, #2
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003e32:	42bc      	cmp	r4, r7
 8003e34:	d1f2      	bne.n	8003e1c <LoadEEgroup+0x70>
 8003e36:	e7e6      	b.n	8003e06 <LoadEEgroup+0x5a>
}
 8003e38:	2000      	movs	r0, #0
 8003e3a:	b002      	add	sp, #8
 8003e3c:	bc1c      	pop	{r2, r3, r4}
 8003e3e:	4690      	mov	r8, r2
 8003e40:	4699      	mov	r9, r3
 8003e42:	46a2      	mov	sl, r4
 8003e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	2000001c 	.word	0x2000001c
 8003e4c:	200008d0 	.word	0x200008d0
 8003e50:	2000086c 	.word	0x2000086c

08003e54 <SaveEEstreams>:
{
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	46de      	mov	lr, fp
 8003e58:	4657      	mov	r7, sl
 8003e5a:	464e      	mov	r6, r9
 8003e5c:	4645      	mov	r5, r8
 8003e5e:	b5e0      	push	{r5, r6, r7, lr}
 8003e60:	000f      	movs	r7, r1
 8003e62:	0016      	movs	r6, r2
 8003e64:	4699      	mov	r9, r3
 8003e66:	ab0a      	add	r3, sp, #40	; 0x28
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	469b      	mov	fp, r3
 8003e6c:	ab0b      	add	r3, sp, #44	; 0x2c
 8003e6e:	781d      	ldrb	r5, [r3, #0]
 8003e70:	ab0c      	add	r3, sp, #48	; 0x30
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	469a      	mov	sl, r3
 8003e76:	ab0d      	add	r3, sp, #52	; 0x34
 8003e78:	781c      	ldrb	r4, [r3, #0]
 8003e7a:	ab0e      	add	r3, sp, #56	; 0x38
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	4698      	mov	r8, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction);			/* Direction */
 8003e80:	b281      	uxth	r1, r0
 8003e82:	20e4      	movs	r0, #228	; 0xe4
 8003e84:	f006 fc9a 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) (count >> 8)));				/* Count high half-word */
 8003e88:	0a39      	lsrs	r1, r7, #8
 8003e8a:	b289      	uxth	r1, r1
 8003e8c:	20e5      	movs	r0, #229	; 0xe5
 8003e8e:	f006 fc95 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) count));								/* Count low half-word */
 8003e92:	b2b9      	uxth	r1, r7
 8003e94:	20e6      	movs	r0, #230	; 0xe6
 8003e96:	f006 fc91 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) (timeout >> 8)));			/* Timeout high half-word */
 8003e9a:	0a31      	lsrs	r1, r6, #8
 8003e9c:	b289      	uxth	r1, r1
 8003e9e:	20e7      	movs	r0, #231	; 0xe7
 8003ea0:	f006 fc8c 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) timeout));							/* Timeout low half-word */
 8003ea4:	b2b1      	uxth	r1, r6
 8003ea6:	20e8      	movs	r0, #232	; 0xe8
 8003ea8:	f006 fc88 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) (src1 << 8) ) + (uint16_t) dst1);			/* src1 | dst1 */
 8003eac:	464b      	mov	r3, r9
 8003eae:	0219      	lsls	r1, r3, #8
 8003eb0:	4459      	add	r1, fp
 8003eb2:	b289      	uxth	r1, r1
 8003eb4:	20e9      	movs	r0, #233	; 0xe9
 8003eb6:	f006 fc81 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) (src2 << 8) ) + (uint16_t) dst2);			/* src1 | dst1 */
 8003eba:	022d      	lsls	r5, r5, #8
 8003ebc:	4455      	add	r5, sl
 8003ebe:	b2a9      	uxth	r1, r5
 8003ec0:	20ea      	movs	r0, #234	; 0xea
 8003ec2:	f006 fc7b 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) (src3 << 8) ) + (uint16_t) dst3);			/* src1 | dst1 */
 8003ec6:	0224      	lsls	r4, r4, #8
 8003ec8:	4444      	add	r4, r8
 8003eca:	b2a1      	uxth	r1, r4
 8003ecc:	20eb      	movs	r0, #235	; 0xeb
 8003ece:	f006 fc75 	bl	800a7bc <EE_WriteVariable>
}
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	bc3c      	pop	{r2, r3, r4, r5}
 8003ed6:	4690      	mov	r8, r2
 8003ed8:	4699      	mov	r9, r3
 8003eda:	46a2      	mov	sl, r4
 8003edc:	46ab      	mov	fp, r5
 8003ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ee0 <LoadEEparams>:
{
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	b082      	sub	sp, #8
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 8003ee4:	208a      	movs	r0, #138	; 0x8a
 8003ee6:	466b      	mov	r3, sp
 8003ee8:	1d99      	adds	r1, r3, #6
 8003eea:	0040      	lsls	r0, r0, #1
 8003eec:	f006 fc36 	bl	800a75c <EE_ReadVariable>
	if (!status1) {
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d000      	beq.n	8003ef6 <LoadEEparams+0x16>
 8003ef4:	e064      	b.n	8003fc0 <LoadEEparams+0xe0>
		BOS.response = (uint8_t)temp1;
 8003ef6:	466b      	mov	r3, sp
 8003ef8:	3306      	adds	r3, #6
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	4a49      	ldr	r2, [pc, #292]	; (8004024 <LoadEEparams+0x144>)
 8003efe:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t)(temp1>>8);
 8003f00:	0a1b      	lsrs	r3, r3, #8
 8003f02:	71d3      	strb	r3, [r2, #7]
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 8003f04:	2016      	movs	r0, #22
 8003f06:	466b      	mov	r3, sp
 8003f08:	1d99      	adds	r1, r3, #6
 8003f0a:	30ff      	adds	r0, #255	; 0xff
 8003f0c:	f006 fc26 	bl	800a75c <EE_ReadVariable>
	if (!status1) 
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d15c      	bne.n	8003fce <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 8003f14:	466b      	mov	r3, sp
 8003f16:	88da      	ldrh	r2, [r3, #6]
 8003f18:	4b42      	ldr	r3, [pc, #264]	; (8004024 <LoadEEparams+0x144>)
 8003f1a:	801a      	strh	r2, [r3, #0]
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 8003f1c:	208b      	movs	r0, #139	; 0x8b
 8003f1e:	466b      	mov	r3, sp
 8003f20:	1d99      	adds	r1, r3, #6
 8003f22:	0040      	lsls	r0, r0, #1
 8003f24:	f006 fc1a 	bl	800a75c <EE_ReadVariable>
	if (!status1) 
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	d155      	bne.n	8003fd8 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime = temp1;
 8003f2c:	466b      	mov	r3, sp
 8003f2e:	88da      	ldrh	r2, [r3, #6]
 8003f30:	4b3c      	ldr	r3, [pc, #240]	; (8004024 <LoadEEparams+0x144>)
 8003f32:	805a      	strh	r2, [r3, #2]
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 8003f34:	2018      	movs	r0, #24
 8003f36:	466b      	mov	r3, sp
 8003f38:	1d99      	adds	r1, r3, #6
 8003f3a:	30ff      	adds	r0, #255	; 0xff
 8003f3c:	f006 fc0e 	bl	800a75c <EE_ReadVariable>
	if (!status1) {
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d14e      	bne.n	8003fe2 <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime = (uint8_t)temp1;
 8003f44:	466b      	mov	r3, sp
 8003f46:	3306      	adds	r3, #6
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	4a36      	ldr	r2, [pc, #216]	; (8004024 <LoadEEparams+0x144>)
 8003f4c:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t)(temp1>>8);
 8003f4e:	0a1b      	lsrs	r3, r3, #8
 8003f50:	7153      	strb	r3, [r2, #5]
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 8003f52:	208c      	movs	r0, #140	; 0x8c
 8003f54:	466b      	mov	r3, sp
 8003f56:	1d99      	adds	r1, r3, #6
 8003f58:	0040      	lsls	r0, r0, #1
 8003f5a:	f006 fbff 	bl	800a75c <EE_ReadVariable>
 8003f5e:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD+1, &temp2);
 8003f60:	201a      	movs	r0, #26
 8003f62:	a901      	add	r1, sp, #4
 8003f64:	30ff      	adds	r0, #255	; 0xff
 8003f66:	f006 fbf9 	bl	800a75c <EE_ReadVariable>
	if (!status1 && !status2) 
 8003f6a:	4304      	orrs	r4, r0
 8003f6c:	b2a4      	uxth	r4, r4
 8003f6e:	2c00      	cmp	r4, #0
 8003f70:	d13e      	bne.n	8003ff0 <LoadEEparams+0x110>
		BOS.clibaudrate = (uint32_t)temp1 | (((uint32_t)temp2)<<16);
 8003f72:	ab01      	add	r3, sp, #4
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	041b      	lsls	r3, r3, #16
 8003f78:	466a      	mov	r2, sp
 8003f7a:	3206      	adds	r2, #6
 8003f7c:	8812      	ldrh	r2, [r2, #0]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	4a28      	ldr	r2, [pc, #160]	; (8004024 <LoadEEparams+0x144>)
 8003f82:	6093      	str	r3, [r2, #8]
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 8003f84:	208d      	movs	r0, #141	; 0x8d
 8003f86:	466b      	mov	r3, sp
 8003f88:	1d99      	adds	r1, r3, #6
 8003f8a:	0040      	lsls	r0, r0, #1
 8003f8c:	f006 fbe6 	bl	800a75c <EE_ReadVariable>
	if (!status1) {
 8003f90:	2800      	cmp	r0, #0
 8003f92:	d13b      	bne.n	800400c <LoadEEparams+0x12c>
		BOS.daylightsaving = (int8_t)temp1;
 8003f94:	466b      	mov	r3, sp
 8003f96:	3306      	adds	r3, #6
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	4a22      	ldr	r2, [pc, #136]	; (8004024 <LoadEEparams+0x144>)
 8003f9c:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t)(temp1>>8);
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	7353      	strb	r3, [r2, #13]
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 8003fa2:	201c      	movs	r0, #28
 8003fa4:	466b      	mov	r3, sp
 8003fa6:	1d99      	adds	r1, r3, #6
 8003fa8:	30ff      	adds	r0, #255	; 0xff
 8003faa:	f006 fbd7 	bl	800a75c <EE_ReadVariable>
	if (!status1) {
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d032      	beq.n	8004018 <LoadEEparams+0x138>
		BOS.disableCLI = BOS_default.disableCLI;
 8003fb2:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <LoadEEparams+0x148>)
 8003fb4:	7eda      	ldrb	r2, [r3, #27]
 8003fb6:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <LoadEEparams+0x144>)
 8003fb8:	76da      	strb	r2, [r3, #27]
}
 8003fba:	2000      	movs	r0, #0
 8003fbc:	b002      	add	sp, #8
 8003fbe:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 8003fc0:	4b18      	ldr	r3, [pc, #96]	; (8004024 <LoadEEparams+0x144>)
 8003fc2:	4a19      	ldr	r2, [pc, #100]	; (8004028 <LoadEEparams+0x148>)
 8003fc4:	7991      	ldrb	r1, [r2, #6]
 8003fc6:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 8003fc8:	79d2      	ldrb	r2, [r2, #7]
 8003fca:	71da      	strb	r2, [r3, #7]
 8003fcc:	e79a      	b.n	8003f04 <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 8003fce:	4b16      	ldr	r3, [pc, #88]	; (8004028 <LoadEEparams+0x148>)
 8003fd0:	881a      	ldrh	r2, [r3, #0]
 8003fd2:	4b14      	ldr	r3, [pc, #80]	; (8004024 <LoadEEparams+0x144>)
 8003fd4:	801a      	strh	r2, [r3, #0]
 8003fd6:	e7a1      	b.n	8003f1c <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <LoadEEparams+0x148>)
 8003fda:	885a      	ldrh	r2, [r3, #2]
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <LoadEEparams+0x144>)
 8003fde:	805a      	strh	r2, [r3, #2]
 8003fe0:	e7a8      	b.n	8003f34 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <LoadEEparams+0x144>)
 8003fe4:	4a10      	ldr	r2, [pc, #64]	; (8004028 <LoadEEparams+0x148>)
 8003fe6:	7911      	ldrb	r1, [r2, #4]
 8003fe8:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
 8003fea:	7952      	ldrb	r2, [r2, #5]
 8003fec:	715a      	strb	r2, [r3, #5]
 8003fee:	e7b0      	b.n	8003f52 <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 8003ff0:	4b0e      	ldr	r3, [pc, #56]	; (800402c <LoadEEparams+0x14c>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <LoadEEparams+0x144>)
 8003ffa:	22e1      	movs	r2, #225	; 0xe1
 8003ffc:	0252      	lsls	r2, r2, #9
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	e7c0      	b.n	8003f84 <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <LoadEEparams+0x148>)
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	4b07      	ldr	r3, [pc, #28]	; (8004024 <LoadEEparams+0x144>)
 8004008:	609a      	str	r2, [r3, #8]
 800400a:	e7bb      	b.n	8003f84 <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <LoadEEparams+0x144>)
 800400e:	2218      	movs	r2, #24
 8004010:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 8004012:	2200      	movs	r2, #0
 8004014:	731a      	strb	r2, [r3, #12]
 8004016:	e7c4      	b.n	8003fa2 <LoadEEparams+0xc2>
		BOS.disableCLI = (uint8_t)temp1;
 8004018:	466b      	mov	r3, sp
 800401a:	88da      	ldrh	r2, [r3, #6]
 800401c:	4b01      	ldr	r3, [pc, #4]	; (8004024 <LoadEEparams+0x144>)
 800401e:	76da      	strb	r2, [r3, #27]
 8004020:	e7cb      	b.n	8003fba <LoadEEparams+0xda>
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	20006160 	.word	0x20006160
 8004028:	20000000 	.word	0x20000000
 800402c:	200003b6 	.word	0x200003b6

08004030 <SaveEEparams>:
{
 8004030:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<5) | (uint16_t)BOS.response);
 8004032:	4c1a      	ldr	r4, [pc, #104]	; (800409c <SaveEEparams+0x6c>)
 8004034:	79e3      	ldrb	r3, [r4, #7]
 8004036:	015b      	lsls	r3, r3, #5
 8004038:	79a1      	ldrb	r1, [r4, #6]
 800403a:	4319      	orrs	r1, r3
 800403c:	208a      	movs	r0, #138	; 0x8a
 800403e:	0040      	lsls	r0, r0, #1
 8004040:	f006 fbbc 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 8004044:	8821      	ldrh	r1, [r4, #0]
 8004046:	2016      	movs	r0, #22
 8004048:	30ff      	adds	r0, #255	; 0xff
 800404a:	f006 fbb7 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 800404e:	8861      	ldrh	r1, [r4, #2]
 8004050:	208b      	movs	r0, #139	; 0x8b
 8004052:	0040      	lsls	r0, r0, #1
 8004054:	f006 fbb2 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.daylightsaving);
 8004058:	7963      	ldrb	r3, [r4, #5]
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	7b21      	ldrb	r1, [r4, #12]
 800405e:	4319      	orrs	r1, r3
 8004060:	2018      	movs	r0, #24
 8004062:	30ff      	adds	r0, #255	; 0xff
 8004064:	f006 fbaa 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8004068:	8921      	ldrh	r1, [r4, #8]
 800406a:	208c      	movs	r0, #140	; 0x8c
 800406c:	0040      	lsls	r0, r0, #1
 800406e:	f006 fba5 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8004072:	8961      	ldrh	r1, [r4, #10]
 8004074:	201a      	movs	r0, #26
 8004076:	30ff      	adds	r0, #255	; 0xff
 8004078:	f006 fba0 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800407c:	7b63      	ldrb	r3, [r4, #13]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	7921      	ldrb	r1, [r4, #4]
 8004082:	4319      	orrs	r1, r3
 8004084:	208d      	movs	r0, #141	; 0x8d
 8004086:	0040      	lsls	r0, r0, #1
 8004088:	f006 fb98 	bl	800a7bc <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t)BOS.disableCLI);
 800408c:	7ee1      	ldrb	r1, [r4, #27]
 800408e:	201c      	movs	r0, #28
 8004090:	30ff      	adds	r0, #255	; 0xff
 8004092:	f006 fb93 	bl	800a7bc <EE_WriteVariable>
}
 8004096:	2000      	movs	r0, #0
 8004098:	bd10      	pop	{r4, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	20006160 	.word	0x20006160

080040a0 <EE_FormatForFactoryReset>:
{
 80040a0:	b510      	push	{r4, lr}
	if (*((unsigned long *)0x20007FF0) == 0xBEEFDEAD)
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <EE_FormatForFactoryReset+0x1c>)
 80040a4:	4a06      	ldr	r2, [pc, #24]	; (80040c0 <EE_FormatForFactoryReset+0x20>)
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d006      	beq.n	80040ba <EE_FormatForFactoryReset+0x1a>
		if (EE_Format() == HAL_OK) 
 80040ac:	f006 fc2e 	bl	800a90c <EE_Format>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d102      	bne.n	80040ba <EE_FormatForFactoryReset+0x1a>
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
 80040b4:	4b02      	ldr	r3, [pc, #8]	; (80040c0 <EE_FormatForFactoryReset+0x20>)
 80040b6:	4a01      	ldr	r2, [pc, #4]	; (80040bc <EE_FormatForFactoryReset+0x1c>)
 80040b8:	601a      	str	r2, [r3, #0]
}
 80040ba:	bd10      	pop	{r4, pc}
 80040bc:	beefdead 	.word	0xbeefdead
 80040c0:	20007ff0 	.word	0x20007ff0

080040c4 <CheckForTimedButtonPress>:
{
 80040c4:	b510      	push	{r4, lr}
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80040c6:	00c2      	lsls	r2, r0, #3
 80040c8:	1812      	adds	r2, r2, r0
 80040ca:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <CheckForTimedButtonPress+0x74>)
 80040cc:	189b      	adds	r3, r3, r2
 80040ce:	789c      	ldrb	r4, [r3, #2]
	if (pressCounter[port] == t1)	
 80040d0:	0082      	lsls	r2, r0, #2
 80040d2:	4b1a      	ldr	r3, [pc, #104]	; (800413c <CheckForTimedButtonPress+0x78>)
 80040d4:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80040d6:	0163      	lsls	r3, r4, #5
 80040d8:	1b1b      	subs	r3, r3, r4
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	191b      	adds	r3, r3, r4
 80040de:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1)	
 80040e0:	4299      	cmp	r1, r3
 80040e2:	d01c      	beq.n	800411e <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80040e4:	00c2      	lsls	r2, r0, #3
 80040e6:	1812      	adds	r2, r2, r0
 80040e8:	4b13      	ldr	r3, [pc, #76]	; (8004138 <CheckForTimedButtonPress+0x74>)
 80040ea:	189b      	adds	r3, r3, r2
 80040ec:	78dc      	ldrb	r4, [r3, #3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80040ee:	0163      	lsls	r3, r4, #5
 80040f0:	1b1b      	subs	r3, r3, r4
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	191b      	adds	r3, r3, r4
 80040f6:	00db      	lsls	r3, r3, #3
	else if (pressCounter[port] == t2)	
 80040f8:	4299      	cmp	r1, r3
 80040fa:	d017      	beq.n	800412c <CheckForTimedButtonPress+0x68>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80040fc:	00c2      	lsls	r2, r0, #3
 80040fe:	1812      	adds	r2, r2, r0
 8004100:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <CheckForTimedButtonPress+0x74>)
 8004102:	189b      	adds	r3, r3, r2
 8004104:	791c      	ldrb	r4, [r3, #4]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8004106:	0163      	lsls	r3, r4, #5
 8004108:	1b1b      	subs	r3, r3, r4
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	191b      	adds	r3, r3, r4
 800410e:	00db      	lsls	r3, r3, #3
	else if (pressCounter[port] == t3)	
 8004110:	4299      	cmp	r1, r3
 8004112:	d109      	bne.n	8004128 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X2_SEC;
 8004114:	0010      	movs	r0, r2
 8004116:	4b08      	ldr	r3, [pc, #32]	; (8004138 <CheckForTimedButtonPress+0x74>)
 8004118:	220a      	movs	r2, #10
 800411a:	54c2      	strb	r2, [r0, r3]
 800411c:	e004      	b.n	8004128 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 800411e:	00c3      	lsls	r3, r0, #3
 8004120:	1818      	adds	r0, r3, r0
 8004122:	4b05      	ldr	r3, [pc, #20]	; (8004138 <CheckForTimedButtonPress+0x74>)
 8004124:	2209      	movs	r2, #9
 8004126:	54c2      	strb	r2, [r0, r3]
}
 8004128:	2000      	movs	r0, #0
 800412a:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800412c:	0010      	movs	r0, r2
 800412e:	4b02      	ldr	r3, [pc, #8]	; (8004138 <CheckForTimedButtonPress+0x74>)
 8004130:	220a      	movs	r2, #10
 8004132:	54c2      	strb	r2, [r0, r3]
 8004134:	e7f8      	b.n	8004128 <CheckForTimedButtonPress+0x64>
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	20000664 	.word	0x20000664
 800413c:	20000c48 	.word	0x20000c48

08004140 <CheckForTimedButtonRelease>:
{
 8004140:	b510      	push	{r4, lr}
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8004142:	00c2      	lsls	r2, r0, #3
 8004144:	1812      	adds	r2, r2, r0
 8004146:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <CheckForTimedButtonRelease+0x74>)
 8004148:	189b      	adds	r3, r3, r2
 800414a:	795c      	ldrb	r4, [r3, #5]
	if (releaseCounter[port] == t1)	
 800414c:	0082      	lsls	r2, r0, #2
 800414e:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <CheckForTimedButtonRelease+0x78>)
 8004150:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8004152:	0163      	lsls	r3, r4, #5
 8004154:	1b1b      	subs	r3, r3, r4
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	191b      	adds	r3, r3, r4
 800415a:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1)	
 800415c:	4299      	cmp	r1, r3
 800415e:	d01c      	beq.n	800419a <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8004160:	00c2      	lsls	r2, r0, #3
 8004162:	1812      	adds	r2, r2, r0
 8004164:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <CheckForTimedButtonRelease+0x74>)
 8004166:	189b      	adds	r3, r3, r2
 8004168:	799c      	ldrb	r4, [r3, #6]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800416a:	0163      	lsls	r3, r4, #5
 800416c:	1b1b      	subs	r3, r3, r4
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	191b      	adds	r3, r3, r4
 8004172:	00db      	lsls	r3, r3, #3
	else if (releaseCounter[port] == t2)	
 8004174:	4299      	cmp	r1, r3
 8004176:	d017      	beq.n	80041a8 <CheckForTimedButtonRelease+0x68>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8004178:	00c2      	lsls	r2, r0, #3
 800417a:	1812      	adds	r2, r2, r0
 800417c:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <CheckForTimedButtonRelease+0x74>)
 800417e:	189b      	adds	r3, r3, r2
 8004180:	79dc      	ldrb	r4, [r3, #7]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8004182:	0163      	lsls	r3, r4, #5
 8004184:	1b1b      	subs	r3, r3, r4
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	191b      	adds	r3, r3, r4
 800418a:	00db      	lsls	r3, r3, #3
	else if (releaseCounter[port] == t3)	
 800418c:	4299      	cmp	r1, r3
 800418e:	d109      	bne.n	80041a4 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y2_SEC;
 8004190:	0010      	movs	r0, r2
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <CheckForTimedButtonRelease+0x74>)
 8004194:	220d      	movs	r2, #13
 8004196:	54c2      	strb	r2, [r0, r3]
 8004198:	e004      	b.n	80041a4 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800419a:	00c3      	lsls	r3, r0, #3
 800419c:	1818      	adds	r0, r3, r0
 800419e:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <CheckForTimedButtonRelease+0x74>)
 80041a0:	220c      	movs	r2, #12
 80041a2:	54c2      	strb	r2, [r0, r3]
}
 80041a4:	2000      	movs	r0, #0
 80041a6:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 80041a8:	0010      	movs	r0, r2
 80041aa:	4b02      	ldr	r3, [pc, #8]	; (80041b4 <CheckForTimedButtonRelease+0x74>)
 80041ac:	220d      	movs	r2, #13
 80041ae:	54c2      	strb	r2, [r0, r3]
 80041b0:	e7f8      	b.n	80041a4 <CheckForTimedButtonRelease+0x64>
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	20000664 	.word	0x20000664
 80041b8:	20000c70 	.word	0x20000c70

080041bc <buttonPressedCallback>:
}
 80041bc:	4770      	bx	lr

080041be <buttonReleasedCallback>:
}
 80041be:	4770      	bx	lr

080041c0 <buttonClickedCallback>:
}
 80041c0:	4770      	bx	lr

080041c2 <buttonDblClickedCallback>:
}
 80041c2:	4770      	bx	lr

080041c4 <buttonPressedForXCallback>:
}
 80041c4:	4770      	bx	lr

080041c6 <buttonReleasedForYCallback>:
}
 80041c6:	4770      	bx	lr

080041c8 <User_MessagingParser>:
}
 80041c8:	2001      	movs	r0, #1
 80041ca:	4770      	bx	lr

080041cc <RegisterUserCLICommands>:
}
 80041cc:	4770      	bx	lr
	...

080041d0 <RTC_CalendarConfig>:
{
 80041d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041d2:	46ce      	mov	lr, r9
 80041d4:	b500      	push	{lr}
 80041d6:	b08e      	sub	sp, #56	; 0x38
	char comDate[] = __DATE__, comTime[] = __TIME__;
 80041d8:	ac05      	add	r4, sp, #20
 80041da:	4b34      	ldr	r3, [pc, #208]	; (80042ac <RTC_CalendarConfig+0xdc>)
 80041dc:	0022      	movs	r2, r4
 80041de:	cb43      	ldmia	r3!, {r0, r1, r6}
 80041e0:	c243      	stmia	r2!, {r0, r1, r6}
 80041e2:	aa02      	add	r2, sp, #8
 80041e4:	4b32      	ldr	r3, [pc, #200]	; (80042b0 <RTC_CalendarConfig+0xe0>)
 80041e6:	cb03      	ldmia	r3!, {r0, r1}
 80041e8:	c203      	stmia	r2!, {r0, r1}
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 80041ee:	2015      	movs	r0, #21
 80041f0:	ab02      	add	r3, sp, #8
 80041f2:	469c      	mov	ip, r3
 80041f4:	4460      	add	r0, ip
 80041f6:	f00d fed6 	bl	8011fa6 <atoi>
 80041fa:	b2c3      	uxtb	r3, r0
 80041fc:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 80041fe:	2600      	movs	r6, #0
 8004200:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 8004202:	a806      	add	r0, sp, #24
 8004204:	f00d fecf 	bl	8011fa6 <atoi>
 8004208:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800420a:	70e6      	strb	r6, [r4, #3]
 800420c:	2401      	movs	r4, #1
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800420e:	4e29      	ldr	r6, [pc, #164]	; (80042b4 <RTC_CalendarConfig+0xe4>)
 8004210:	e002      	b.n	8004218 <RTC_CalendarConfig+0x48>
 8004212:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 8004214:	2c0d      	cmp	r4, #13
 8004216:	d009      	beq.n	800422c <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 8004218:	00a3      	lsls	r3, r4, #2
 800421a:	3b04      	subs	r3, #4
 800421c:	58f1      	ldr	r1, [r6, r3]
 800421e:	a805      	add	r0, sp, #20
 8004220:	f7fb ff70 	bl	8000104 <strcmp>
 8004224:	2800      	cmp	r0, #0
 8004226:	d1f4      	bne.n	8004212 <RTC_CalendarConfig+0x42>
			month = i + 1;
 8004228:	b2e5      	uxtb	r5, r4
 800422a:	e7f2      	b.n	8004212 <RTC_CalendarConfig+0x42>
	seconds = atoi(comTime + 6);
 800422c:	ab02      	add	r3, sp, #8
 800422e:	1d98      	adds	r0, r3, #6
 8004230:	f00d feb9 	bl	8011fa6 <atoi>
 8004234:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 8004236:	ac05      	add	r4, sp, #20
 8004238:	2600      	movs	r6, #0
 800423a:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800423c:	ab02      	add	r3, sp, #8
 800423e:	1cd8      	adds	r0, r3, #3
 8004240:	f00d feb1 	bl	8011fa6 <atoi>
 8004244:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 8004246:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 8004248:	a802      	add	r0, sp, #8
 800424a:	f00d feac 	bl	8011fa6 <atoi>
 800424e:	0004      	movs	r4, r0
  sdatestructure.Year = year;
 8004250:	a90d      	add	r1, sp, #52	; 0x34
 8004252:	464b      	mov	r3, r9
 8004254:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 8004256:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 8004258:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800425a:	2301      	movs	r3, #1
 800425c:	700b      	strb	r3, [r1, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800425e:	2200      	movs	r2, #0
 8004260:	4815      	ldr	r0, [pc, #84]	; (80042b8 <RTC_CalendarConfig+0xe8>)
 8004262:	f00c fbcb 	bl	80109fc <HAL_RTC_SetDate>
		return BOS_ERROR;
 8004266:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 8004268:	2800      	cmp	r0, #0
 800426a:	d119      	bne.n	80042a0 <RTC_CalendarConfig+0xd0>
  stimestructure.Hours = hours;
 800426c:	a908      	add	r1, sp, #32
 800426e:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 8004270:	9b01      	ldr	r3, [sp, #4]
 8004272:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 8004274:	9b00      	ldr	r3, [sp, #0]
 8004276:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 8004278:	2300      	movs	r3, #0
 800427a:	720b      	strb	r3, [r1, #8]
 800427c:	4a0f      	ldr	r2, [pc, #60]	; (80042bc <RTC_CalendarConfig+0xec>)
 800427e:	3018      	adds	r0, #24
 8004280:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004282:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 8004284:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 8004286:	2200      	movs	r2, #0
 8004288:	480b      	ldr	r0, [pc, #44]	; (80042b8 <RTC_CalendarConfig+0xe8>)
 800428a:	f00c fb31 	bl	80108f0 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800428e:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 8004290:	2800      	cmp	r0, #0
 8004292:	d105      	bne.n	80042a0 <RTC_CalendarConfig+0xd0>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 8004294:	4a0a      	ldr	r2, [pc, #40]	; (80042c0 <RTC_CalendarConfig+0xf0>)
 8004296:	2101      	movs	r1, #1
 8004298:	4807      	ldr	r0, [pc, #28]	; (80042b8 <RTC_CalendarConfig+0xe8>)
 800429a:	f00c fc73 	bl	8010b84 <HAL_RTCEx_BKUPWrite>
	return BOS_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	0018      	movs	r0, r3
 80042a2:	b00e      	add	sp, #56	; 0x38
 80042a4:	bc04      	pop	{r2}
 80042a6:	4691      	mov	r9, r2
 80042a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	0801692c 	.word	0x0801692c
 80042b0:	08016938 	.word	0x08016938
 80042b4:	0801703c 	.word	0x0801703c
 80042b8:	200061b8 	.word	0x200061b8
 80042bc:	20006160 	.word	0x20006160
 80042c0:	000032f2 	.word	0x000032f2

080042c4 <RTC_Init>:
{
 80042c4:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 80042c6:	4a1c      	ldr	r2, [pc, #112]	; (8004338 <RTC_Init+0x74>)
 80042c8:	6a11      	ldr	r1, [r2, #32]
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	430b      	orrs	r3, r1
 80042d0:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 80042d2:	481a      	ldr	r0, [pc, #104]	; (800433c <RTC_Init+0x78>)
 80042d4:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <RTC_Init+0x7c>)
 80042d6:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 80042d8:	2300      	movs	r3, #0
 80042da:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 80042dc:	227c      	movs	r2, #124	; 0x7c
 80042de:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 80042e0:	4a18      	ldr	r2, [pc, #96]	; (8004344 <RTC_Init+0x80>)
 80042e2:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 80042e4:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80042e6:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80042e8:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 80042ea:	f00c faa3 	bl	8010834 <HAL_RTC_Init>
 80042ee:	23ff      	movs	r3, #255	; 0xff
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d11e      	bne.n	8004332 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 80042f4:	2101      	movs	r1, #1
 80042f6:	4811      	ldr	r0, [pc, #68]	; (800433c <RTC_Init+0x78>)
 80042f8:	f00c fc4a 	bl	8010b90 <HAL_RTCEx_BKUPRead>
 80042fc:	4b12      	ldr	r3, [pc, #72]	; (8004348 <RTC_Init+0x84>)
 80042fe:	4298      	cmp	r0, r3
 8004300:	d10e      	bne.n	8004320 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 8004302:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <RTC_Init+0x74>)
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	d502      	bpl.n	8004310 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800430a:	4b10      	ldr	r3, [pc, #64]	; (800434c <RTC_Init+0x88>)
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <RTC_Init+0x74>)
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	015b      	lsls	r3, r3, #5
 8004316:	d505      	bpl.n	8004324 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <RTC_Init+0x88>)
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e001      	b.n	8004324 <RTC_Init+0x60>
    RTC_CalendarConfig();
 8004320:	f7ff ff56 	bl	80041d0 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 8004324:	4a04      	ldr	r2, [pc, #16]	; (8004338 <RTC_Init+0x74>)
 8004326:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	045b      	lsls	r3, r3, #17
 800432c:	430b      	orrs	r3, r1
 800432e:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	0018      	movs	r0, r3
 8004334:	bd10      	pop	{r4, pc}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	40021000 	.word	0x40021000
 800433c:	200061b8 	.word	0x200061b8
 8004340:	40002800 	.word	0x40002800
 8004344:	000007cf 	.word	0x000007cf
 8004348:	000032f2 	.word	0x000032f2
 800434c:	20000646 	.word	0x20000646

08004350 <IsModuleParameter>:
{
 8004350:	b510      	push	{r4, lr}
		if (!strcmp(name, (const char *)(modParam[i].paramName)))
 8004352:	4b04      	ldr	r3, [pc, #16]	; (8004364 <IsModuleParameter+0x14>)
 8004354:	6899      	ldr	r1, [r3, #8]
 8004356:	f7fb fed5 	bl	8000104 <strcmp>
 800435a:	4243      	negs	r3, r0
 800435c:	4158      	adcs	r0, r3
 800435e:	b2c0      	uxtb	r0, r0
}
 8004360:	bd10      	pop	{r4, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	20000040 	.word	0x20000040

08004368 <IsMathOperator>:
{
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	0004      	movs	r4, r0
		if (!strcmp(string, "="))
 800436c:	491b      	ldr	r1, [pc, #108]	; (80043dc <IsMathOperator+0x74>)
 800436e:	f7fb fec9 	bl	8000104 <strcmp>
 8004372:	0006      	movs	r6, r0
 8004374:	2506      	movs	r5, #6
 8004376:	2e00      	cmp	r6, #0
 8004378:	d023      	beq.n	80043c2 <IsMathOperator+0x5a>
		else if (!strcmp(string, ">"))
 800437a:	4919      	ldr	r1, [pc, #100]	; (80043e0 <IsMathOperator+0x78>)
 800437c:	0020      	movs	r0, r4
 800437e:	f7fb fec1 	bl	8000104 <strcmp>
 8004382:	2800      	cmp	r0, #0
 8004384:	d01f      	beq.n	80043c6 <IsMathOperator+0x5e>
		else if (!strcmp(string, "<"))
 8004386:	4917      	ldr	r1, [pc, #92]	; (80043e4 <IsMathOperator+0x7c>)
 8004388:	0020      	movs	r0, r4
 800438a:	f7fb febb 	bl	8000104 <strcmp>
 800438e:	2800      	cmp	r0, #0
 8004390:	d01b      	beq.n	80043ca <IsMathOperator+0x62>
		else if (!strcmp(string, ">="))
 8004392:	4915      	ldr	r1, [pc, #84]	; (80043e8 <IsMathOperator+0x80>)
 8004394:	0020      	movs	r0, r4
 8004396:	f7fb feb5 	bl	8000104 <strcmp>
 800439a:	2800      	cmp	r0, #0
 800439c:	d017      	beq.n	80043ce <IsMathOperator+0x66>
		else if (!strcmp(string, "<="))
 800439e:	4913      	ldr	r1, [pc, #76]	; (80043ec <IsMathOperator+0x84>)
 80043a0:	0020      	movs	r0, r4
 80043a2:	f7fb feaf 	bl	8000104 <strcmp>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d013      	beq.n	80043d2 <IsMathOperator+0x6a>
		else if (!strcmp(string, "!="))
 80043aa:	4911      	ldr	r1, [pc, #68]	; (80043f0 <IsMathOperator+0x88>)
 80043ac:	0020      	movs	r0, r4
 80043ae:	f7fb fea9 	bl	8000104 <strcmp>
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d00f      	beq.n	80043d6 <IsMathOperator+0x6e>
 80043b6:	3d01      	subs	r5, #1
 80043b8:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
 80043ba:	2d00      	cmp	r5, #0
 80043bc:	d1db      	bne.n	8004376 <IsMathOperator+0xe>
	return 0;
 80043be:	2000      	movs	r0, #0
}
 80043c0:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 80043c2:	2001      	movs	r0, #1
 80043c4:	e7fc      	b.n	80043c0 <IsMathOperator+0x58>
			return MATH_GREATER;
 80043c6:	2002      	movs	r0, #2
 80043c8:	e7fa      	b.n	80043c0 <IsMathOperator+0x58>
			return MATH_SMALLER;
 80043ca:	2003      	movs	r0, #3
 80043cc:	e7f8      	b.n	80043c0 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 80043ce:	2004      	movs	r0, #4
 80043d0:	e7f6      	b.n	80043c0 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 80043d2:	2005      	movs	r0, #5
 80043d4:	e7f4      	b.n	80043c0 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 80043d6:	2006      	movs	r0, #6
 80043d8:	e7f2      	b.n	80043c0 <IsMathOperator+0x58>
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	08016914 	.word	0x08016914
 80043e0:	08016918 	.word	0x08016918
 80043e4:	0801691c 	.word	0x0801691c
 80043e8:	08016920 	.word	0x08016920
 80043ec:	08016924 	.word	0x08016924
 80043f0:	08016928 	.word	0x08016928

080043f4 <SystemClock_Config>:
{
 80043f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f6:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80043f8:	2401      	movs	r4, #1
 80043fa:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043fc:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043fe:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004400:	2310      	movs	r3, #16
 8004402:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004404:	2702      	movs	r7, #2
 8004406:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004408:	2680      	movs	r6, #128	; 0x80
 800440a:	0276      	lsls	r6, r6, #9
 800440c:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	035b      	lsls	r3, r3, #13
 8004412:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004414:	2500      	movs	r5, #0
 8004416:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004418:	a80d      	add	r0, sp, #52	; 0x34
 800441a:	f00b fcc3 	bl	800fda4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800441e:	2307      	movs	r3, #7
 8004420:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004422:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004424:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004426:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8004428:	2101      	movs	r1, #1
 800442a:	a809      	add	r0, sp, #36	; 0x24
 800442c:	f00b ff7c 	bl	8010328 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <SystemClock_Config+0xa8>)
 8004432:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004434:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004436:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004438:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800443a:	a802      	add	r0, sp, #8
 800443c:	f00c f922 	bl	8010684 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 8004440:	4d17      	ldr	r5, [pc, #92]	; (80044a0 <SystemClock_Config+0xac>)
 8004442:	69ea      	ldr	r2, [r5, #28]
 8004444:	2180      	movs	r1, #128	; 0x80
 8004446:	0549      	lsls	r1, r1, #21
 8004448:	430a      	orrs	r2, r1
 800444a:	61ea      	str	r2, [r5, #28]
 800444c:	69eb      	ldr	r3, [r5, #28]
 800444e:	400b      	ands	r3, r1
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 8004454:	f00b fc9c 	bl	800fd90 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004458:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800445a:	23c0      	movs	r3, #192	; 0xc0
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8004460:	a802      	add	r0, sp, #8
 8004462:	f00c f90f 	bl	8010684 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004466:	f00c f8e9 	bl	801063c <HAL_RCC_GetHCLKFreq>
 800446a:	21fa      	movs	r1, #250	; 0xfa
 800446c:	0089      	lsls	r1, r1, #2
 800446e:	f7fb fe65 	bl	800013c <__udivsi3>
 8004472:	f00a fc19 	bl	800eca8 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004476:	2004      	movs	r0, #4
 8004478:	f00a fc32 	bl	800ece0 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800447c:	69ab      	ldr	r3, [r5, #24]
 800447e:	4323      	orrs	r3, r4
 8004480:	61ab      	str	r3, [r5, #24]
 8004482:	69ab      	ldr	r3, [r5, #24]
 8004484:	401c      	ands	r4, r3
 8004486:	9401      	str	r4, [sp, #4]
 8004488:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800448a:	2001      	movs	r0, #1
 800448c:	2200      	movs	r2, #0
 800448e:	2100      	movs	r1, #0
 8004490:	4240      	negs	r0, r0
 8004492:	f00a fbc1 	bl	800ec18 <HAL_NVIC_SetPriority>
}
 8004496:	b01b      	add	sp, #108	; 0x6c
 8004498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	00040003 	.word	0x00040003
 80044a0:	40021000 	.word	0x40021000

080044a4 <vRegisterCLICommands>:
{
 80044a4:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 80044a6:	482f      	ldr	r0, [pc, #188]	; (8004564 <vRegisterCLICommands+0xc0>)
 80044a8:	f009 ffce 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 80044ac:	482e      	ldr	r0, [pc, #184]	; (8004568 <vRegisterCLICommands+0xc4>)
 80044ae:	f009 ffcb 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 80044b2:	482e      	ldr	r0, [pc, #184]	; (800456c <vRegisterCLICommands+0xc8>)
 80044b4:	f009 ffc8 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 80044b8:	482d      	ldr	r0, [pc, #180]	; (8004570 <vRegisterCLICommands+0xcc>)
 80044ba:	f009 ffc5 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &exploreCommandDefinition );
 80044be:	482d      	ldr	r0, [pc, #180]	; (8004574 <vRegisterCLICommands+0xd0>)
 80044c0:	f009 ffc2 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 80044c4:	482c      	ldr	r0, [pc, #176]	; (8004578 <vRegisterCLICommands+0xd4>)
 80044c6:	f009 ffbf 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 80044ca:	482c      	ldr	r0, [pc, #176]	; (800457c <vRegisterCLICommands+0xd8>)
 80044cc:	f009 ffbc 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 80044d0:	482b      	ldr	r0, [pc, #172]	; (8004580 <vRegisterCLICommands+0xdc>)
 80044d2:	f009 ffb9 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 80044d6:	482b      	ldr	r0, [pc, #172]	; (8004584 <vRegisterCLICommands+0xe0>)
 80044d8:	f009 ffb6 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 80044dc:	482a      	ldr	r0, [pc, #168]	; (8004588 <vRegisterCLICommands+0xe4>)
 80044de:	f009 ffb3 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 80044e2:	482a      	ldr	r0, [pc, #168]	; (800458c <vRegisterCLICommands+0xe8>)
 80044e4:	f009 ffb0 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 80044e8:	4829      	ldr	r0, [pc, #164]	; (8004590 <vRegisterCLICommands+0xec>)
 80044ea:	f009 ffad 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 80044ee:	4829      	ldr	r0, [pc, #164]	; (8004594 <vRegisterCLICommands+0xf0>)
 80044f0:	f009 ffaa 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 80044f4:	4828      	ldr	r0, [pc, #160]	; (8004598 <vRegisterCLICommands+0xf4>)
 80044f6:	f009 ffa7 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 80044fa:	4828      	ldr	r0, [pc, #160]	; (800459c <vRegisterCLICommands+0xf8>)
 80044fc:	f009 ffa4 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 8004500:	4827      	ldr	r0, [pc, #156]	; (80045a0 <vRegisterCLICommands+0xfc>)
 8004502:	f009 ffa1 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 8004506:	4827      	ldr	r0, [pc, #156]	; (80045a4 <vRegisterCLICommands+0x100>)
 8004508:	f009 ff9e 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 800450c:	4826      	ldr	r0, [pc, #152]	; (80045a8 <vRegisterCLICommands+0x104>)
 800450e:	f009 ff9b 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 8004512:	4826      	ldr	r0, [pc, #152]	; (80045ac <vRegisterCLICommands+0x108>)
 8004514:	f009 ff98 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 8004518:	4825      	ldr	r0, [pc, #148]	; (80045b0 <vRegisterCLICommands+0x10c>)
 800451a:	f009 ff95 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 800451e:	4825      	ldr	r0, [pc, #148]	; (80045b4 <vRegisterCLICommands+0x110>)
 8004520:	f009 ff92 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 8004524:	4824      	ldr	r0, [pc, #144]	; (80045b8 <vRegisterCLICommands+0x114>)
 8004526:	f009 ff8f 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 800452a:	4824      	ldr	r0, [pc, #144]	; (80045bc <vRegisterCLICommands+0x118>)
 800452c:	f009 ff8c 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 8004530:	4823      	ldr	r0, [pc, #140]	; (80045c0 <vRegisterCLICommands+0x11c>)
 8004532:	f009 ff89 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 8004536:	4823      	ldr	r0, [pc, #140]	; (80045c4 <vRegisterCLICommands+0x120>)
 8004538:	f009 ff86 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 800453c:	4822      	ldr	r0, [pc, #136]	; (80045c8 <vRegisterCLICommands+0x124>)
 800453e:	f009 ff83 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 8004542:	4822      	ldr	r0, [pc, #136]	; (80045cc <vRegisterCLICommands+0x128>)
 8004544:	f009 ff80 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 8004548:	4821      	ldr	r0, [pc, #132]	; (80045d0 <vRegisterCLICommands+0x12c>)
 800454a:	f009 ff7d 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 800454e:	4821      	ldr	r0, [pc, #132]	; (80045d4 <vRegisterCLICommands+0x130>)
 8004550:	f009 ff7a 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 29;
 8004554:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <vRegisterCLICommands+0x134>)
 8004556:	221d      	movs	r2, #29
 8004558:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 800455a:	f007 f901 	bl	800b760 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800455e:	f7ff fe35 	bl	80041cc <RegisterUserCLICommands>
}
 8004562:	bd10      	pop	{r4, pc}
 8004564:	08017290 	.word	0x08017290
 8004568:	08017224 	.word	0x08017224
 800456c:	080171c0 	.word	0x080171c0
 8004570:	08016b1c 	.word	0x08016b1c
 8004574:	08016ca4 	.word	0x08016ca4
 8004578:	08017444 	.word	0x08017444
 800457c:	08017138 	.word	0x08017138
 8004580:	08016e94 	.word	0x08016e94
 8004584:	080178d8 	.word	0x080178d8
 8004588:	08016f98 	.word	0x08016f98
 800458c:	08017500 	.word	0x08017500
 8004590:	08016a04 	.word	0x08016a04
 8004594:	08017434 	.word	0x08017434
 8004598:	08017748 	.word	0x08017748
 800459c:	08016de8 	.word	0x08016de8
 80045a0:	08016c28 	.word	0x08016c28
 80045a4:	08018750 	.word	0x08018750
 80045a8:	08016b90 	.word	0x08016b90
 80045ac:	0801754c 	.word	0x0801754c
 80045b0:	080187c4 	.word	0x080187c4
 80045b4:	08016f14 	.word	0x08016f14
 80045b8:	08016cd4 	.word	0x08016cd4
 80045bc:	080178c8 	.word	0x080178c8
 80045c0:	08016988 	.word	0x08016988
 80045c4:	08017180 	.word	0x08017180
 80045c8:	08016c94 	.word	0x08016c94
 80045cc:	08016b68 	.word	0x08016b68
 80045d0:	0801879c 	.word	0x0801879c
 80045d4:	080186e4 	.word	0x080186e4
 80045d8:	200060a8 	.word	0x200060a8

080045dc <GetUart>:
	switch (port)
 80045dc:	2806      	cmp	r0, #6
 80045de:	d80d      	bhi.n	80045fc <GetUart+0x20>
 80045e0:	0080      	lsls	r0, r0, #2
 80045e2:	4b08      	ldr	r3, [pc, #32]	; (8004604 <GetUart+0x28>)
 80045e4:	581b      	ldr	r3, [r3, r0]
 80045e6:	469f      	mov	pc, r3
			return P2uart;
 80045e8:	4807      	ldr	r0, [pc, #28]	; (8004608 <GetUart+0x2c>)
 80045ea:	e00a      	b.n	8004602 <GetUart+0x26>
			return P3uart;
 80045ec:	4807      	ldr	r0, [pc, #28]	; (800460c <GetUart+0x30>)
 80045ee:	e008      	b.n	8004602 <GetUart+0x26>
			return P4uart;
 80045f0:	4807      	ldr	r0, [pc, #28]	; (8004610 <GetUart+0x34>)
 80045f2:	e006      	b.n	8004602 <GetUart+0x26>
			return P5uart;
 80045f4:	4807      	ldr	r0, [pc, #28]	; (8004614 <GetUart+0x38>)
 80045f6:	e004      	b.n	8004602 <GetUart+0x26>
			return P6uart;
 80045f8:	4807      	ldr	r0, [pc, #28]	; (8004618 <GetUart+0x3c>)
 80045fa:	e002      	b.n	8004602 <GetUart+0x26>
			return 0;
 80045fc:	2000      	movs	r0, #0
 80045fe:	e000      	b.n	8004602 <GetUart+0x26>
			return P1uart;	
 8004600:	4806      	ldr	r0, [pc, #24]	; (800461c <GetUart+0x40>)
}
 8004602:	4770      	bx	lr
 8004604:	0801650c 	.word	0x0801650c
 8004608:	200064e4 	.word	0x200064e4
 800460c:	20006404 	.word	0x20006404
 8004610:	20006278 	.word	0x20006278
 8004614:	20006394 	.word	0x20006394
 8004618:	20006324 	.word	0x20006324
 800461c:	20006474 	.word	0x20006474

08004620 <SetupDMAStreams>:
{
 8004620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004622:	b085      	sub	sp, #20
 8004624:	000e      	movs	r6, r1
 8004626:	0015      	movs	r5, r2
 8004628:	220f      	movs	r2, #15
 800462a:	446a      	add	r2, sp
 800462c:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 800462e:	001c      	movs	r4, r3
 8004630:	ab0a      	add	r3, sp, #40	; 0x28
 8004632:	781f      	ldrb	r7, [r3, #0]
 8004634:	42bc      	cmp	r4, r7
 8004636:	d057      	beq.n	80046e8 <SetupDMAStreams+0xc8>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8004638:	2c00      	cmp	r4, #0
 800463a:	d100      	bne.n	800463e <SetupDMAStreams+0x1e>
 800463c:	e0ba      	b.n	80047b4 <SetupDMAStreams+0x194>
 800463e:	2f00      	cmp	r7, #0
 8004640:	d100      	bne.n	8004644 <SetupDMAStreams+0x24>
 8004642:	e0bb      	b.n	80047bc <SetupDMAStreams+0x19c>
	if (direction == FORWARD) 
 8004644:	2800      	cmp	r0, #0
 8004646:	d054      	beq.n	80046f2 <SetupDMAStreams+0xd2>
	else if (direction == BACKWARD) 
 8004648:	2801      	cmp	r0, #1
 800464a:	d100      	bne.n	800464e <SetupDMAStreams+0x2e>
 800464c:	e089      	b.n	8004762 <SetupDMAStreams+0x142>
		return BOS_ERR_WrongParam;
 800464e:	2367      	movs	r3, #103	; 0x67
	else if (direction == BIDIRECTIONAL) 
 8004650:	2802      	cmp	r0, #2
 8004652:	d000      	beq.n	8004656 <SetupDMAStreams+0x36>
 8004654:	e0af      	b.n	80047b6 <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 8004656:	0020      	movs	r0, r4
 8004658:	f7ff ffc0 	bl	80045dc <GetUart>
 800465c:	0004      	movs	r4, r0
 800465e:	0038      	movs	r0, r7
 8004660:	f7ff ffbc 	bl	80045dc <GetUart>
 8004664:	0001      	movs	r1, r0
 8004666:	2201      	movs	r2, #1
 8004668:	0020      	movs	r0, r4
 800466a:	f005 ff91 	bl	800a590 <StartDMAstream>
 800466e:	0003      	movs	r3, r0
 8004670:	2817      	cmp	r0, #23
 8004672:	d100      	bne.n	8004676 <SetupDMAStreams+0x56>
 8004674:	e09f      	b.n	80047b6 <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8004676:	0168      	lsls	r0, r5, #5
 8004678:	1b40      	subs	r0, r0, r5
 800467a:	0080      	lsls	r0, r0, #2
 800467c:	1940      	adds	r0, r0, r5
 800467e:	00c0      	lsls	r0, r0, #3
 8004680:	21fa      	movs	r1, #250	; 0xfa
 8004682:	0089      	lsls	r1, r1, #2
 8004684:	f7fb fd5a 	bl	800013c <__udivsi3>
 8004688:	0004      	movs	r4, r0
 800468a:	250f      	movs	r5, #15
 800468c:	446d      	add	r5, sp
 800468e:	4b4c      	ldr	r3, [pc, #304]	; (80047c0 <SetupDMAStreams+0x1a0>)
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	002b      	movs	r3, r5
 8004694:	2200      	movs	r2, #0
 8004696:	0001      	movs	r1, r0
 8004698:	484a      	ldr	r0, [pc, #296]	; (80047c4 <SetupDMAStreams+0x1a4>)
 800469a:	f011 fb8d 	bl	8015db8 <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 800469e:	782d      	ldrb	r5, [r5, #0]
 80046a0:	1e6b      	subs	r3, r5, #1
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4a48      	ldr	r2, [pc, #288]	; (80047c8 <SetupDMAStreams+0x1a8>)
 80046a6:	509e      	str	r6, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 80046a8:	ab0a      	add	r3, sp, #40	; 0x28
 80046aa:	7818      	ldrb	r0, [r3, #0]
 80046ac:	f7ff ff96 	bl	80045dc <GetUart>
 80046b0:	0007      	movs	r7, r0
 80046b2:	0028      	movs	r0, r5
 80046b4:	f7ff ff92 	bl	80045dc <GetUart>
 80046b8:	0001      	movs	r1, r0
 80046ba:	2201      	movs	r2, #1
 80046bc:	0038      	movs	r0, r7
 80046be:	f005 ff67 	bl	800a590 <StartDMAstream>
 80046c2:	0003      	movs	r3, r0
 80046c4:	2817      	cmp	r0, #23
 80046c6:	d076      	beq.n	80047b6 <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 80046c8:	4b3d      	ldr	r3, [pc, #244]	; (80047c0 <SetupDMAStreams+0x1a0>)
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	ab0a      	add	r3, sp, #40	; 0x28
 80046ce:	2200      	movs	r2, #0
 80046d0:	0021      	movs	r1, r4
 80046d2:	483c      	ldr	r0, [pc, #240]	; (80047c4 <SetupDMAStreams+0x1a4>)
 80046d4:	f011 fb70 	bl	8015db8 <xTimerCreate>
 80046d8:	0005      	movs	r5, r0
		dmaStreamTotal[dst-1] = count;
 80046da:	ab0a      	add	r3, sp, #40	; 0x28
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	3b01      	subs	r3, #1
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4a39      	ldr	r2, [pc, #228]	; (80047c8 <SetupDMAStreams+0x1a8>)
 80046e4:	509e      	str	r6, [r3, r2]
 80046e6:	e02c      	b.n	8004742 <SetupDMAStreams+0x122>
		portStatus[src] = STREAM;
 80046e8:	4b38      	ldr	r3, [pc, #224]	; (80047cc <SetupDMAStreams+0x1ac>)
 80046ea:	2202      	movs	r2, #2
 80046ec:	551a      	strb	r2, [r3, r4]
		return BOS_ERR_WrongParam;
 80046ee:	2367      	movs	r3, #103	; 0x67
 80046f0:	e061      	b.n	80047b6 <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 80046f2:	0020      	movs	r0, r4
 80046f4:	f7ff ff72 	bl	80045dc <GetUart>
 80046f8:	0004      	movs	r4, r0
 80046fa:	0038      	movs	r0, r7
 80046fc:	f7ff ff6e 	bl	80045dc <GetUart>
 8004700:	0001      	movs	r1, r0
 8004702:	2201      	movs	r2, #1
 8004704:	0020      	movs	r0, r4
 8004706:	f005 ff43 	bl	800a590 <StartDMAstream>
 800470a:	0003      	movs	r3, r0
 800470c:	2817      	cmp	r0, #23
 800470e:	d052      	beq.n	80047b6 <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8004710:	240f      	movs	r4, #15
 8004712:	446c      	add	r4, sp
 8004714:	0168      	lsls	r0, r5, #5
 8004716:	1b40      	subs	r0, r0, r5
 8004718:	0080      	lsls	r0, r0, #2
 800471a:	1940      	adds	r0, r0, r5
 800471c:	00c0      	lsls	r0, r0, #3
 800471e:	21fa      	movs	r1, #250	; 0xfa
 8004720:	0089      	lsls	r1, r1, #2
 8004722:	f7fb fd0b 	bl	800013c <__udivsi3>
 8004726:	0001      	movs	r1, r0
 8004728:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <SetupDMAStreams+0x1a0>)
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	0023      	movs	r3, r4
 800472e:	2200      	movs	r2, #0
 8004730:	4824      	ldr	r0, [pc, #144]	; (80047c4 <SetupDMAStreams+0x1a4>)
 8004732:	f011 fb41 	bl	8015db8 <xTimerCreate>
 8004736:	0005      	movs	r5, r0
		dmaStreamTotal[src-1] = count;
 8004738:	7823      	ldrb	r3, [r4, #0]
 800473a:	3b01      	subs	r3, #1
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <SetupDMAStreams+0x1a8>)
 8004740:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8004742:	2300      	movs	r3, #0
	if (xTimerStream != NULL)
 8004744:	2d00      	cmp	r5, #0
 8004746:	d036      	beq.n	80047b6 <SetupDMAStreams+0x196>
		xTimerStart( xTimerStream, portMAX_DELAY );
 8004748:	f010 fda0 	bl	801528c <xTaskGetTickCount>
 800474c:	0002      	movs	r2, r0
 800474e:	2301      	movs	r3, #1
 8004750:	425b      	negs	r3, r3
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	2101      	movs	r1, #1
 8004758:	0028      	movs	r0, r5
 800475a:	f011 fb91 	bl	8015e80 <xTimerGenericCommand>
	return BOS_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	e029      	b.n	80047b6 <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8004762:	0038      	movs	r0, r7
 8004764:	f7ff ff3a 	bl	80045dc <GetUart>
 8004768:	0007      	movs	r7, r0
 800476a:	0020      	movs	r0, r4
 800476c:	f7ff ff36 	bl	80045dc <GetUart>
 8004770:	0001      	movs	r1, r0
 8004772:	2201      	movs	r2, #1
 8004774:	0038      	movs	r0, r7
 8004776:	f005 ff0b 	bl	800a590 <StartDMAstream>
 800477a:	0003      	movs	r3, r0
 800477c:	2817      	cmp	r0, #23
 800477e:	d01a      	beq.n	80047b6 <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8004780:	0168      	lsls	r0, r5, #5
 8004782:	1b40      	subs	r0, r0, r5
 8004784:	0080      	lsls	r0, r0, #2
 8004786:	1940      	adds	r0, r0, r5
 8004788:	00c0      	lsls	r0, r0, #3
 800478a:	21fa      	movs	r1, #250	; 0xfa
 800478c:	0089      	lsls	r1, r1, #2
 800478e:	f7fb fcd5 	bl	800013c <__udivsi3>
 8004792:	0001      	movs	r1, r0
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <SetupDMAStreams+0x1a0>)
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	ab0a      	add	r3, sp, #40	; 0x28
 800479a:	2200      	movs	r2, #0
 800479c:	4809      	ldr	r0, [pc, #36]	; (80047c4 <SetupDMAStreams+0x1a4>)
 800479e:	f011 fb0b 	bl	8015db8 <xTimerCreate>
 80047a2:	0005      	movs	r5, r0
		dmaStreamTotal[src-1] = count;
 80047a4:	230f      	movs	r3, #15
 80047a6:	446b      	add	r3, sp
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4a06      	ldr	r2, [pc, #24]	; (80047c8 <SetupDMAStreams+0x1a8>)
 80047b0:	509e      	str	r6, [r3, r2]
 80047b2:	e7c6      	b.n	8004742 <SetupDMAStreams+0x122>
		return BOS_ERR_WrongParam;
 80047b4:	2367      	movs	r3, #103	; 0x67
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	b005      	add	sp, #20
 80047ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 80047bc:	2367      	movs	r3, #103	; 0x67
 80047be:	e7fa      	b.n	80047b6 <SetupDMAStreams+0x196>
 80047c0:	08002e5d 	.word	0x08002e5d
 80047c4:	08016944 	.word	0x08016944
 80047c8:	20001004 	.word	0x20001004
 80047cc:	20000c40 	.word	0x20000c40

080047d0 <LoadEEstreams>:
{
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	b084      	sub	sp, #16
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0; 
 80047d4:	210e      	movs	r1, #14
 80047d6:	4469      	add	r1, sp
 80047d8:	2300      	movs	r3, #0
 80047da:	800b      	strh	r3, [r1, #0]
 80047dc:	aa03      	add	r2, sp, #12
 80047de:	8013      	strh	r3, [r2, #0]
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 80047e0:	20e4      	movs	r0, #228	; 0xe4
 80047e2:	f005 ffbb 	bl	800a75c <EE_ReadVariable>
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 80047e6:	2600      	movs	r6, #0
	if (!status1) {
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d102      	bne.n	80047f2 <LoadEEstreams+0x22>
		direction = (uint8_t) temp1;
 80047ec:	230e      	movs	r3, #14
 80047ee:	446b      	add	r3, sp
 80047f0:	781e      	ldrb	r6, [r3, #0]
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+1, &temp1);
 80047f2:	210e      	movs	r1, #14
 80047f4:	4469      	add	r1, sp
 80047f6:	20e5      	movs	r0, #229	; 0xe5
 80047f8:	f005 ffb0 	bl	800a75c <EE_ReadVariable>
 80047fc:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+2, &temp2);
 80047fe:	a903      	add	r1, sp, #12
 8004800:	20e6      	movs	r0, #230	; 0xe6
 8004802:	f005 ffab 	bl	800a75c <EE_ReadVariable>
	if (!status1 && !status2) {
 8004806:	4304      	orrs	r4, r0
 8004808:	b2a4      	uxth	r4, r4
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 800480a:	2500      	movs	r5, #0
	if (!status1 && !status2) {
 800480c:	2c00      	cmp	r4, #0
 800480e:	d106      	bne.n	800481e <LoadEEstreams+0x4e>
		count = ( (uint32_t) temp1 << 16 ) + temp2;
 8004810:	230e      	movs	r3, #14
 8004812:	446b      	add	r3, sp
 8004814:	881d      	ldrh	r5, [r3, #0]
 8004816:	042d      	lsls	r5, r5, #16
 8004818:	ab03      	add	r3, sp, #12
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	18ed      	adds	r5, r5, r3
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+3, &temp1);
 800481e:	210e      	movs	r1, #14
 8004820:	4469      	add	r1, sp
 8004822:	20e7      	movs	r0, #231	; 0xe7
 8004824:	f005 ff9a 	bl	800a75c <EE_ReadVariable>
 8004828:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+4, &temp2);
 800482a:	a903      	add	r1, sp, #12
 800482c:	20e8      	movs	r0, #232	; 0xe8
 800482e:	f005 ff95 	bl	800a75c <EE_ReadVariable>
	if (!status1 && !status2) {
 8004832:	4320      	orrs	r0, r4
 8004834:	b280      	uxth	r0, r0
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8004836:	2400      	movs	r4, #0
	if (!status1 && !status2) {
 8004838:	2800      	cmp	r0, #0
 800483a:	d106      	bne.n	800484a <LoadEEstreams+0x7a>
		timeout = ( (uint32_t) temp1 << 16 ) + temp2;
 800483c:	230e      	movs	r3, #14
 800483e:	446b      	add	r3, sp
 8004840:	881c      	ldrh	r4, [r3, #0]
 8004842:	0424      	lsls	r4, r4, #16
 8004844:	ab03      	add	r3, sp, #12
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	18e4      	adds	r4, r4, r3
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+5, &temp1);
 800484a:	210e      	movs	r1, #14
 800484c:	4469      	add	r1, sp
 800484e:	20e9      	movs	r0, #233	; 0xe9
 8004850:	f005 ff84 	bl	800a75c <EE_ReadVariable>
	if (!status1) {
 8004854:	2800      	cmp	r0, #0
 8004856:	d107      	bne.n	8004868 <LoadEEstreams+0x98>
		src1 = (uint8_t) (temp1 >> 8);
 8004858:	230e      	movs	r3, #14
 800485a:	446b      	add	r3, sp
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	0a19      	lsrs	r1, r3, #8
 8004860:	4a28      	ldr	r2, [pc, #160]	; (8004904 <LoadEEstreams+0x134>)
 8004862:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 8004864:	4a28      	ldr	r2, [pc, #160]	; (8004908 <LoadEEstreams+0x138>)
 8004866:	7013      	strb	r3, [r2, #0]
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+6, &temp1);
 8004868:	210e      	movs	r1, #14
 800486a:	4469      	add	r1, sp
 800486c:	20ea      	movs	r0, #234	; 0xea
 800486e:	f005 ff75 	bl	800a75c <EE_ReadVariable>
	if (!status1) {
 8004872:	2800      	cmp	r0, #0
 8004874:	d107      	bne.n	8004886 <LoadEEstreams+0xb6>
		src2 = (uint8_t) (temp1 >> 8);
 8004876:	230e      	movs	r3, #14
 8004878:	446b      	add	r3, sp
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	0a19      	lsrs	r1, r3, #8
 800487e:	4a23      	ldr	r2, [pc, #140]	; (800490c <LoadEEstreams+0x13c>)
 8004880:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;	
 8004882:	4a23      	ldr	r2, [pc, #140]	; (8004910 <LoadEEstreams+0x140>)
 8004884:	7013      	strb	r3, [r2, #0]
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+7, &temp1);
 8004886:	210e      	movs	r1, #14
 8004888:	4469      	add	r1, sp
 800488a:	20eb      	movs	r0, #235	; 0xeb
 800488c:	f005 ff66 	bl	800a75c <EE_ReadVariable>
	if (!status1) {
 8004890:	2800      	cmp	r0, #0
 8004892:	d107      	bne.n	80048a4 <LoadEEstreams+0xd4>
		src3 = (uint8_t) (temp1 >> 8);
 8004894:	230e      	movs	r3, #14
 8004896:	446b      	add	r3, sp
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	0a19      	lsrs	r1, r3, #8
 800489c:	4a1d      	ldr	r2, [pc, #116]	; (8004914 <LoadEEstreams+0x144>)
 800489e:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 80048a0:	4a1d      	ldr	r2, [pc, #116]	; (8004918 <LoadEEstreams+0x148>)
 80048a2:	7013      	strb	r3, [r2, #0]
	if (src1 && dst1)
 80048a4:	4b17      	ldr	r3, [pc, #92]	; (8004904 <LoadEEstreams+0x134>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <LoadEEstreams+0xe4>
 80048ac:	4a16      	ldr	r2, [pc, #88]	; (8004908 <LoadEEstreams+0x138>)
 80048ae:	7812      	ldrb	r2, [r2, #0]
 80048b0:	2a00      	cmp	r2, #0
 80048b2:	d112      	bne.n	80048da <LoadEEstreams+0x10a>
	if (src2 && dst2)
 80048b4:	4b15      	ldr	r3, [pc, #84]	; (800490c <LoadEEstreams+0x13c>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <LoadEEstreams+0xf4>
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <LoadEEstreams+0x140>)
 80048be:	7812      	ldrb	r2, [r2, #0]
 80048c0:	2a00      	cmp	r2, #0
 80048c2:	d111      	bne.n	80048e8 <LoadEEstreams+0x118>
	if (src3 && dst3)
 80048c4:	4b13      	ldr	r3, [pc, #76]	; (8004914 <LoadEEstreams+0x144>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <LoadEEstreams+0x104>
 80048cc:	4a12      	ldr	r2, [pc, #72]	; (8004918 <LoadEEstreams+0x148>)
 80048ce:	7812      	ldrb	r2, [r2, #0]
 80048d0:	2a00      	cmp	r2, #0
 80048d2:	d110      	bne.n	80048f6 <LoadEEstreams+0x126>
}
 80048d4:	2000      	movs	r0, #0
 80048d6:	b004      	add	sp, #16
 80048d8:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 80048da:	9200      	str	r2, [sp, #0]
 80048dc:	0022      	movs	r2, r4
 80048de:	0029      	movs	r1, r5
 80048e0:	0030      	movs	r0, r6
 80048e2:	f7ff fe9d 	bl	8004620 <SetupDMAStreams>
 80048e6:	e7e5      	b.n	80048b4 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 80048e8:	9200      	str	r2, [sp, #0]
 80048ea:	0022      	movs	r2, r4
 80048ec:	0029      	movs	r1, r5
 80048ee:	0030      	movs	r0, r6
 80048f0:	f7ff fe96 	bl	8004620 <SetupDMAStreams>
 80048f4:	e7e6      	b.n	80048c4 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 80048f6:	9200      	str	r2, [sp, #0]
 80048f8:	0022      	movs	r2, r4
 80048fa:	0029      	movs	r1, r5
 80048fc:	0030      	movs	r0, r6
 80048fe:	f7ff fe8f 	bl	8004620 <SetupDMAStreams>
 8004902:	e7e7      	b.n	80048d4 <LoadEEstreams+0x104>
 8004904:	20000ced 	.word	0x20000ced
 8004908:	20000868 	.word	0x20000868
 800490c:	20000cee 	.word	0x20000cee
 8004910:	20000869 	.word	0x20000869
 8004914:	20000cef 	.word	0x20000cef
 8004918:	2000086a 	.word	0x2000086a

0800491c <GetPortGPIOs>:
{
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	000e      	movs	r6, r1
 8004920:	0015      	movs	r5, r2
 8004922:	001c      	movs	r4, r3
	UART_HandleTypeDef* huart = GetUart(port);
 8004924:	f7ff fe5a 	bl	80045dc <GetUart>
	if (huart == &huart1) 
 8004928:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <GetPortGPIOs+0xbc>)
 800492a:	4298      	cmp	r0, r3
 800492c:	d01a      	beq.n	8004964 <GetPortGPIOs+0x48>
	else if (huart == &huart2) 
 800492e:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <GetPortGPIOs+0xc0>)
 8004930:	4298      	cmp	r0, r3
 8004932:	d025      	beq.n	8004980 <GetPortGPIOs+0x64>
	else if (huart == &huart3) 
 8004934:	4b2a      	ldr	r3, [pc, #168]	; (80049e0 <GetPortGPIOs+0xc4>)
 8004936:	4298      	cmp	r0, r3
 8004938:	d02d      	beq.n	8004996 <GetPortGPIOs+0x7a>
	else if (huart == &huart4) 
 800493a:	4b2a      	ldr	r3, [pc, #168]	; (80049e4 <GetPortGPIOs+0xc8>)
 800493c:	4298      	cmp	r0, r3
 800493e:	d036      	beq.n	80049ae <GetPortGPIOs+0x92>
	else if (huart == &huart5) 
 8004940:	4b29      	ldr	r3, [pc, #164]	; (80049e8 <GetPortGPIOs+0xcc>)
 8004942:	4298      	cmp	r0, r3
 8004944:	d03e      	beq.n	80049c4 <GetPortGPIOs+0xa8>
	else if (huart == &huart6) 
 8004946:	4a29      	ldr	r2, [pc, #164]	; (80049ec <GetPortGPIOs+0xd0>)
		result = BOS_ERROR;	
 8004948:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800494a:	4290      	cmp	r0, r2
 800494c:	d116      	bne.n	800497c <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800494e:	2390      	movs	r3, #144	; 0x90
 8004950:	05db      	lsls	r3, r3, #23
 8004952:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 8004954:	2210      	movs	r2, #16
 8004956:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 8004958:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800495a:	2320      	movs	r3, #32
 800495c:	9a04      	ldr	r2, [sp, #16]
 800495e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e00b      	b.n	800497c <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 8004964:	2390      	movs	r3, #144	; 0x90
 8004966:	05db      	lsls	r3, r3, #23
 8004968:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800496a:	2280      	movs	r2, #128	; 0x80
 800496c:	0092      	lsls	r2, r2, #2
 800496e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 8004970:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 8004972:	2380      	movs	r3, #128	; 0x80
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	9a04      	ldr	r2, [sp, #16]
 8004978:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	0018      	movs	r0, r3
 800497e:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 8004980:	2390      	movs	r3, #144	; 0x90
 8004982:	05db      	lsls	r3, r3, #23
 8004984:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 8004986:	2204      	movs	r2, #4
 8004988:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800498a:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800498c:	2308      	movs	r3, #8
 800498e:	9a04      	ldr	r2, [sp, #16]
 8004990:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e7f2      	b.n	800497c <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 8004996:	4b16      	ldr	r3, [pc, #88]	; (80049f0 <GetPortGPIOs+0xd4>)
 8004998:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800499a:	2280      	movs	r2, #128	; 0x80
 800499c:	00d2      	lsls	r2, r2, #3
 800499e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 80049a0:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	9a04      	ldr	r2, [sp, #16]
 80049a8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	e7e6      	b.n	800497c <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 80049ae:	2390      	movs	r3, #144	; 0x90
 80049b0:	05db      	lsls	r3, r3, #23
 80049b2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 80049b4:	2201      	movs	r2, #1
 80049b6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 80049b8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 80049ba:	2302      	movs	r3, #2
 80049bc:	9a04      	ldr	r2, [sp, #16]
 80049be:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	e7db      	b.n	800497c <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 80049c4:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <GetPortGPIOs+0xd4>)
 80049c6:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 80049c8:	2208      	movs	r2, #8
 80049ca:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 80049cc:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 80049ce:	2310      	movs	r3, #16
 80049d0:	9a04      	ldr	r2, [sp, #16]
 80049d2:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e7d1      	b.n	800497c <GetPortGPIOs+0x60>
 80049d8:	20006394 	.word	0x20006394
 80049dc:	200064e4 	.word	0x200064e4
 80049e0:	20006278 	.word	0x20006278
 80049e4:	20006474 	.word	0x20006474
 80049e8:	20006324 	.word	0x20006324
 80049ec:	20006404 	.word	0x20006404
 80049f0:	48000400 	.word	0x48000400

080049f4 <SetupPortForRemoteBootloaderUpdate>:
{
 80049f4:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 80049f6:	f7ff fdf1 	bl	80045dc <GetUart>
 80049fa:	0004      	movs	r4, r0
	huart->Init.BaudRate = 57600;
 80049fc:	23e1      	movs	r3, #225	; 0xe1
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	015b      	lsls	r3, r3, #5
 8004a0c:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);	
 8004a0e:	f00d f963 	bl	8011cd8 <HAL_UART_Init>
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a12:	6822      	ldr	r2, [r4, #0]
 8004a14:	6813      	ldr	r3, [r2, #0]
 8004a16:	2120      	movs	r1, #32
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6013      	str	r3, [r2, #0]
}
 8004a1c:	bd10      	pop	{r4, pc}
	...

08004a20 <testportCommand>:
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8004a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a22:	46d6      	mov	lr, sl
 8004a24:	4647      	mov	r7, r8
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b085      	sub	sp, #20
 8004a2a:	0004      	movs	r4, r0
 8004a2c:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 8004a32:	4b62      	ldr	r3, [pc, #392]	; (8004bbc <testportCommand+0x19c>)
 8004a34:	7c1a      	ldrb	r2, [r3, #16]
 8004a36:	ab02      	add	r3, sp, #8
 8004a38:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8004a3a:	2c00      	cmp	r4, #0
 8004a3c:	d101      	bne.n	8004a42 <testportCommand+0x22>
 8004a3e:	b672      	cpsid	i
 8004a40:	e7fe      	b.n	8004a40 <testportCommand+0x20>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004a42:	aa03      	add	r2, sp, #12
 8004a44:	2101      	movs	r1, #1
 8004a46:	f009 fd9d 	bl	800e584 <FreeRTOS_CLIGetParameter>
 8004a4a:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 8004a4c:	495c      	ldr	r1, [pc, #368]	; (8004bc0 <testportCommand+0x1a0>)
 8004a4e:	f7fb fb59 	bl	8000104 <strcmp>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d173      	bne.n	8004b3e <testportCommand+0x11e>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 8004a56:	4b5b      	ldr	r3, [pc, #364]	; (8004bc4 <testportCommand+0x1a4>)
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	4b5b      	ldr	r3, [pc, #364]	; (8004bc8 <testportCommand+0x1a8>)
 8004a5c:	189b      	adds	r3, r3, r2
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	781e      	ldrb	r6, [r3, #0]
 8004a62:	2501      	movs	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
    {
      if(PcPort!=ports)
 8004a64:	4b57      	ldr	r3, [pc, #348]	; (8004bc4 <testportCommand+0x1a4>)
 8004a66:	4698      	mov	r8, r3
 8004a68:	e015      	b.n	8004a96 <testportCommand+0x76>
        result = BOS_OK;
      else
        result = BOS_ERR_Keyword;
      
      if (result == BOS_OK){ 
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 8004a6a:	002a      	movs	r2, r5
 8004a6c:	4957      	ldr	r1, [pc, #348]	; (8004bcc <testportCommand+0x1ac>)
 8004a6e:	0020      	movs	r0, r4
 8004a70:	f00d fc18 	bl	80122a4 <siprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8004a74:	0020      	movs	r0, r4
 8004a76:	f7fb fb4f 	bl	8000118 <strlen>
 8004a7a:	b282      	uxth	r2, r0
 8004a7c:	4b51      	ldr	r3, [pc, #324]	; (8004bc4 <testportCommand+0x1a4>)
 8004a7e:	7818      	ldrb	r0, [r3, #0]
 8004a80:	2364      	movs	r3, #100	; 0x64
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	3b5a      	subs	r3, #90	; 0x5a
 8004a86:	0021      	movs	r1, r4
 8004a88:	f009 fb8c 	bl	800e1a4 <writePxMutex>
 8004a8c:	e02f      	b.n	8004aee <testportCommand+0xce>
 8004a8e:	3501      	adds	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
 8004a90:	2d07      	cmp	r5, #7
 8004a92:	d100      	bne.n	8004a96 <testportCommand+0x76>
 8004a94:	e07f      	b.n	8004b96 <testportCommand+0x176>
 8004a96:	b2eb      	uxtb	r3, r5
 8004a98:	469a      	mov	sl, r3
      if(PcPort!=ports)
 8004a9a:	4643      	mov	r3, r8
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	4553      	cmp	r3, sl
 8004aa0:	d0f5      	beq.n	8004a8e <testportCommand+0x6e>
        WriteVaule[0]=rand();
 8004aa2:	f00d fbb1 	bl	8012208 <rand>
 8004aa6:	af02      	add	r7, sp, #8
 8004aa8:	7038      	strb	r0, [r7, #0]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 8004aaa:	2364      	movs	r3, #100	; 0x64
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	3b5a      	subs	r3, #90	; 0x5a
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	0039      	movs	r1, r7
 8004ab4:	4650      	mov	r0, sl
 8004ab6:	f009 fb75 	bl	800e1a4 <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 8004aba:	4650      	mov	r0, sl
 8004abc:	f7ff fd8e 	bl	80045dc <GetUart>
 8004ac0:	6803      	ldr	r3, [r0, #0]
 8004ac2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      if(WriteVaule[0]==ReadValue[0])
 8004ac4:	783a      	ldrb	r2, [r7, #0]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d0ce      	beq.n	8004a6a <testportCommand+0x4a>
     	else if (result == BOS_ERR_Keyword){
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 8004acc:	002a      	movs	r2, r5
 8004ace:	4940      	ldr	r1, [pc, #256]	; (8004bd0 <testportCommand+0x1b0>)
 8004ad0:	0020      	movs	r0, r4
 8004ad2:	f00d fbe7 	bl	80122a4 <siprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8004ad6:	0020      	movs	r0, r4
 8004ad8:	f7fb fb1e 	bl	8000118 <strlen>
 8004adc:	b282      	uxth	r2, r0
 8004ade:	4b39      	ldr	r3, [pc, #228]	; (8004bc4 <testportCommand+0x1a4>)
 8004ae0:	7818      	ldrb	r0, [r3, #0]
 8004ae2:	2364      	movs	r3, #100	; 0x64
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	3b5a      	subs	r3, #90	; 0x5a
 8004ae8:	0021      	movs	r1, r4
 8004aea:	f009 fb5b 	bl	800e1a4 <writePxMutex>
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 8004aee:	2254      	movs	r2, #84	; 0x54
 8004af0:	4938      	ldr	r1, [pc, #224]	; (8004bd4 <testportCommand+0x1b4>)
 8004af2:	0020      	movs	r0, r4
 8004af4:	f00d facf 	bl	8012096 <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 8004af8:	0020      	movs	r0, r4
 8004afa:	f7fb fb0d 	bl	8000118 <strlen>
 8004afe:	b282      	uxth	r2, r0
 8004b00:	4b30      	ldr	r3, [pc, #192]	; (8004bc4 <testportCommand+0x1a4>)
 8004b02:	7818      	ldrb	r0, [r3, #0]
 8004b04:	2364      	movs	r3, #100	; 0x64
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	3b5a      	subs	r3, #90	; 0x5a
 8004b0a:	0021      	movs	r1, r4
 8004b0c:	f009 fb4a 	bl	800e1a4 <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8004b10:	3601      	adds	r6, #1
 8004b12:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <testportCommand+0x1a4>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <testportCommand+0x1b8>)
 8004b1c:	18d3      	adds	r3, r2, r3
 8004b1e:	5d9b      	ldrb	r3, [r3, r6]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1b4      	bne.n	8004a8e <testportCommand+0x6e>
 8004b24:	4692      	mov	sl, r2
 8004b26:	4f27      	ldr	r7, [pc, #156]	; (8004bc4 <testportCommand+0x1a4>)
 8004b28:	2001      	movs	r0, #1
 8004b2a:	f00a f859 	bl	800ebe0 <HAL_Delay>
 8004b2e:	783b      	ldrb	r3, [r7, #0]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	019b      	lsls	r3, r3, #6
 8004b34:	4453      	add	r3, sl
 8004b36:	5d9b      	ldrb	r3, [r3, r6]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f5      	beq.n	8004b28 <testportCommand+0x108>
 8004b3c:	e7a7      	b.n	8004a8e <testportCommand+0x6e>
       LastEnter++;
        }
      }
    }
	else if (pcParameterString1[0] == 'p') {
 8004b3e:	2300      	movs	r3, #0
 8004b40:	56eb      	ldrsb	r3, [r5, r3]
 8004b42:	2b70      	cmp	r3, #112	; 0x70
 8004b44:	d005      	beq.n	8004b52 <testportCommand+0x132>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
	else if (result == BOS_ERR_Keyword)  
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
    }
    else {
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8004b46:	220f      	movs	r2, #15
 8004b48:	4924      	ldr	r1, [pc, #144]	; (8004bdc <testportCommand+0x1bc>)
 8004b4a:	0020      	movs	r0, r4
 8004b4c:	f00d faa3 	bl	8012096 <memcpy>
 8004b50:	e021      	b.n	8004b96 <testportCommand+0x176>
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 8004b52:	1c68      	adds	r0, r5, #1
 8004b54:	f00d fa2d 	bl	8011fb2 <atol>
 8004b58:	0005      	movs	r5, r0
 8004b5a:	b2c7      	uxtb	r7, r0
    if(portt>0 && portt<=NumOfPorts)
 8004b5c:	1e7b      	subs	r3, r7, #1
 8004b5e:	2b05      	cmp	r3, #5
 8004b60:	d825      	bhi.n	8004bae <testportCommand+0x18e>
        WriteVaule[0]=rand();
 8004b62:	f00d fb51 	bl	8012208 <rand>
 8004b66:	ae02      	add	r6, sp, #8
 8004b68:	7030      	strb	r0, [r6, #0]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 8004b6a:	2364      	movs	r3, #100	; 0x64
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	3b32      	subs	r3, #50	; 0x32
 8004b70:	2201      	movs	r2, #1
 8004b72:	0031      	movs	r1, r6
 8004b74:	0038      	movs	r0, r7
 8004b76:	f009 fb15 	bl	800e1a4 <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 8004b7a:	0038      	movs	r0, r7
 8004b7c:	f7ff fd2e 	bl	80045dc <GetUart>
 8004b80:	6803      	ldr	r3, [r0, #0]
 8004b82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  if(WriteVaule[0]==ReadValue[0])
 8004b84:	7832      	ldrb	r2, [r6, #0]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d10a      	bne.n	8004ba2 <testportCommand+0x182>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 8004b8c:	b2ea      	uxtb	r2, r5
 8004b8e:	490f      	ldr	r1, [pc, #60]	; (8004bcc <testportCommand+0x1ac>)
 8004b90:	0020      	movs	r0, r4
 8004b92:	f00d fb87 	bl	80122a4 <siprintf>
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8004b96:	2000      	movs	r0, #0
 8004b98:	b005      	add	sp, #20
 8004b9a:	bc0c      	pop	{r2, r3}
 8004b9c:	4690      	mov	r8, r2
 8004b9e:	469a      	mov	sl, r3
 8004ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 8004ba2:	b2ea      	uxtb	r2, r5
 8004ba4:	490a      	ldr	r1, [pc, #40]	; (8004bd0 <testportCommand+0x1b0>)
 8004ba6:	0020      	movs	r0, r4
 8004ba8:	f00d fb7c 	bl	80122a4 <siprintf>
 8004bac:	e7f3      	b.n	8004b96 <testportCommand+0x176>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 8004bae:	221b      	movs	r2, #27
 8004bb0:	490b      	ldr	r1, [pc, #44]	; (8004be0 <testportCommand+0x1c0>)
 8004bb2:	0020      	movs	r0, r4
 8004bb4:	f00d fa6f 	bl	8012096 <memcpy>
	return pdFALSE;
 8004bb8:	e7ed      	b.n	8004b96 <testportCommand+0x176>
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	08016308 	.word	0x08016308
 8004bc0:	08016d0c 	.word	0x08016d0c
 8004bc4:	200003b7 	.word	0x200003b7
 8004bc8:	20000f94 	.word	0x20000f94
 8004bcc:	08018634 	.word	0x08018634
 8004bd0:	08018650 	.word	0x08018650
 8004bd4:	08018664 	.word	0x08018664
 8004bd8:	20000e14 	.word	0x20000e14
 8004bdc:	080186b8 	.word	0x080186b8
 8004be0:	080186c8 	.word	0x080186c8

08004be4 <FindBroadcastRoutes>:
{
 8004be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004be6:	46de      	mov	lr, fp
 8004be8:	4657      	mov	r7, sl
 8004bea:	464e      	mov	r6, r9
 8004bec:	4645      	mov	r5, r8
 8004bee:	b5e0      	push	{r5, r6, r7, lr}
 8004bf0:	b085      	sub	sp, #20
 8004bf2:	af00      	add	r7, sp, #0
	uint8_t  modules[N];			// Todo: Optimize to make bit-wise
 8004bf4:	4b47      	ldr	r3, [pc, #284]	; (8004d14 <FindBroadcastRoutes+0x130>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	469c      	mov	ip, r3
 8004bfa:	3307      	adds	r3, #7
 8004bfc:	08db      	lsrs	r3, r3, #3
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	466a      	mov	r2, sp
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	469d      	mov	sp, r3
 8004c06:	466c      	mov	r4, sp
	for(m=0 ; m<N ; m++)
 8004c08:	4663      	mov	r3, ip
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00d      	beq.n	8004c2a <FindBroadcastRoutes+0x46>
 8004c0e:	0023      	movs	r3, r4
 8004c10:	4a41      	ldr	r2, [pc, #260]	; (8004d18 <FindBroadcastRoutes+0x134>)
 8004c12:	4661      	mov	r1, ip
 8004c14:	1e4d      	subs	r5, r1, #1
 8004c16:	b2ed      	uxtb	r5, r5
 8004c18:	3501      	adds	r5, #1
 8004c1a:	192d      	adds	r5, r5, r4
		modules[m] = 0;
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] = 0;
 8004c20:	8011      	strh	r1, [r2, #0]
 8004c22:	3301      	adds	r3, #1
 8004c24:	3202      	adds	r2, #2
	for(m=0 ; m<N ; m++)
 8004c26:	42ab      	cmp	r3, r5
 8004c28:	d1f9      	bne.n	8004c1e <FindBroadcastRoutes+0x3a>
	modules[src-1] = ++level;					// Tag the source
 8004c2a:	3801      	subs	r0, #1
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	5423      	strb	r3, [r4, r0]
 8004c30:	2216      	movs	r2, #22
 8004c32:	4342      	muls	r2, r0
 8004c34:	3202      	adds	r2, #2
 8004c36:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <FindBroadcastRoutes+0x138>)
 8004c38:	18d2      	adds	r2, r2, r3
 8004c3a:	2100      	movs	r1, #0
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8004c3c:	4d36      	ldr	r5, [pc, #216]	; (8004d18 <FindBroadcastRoutes+0x134>)
 8004c3e:	0040      	lsls	r0, r0, #1
 8004c40:	2301      	movs	r3, #1
 8004c42:	4698      	mov	r8, r3
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8004c44:	46a3      	mov	fp, r4
 8004c46:	e003      	b.n	8004c50 <FindBroadcastRoutes+0x6c>
 8004c48:	3101      	adds	r1, #1
 8004c4a:	3202      	adds	r2, #2
	for(p=1 ; p<=NumOfPorts ; p++)
 8004c4c:	2906      	cmp	r1, #6
 8004c4e:	d011      	beq.n	8004c74 <FindBroadcastRoutes+0x90>
		if (array[src-1][p]) 
 8004c50:	8813      	ldrh	r3, [r2, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f8      	beq.n	8004c48 <FindBroadcastRoutes+0x64>
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8004c56:	5b46      	ldrh	r6, [r0, r5]
 8004c58:	46b1      	mov	r9, r6
 8004c5a:	4646      	mov	r6, r8
 8004c5c:	408e      	lsls	r6, r1
 8004c5e:	46b2      	mov	sl, r6
 8004c60:	464e      	mov	r6, r9
 8004c62:	4654      	mov	r4, sl
 8004c64:	4326      	orrs	r6, r4
 8004c66:	5346      	strh	r6, [r0, r5]
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8004c68:	08db      	lsrs	r3, r3, #3
 8004c6a:	445b      	add	r3, fp
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	2402      	movs	r4, #2
 8004c70:	701c      	strb	r4, [r3, #0]
 8004c72:	e7e9      	b.n	8004c48 <FindBroadcastRoutes+0x64>
 8004c74:	465c      	mov	r4, fp
	++level;													// Move one level
 8004c76:	2602      	movs	r6, #2
 8004c78:	4b28      	ldr	r3, [pc, #160]	; (8004d1c <FindBroadcastRoutes+0x138>)
 8004c7a:	3302      	adds	r3, #2
 8004c7c:	607b      	str	r3, [r7, #4]
						bcastRoutes[m] |= (0x01 << (p-1));
 8004c7e:	2301      	movs	r3, #1
 8004c80:	469b      	mov	fp, r3
 8004c82:	46b0      	mov	r8, r6
 8004c84:	0026      	movs	r6, r4
		++level;																					// Move one level
 8004c86:	4643      	mov	r3, r8
 8004c88:	3301      	adds	r3, #1
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	4698      	mov	r8, r3
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8004c8e:	4663      	mov	r3, ip
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d035      	beq.n	8004d00 <FindBroadcastRoutes+0x11c>
 8004c94:	2200      	movs	r2, #0
		untaged = 0;																			// Reset the untaged counter
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	4443      	add	r3, r8
 8004c9e:	4699      	mov	r9, r3
 8004ca0:	e01e      	b.n	8004ce0 <FindBroadcastRoutes+0xfc>
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	3102      	adds	r1, #2
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 8004ca6:	2806      	cmp	r0, #6
 8004ca8:	d015      	beq.n	8004cd6 <FindBroadcastRoutes+0xf2>
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
 8004caa:	880b      	ldrh	r3, [r1, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f8      	beq.n	8004ca2 <FindBroadcastRoutes+0xbe>
 8004cb0:	08db      	lsrs	r3, r3, #3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	5cf5      	ldrb	r5, [r6, r3]
 8004cb6:	2d00      	cmp	r5, #0
 8004cb8:	d1f3      	bne.n	8004ca2 <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |= (0x01 << (p-1));
 8004cba:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <FindBroadcastRoutes+0x134>)
 8004cbc:	5aa5      	ldrh	r5, [r4, r2]
 8004cbe:	465a      	mov	r2, fp
 8004cc0:	4082      	lsls	r2, r0
 8004cc2:	4315      	orrs	r5, r2
 8004cc4:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <FindBroadcastRoutes+0x134>)
 8004cc6:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3)-1] = level;		// Tag this module as already broadcasted-to 
 8004cc8:	4642      	mov	r2, r8
 8004cca:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	e7e5      	b.n	8004ca2 <FindBroadcastRoutes+0xbe>
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	3201      	adds	r2, #1
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8004cda:	b2d3      	uxtb	r3, r2
 8004cdc:	4563      	cmp	r3, ip
 8004cde:	d20c      	bcs.n	8004cfa <FindBroadcastRoutes+0x116>
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8004ce0:	5cb3      	ldrb	r3, [r6, r2]
 8004ce2:	454b      	cmp	r3, r9
 8004ce4:	d1f8      	bne.n	8004cd8 <FindBroadcastRoutes+0xf4>
 8004ce6:	2116      	movs	r1, #22
 8004ce8:	4351      	muls	r1, r2
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	469a      	mov	sl, r3
 8004cee:	4451      	add	r1, sl
 8004cf0:	0053      	lsls	r3, r2, #1
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	60ba      	str	r2, [r7, #8]
 8004cf6:	001c      	movs	r4, r3
 8004cf8:	e7d7      	b.n	8004caa <FindBroadcastRoutes+0xc6>
	while (untaged);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1c2      	bne.n	8004c86 <FindBroadcastRoutes+0xa2>
}
 8004d00:	2000      	movs	r0, #0
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b005      	add	sp, #20
 8004d06:	bc3c      	pop	{r2, r3, r4, r5}
 8004d08:	4690      	mov	r8, r2
 8004d0a:	4699      	mov	r9, r3
 8004d0c:	46a2      	mov	sl, r4
 8004d0e:	46ab      	mov	fp, r5
 8004d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	2000001c 	.word	0x2000001c
 8004d18:	20000614 	.word	0x20000614
 8004d1c:	200003b8 	.word	0x200003b8

08004d20 <SendMessageFromPort>:
{
 8004d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d22:	46de      	mov	lr, fp
 8004d24:	4657      	mov	r7, sl
 8004d26:	464e      	mov	r6, r9
 8004d28:	4645      	mov	r5, r8
 8004d2a:	b5e0      	push	{r5, r6, r7, lr}
 8004d2c:	b087      	sub	sp, #28
 8004d2e:	4680      	mov	r8, r0
 8004d30:	9102      	str	r1, [sp, #8]
 8004d32:	0014      	movs	r4, r2
 8004d34:	9303      	str	r3, [sp, #12]
 8004d36:	ab10      	add	r3, sp, #64	; 0x40
 8004d38:	881f      	ldrh	r7, [r3, #0]
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 8004d3a:	0003      	movs	r3, r0
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	d100      	bne.n	8004d42 <SendMessageFromPort+0x22>
 8004d40:	e169      	b.n	8005016 <SendMessageFromPort+0x2f6>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d159      	bne.n	8004dfa <SendMessageFromPort+0xda>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8004d46:	1c93      	adds	r3, r2, #2
 8004d48:	b2db      	uxtb	r3, r3
		return BOS_ERR_WrongParam; 
 8004d4a:	2067      	movs	r0, #103	; 0x67
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d900      	bls.n	8004d52 <SendMessageFromPort+0x32>
 8004d50:	e143      	b.n	8004fda <SendMessageFromPort+0x2ba>
	TaskPriority = uxTaskPriorityGet( NULL );
 8004d52:	2000      	movs	r0, #0
 8004d54:	f010 f996 	bl	8015084 <uxTaskPriorityGet>
 8004d58:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8004d5a:	2105      	movs	r1, #5
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	f010 f9b1 	bl	80150c4 <vTaskPrioritySet>
	message[0] = 'H';						
 8004d62:	4bba      	ldr	r3, [pc, #744]	; (800504c <SendMessageFromPort+0x32c>)
 8004d64:	2248      	movs	r2, #72	; 0x48
 8004d66:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8004d68:	3212      	adds	r2, #18
 8004d6a:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8004d6c:	9b02      	ldr	r3, [sp, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d000      	beq.n	8004d74 <SendMessageFromPort+0x54>
 8004d72:	e166      	b.n	8005042 <SendMessageFromPort+0x322>
		length = messageLength[numberOfParams-1];
 8004d74:	3f01      	subs	r7, #1
 8004d76:	4bb6      	ldr	r3, [pc, #728]	; (8005050 <SendMessageFromPort+0x330>)
 8004d78:	5ddd      	ldrb	r5, [r3, r7]
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 8004d7a:	48b4      	ldr	r0, [pc, #720]	; (800504c <SendMessageFromPort+0x32c>)
 8004d7c:	00f9      	lsls	r1, r7, #3
 8004d7e:	1bc9      	subs	r1, r1, r7
 8004d80:	00c9      	lsls	r1, r1, #3
 8004d82:	4fb4      	ldr	r7, [pc, #720]	; (8005054 <SendMessageFromPort+0x334>)
 8004d84:	19c9      	adds	r1, r1, r7
 8004d86:	002a      	movs	r2, r5
 8004d88:	3003      	adds	r0, #3
 8004d8a:	f00d f984 	bl	8012096 <memcpy>
	message[2] = length;
 8004d8e:	4baf      	ldr	r3, [pc, #700]	; (800504c <SendMessageFromPort+0x32c>)
 8004d90:	469a      	mov	sl, r3
 8004d92:	709d      	strb	r5, [r3, #2]
	memcpy(crcBuffer, &message[0], length + 3);	
 8004d94:	1cef      	adds	r7, r5, #3
 8004d96:	003a      	movs	r2, r7
 8004d98:	0019      	movs	r1, r3
 8004d9a:	48af      	ldr	r0, [pc, #700]	; (8005058 <SendMessageFromPort+0x338>)
 8004d9c:	f00d f97b 	bl	8012096 <memcpy>
	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
 8004da0:	17fe      	asrs	r6, r7, #31
 8004da2:	2303      	movs	r3, #3
 8004da4:	469b      	mov	fp, r3
 8004da6:	401e      	ands	r6, r3
 8004da8:	19f6      	adds	r6, r6, r7
 8004daa:	10b6      	asrs	r6, r6, #2
 8004dac:	0032      	movs	r2, r6
 8004dae:	49aa      	ldr	r1, [pc, #680]	; (8005058 <SendMessageFromPort+0x338>)
 8004db0:	48aa      	ldr	r0, [pc, #680]	; (800505c <SendMessageFromPort+0x33c>)
 8004db2:	f00a f858 	bl	800ee66 <HAL_CRC_Calculate>
 8004db6:	4653      	mov	r3, sl
 8004db8:	55d8      	strb	r0, [r3, r7]
	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
 8004dba:	465b      	mov	r3, fp
 8004dbc:	423b      	tst	r3, r7
 8004dbe:	d000      	beq.n	8004dc2 <SendMessageFromPort+0xa2>
 8004dc0:	e0f3      	b.n	8004faa <SendMessageFromPort+0x28a>
	memset(crcBuffer, 0, sizeof(crcBuffer));
 8004dc2:	2238      	movs	r2, #56	; 0x38
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	48a4      	ldr	r0, [pc, #656]	; (8005058 <SendMessageFromPort+0x338>)
 8004dc8:	f00d f96e 	bl	80120a8 <memset>
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 8004dcc:	3402      	adds	r4, #2
 8004dce:	b2e4      	uxtb	r4, r4
 8004dd0:	2c01      	cmp	r4, #1
 8004dd2:	d900      	bls.n	8004dd6 <SendMessageFromPort+0xb6>
 8004dd4:	e0f3      	b.n	8004fbe <SendMessageFromPort+0x29e>
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 8004dd6:	9b03      	ldr	r3, [sp, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d105      	bne.n	8004de8 <SendMessageFromPort+0xc8>
 8004ddc:	9b02      	ldr	r3, [sp, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <SendMessageFromPort+0xc8>
			src = message[4];
 8004de2:	4b9a      	ldr	r3, [pc, #616]	; (800504c <SendMessageFromPort+0x32c>)
 8004de4:	791b      	ldrb	r3, [r3, #4]
 8004de6:	9302      	str	r3, [sp, #8]
		FindBroadcastRoutes(src);
 8004de8:	9802      	ldr	r0, [sp, #8]
 8004dea:	f7ff fefb 	bl	8004be4 <FindBroadcastRoutes>
 8004dee:	2600      	movs	r6, #0
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8004df0:	2401      	movs	r4, #1
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8004df2:	4b9b      	ldr	r3, [pc, #620]	; (8005060 <SendMessageFromPort+0x340>)
 8004df4:	4698      	mov	r8, r3
 8004df6:	4f9b      	ldr	r7, [pc, #620]	; (8005064 <SendMessageFromPort+0x344>)
 8004df8:	e0fb      	b.n	8004ff2 <SendMessageFromPort+0x2d2>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 8004dfa:	9b02      	ldr	r3, [sp, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <SendMessageFromPort+0xe6>
 8004e00:	2a00      	cmp	r2, #0
 8004e02:	d100      	bne.n	8004e06 <SendMessageFromPort+0xe6>
 8004e04:	e109      	b.n	800501a <SendMessageFromPort+0x2fa>
	TaskPriority = uxTaskPriorityGet( NULL );
 8004e06:	2000      	movs	r0, #0
 8004e08:	f010 f93c 	bl	8015084 <uxTaskPriorityGet>
 8004e0c:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8004e0e:	2105      	movs	r1, #5
 8004e10:	2000      	movs	r0, #0
 8004e12:	f010 f957 	bl	80150c4 <vTaskPrioritySet>
	message[0] = 'H';						
 8004e16:	4b8d      	ldr	r3, [pc, #564]	; (800504c <SendMessageFromPort+0x32c>)
 8004e18:	2248      	movs	r2, #72	; 0x48
 8004e1a:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8004e1c:	3212      	adds	r2, #18
 8004e1e:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8004e20:	9b03      	ldr	r3, [sp, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0a6      	beq.n	8004d74 <SendMessageFromPort+0x54>
		if (src == 0)		src = myID;
 8004e26:	9b02      	ldr	r3, [sp, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d102      	bne.n	8004e32 <SendMessageFromPort+0x112>
 8004e2c:	4b8d      	ldr	r3, [pc, #564]	; (8005064 <SendMessageFromPort+0x344>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	9302      	str	r3, [sp, #8]
		message[2] = length;	
 8004e32:	4986      	ldr	r1, [pc, #536]	; (800504c <SendMessageFromPort+0x32c>)
 8004e34:	2300      	movs	r3, #0
 8004e36:	708b      	strb	r3, [r1, #2]
		message[3] = dst;						
 8004e38:	70cc      	strb	r4, [r1, #3]
		message[4] = src;
 8004e3a:	9b02      	ldr	r3, [sp, #8]
 8004e3c:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8004e3e:	4a8a      	ldr	r2, [pc, #552]	; (8005068 <SendMessageFromPort+0x348>)
 8004e40:	79d3      	ldrb	r3, [r2, #7]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	7992      	ldrb	r2, [r2, #6]
 8004e46:	4313      	orrs	r3, r2
		if (code > 0xFF)	extendCode = true;
 8004e48:	22ff      	movs	r2, #255	; 0xff
 8004e4a:	9803      	ldr	r0, [sp, #12]
 8004e4c:	4282      	cmp	r2, r0
 8004e4e:	4192      	sbcs	r2, r2
 8004e50:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8004e52:	0052      	lsls	r2, r2, #1
 8004e54:	4313      	orrs	r3, r2
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	714b      	strb	r3, [r1, #5]
		message[6+shift] = (uint8_t) code;
 8004e5a:	7188      	strb	r0, [r1, #6]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	4692      	mov	sl, r2
		if (extendCode == true) {
 8004e60:	28ff      	cmp	r0, #255	; 0xff
 8004e62:	d903      	bls.n	8004e6c <SendMessageFromPort+0x14c>
			message[6+shift] = (uint8_t) (code >> 8);		
 8004e64:	0a02      	lsrs	r2, r0, #8
 8004e66:	71ca      	strb	r2, [r1, #7]
			++shift;
 8004e68:	2201      	movs	r2, #1
 8004e6a:	4692      	mov	sl, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 8004e6c:	2f2e      	cmp	r7, #46	; 0x2e
 8004e6e:	d92f      	bls.n	8004ed0 <SendMessageFromPort+0x1b0>
			message[5] |= 0x80;		
 8004e70:	2280      	movs	r2, #128	; 0x80
 8004e72:	4252      	negs	r2, r2
 8004e74:	4313      	orrs	r3, r2
 8004e76:	4a75      	ldr	r2, [pc, #468]	; (800504c <SendMessageFromPort+0x32c>)
 8004e78:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 8004e7a:	4b7c      	ldr	r3, [pc, #496]	; (800506c <SendMessageFromPort+0x34c>)
 8004e7c:	801f      	strh	r7, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
 8004e7e:	2500      	movs	r5, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8004e80:	272e      	movs	r7, #46	; 0x2e
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8004e82:	4653      	mov	r3, sl
 8004e84:	3307      	adds	r3, #7
 8004e86:	4694      	mov	ip, r2
 8004e88:	4463      	add	r3, ip
 8004e8a:	9305      	str	r3, [sp, #20]
			while (totalNumberOfParams != 0)
 8004e8c:	4b77      	ldr	r3, [pc, #476]	; (800506c <SendMessageFromPort+0x34c>)
 8004e8e:	881e      	ldrh	r6, [r3, #0]
 8004e90:	2e00      	cmp	r6, #0
 8004e92:	d02b      	beq.n	8004eec <SendMessageFromPort+0x1cc>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 8004e94:	0039      	movs	r1, r7
 8004e96:	0030      	movs	r0, r6
 8004e98:	f7fb f950 	bl	800013c <__udivsi3>
 8004e9c:	b280      	uxth	r0, r0
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d141      	bne.n	8004f26 <SendMessageFromPort+0x206>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 8004ea2:	4b6a      	ldr	r3, [pc, #424]	; (800504c <SendMessageFromPort+0x32c>)
 8004ea4:	795a      	ldrb	r2, [r3, #5]
 8004ea6:	237f      	movs	r3, #127	; 0x7f
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	4a68      	ldr	r2, [pc, #416]	; (800504c <SendMessageFromPort+0x32c>)
 8004eac:	7153      	strb	r3, [r2, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8004eae:	4d70      	ldr	r5, [pc, #448]	; (8005070 <SendMessageFromPort+0x350>)
 8004eb0:	882b      	ldrh	r3, [r5, #0]
 8004eb2:	4970      	ldr	r1, [pc, #448]	; (8005074 <SendMessageFromPort+0x354>)
 8004eb4:	18c9      	adds	r1, r1, r3
 8004eb6:	0032      	movs	r2, r6
 8004eb8:	9805      	ldr	r0, [sp, #20]
 8004eba:	f00d f8ec 	bl	8012096 <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	802b      	strh	r3, [r5, #0]
 8004ec2:	4a6a      	ldr	r2, [pc, #424]	; (800506c <SendMessageFromPort+0x34c>)
 8004ec4:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 8004ec6:	1d35      	adds	r5, r6, #4
 8004ec8:	4455      	add	r5, sl
 8004eca:	b2ed      	uxtb	r5, r5
					numberOfParams = totalNumberOfParams;
 8004ecc:	0037      	movs	r7, r6
 8004ece:	e7dd      	b.n	8004e8c <SendMessageFromPort+0x16c>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8004ed0:	4653      	mov	r3, sl
 8004ed2:	3307      	adds	r3, #7
 8004ed4:	485d      	ldr	r0, [pc, #372]	; (800504c <SendMessageFromPort+0x32c>)
 8004ed6:	18c0      	adds	r0, r0, r3
 8004ed8:	4b65      	ldr	r3, [pc, #404]	; (8005070 <SendMessageFromPort+0x350>)
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	4965      	ldr	r1, [pc, #404]	; (8005074 <SendMessageFromPort+0x354>)
 8004ede:	18c9      	adds	r1, r1, r3
 8004ee0:	003a      	movs	r2, r7
 8004ee2:	f00d f8d8 	bl	8012096 <memcpy>
			length = numberOfParams + shift + 4;
 8004ee6:	1d3d      	adds	r5, r7, #4
 8004ee8:	4455      	add	r5, sl
 8004eea:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true)
 8004eec:	4b62      	ldr	r3, [pc, #392]	; (8005078 <SendMessageFromPort+0x358>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d100      	bne.n	8004ef6 <SendMessageFromPort+0x1d6>
 8004ef4:	e74b      	b.n	8004d8e <SendMessageFromPort+0x6e>
			if (dstGroupID < BOS_BROADCAST)
 8004ef6:	4b61      	ldr	r3, [pc, #388]	; (800507c <SendMessageFromPort+0x35c>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2bff      	cmp	r3, #255	; 0xff
 8004efc:	d100      	bne.n	8004f00 <SendMessageFromPort+0x1e0>
 8004efe:	e090      	b.n	8005022 <SendMessageFromPort+0x302>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8004f00:	4a5f      	ldr	r2, [pc, #380]	; (8005080 <SendMessageFromPort+0x360>)
 8004f02:	7812      	ldrb	r2, [r2, #0]
 8004f04:	4694      	mov	ip, r2
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	d04d      	beq.n	8004fa6 <SendMessageFromPort+0x286>
 8004f0a:	2601      	movs	r6, #1
 8004f0c:	409e      	lsls	r6, r3
 8004f0e:	485d      	ldr	r0, [pc, #372]	; (8005084 <SendMessageFromPort+0x364>)
 8004f10:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 8004f12:	2100      	movs	r1, #0
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8004f14:	4a4d      	ldr	r2, [pc, #308]	; (800504c <SendMessageFromPort+0x32c>)
 8004f16:	4691      	mov	r9, r2
 8004f18:	44b9      	add	r9, r7
 8004f1a:	0022      	movs	r2, r4
 8004f1c:	4664      	mov	r4, ip
 8004f1e:	46ac      	mov	ip, r5
 8004f20:	4655      	mov	r5, sl
 8004f22:	4692      	mov	sl, r2
 8004f24:	e017      	b.n	8004f56 <SendMessageFromPort+0x236>
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 8004f26:	9700      	str	r7, [sp, #0]
 8004f28:	9b03      	ldr	r3, [sp, #12]
 8004f2a:	0022      	movs	r2, r4
 8004f2c:	9902      	ldr	r1, [sp, #8]
 8004f2e:	4640      	mov	r0, r8
 8004f30:	f7ff fef6 	bl	8004d20 <SendMessageFromPort>
					osDelay(10);
 8004f34:	200a      	movs	r0, #10
 8004f36:	f009 fa0c 	bl	800e352 <osDelay>
					totalNumberOfParams -= numberOfParams;
 8004f3a:	4a4c      	ldr	r2, [pc, #304]	; (800506c <SendMessageFromPort+0x34c>)
 8004f3c:	8813      	ldrh	r3, [r2, #0]
 8004f3e:	1bdb      	subs	r3, r3, r7
 8004f40:	8013      	strh	r3, [r2, #0]
					ptrShift += numberOfParams;
 8004f42:	4a4b      	ldr	r2, [pc, #300]	; (8005070 <SendMessageFromPort+0x350>)
 8004f44:	8813      	ldrh	r3, [r2, #0]
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	8013      	strh	r3, [r2, #0]
 8004f4a:	e79f      	b.n	8004e8c <SendMessageFromPort+0x16c>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3002      	adds	r0, #2
 8004f52:	42a3      	cmp	r3, r4
 8004f54:	d80d      	bhi.n	8004f72 <SendMessageFromPort+0x252>
					if (InGroup(i, dstGroupID))
 8004f56:	8802      	ldrh	r2, [r0, #0]
 8004f58:	4216      	tst	r6, r2
 8004f5a:	d0f7      	beq.n	8004f4c <SendMessageFromPort+0x22c>
						++groupMembers;							// Add this member
 8004f5c:	3101      	adds	r1, #1
 8004f5e:	b2c9      	uxtb	r1, r1
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 8004f60:	187a      	adds	r2, r7, r1
 8004f62:	3201      	adds	r2, #1
 8004f64:	2a2d      	cmp	r2, #45	; 0x2d
 8004f66:	dc5a      	bgt.n	800501e <SendMessageFromPort+0x2fe>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8004f68:	464a      	mov	r2, r9
 8004f6a:	1852      	adds	r2, r2, r1
 8004f6c:	1952      	adds	r2, r2, r5
 8004f6e:	7193      	strb	r3, [r2, #6]
 8004f70:	e7ec      	b.n	8004f4c <SendMessageFromPort+0x22c>
 8004f72:	4654      	mov	r4, sl
 8004f74:	46aa      	mov	sl, r5
 8004f76:	4665      	mov	r5, ip
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 8004f78:	4653      	mov	r3, sl
 8004f7a:	3307      	adds	r3, #7
 8004f7c:	19db      	adds	r3, r3, r7
 8004f7e:	185b      	adds	r3, r3, r1
 8004f80:	4a32      	ldr	r2, [pc, #200]	; (800504c <SendMessageFromPort+0x32c>)
 8004f82:	54d1      	strb	r1, [r2, r3]
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8004f84:	187f      	adds	r7, r7, r1
 8004f86:	3702      	adds	r7, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8004f88:	2069      	movs	r0, #105	; 0x69
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8004f8a:	2f2d      	cmp	r7, #45	; 0x2d
 8004f8c:	dc25      	bgt.n	8004fda <SendMessageFromPort+0x2ba>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 8004f8e:	483e      	ldr	r0, [pc, #248]	; (8005088 <SendMessageFromPort+0x368>)
 8004f90:	7802      	ldrb	r2, [r0, #0]
 8004f92:	3201      	adds	r2, #1
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	7002      	strb	r2, [r0, #0]
 8004f98:	482c      	ldr	r0, [pc, #176]	; (800504c <SendMessageFromPort+0x32c>)
 8004f9a:	18c3      	adds	r3, r0, r3
 8004f9c:	705a      	strb	r2, [r3, #1]
 8004f9e:	3502      	adds	r5, #2
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8004fa0:	186d      	adds	r5, r5, r1
 8004fa2:	b2ed      	uxtb	r5, r5
 8004fa4:	e6f3      	b.n	8004d8e <SendMessageFromPort+0x6e>
			uint8_t groupMembers = 0;
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	e7e6      	b.n	8004f78 <SendMessageFromPort+0x258>
		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);
 8004faa:	00b6      	lsls	r6, r6, #2
 8004fac:	492a      	ldr	r1, [pc, #168]	; (8005058 <SendMessageFromPort+0x338>)
 8004fae:	1871      	adds	r1, r6, r1
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	482a      	ldr	r0, [pc, #168]	; (800505c <SendMessageFromPort+0x33c>)
 8004fb4:	f009 ff2b 	bl	800ee0e <HAL_CRC_Accumulate>
 8004fb8:	4b24      	ldr	r3, [pc, #144]	; (800504c <SendMessageFromPort+0x32c>)
 8004fba:	55d8      	strb	r0, [r3, r7]
 8004fbc:	e701      	b.n	8004dc2 <SendMessageFromPort+0xa2>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 8004fbe:	1d2a      	adds	r2, r5, #4
 8004fc0:	2332      	movs	r3, #50	; 0x32
 8004fc2:	4922      	ldr	r1, [pc, #136]	; (800504c <SendMessageFromPort+0x32c>)
 8004fc4:	4640      	mov	r0, r8
 8004fc6:	f009 f937 	bl	800e238 <writePxDMAMutex>
	vTaskPrioritySet( NULL, TaskPriority );
 8004fca:	9904      	ldr	r1, [sp, #16]
 8004fcc:	2000      	movs	r0, #0
 8004fce:	f010 f879 	bl	80150c4 <vTaskPrioritySet>
	responseStatus = BOS_ERR_NoResponse;
 8004fd2:	4b2e      	ldr	r3, [pc, #184]	; (800508c <SendMessageFromPort+0x36c>)
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	701a      	strb	r2, [r3, #0]
	return result;
 8004fd8:	2000      	movs	r0, #0
}
 8004fda:	b007      	add	sp, #28
 8004fdc:	bc3c      	pop	{r2, r3, r4, r5}
 8004fde:	4690      	mov	r8, r2
 8004fe0:	4699      	mov	r9, r3
 8004fe2:	46a2      	mov	sl, r4
 8004fe4:	46ab      	mov	fp, r5
 8004fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8004fe8:	3401      	adds	r4, #1
 8004fea:	b2e4      	uxtb	r4, r4
 8004fec:	3601      	adds	r6, #1
 8004fee:	2c07      	cmp	r4, #7
 8004ff0:	d0eb      	beq.n	8004fca <SendMessageFromPort+0x2aa>
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8004ff2:	783b      	ldrb	r3, [r7, #0]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	5a9b      	ldrh	r3, [r3, r2]
 8004ffc:	4133      	asrs	r3, r6
 8004ffe:	07db      	lsls	r3, r3, #31
 8005000:	d5f2      	bpl.n	8004fe8 <SendMessageFromPort+0x2c8>
				writePxDMAMutex(p, message, length+4, cmd50ms);
 8005002:	1d2a      	adds	r2, r5, #4
 8005004:	2332      	movs	r3, #50	; 0x32
 8005006:	4911      	ldr	r1, [pc, #68]	; (800504c <SendMessageFromPort+0x32c>)
 8005008:	0020      	movs	r0, r4
 800500a:	f009 f915 	bl	800e238 <writePxDMAMutex>
				Delay_ms(1);
 800500e:	2001      	movs	r0, #1
 8005010:	f009 fde6 	bl	800ebe0 <HAL_Delay>
 8005014:	e7e8      	b.n	8004fe8 <SendMessageFromPort+0x2c8>
		return BOS_ERR_WrongParam; 
 8005016:	2067      	movs	r0, #103	; 0x67
 8005018:	e7df      	b.n	8004fda <SendMessageFromPort+0x2ba>
 800501a:	2067      	movs	r0, #103	; 0x67
 800501c:	e7dd      	b.n	8004fda <SendMessageFromPort+0x2ba>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 800501e:	2069      	movs	r0, #105	; 0x69
 8005020:	e7db      	b.n	8004fda <SendMessageFromPort+0x2ba>
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8005022:	1c7b      	adds	r3, r7, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8005024:	2069      	movs	r0, #105	; 0x69
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8005026:	2b2d      	cmp	r3, #45	; 0x2d
 8005028:	dcd7      	bgt.n	8004fda <SendMessageFromPort+0x2ba>
				message[7+shift+numberOfParams] = ++bcastID;
 800502a:	4a17      	ldr	r2, [pc, #92]	; (8005088 <SendMessageFromPort+0x368>)
 800502c:	7813      	ldrb	r3, [r2, #0]
 800502e:	3301      	adds	r3, #1
 8005030:	b2db      	uxtb	r3, r3
 8005032:	7013      	strb	r3, [r2, #0]
 8005034:	4a05      	ldr	r2, [pc, #20]	; (800504c <SendMessageFromPort+0x32c>)
 8005036:	19d7      	adds	r7, r2, r7
 8005038:	4457      	add	r7, sl
 800503a:	71fb      	strb	r3, [r7, #7]
				length += 1;		// + bcastID
 800503c:	3501      	adds	r5, #1
 800503e:	b2ed      	uxtb	r5, r5
 8005040:	e6a5      	b.n	8004d8e <SendMessageFromPort+0x6e>
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8005042:	9b03      	ldr	r3, [sp, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d100      	bne.n	800504a <SendMessageFromPort+0x32a>
 8005048:	e694      	b.n	8004d74 <SendMessageFromPort+0x54>
 800504a:	e6f2      	b.n	8004e32 <SendMessageFromPort+0x112>
 800504c:	20000a1c 	.word	0x20000a1c
 8005050:	20000a54 	.word	0x20000a54
 8005054:	200006d8 	.word	0x200006d8
 8005058:	20000f9c 	.word	0x20000f9c
 800505c:	20006590 	.word	0x20006590
 8005060:	20000614 	.word	0x20000614
 8005064:	20000b90 	.word	0x20000b90
 8005068:	20006160 	.word	0x20006160
 800506c:	20000cf0 	.word	0x20000cf0
 8005070:	20000c64 	.word	0x20000c64
 8005074:	20000a5c 	.word	0x20000a5c
 8005078:	200003b4 	.word	0x200003b4
 800507c:	2000001d 	.word	0x2000001d
 8005080:	2000001c 	.word	0x2000001c
 8005084:	200008d0 	.word	0x200008d0
 8005088:	20000612 	.word	0x20000612
 800508c:	20000c98 	.word	0x20000c98

08005090 <BroadcastReceivedMessage>:
{
 8005090:	b500      	push	{lr}
 8005092:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 8005094:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <BroadcastReceivedMessage+0x38>)
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <BroadcastReceivedMessage+0x3c>)
 800509c:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 800509e:	28ff      	cmp	r0, #255	; 0xff
 80050a0:	d009      	beq.n	80050b6 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 80050a2:	9100      	str	r1, [sp, #0]
 80050a4:	2300      	movs	r3, #0
 80050a6:	22fe      	movs	r2, #254	; 0xfe
 80050a8:	2100      	movs	r1, #0
 80050aa:	2000      	movs	r0, #0
 80050ac:	f7ff fe38 	bl	8004d20 <SendMessageFromPort>
}
 80050b0:	2000      	movs	r0, #0
 80050b2:	b003      	add	sp, #12
 80050b4:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 80050b6:	9100      	str	r1, [sp, #0]
 80050b8:	2300      	movs	r3, #0
 80050ba:	32ff      	adds	r2, #255	; 0xff
 80050bc:	2100      	movs	r1, #0
 80050be:	2000      	movs	r0, #0
 80050c0:	f7ff fe2e 	bl	8004d20 <SendMessageFromPort>
 80050c4:	e7f4      	b.n	80050b0 <BroadcastReceivedMessage+0x20>
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	200003b4 	.word	0x200003b4
 80050cc:	2000001d 	.word	0x2000001d

080050d0 <BroadcastMessage>:
{
 80050d0:	b530      	push	{r4, r5, lr}
 80050d2:	b083      	sub	sp, #12
 80050d4:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 80050d6:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <BroadcastMessage+0x44>)
 80050d8:	2501      	movs	r5, #1
 80050da:	701d      	strb	r5, [r3, #0]
 80050dc:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <BroadcastMessage+0x48>)
 80050de:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 80050e0:	29ff      	cmp	r1, #255	; 0xff
 80050e2:	d00e      	beq.n	8005102 <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 80050e4:	9400      	str	r4, [sp, #0]
 80050e6:	0013      	movs	r3, r2
 80050e8:	22fe      	movs	r2, #254	; 0xfe
 80050ea:	0001      	movs	r1, r0
 80050ec:	2000      	movs	r0, #0
 80050ee:	f7ff fe17 	bl	8004d20 <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 80050f2:	0022      	movs	r2, r4
 80050f4:	2100      	movs	r1, #0
 80050f6:	4809      	ldr	r0, [pc, #36]	; (800511c <BroadcastMessage+0x4c>)
 80050f8:	f00c ffd6 	bl	80120a8 <memset>
}
 80050fc:	2000      	movs	r0, #0
 80050fe:	b003      	add	sp, #12
 8005100:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 8005102:	9400      	str	r4, [sp, #0]
 8005104:	0013      	movs	r3, r2
 8005106:	22ff      	movs	r2, #255	; 0xff
 8005108:	0001      	movs	r1, r0
 800510a:	2000      	movs	r0, #0
 800510c:	f7ff fe08 	bl	8004d20 <SendMessageFromPort>
 8005110:	e7ef      	b.n	80050f2 <BroadcastMessage+0x22>
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	200003b4 	.word	0x200003b4
 8005118:	2000001d 	.word	0x2000001d
 800511c:	20000a5c 	.word	0x20000a5c

08005120 <ExploreNeighbors>:
{
 8005120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005122:	46c6      	mov	lr, r8
 8005124:	b500      	push	{lr}
 8005126:	b082      	sub	sp, #8
 8005128:	0006      	movs	r6, r0
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 800512a:	2401      	movs	r4, #1
			messageParams[0] = (uint8_t) (myPN >> 8);
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <ExploreNeighbors+0x4c>)
 800512e:	4698      	mov	r8, r3
 8005130:	4d0f      	ldr	r5, [pc, #60]	; (8005170 <ExploreNeighbors+0x50>)
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8005132:	2703      	movs	r7, #3
		if (port != ignore) 
 8005134:	42a6      	cmp	r6, r4
 8005136:	d00f      	beq.n	8005158 <ExploreNeighbors+0x38>
			messageParams[0] = (uint8_t) (myPN >> 8);
 8005138:	4643      	mov	r3, r8
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	0a1a      	lsrs	r2, r3, #8
 800513e:	702a      	strb	r2, [r5, #0]
			messageParams[1] = (uint8_t) myPN;
 8005140:	706b      	strb	r3, [r5, #1]
			messageParams[2] = port;
 8005142:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8005144:	9700      	str	r7, [sp, #0]
 8005146:	230a      	movs	r3, #10
 8005148:	2200      	movs	r2, #0
 800514a:	2100      	movs	r1, #0
 800514c:	0020      	movs	r0, r4
 800514e:	f7ff fde7 	bl	8004d20 <SendMessageFromPort>
			osDelay(10);
 8005152:	200a      	movs	r0, #10
 8005154:	f009 f8fd 	bl	800e352 <osDelay>
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8005158:	3401      	adds	r4, #1
 800515a:	b2e4      	uxtb	r4, r4
 800515c:	2c07      	cmp	r4, #7
 800515e:	d1e9      	bne.n	8005134 <ExploreNeighbors+0x14>
}
 8005160:	2000      	movs	r0, #0
 8005162:	b002      	add	sp, #8
 8005164:	bc04      	pop	{r2}
 8005166:	4690      	mov	r8, r2
 8005168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	2000001e 	.word	0x2000001e
 8005170:	20000a5c 	.word	0x20000a5c

08005174 <StartMicroDelay>:
{
 8005174:	b510      	push	{r4, lr}
 8005176:	0004      	movs	r4, r0
	portENTER_CRITICAL();
 8005178:	f009 fc80 	bl	800ea7c <vPortEnterCritical>
	if (Delay)
 800517c:	2c00      	cmp	r4, #0
 800517e:	d006      	beq.n	800518e <StartMicroDelay+0x1a>
		t0 = htim14.Instance->CNT;
 8005180:	4b04      	ldr	r3, [pc, #16]	; (8005194 <StartMicroDelay+0x20>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	6a51      	ldr	r1, [r2, #36]	; 0x24
		while(htim14.Instance->CNT - t0 <= Delay) {};
 8005186:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005188:	1a5b      	subs	r3, r3, r1
 800518a:	42a3      	cmp	r3, r4
 800518c:	d9fb      	bls.n	8005186 <StartMicroDelay+0x12>
	portEXIT_CRITICAL();
 800518e:	f009 fc81 	bl	800ea94 <vPortExitCritical>
}
 8005192:	bd10      	pop	{r4, pc}
 8005194:	2000617c 	.word	0x2000617c

08005198 <CheckAttachedButtons>:
{
 8005198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800519a:	46de      	mov	lr, fp
 800519c:	4657      	mov	r7, sl
 800519e:	464e      	mov	r6, r9
 80051a0:	4645      	mov	r5, r8
 80051a2:	b5e0      	push	{r5, r6, r7, lr}
 80051a4:	b089      	sub	sp, #36	; 0x24
 80051a6:	4dbd      	ldr	r5, [pc, #756]	; (800549c <CheckAttachedButtons+0x304>)
 80051a8:	3509      	adds	r5, #9
 80051aa:	2404      	movs	r4, #4
 80051ac:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	469b      	mov	fp, r3
 80051b2:	4699      	mov	r9, r3
 80051b4:	e111      	b.n	80053da <CheckAttachedButtons+0x242>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 80051b6:	230e      	movs	r3, #14
 80051b8:	aa02      	add	r2, sp, #8
 80051ba:	4694      	mov	ip, r2
 80051bc:	4463      	add	r3, ip
 80051be:	8819      	ldrh	r1, [r3, #0]
 80051c0:	2201      	movs	r2, #1
 80051c2:	9807      	ldr	r0, [sp, #28]
 80051c4:	f00a fdd8 	bl	800fd78 <HAL_GPIO_WritePin>
 80051c8:	200a      	movs	r0, #10
 80051ca:	f7ff ffd3 	bl	8005174 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 80051ce:	ab05      	add	r3, sp, #20
 80051d0:	8819      	ldrh	r1, [r3, #0]
 80051d2:	9806      	ldr	r0, [sp, #24]
 80051d4:	f00a fdca 	bl	800fd6c <HAL_GPIO_ReadPin>
 80051d8:	4681      	mov	r9, r0
 80051da:	e126      	b.n	800542a <CheckAttachedButtons+0x292>
			switch (button[i].type)
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d105      	bne.n	80051ec <CheckAttachedButtons+0x54>
					if (connected == GPIO_PIN_SET)	
 80051e0:	464b      	mov	r3, r9
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d046      	beq.n	8005274 <CheckAttachedButtons+0xdc>
					else if (connected == GPIO_PIN_RESET)
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d100      	bne.n	80051ec <CheckAttachedButtons+0x54>
 80051ea:	e1c5      	b.n	8005578 <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON)												
 80051ec:	465b      	mov	r3, fp
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d001      	beq.n	80051f6 <CheckAttachedButtons+0x5e>
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d107      	bne.n	8005206 <CheckAttachedButtons+0x6e>
				if (pressCounter[i] < 0xFFFF)	
 80051f6:	4baa      	ldr	r3, [pc, #680]	; (80054a0 <CheckAttachedButtons+0x308>)
 80051f8:	58e3      	ldr	r3, [r4, r3]
 80051fa:	4aaa      	ldr	r2, [pc, #680]	; (80054a4 <CheckAttachedButtons+0x30c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d842      	bhi.n	8005286 <CheckAttachedButtons+0xee>
					++pressCounter[i];																			// Advance the debounce counter
 8005200:	3301      	adds	r3, #1
 8005202:	4aa7      	ldr	r2, [pc, #668]	; (80054a0 <CheckAttachedButtons+0x308>)
 8005204:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF)												
 8005206:	23fd      	movs	r3, #253	; 0xfd
 8005208:	465a      	mov	r2, fp
 800520a:	4013      	ands	r3, r2
 800520c:	2b01      	cmp	r3, #1
 800520e:	d100      	bne.n	8005212 <CheckAttachedButtons+0x7a>
 8005210:	e1b6      	b.n	8005580 <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) 									
 8005212:	4ba3      	ldr	r3, [pc, #652]	; (80054a0 <CheckAttachedButtons+0x308>)
 8005214:	58e3      	ldr	r3, [r4, r3]
 8005216:	4aa4      	ldr	r2, [pc, #656]	; (80054a8 <CheckAttachedButtons+0x310>)
 8005218:	8812      	ldrh	r2, [r2, #0]
 800521a:	4293      	cmp	r3, r2
 800521c:	d36f      	bcc.n	80052fe <CheckAttachedButtons+0x166>
				if (pressCounter[i] == BOS.buttons.debounce)
 800521e:	d045      	beq.n	80052ac <CheckAttachedButtons+0x114>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8005220:	4ba2      	ldr	r3, [pc, #648]	; (80054ac <CheckAttachedButtons+0x314>)
 8005222:	58e3      	ldr	r3, [r4, r3]
 8005224:	429a      	cmp	r2, r3
 8005226:	d202      	bcs.n	800522e <CheckAttachedButtons+0x96>
					releaseCounter[i] = 0;					
 8005228:	4ba0      	ldr	r3, [pc, #640]	; (80054ac <CheckAttachedButtons+0x314>)
 800522a:	2200      	movs	r2, #0
 800522c:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 800522e:	4b9c      	ldr	r3, [pc, #624]	; (80054a0 <CheckAttachedButtons+0x308>)
 8005230:	58e3      	ldr	r3, [r4, r3]
 8005232:	4a9d      	ldr	r2, [pc, #628]	; (80054a8 <CheckAttachedButtons+0x310>)
 8005234:	8852      	ldrh	r2, [r2, #2]
 8005236:	4293      	cmp	r3, r2
 8005238:	d952      	bls.n	80052e0 <CheckAttachedButtons+0x148>
 800523a:	22f4      	movs	r2, #244	; 0xf4
 800523c:	32ff      	adds	r2, #255	; 0xff
 800523e:	4293      	cmp	r3, r2
 8005240:	d84e      	bhi.n	80052e0 <CheckAttachedButtons+0x148>
					if (clicked == 0)
 8005242:	4b9b      	ldr	r3, [pc, #620]	; (80054b0 <CheckAttachedButtons+0x318>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d137      	bne.n	80052ba <CheckAttachedButtons+0x122>
						clicked = 1;																					// Record a possible single click 
 800524a:	4b99      	ldr	r3, [pc, #612]	; (80054b0 <CheckAttachedButtons+0x318>)
 800524c:	3af3      	subs	r2, #243	; 0xf3
 800524e:	3aff      	subs	r2, #255	; 0xff
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	e054      	b.n	80052fe <CheckAttachedButtons+0x166>
					if (connected == GPIO_PIN_SET)	
 8005254:	464b      	mov	r3, r9
 8005256:	2b01      	cmp	r3, #1
 8005258:	d00f      	beq.n	800527a <CheckAttachedButtons+0xe2>
					else if (connected == GPIO_PIN_RESET) 
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1c6      	bne.n	80051ec <CheckAttachedButtons+0x54>
						state = OPEN;	
 800525e:	2303      	movs	r3, #3
 8005260:	469b      	mov	fp, r3
 8005262:	e18d      	b.n	8005580 <CheckAttachedButtons+0x3e8>
					if (connected == GPIO_PIN_SET)	
 8005264:	464b      	mov	r3, r9
 8005266:	2b01      	cmp	r3, #1
 8005268:	d00a      	beq.n	8005280 <CheckAttachedButtons+0xe8>
					else if (connected == GPIO_PIN_RESET) 
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1be      	bne.n	80051ec <CheckAttachedButtons+0x54>
						state = OFF;
 800526e:	2301      	movs	r3, #1
 8005270:	469b      	mov	fp, r3
 8005272:	e185      	b.n	8005580 <CheckAttachedButtons+0x3e8>
						state = CLOSED;
 8005274:	2304      	movs	r3, #4
 8005276:	469b      	mov	fp, r3
 8005278:	e7bd      	b.n	80051f6 <CheckAttachedButtons+0x5e>
						state = CLOSED;
 800527a:	2304      	movs	r3, #4
 800527c:	469b      	mov	fp, r3
 800527e:	e7ba      	b.n	80051f6 <CheckAttachedButtons+0x5e>
 8005280:	2302      	movs	r3, #2
 8005282:	469b      	mov	fp, r3
 8005284:	e7b7      	b.n	80051f6 <CheckAttachedButtons+0x5e>
					pressCounter[i] = 0;																		// Reset debounce counter					
 8005286:	4b86      	ldr	r3, [pc, #536]	; (80054a0 <CheckAttachedButtons+0x308>)
 8005288:	2200      	movs	r2, #0
 800528a:	50e2      	str	r2, [r4, r3]
 800528c:	e7bb      	b.n	8005206 <CheckAttachedButtons+0x6e>
					releaseCounter[i] = 0;																	// Reset debounce counter		
 800528e:	4b87      	ldr	r3, [pc, #540]	; (80054ac <CheckAttachedButtons+0x314>)
 8005290:	2200      	movs	r2, #0
 8005292:	50e2      	str	r2, [r4, r3]
 8005294:	e17d      	b.n	8005592 <CheckAttachedButtons+0x3fa>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 8005296:	4b87      	ldr	r3, [pc, #540]	; (80054b4 <CheckAttachedButtons+0x31c>)
 8005298:	5cf3      	ldrb	r3, [r6, r3]
 800529a:	4a83      	ldr	r2, [pc, #524]	; (80054a8 <CheckAttachedButtons+0x310>)
 800529c:	7952      	ldrb	r2, [r2, #5]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d200      	bcs.n	80052a4 <CheckAttachedButtons+0x10c>
 80052a2:	e182      	b.n	80055aa <CheckAttachedButtons+0x412>
					++dblCounter[i];			
 80052a4:	3301      	adds	r3, #1
 80052a6:	4a83      	ldr	r2, [pc, #524]	; (80054b4 <CheckAttachedButtons+0x31c>)
 80052a8:	54b3      	strb	r3, [r6, r2]
 80052aa:	e7b2      	b.n	8005212 <CheckAttachedButtons+0x7a>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 80052ac:	2107      	movs	r1, #7
 80052ae:	4640      	mov	r0, r8
 80052b0:	7001      	strb	r1, [r0, #0]
					++pressCounter[i];
 80052b2:	3301      	adds	r3, #1
 80052b4:	497a      	ldr	r1, [pc, #488]	; (80054a0 <CheckAttachedButtons+0x308>)
 80052b6:	5063      	str	r3, [r4, r1]
 80052b8:	e7b2      	b.n	8005220 <CheckAttachedButtons+0x88>
					else if (clicked == 2) {
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d11f      	bne.n	80052fe <CheckAttachedButtons+0x166>
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 80052be:	4b7d      	ldr	r3, [pc, #500]	; (80054b4 <CheckAttachedButtons+0x31c>)
 80052c0:	5cf3      	ldrb	r3, [r6, r3]
 80052c2:	4a79      	ldr	r2, [pc, #484]	; (80054a8 <CheckAttachedButtons+0x310>)
 80052c4:	7912      	ldrb	r2, [r2, #4]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d219      	bcs.n	80052fe <CheckAttachedButtons+0x166>
 80052ca:	4a77      	ldr	r2, [pc, #476]	; (80054a8 <CheckAttachedButtons+0x310>)
 80052cc:	7952      	ldrb	r2, [r2, #5]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d915      	bls.n	80052fe <CheckAttachedButtons+0x166>
							clicked = 3;																				// Record a possible double click 
 80052d2:	4b77      	ldr	r3, [pc, #476]	; (80054b0 <CheckAttachedButtons+0x318>)
 80052d4:	2203      	movs	r2, #3
 80052d6:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 80052d8:	4b76      	ldr	r3, [pc, #472]	; (80054b4 <CheckAttachedButtons+0x31c>)
 80052da:	2200      	movs	r2, #0
 80052dc:	54f2      	strb	r2, [r6, r3]
 80052de:	e00e      	b.n	80052fe <CheckAttachedButtons+0x166>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 80052e0:	3bf5      	subs	r3, #245	; 0xf5
 80052e2:	3bff      	subs	r3, #255	; 0xff
 80052e4:	4a74      	ldr	r2, [pc, #464]	; (80054b8 <CheckAttachedButtons+0x320>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d809      	bhi.n	80052fe <CheckAttachedButtons+0x166>
					if (clicked)	clicked = 0;															// Cannot be a click
 80052ea:	4b71      	ldr	r3, [pc, #452]	; (80054b0 <CheckAttachedButtons+0x318>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <CheckAttachedButtons+0x160>
 80052f2:	4b6f      	ldr	r3, [pc, #444]	; (80054b0 <CheckAttachedButtons+0x318>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 80052f8:	9803      	ldr	r0, [sp, #12]
 80052fa:	f7fe fee3 	bl	80040c4 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 80052fe:	4b6b      	ldr	r3, [pc, #428]	; (80054ac <CheckAttachedButtons+0x314>)
 8005300:	58e3      	ldr	r3, [r4, r3]
 8005302:	4a69      	ldr	r2, [pc, #420]	; (80054a8 <CheckAttachedButtons+0x310>)
 8005304:	8812      	ldrh	r2, [r2, #0]
 8005306:	4293      	cmp	r3, r2
 8005308:	d34d      	bcc.n	80053a6 <CheckAttachedButtons+0x20e>
				if (releaseCounter[i] == BOS.buttons.debounce)
 800530a:	d02b      	beq.n	8005364 <CheckAttachedButtons+0x1cc>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800530c:	4b64      	ldr	r3, [pc, #400]	; (80054a0 <CheckAttachedButtons+0x308>)
 800530e:	58e3      	ldr	r3, [r4, r3]
 8005310:	429a      	cmp	r2, r3
 8005312:	d202      	bcs.n	800531a <CheckAttachedButtons+0x182>
					pressCounter[i] = 0;				
 8005314:	4b62      	ldr	r3, [pc, #392]	; (80054a0 <CheckAttachedButtons+0x308>)
 8005316:	2200      	movs	r2, #0
 8005318:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 800531a:	4b64      	ldr	r3, [pc, #400]	; (80054ac <CheckAttachedButtons+0x314>)
 800531c:	58e3      	ldr	r3, [r4, r3]
 800531e:	4a62      	ldr	r2, [pc, #392]	; (80054a8 <CheckAttachedButtons+0x310>)
 8005320:	8852      	ldrh	r2, [r2, #2]
 8005322:	4293      	cmp	r3, r2
 8005324:	d93a      	bls.n	800539c <CheckAttachedButtons+0x204>
 8005326:	22f4      	movs	r2, #244	; 0xf4
 8005328:	32ff      	adds	r2, #255	; 0xff
 800532a:	4293      	cmp	r3, r2
 800532c:	d836      	bhi.n	800539c <CheckAttachedButtons+0x204>
					if (clicked == 1)
 800532e:	4b60      	ldr	r3, [pc, #384]	; (80054b0 <CheckAttachedButtons+0x318>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d01d      	beq.n	8005372 <CheckAttachedButtons+0x1da>
					else if (clicked == 3)
 8005336:	2b03      	cmp	r3, #3
 8005338:	d135      	bne.n	80053a6 <CheckAttachedButtons+0x20e>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 800533a:	3303      	adds	r3, #3
 800533c:	4642      	mov	r2, r8
 800533e:	7013      	strb	r3, [r2, #0]
						clicked = 0;																					// Prepare for a single click					
 8005340:	4b5b      	ldr	r3, [pc, #364]	; (80054b0 <CheckAttachedButtons+0x318>)
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 8005346:	4b5d      	ldr	r3, [pc, #372]	; (80054bc <CheckAttachedButtons+0x324>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d13f      	bne.n	80053ce <CheckAttachedButtons+0x236>
 800534e:	4643      	mov	r3, r8
 8005350:	7a1b      	ldrb	r3, [r3, #8]
 8005352:	079b      	lsls	r3, r3, #30
 8005354:	d53b      	bpl.n	80053ce <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8005356:	4b59      	ldr	r3, [pc, #356]	; (80054bc <CheckAttachedButtons+0x324>)
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 800535c:	9803      	ldr	r0, [sp, #12]
 800535e:	f7fe ff30 	bl	80041c2 <buttonDblClickedCallback>
 8005362:	e034      	b.n	80053ce <CheckAttachedButtons+0x236>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 8005364:	2108      	movs	r1, #8
 8005366:	4640      	mov	r0, r8
 8005368:	7001      	strb	r1, [r0, #0]
					++releaseCounter[i];
 800536a:	3301      	adds	r3, #1
 800536c:	494f      	ldr	r1, [pc, #316]	; (80054ac <CheckAttachedButtons+0x314>)
 800536e:	5063      	str	r3, [r4, r1]
 8005370:	e7cc      	b.n	800530c <CheckAttachedButtons+0x174>
						button[i].state = CLICKED;														// Record a single button click event
 8005372:	3304      	adds	r3, #4
 8005374:	4642      	mov	r2, r8
 8005376:	7013      	strb	r3, [r2, #0]
						clicked = 2;																					// Prepare for a double click
 8005378:	4b4d      	ldr	r3, [pc, #308]	; (80054b0 <CheckAttachedButtons+0x318>)
 800537a:	2202      	movs	r2, #2
 800537c:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 800537e:	4b4f      	ldr	r3, [pc, #316]	; (80054bc <CheckAttachedButtons+0x324>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d123      	bne.n	80053ce <CheckAttachedButtons+0x236>
 8005386:	4643      	mov	r3, r8
 8005388:	7a1b      	ldrb	r3, [r3, #8]
 800538a:	07db      	lsls	r3, r3, #31
 800538c:	d51f      	bpl.n	80053ce <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 800538e:	4b4b      	ldr	r3, [pc, #300]	; (80054bc <CheckAttachedButtons+0x324>)
 8005390:	2201      	movs	r2, #1
 8005392:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 8005394:	9803      	ldr	r0, [sp, #12]
 8005396:	f7fe ff13 	bl	80041c0 <buttonClickedCallback>
 800539a:	e018      	b.n	80053ce <CheckAttachedButtons+0x236>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 800539c:	3bf5      	subs	r3, #245	; 0xf5
 800539e:	3bff      	subs	r3, #255	; 0xff
 80053a0:	4a45      	ldr	r2, [pc, #276]	; (80054b8 <CheckAttachedButtons+0x320>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d909      	bls.n	80053ba <CheckAttachedButtons+0x222>
			switch (button[i].state)
 80053a6:	4643      	mov	r3, r8
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	3b05      	subs	r3, #5
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	2a09      	cmp	r2, #9
 80053b0:	d80d      	bhi.n	80053ce <CheckAttachedButtons+0x236>
 80053b2:	0093      	lsls	r3, r2, #2
 80053b4:	4a42      	ldr	r2, [pc, #264]	; (80054c0 <CheckAttachedButtons+0x328>)
 80053b6:	58d3      	ldr	r3, [r2, r3]
 80053b8:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 80053ba:	9803      	ldr	r0, [sp, #12]
 80053bc:	f7fe fec0 	bl	8004140 <CheckForTimedButtonRelease>
 80053c0:	e7f1      	b.n	80053a6 <CheckAttachedButtons+0x20e>
					buttonPressedCallback(i);
 80053c2:	9803      	ldr	r0, [sp, #12]
 80053c4:	f7fe fefa 	bl	80041bc <buttonPressedCallback>
					button[i].state = NONE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	4642      	mov	r2, r8
 80053cc:	7013      	strb	r3, [r2, #0]
 80053ce:	3601      	adds	r6, #1
 80053d0:	3509      	adds	r5, #9
 80053d2:	3404      	adds	r4, #4
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80053d4:	2c1c      	cmp	r4, #28
 80053d6:	d100      	bne.n	80053da <CheckAttachedButtons+0x242>
 80053d8:	e0ed      	b.n	80055b6 <CheckAttachedButtons+0x41e>
 80053da:	b2f3      	uxtb	r3, r6
 80053dc:	9303      	str	r3, [sp, #12]
 80053de:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 80053e0:	786b      	ldrb	r3, [r5, #1]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f3      	beq.n	80053ce <CheckAttachedButtons+0x236>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 80053e6:	4b35      	ldr	r3, [pc, #212]	; (80054bc <CheckAttachedButtons+0x324>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d100      	bne.n	80053f0 <CheckAttachedButtons+0x258>
 80053ee:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 80053f0:	230e      	movs	r3, #14
 80053f2:	aa02      	add	r2, sp, #8
 80053f4:	4694      	mov	ip, r2
 80053f6:	4463      	add	r3, ip
 80053f8:	469a      	mov	sl, r3
 80053fa:	af05      	add	r7, sp, #20
 80053fc:	9700      	str	r7, [sp, #0]
 80053fe:	ab06      	add	r3, sp, #24
 8005400:	4652      	mov	r2, sl
 8005402:	a907      	add	r1, sp, #28
 8005404:	9803      	ldr	r0, [sp, #12]
 8005406:	f7ff fa89 	bl	800491c <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 800540a:	4653      	mov	r3, sl
 800540c:	8819      	ldrh	r1, [r3, #0]
 800540e:	2200      	movs	r2, #0
 8005410:	9807      	ldr	r0, [sp, #28]
 8005412:	f00a fcb1 	bl	800fd78 <HAL_GPIO_WritePin>
 8005416:	200a      	movs	r0, #10
 8005418:	f7ff feac 	bl	8005174 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 800541c:	8839      	ldrh	r1, [r7, #0]
 800541e:	9806      	ldr	r0, [sp, #24]
 8005420:	f00a fca4 	bl	800fd6c <HAL_GPIO_ReadPin>
 8005424:	2800      	cmp	r0, #0
 8005426:	d100      	bne.n	800542a <CheckAttachedButtons+0x292>
 8005428:	e6c5      	b.n	80051b6 <CheckAttachedButtons+0x1e>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 800542a:	230e      	movs	r3, #14
 800542c:	aa02      	add	r2, sp, #8
 800542e:	4694      	mov	ip, r2
 8005430:	4463      	add	r3, ip
 8005432:	8819      	ldrh	r1, [r3, #0]
 8005434:	2200      	movs	r2, #0
 8005436:	9807      	ldr	r0, [sp, #28]
 8005438:	f00a fc9e 	bl	800fd78 <HAL_GPIO_WritePin>
			switch (button[i].type)
 800543c:	4643      	mov	r3, r8
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d100      	bne.n	8005446 <CheckAttachedButtons+0x2ae>
 8005444:	e706      	b.n	8005254 <CheckAttachedButtons+0xbc>
 8005446:	b2da      	uxtb	r2, r3
 8005448:	2a02      	cmp	r2, #2
 800544a:	d800      	bhi.n	800544e <CheckAttachedButtons+0x2b6>
 800544c:	e6c6      	b.n	80051dc <CheckAttachedButtons+0x44>
 800544e:	2b03      	cmp	r3, #3
 8005450:	d100      	bne.n	8005454 <CheckAttachedButtons+0x2bc>
 8005452:	e707      	b.n	8005264 <CheckAttachedButtons+0xcc>
 8005454:	2b04      	cmp	r3, #4
 8005456:	d000      	beq.n	800545a <CheckAttachedButtons+0x2c2>
 8005458:	e6c8      	b.n	80051ec <CheckAttachedButtons+0x54>
					if (connected == GPIO_PIN_SET)	
 800545a:	464b      	mov	r3, r9
 800545c:	2b01      	cmp	r3, #1
 800545e:	d100      	bne.n	8005462 <CheckAttachedButtons+0x2ca>
 8005460:	e08d      	b.n	800557e <CheckAttachedButtons+0x3e6>
					else if (connected == GPIO_PIN_RESET) 
 8005462:	2b00      	cmp	r3, #0
 8005464:	d000      	beq.n	8005468 <CheckAttachedButtons+0x2d0>
 8005466:	e6c1      	b.n	80051ec <CheckAttachedButtons+0x54>
 8005468:	2302      	movs	r3, #2
 800546a:	469b      	mov	fp, r3
 800546c:	e6c3      	b.n	80051f6 <CheckAttachedButtons+0x5e>
					buttonReleasedCallback(i);
 800546e:	9803      	ldr	r0, [sp, #12]
 8005470:	f7fe fea5 	bl	80041be <buttonReleasedCallback>
					button[i].state = NONE;
 8005474:	2300      	movs	r3, #0
 8005476:	4642      	mov	r2, r8
 8005478:	7013      	strb	r3, [r2, #0]
      		break;
 800547a:	e7a8      	b.n	80053ce <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 800547c:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <CheckAttachedButtons+0x324>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1a4      	bne.n	80053ce <CheckAttachedButtons+0x236>
 8005484:	4643      	mov	r3, r8
 8005486:	7a1b      	ldrb	r3, [r3, #8]
 8005488:	075b      	lsls	r3, r3, #29
 800548a:	d5a0      	bpl.n	80053ce <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 800548c:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <CheckAttachedButtons+0x324>)
 800548e:	2201      	movs	r2, #1
 8005490:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 8005492:	2101      	movs	r1, #1
 8005494:	9803      	ldr	r0, [sp, #12]
 8005496:	f7fe fe95 	bl	80041c4 <buttonPressedForXCallback>
 800549a:	e798      	b.n	80053ce <CheckAttachedButtons+0x236>
 800549c:	20000664 	.word	0x20000664
 80054a0:	20000c48 	.word	0x20000c48
 80054a4:	0000fffe 	.word	0x0000fffe
 80054a8:	20006160 	.word	0x20006160
 80054ac:	20000c70 	.word	0x20000c70
 80054b0:	20000829 	.word	0x20000829
 80054b4:	20000860 	.word	0x20000860
 80054b8:	0000fe0a 	.word	0x0000fe0a
 80054bc:	20000867 	.word	0x20000867
 80054c0:	08016528 	.word	0x08016528
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 80054c4:	4b3f      	ldr	r3, [pc, #252]	; (80055c4 <CheckAttachedButtons+0x42c>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d000      	beq.n	80054ce <CheckAttachedButtons+0x336>
 80054cc:	e77f      	b.n	80053ce <CheckAttachedButtons+0x236>
 80054ce:	4643      	mov	r3, r8
 80054d0:	7a1b      	ldrb	r3, [r3, #8]
 80054d2:	071b      	lsls	r3, r3, #28
 80054d4:	d400      	bmi.n	80054d8 <CheckAttachedButtons+0x340>
 80054d6:	e77a      	b.n	80053ce <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 80054d8:	4b3a      	ldr	r3, [pc, #232]	; (80055c4 <CheckAttachedButtons+0x42c>)
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 80054de:	2102      	movs	r1, #2
 80054e0:	9803      	ldr	r0, [sp, #12]
 80054e2:	f7fe fe6f 	bl	80041c4 <buttonPressedForXCallback>
 80054e6:	e772      	b.n	80053ce <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 80054e8:	4b36      	ldr	r3, [pc, #216]	; (80055c4 <CheckAttachedButtons+0x42c>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d000      	beq.n	80054f2 <CheckAttachedButtons+0x35a>
 80054f0:	e76d      	b.n	80053ce <CheckAttachedButtons+0x236>
 80054f2:	4643      	mov	r3, r8
 80054f4:	7a1b      	ldrb	r3, [r3, #8]
 80054f6:	06db      	lsls	r3, r3, #27
 80054f8:	d400      	bmi.n	80054fc <CheckAttachedButtons+0x364>
 80054fa:	e768      	b.n	80053ce <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 80054fc:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <CheckAttachedButtons+0x42c>)
 80054fe:	2201      	movs	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 8005502:	2103      	movs	r1, #3
 8005504:	9803      	ldr	r0, [sp, #12]
 8005506:	f7fe fe5d 	bl	80041c4 <buttonPressedForXCallback>
 800550a:	e760      	b.n	80053ce <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 800550c:	4b2d      	ldr	r3, [pc, #180]	; (80055c4 <CheckAttachedButtons+0x42c>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d000      	beq.n	8005516 <CheckAttachedButtons+0x37e>
 8005514:	e75b      	b.n	80053ce <CheckAttachedButtons+0x236>
 8005516:	4643      	mov	r3, r8
 8005518:	7a1b      	ldrb	r3, [r3, #8]
 800551a:	069b      	lsls	r3, r3, #26
 800551c:	d400      	bmi.n	8005520 <CheckAttachedButtons+0x388>
 800551e:	e756      	b.n	80053ce <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8005520:	4b28      	ldr	r3, [pc, #160]	; (80055c4 <CheckAttachedButtons+0x42c>)
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 8005526:	2101      	movs	r1, #1
 8005528:	9803      	ldr	r0, [sp, #12]
 800552a:	f7fe fe4c 	bl	80041c6 <buttonReleasedForYCallback>
 800552e:	e74e      	b.n	80053ce <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 8005530:	4b24      	ldr	r3, [pc, #144]	; (80055c4 <CheckAttachedButtons+0x42c>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d000      	beq.n	800553a <CheckAttachedButtons+0x3a2>
 8005538:	e749      	b.n	80053ce <CheckAttachedButtons+0x236>
 800553a:	4643      	mov	r3, r8
 800553c:	7a1b      	ldrb	r3, [r3, #8]
 800553e:	065b      	lsls	r3, r3, #25
 8005540:	d400      	bmi.n	8005544 <CheckAttachedButtons+0x3ac>
 8005542:	e744      	b.n	80053ce <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8005544:	4b1f      	ldr	r3, [pc, #124]	; (80055c4 <CheckAttachedButtons+0x42c>)
 8005546:	2201      	movs	r2, #1
 8005548:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 800554a:	2102      	movs	r1, #2
 800554c:	9803      	ldr	r0, [sp, #12]
 800554e:	f7fe fe3a 	bl	80041c6 <buttonReleasedForYCallback>
 8005552:	e73c      	b.n	80053ce <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 8005554:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <CheckAttachedButtons+0x42c>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d000      	beq.n	800555e <CheckAttachedButtons+0x3c6>
 800555c:	e737      	b.n	80053ce <CheckAttachedButtons+0x236>
 800555e:	4643      	mov	r3, r8
 8005560:	7a1b      	ldrb	r3, [r3, #8]
 8005562:	2b7f      	cmp	r3, #127	; 0x7f
 8005564:	d800      	bhi.n	8005568 <CheckAttachedButtons+0x3d0>
 8005566:	e732      	b.n	80053ce <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8005568:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <CheckAttachedButtons+0x42c>)
 800556a:	2201      	movs	r2, #1
 800556c:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 800556e:	2103      	movs	r1, #3
 8005570:	9803      	ldr	r0, [sp, #12]
 8005572:	f7fe fe28 	bl	80041c6 <buttonReleasedForYCallback>
 8005576:	e72a      	b.n	80053ce <CheckAttachedButtons+0x236>
						state = OPEN;			
 8005578:	2303      	movs	r3, #3
 800557a:	469b      	mov	fp, r3
 800557c:	e000      	b.n	8005580 <CheckAttachedButtons+0x3e8>
						state = OFF;
 800557e:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 8005580:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <CheckAttachedButtons+0x430>)
 8005582:	58e3      	ldr	r3, [r4, r3]
 8005584:	4a11      	ldr	r2, [pc, #68]	; (80055cc <CheckAttachedButtons+0x434>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d900      	bls.n	800558c <CheckAttachedButtons+0x3f4>
 800558a:	e680      	b.n	800528e <CheckAttachedButtons+0xf6>
					++releaseCounter[i];																		// Advance the debounce counter
 800558c:	3301      	adds	r3, #1
 800558e:	4a0e      	ldr	r2, [pc, #56]	; (80055c8 <CheckAttachedButtons+0x430>)
 8005590:	50a3      	str	r3, [r4, r2]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 8005592:	4b0f      	ldr	r3, [pc, #60]	; (80055d0 <CheckAttachedButtons+0x438>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d100      	bne.n	800559c <CheckAttachedButtons+0x404>
 800559a:	e67c      	b.n	8005296 <CheckAttachedButtons+0xfe>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <CheckAttachedButtons+0x43c>)
 800559e:	5cf2      	ldrb	r2, [r6, r3]
 80055a0:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <CheckAttachedButtons+0x440>)
 80055a2:	795b      	ldrb	r3, [r3, #5]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d800      	bhi.n	80055aa <CheckAttachedButtons+0x412>
 80055a8:	e633      	b.n	8005212 <CheckAttachedButtons+0x7a>
					clicked = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	4a08      	ldr	r2, [pc, #32]	; (80055d0 <CheckAttachedButtons+0x438>)
 80055ae:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 80055b0:	4a08      	ldr	r2, [pc, #32]	; (80055d4 <CheckAttachedButtons+0x43c>)
 80055b2:	54b3      	strb	r3, [r6, r2]
 80055b4:	e62d      	b.n	8005212 <CheckAttachedButtons+0x7a>
}
 80055b6:	b009      	add	sp, #36	; 0x24
 80055b8:	bc3c      	pop	{r2, r3, r4, r5}
 80055ba:	4690      	mov	r8, r2
 80055bc:	4699      	mov	r9, r3
 80055be:	46a2      	mov	sl, r4
 80055c0:	46ab      	mov	fp, r5
 80055c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c4:	20000867 	.word	0x20000867
 80055c8:	20000c70 	.word	0x20000c70
 80055cc:	0000fffe 	.word	0x0000fffe
 80055d0:	20000829 	.word	0x20000829
 80055d4:	20000860 	.word	0x20000860
 80055d8:	20006160 	.word	0x20006160

080055dc <StartMilliDelay>:
{
 80055dc:	b510      	push	{r4, lr}
 80055de:	0004      	movs	r4, r0
	portENTER_CRITICAL();
 80055e0:	f009 fa4c 	bl	800ea7c <vPortEnterCritical>
	if (Delay)
 80055e4:	2c00      	cmp	r4, #0
 80055e6:	d006      	beq.n	80055f6 <StartMilliDelay+0x1a>
		t0 = htim15.Instance->CNT;
 80055e8:	4b04      	ldr	r3, [pc, #16]	; (80055fc <StartMilliDelay+0x20>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	6a51      	ldr	r1, [r2, #36]	; 0x24
		while(htim15.Instance->CNT - t0 <= Delay) {};
 80055ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80055f0:	1a5b      	subs	r3, r3, r1
 80055f2:	42a3      	cmp	r3, r4
 80055f4:	d9fb      	bls.n	80055ee <StartMilliDelay+0x12>
	portEXIT_CRITICAL();
 80055f6:	f009 fa4d 	bl	800ea94 <vPortExitCritical>
}
 80055fa:	bd10      	pop	{r4, pc}
 80055fc:	200060ac 	.word	0x200060ac

08005600 <IsFactoryReset>:
{
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 8005604:	4b39      	ldr	r3, [pc, #228]	; (80056ec <IsFactoryReset+0xec>)
 8005606:	6959      	ldr	r1, [r3, #20]
 8005608:	2080      	movs	r0, #128	; 0x80
 800560a:	0280      	lsls	r0, r0, #10
 800560c:	4301      	orrs	r1, r0
 800560e:	6159      	str	r1, [r3, #20]
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	4002      	ands	r2, r0
 8005614:	9203      	str	r2, [sp, #12]
 8005616:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 8005618:	6959      	ldr	r1, [r3, #20]
 800561a:	2080      	movs	r0, #128	; 0x80
 800561c:	02c0      	lsls	r0, r0, #11
 800561e:	4301      	orrs	r1, r0
 8005620:	6159      	str	r1, [r3, #20]
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	4002      	ands	r2, r0
 8005626:	9204      	str	r2, [sp, #16]
 8005628:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800562a:	6959      	ldr	r1, [r3, #20]
 800562c:	2080      	movs	r0, #128	; 0x80
 800562e:	0300      	lsls	r0, r0, #12
 8005630:	4301      	orrs	r1, r0
 8005632:	6159      	str	r1, [r3, #20]
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	4002      	ands	r2, r0
 8005638:	9205      	str	r2, [sp, #20]
 800563a:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800563c:	695a      	ldr	r2, [r3, #20]
 800563e:	2180      	movs	r1, #128	; 0x80
 8005640:	0349      	lsls	r1, r1, #13
 8005642:	430a      	orrs	r2, r1
 8005644:	615a      	str	r2, [r3, #20]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	400b      	ands	r3, r1
 800564a:	9306      	str	r3, [sp, #24]
 800564c:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800564e:	2522      	movs	r5, #34	; 0x22
 8005650:	446d      	add	r5, sp
 8005652:	ab08      	add	r3, sp, #32
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	ab0b      	add	r3, sp, #44	; 0x2c
 8005658:	002a      	movs	r2, r5
 800565a:	a90c      	add	r1, sp, #48	; 0x30
 800565c:	2001      	movs	r0, #1
 800565e:	f7ff f95d 	bl	800491c <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 8005662:	ac07      	add	r4, sp, #28
 8005664:	9400      	str	r4, [sp, #0]
 8005666:	ab09      	add	r3, sp, #36	; 0x24
 8005668:	221e      	movs	r2, #30
 800566a:	446a      	add	r2, sp
 800566c:	a90a      	add	r1, sp, #40	; 0x28
 800566e:	2006      	movs	r0, #6
 8005670:	f7ff f954 	bl	800491c <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005674:	2301      	movs	r3, #1
 8005676:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005678:	2600      	movs	r6, #0
 800567a:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800567c:	882b      	ldrh	r3, [r5, #0]
 800567e:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 8005680:	a90d      	add	r1, sp, #52	; 0x34
 8005682:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005684:	f00a fa92 	bl	800fbac <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005688:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800568a:	2302      	movs	r3, #2
 800568c:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800568e:	8823      	ldrh	r3, [r4, #0]
 8005690:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 8005692:	a90d      	add	r1, sp, #52	; 0x34
 8005694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005696:	f00a fa89 	bl	800fbac <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800569a:	8829      	ldrh	r1, [r5, #0]
 800569c:	2200      	movs	r2, #0
 800569e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80056a0:	f00a fb6a 	bl	800fd78 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80056a4:	2005      	movs	r0, #5
 80056a6:	f7ff ff99 	bl	80055dc <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 80056aa:	8821      	ldrh	r1, [r4, #0]
 80056ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056ae:	f00a fb5d 	bl	800fd6c <HAL_GPIO_ReadPin>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d006      	beq.n	80056c4 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 80056b6:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <IsFactoryReset+0xf0>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	4252      	negs	r2, r2
 80056bc:	601a      	str	r2, [r3, #0]
	return 0;
 80056be:	2000      	movs	r0, #0
}
 80056c0:	b012      	add	sp, #72	; 0x48
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80056c4:	2322      	movs	r3, #34	; 0x22
 80056c6:	446b      	add	r3, sp
 80056c8:	8819      	ldrh	r1, [r3, #0]
 80056ca:	2201      	movs	r2, #1
 80056cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80056ce:	f00a fb53 	bl	800fd78 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80056d2:	2005      	movs	r0, #5
 80056d4:	f7ff ff82 	bl	80055dc <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 80056d8:	ab07      	add	r3, sp, #28
 80056da:	8819      	ldrh	r1, [r3, #0]
 80056dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056de:	f00a fb45 	bl	800fd6c <HAL_GPIO_ReadPin>
 80056e2:	2801      	cmp	r0, #1
 80056e4:	d1e7      	bne.n	80056b6 <IsFactoryReset+0xb6>
			return 1;
 80056e6:	2001      	movs	r0, #1
 80056e8:	e7ea      	b.n	80056c0 <IsFactoryReset+0xc0>
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	40021000 	.word	0x40021000
 80056f0:	20007ff0 	.word	0x20007ff0

080056f4 <IsLowerCLIbaud>:
{
 80056f4:	b570      	push	{r4, r5, r6, lr}
 80056f6:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 80056f8:	2512      	movs	r5, #18
 80056fa:	446d      	add	r5, sp
 80056fc:	ab04      	add	r3, sp, #16
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	ab07      	add	r3, sp, #28
 8005702:	002a      	movs	r2, r5
 8005704:	a908      	add	r1, sp, #32
 8005706:	2001      	movs	r0, #1
 8005708:	f7ff f908 	bl	800491c <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 800570c:	ac03      	add	r4, sp, #12
 800570e:	9400      	str	r4, [sp, #0]
 8005710:	ab05      	add	r3, sp, #20
 8005712:	220e      	movs	r2, #14
 8005714:	446a      	add	r2, sp
 8005716:	a906      	add	r1, sp, #24
 8005718:	2002      	movs	r0, #2
 800571a:	f7ff f8ff 	bl	800491c <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800571e:	2301      	movs	r3, #1
 8005720:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005722:	2600      	movs	r6, #0
 8005724:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 8005726:	882b      	ldrh	r3, [r5, #0]
 8005728:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800572a:	a909      	add	r1, sp, #36	; 0x24
 800572c:	9808      	ldr	r0, [sp, #32]
 800572e:	f00a fa3d 	bl	800fbac <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005732:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 8005734:	2302      	movs	r3, #2
 8005736:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 8005738:	8823      	ldrh	r3, [r4, #0]
 800573a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P2_RX_Port, &GPIO_InitStruct);	
 800573c:	a909      	add	r1, sp, #36	; 0x24
 800573e:	9805      	ldr	r0, [sp, #20]
 8005740:	f00a fa34 	bl	800fbac <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8005744:	8829      	ldrh	r1, [r5, #0]
 8005746:	2200      	movs	r2, #0
 8005748:	9808      	ldr	r0, [sp, #32]
 800574a:	f00a fb15 	bl	800fd78 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);		
 800574e:	2005      	movs	r0, #5
 8005750:	f7ff ff44 	bl	80055dc <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8005754:	8821      	ldrh	r1, [r4, #0]
 8005756:	9805      	ldr	r0, [sp, #20]
 8005758:	f00a fb08 	bl	800fd6c <HAL_GPIO_ReadPin>
	return 0;
 800575c:	2300      	movs	r3, #0
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 800575e:	2800      	cmp	r0, #0
 8005760:	d002      	beq.n	8005768 <IsLowerCLIbaud+0x74>
}
 8005762:	0018      	movs	r0, r3
 8005764:	b00e      	add	sp, #56	; 0x38
 8005766:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8005768:	3312      	adds	r3, #18
 800576a:	446b      	add	r3, sp
 800576c:	8819      	ldrh	r1, [r3, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	9808      	ldr	r0, [sp, #32]
 8005772:	f00a fb01 	bl	800fd78 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);		
 8005776:	2005      	movs	r0, #5
 8005778:	f7ff ff30 	bl	80055dc <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == SET) 
 800577c:	ab03      	add	r3, sp, #12
 800577e:	8819      	ldrh	r1, [r3, #0]
 8005780:	9805      	ldr	r0, [sp, #20]
 8005782:	f00a faf3 	bl	800fd6c <HAL_GPIO_ReadPin>
 8005786:	3801      	subs	r0, #1
 8005788:	4243      	negs	r3, r0
 800578a:	4143      	adcs	r3, r0
			return 1;
 800578c:	b2db      	uxtb	r3, r3
 800578e:	e7e8      	b.n	8005762 <IsLowerCLIbaud+0x6e>

08005790 <SwapUartPins>:
{
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 8005794:	d003      	beq.n	800579e <SwapUartPins+0xe>
		if (direction == REVERSED) {
 8005796:	2901      	cmp	r1, #1
 8005798:	d002      	beq.n	80057a0 <SwapUartPins+0x10>
		} else if (direction == NORMAL) {
 800579a:	2900      	cmp	r1, #0
 800579c:	d016      	beq.n	80057cc <SwapUartPins+0x3c>
}
 800579e:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 80057a0:	f006 f812 	bl	800b7c8 <GetPort>
 80057a4:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <SwapUartPins+0x68>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	4d14      	ldr	r5, [pc, #80]	; (80057fc <SwapUartPins+0x6c>)
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	3801      	subs	r0, #1
 80057b0:	2180      	movs	r1, #128	; 0x80
 80057b2:	0209      	lsls	r1, r1, #8
 80057b4:	000a      	movs	r2, r1
 80057b6:	4102      	asrs	r2, r0
 80057b8:	5b58      	ldrh	r0, [r3, r5]
 80057ba:	4302      	orrs	r2, r0
 80057bc:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80057be:	2308      	movs	r3, #8
 80057c0:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80057c2:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 80057c4:	0020      	movs	r0, r4
 80057c6:	f00c fa87 	bl	8011cd8 <HAL_UART_Init>
 80057ca:	e7e8      	b.n	800579e <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 80057cc:	f005 fffc 	bl	800b7c8 <GetPort>
 80057d0:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <SwapUartPins+0x68>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	4d09      	ldr	r5, [pc, #36]	; (80057fc <SwapUartPins+0x6c>)
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	3801      	subs	r0, #1
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	0209      	lsls	r1, r1, #8
 80057e0:	4101      	asrs	r1, r0
 80057e2:	5b5a      	ldrh	r2, [r3, r5]
 80057e4:	438a      	bics	r2, r1
 80057e6:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80057e8:	2308      	movs	r3, #8
 80057ea:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 80057f0:	0020      	movs	r0, r4
 80057f2:	f00c fa71 	bl	8011cd8 <HAL_UART_Init>
}
 80057f6:	e7d2      	b.n	800579e <SwapUartPins+0xe>
 80057f8:	20000b90 	.word	0x20000b90
 80057fc:	200005e0 	.word	0x200005e0

08005800 <FindRoute>:
{
 8005800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005802:	46de      	mov	lr, fp
 8005804:	4657      	mov	r7, sl
 8005806:	464e      	mov	r6, r9
 8005808:	4645      	mov	r5, r8
 800580a:	b5e0      	push	{r5, r6, r7, lr}
 800580c:	b08f      	sub	sp, #60	; 0x3c
 800580e:	0005      	movs	r5, r0
 8005810:	468a      	mov	sl, r1
	uint8_t Q[50] = {0};		// All nodes initially in Q (unvisited nodes)
 8005812:	2232      	movs	r2, #50	; 0x32
 8005814:	2100      	movs	r1, #0
 8005816:	a801      	add	r0, sp, #4
 8005818:	f00c fc46 	bl	80120a8 <memset>
	memset(route,0,sizeof(route));
 800581c:	2219      	movs	r2, #25
 800581e:	2100      	movs	r1, #0
 8005820:	485a      	ldr	r0, [pc, #360]	; (800598c <FindRoute+0x18c>)
 8005822:	f00c fc41 	bl	80120a8 <memset>
	routeDist[sourceID-1] = 0;                  // Distance from source to source
 8005826:	0029      	movs	r1, r5
 8005828:	1e68      	subs	r0, r5, #1
 800582a:	2300      	movs	r3, #0
 800582c:	4a58      	ldr	r2, [pc, #352]	; (8005990 <FindRoute+0x190>)
 800582e:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 8005830:	4a58      	ldr	r2, [pc, #352]	; (8005994 <FindRoute+0x194>)
 8005832:	5413      	strb	r3, [r2, r0]
 8005834:	2516      	movs	r5, #22
 8005836:	4345      	muls	r5, r0
 8005838:	3502      	adds	r5, #2
 800583a:	4b57      	ldr	r3, [pc, #348]	; (8005998 <FindRoute+0x198>)
 800583c:	18ed      	adds	r5, r5, r3
 800583e:	002a      	movs	r2, r5
	for(int col=1 ; col<=6 ; col++)
 8005840:	2001      	movs	r0, #1
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8005842:	4653      	mov	r3, sl
 8005844:	b29c      	uxth	r4, r3
 8005846:	e003      	b.n	8005850 <FindRoute+0x50>
	for(int col=1 ; col<=6 ; col++)
 8005848:	3001      	adds	r0, #1
 800584a:	3202      	adds	r2, #2
 800584c:	2807      	cmp	r0, #7
 800584e:	d00f      	beq.n	8005870 <FindRoute+0x70>
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8005850:	8813      	ldrh	r3, [r2, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0f8      	beq.n	8005848 <FindRoute+0x48>
 8005856:	08db      	lsrs	r3, r3, #3
 8005858:	42a3      	cmp	r3, r4
 800585a:	d1f5      	bne.n	8005848 <FindRoute+0x48>
			routeDist[desID-1] = 1;
 800585c:	4b4c      	ldr	r3, [pc, #304]	; (8005990 <FindRoute+0x190>)
 800585e:	4453      	add	r3, sl
 8005860:	3b01      	subs	r3, #1
 8005862:	2201      	movs	r2, #1
 8005864:	701a      	strb	r2, [r3, #0]
			route[0] = desID;
 8005866:	4b49      	ldr	r3, [pc, #292]	; (800598c <FindRoute+0x18c>)
 8005868:	4652      	mov	r2, sl
 800586a:	701a      	strb	r2, [r3, #0]
			return col;	
 800586c:	b2c0      	uxtb	r0, r0
 800586e:	e085      	b.n	800597c <FindRoute+0x17c>
	for (int i=1 ; i<=N ; i++)   					
 8005870:	4b4a      	ldr	r3, [pc, #296]	; (800599c <FindRoute+0x19c>)
 8005872:	781e      	ldrb	r6, [r3, #0]
 8005874:	2e00      	cmp	r6, #0
 8005876:	dd11      	ble.n	800589c <FindRoute+0x9c>
 8005878:	2301      	movs	r3, #1
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 800587a:	24ff      	movs	r4, #255	; 0xff
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 800587c:	4f45      	ldr	r7, [pc, #276]	; (8005994 <FindRoute+0x194>)
 800587e:	2000      	movs	r0, #0
 8005880:	46ac      	mov	ip, r5
 8005882:	e002      	b.n	800588a <FindRoute+0x8a>
	for (int i=1 ; i<=N ; i++)   					
 8005884:	3301      	adds	r3, #1
 8005886:	42b3      	cmp	r3, r6
 8005888:	dc07      	bgt.n	800589a <FindRoute+0x9a>
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
 800588a:	4299      	cmp	r1, r3
 800588c:	d0fa      	beq.n	8005884 <FindRoute+0x84>
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 800588e:	1e5a      	subs	r2, r3, #1
 8005890:	4d3f      	ldr	r5, [pc, #252]	; (8005990 <FindRoute+0x190>)
 8005892:	54ac      	strb	r4, [r5, r2]
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8005894:	18ba      	adds	r2, r7, r2
 8005896:	7010      	strb	r0, [r2, #0]
 8005898:	e7f4      	b.n	8005884 <FindRoute+0x84>
 800589a:	4665      	mov	r5, ip
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 800589c:	2400      	movs	r4, #0
 800589e:	4b3e      	ldr	r3, [pc, #248]	; (8005998 <FindRoute+0x198>)
 80058a0:	4698      	mov	r8, r3
 80058a2:	230e      	movs	r3, #14
 80058a4:	4443      	add	r3, r8
 80058a6:	4656      	mov	r6, sl
 80058a8:	469b      	mov	fp, r3
 80058aa:	46a9      	mov	r9, r5
 80058ac:	e01d      	b.n	80058ea <FindRoute+0xea>
 80058ae:	464d      	mov	r5, r9
 80058b0:	46b2      	mov	sl, r6
		u = minArr(routeDist, Q)+1;						// Source node in first case
 80058b2:	0034      	movs	r4, r6
 80058b4:	e034      	b.n	8005920 <FindRoute+0x120>
 80058b6:	3102      	adds	r1, #2
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 80058b8:	4281      	cmp	r1, r0
 80058ba:	d015      	beq.n	80058e8 <FindRoute+0xe8>
			if (array[u-1][n])										// There's a neighbor v at this port n
 80058bc:	880b      	ldrh	r3, [r1, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0f9      	beq.n	80058b6 <FindRoute+0xb6>
				v = (array[u-1][n]>>3);
 80058c2:	08db      	lsrs	r3, r3, #3
				if (!Q[v-1])												// v is still in Q
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	5cd7      	ldrb	r7, [r2, r3]
 80058ca:	2f00      	cmp	r7, #0
 80058cc:	d1f3      	bne.n	80058b6 <FindRoute+0xb6>
					alt = routeDist[u-1] + 1;					// Add one hop
 80058ce:	4f30      	ldr	r7, [pc, #192]	; (8005990 <FindRoute+0x190>)
 80058d0:	5d7f      	ldrb	r7, [r7, r5]
 80058d2:	3701      	adds	r7, #1
 80058d4:	b2ff      	uxtb	r7, r7
					if (alt < routeDist[v-1])      		// A shorter path to v has been found
 80058d6:	4e2e      	ldr	r6, [pc, #184]	; (8005990 <FindRoute+0x190>)
 80058d8:	5cf6      	ldrb	r6, [r6, r3]
 80058da:	42be      	cmp	r6, r7
 80058dc:	d9eb      	bls.n	80058b6 <FindRoute+0xb6>
						routeDist[v-1] = alt; 
 80058de:	4e2c      	ldr	r6, [pc, #176]	; (8005990 <FindRoute+0x190>)
 80058e0:	54f7      	strb	r7, [r6, r3]
						routePrev[v-1] = u; 
 80058e2:	4e2c      	ldr	r6, [pc, #176]	; (8005994 <FindRoute+0x194>)
 80058e4:	54f4      	strb	r4, [r6, r3]
 80058e6:	e7e6      	b.n	80058b6 <FindRoute+0xb6>
 80058e8:	4656      	mov	r6, sl
	while (!QnotEmpty(Q))
 80058ea:	a801      	add	r0, sp, #4
 80058ec:	f7fd fe3e 	bl	800356c <QnotEmpty>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d113      	bne.n	800591c <FindRoute+0x11c>
		u = minArr(routeDist, Q)+1;						// Source node in first case
 80058f4:	a901      	add	r1, sp, #4
 80058f6:	4826      	ldr	r0, [pc, #152]	; (8005990 <FindRoute+0x190>)
 80058f8:	f7fd fe1a 	bl	8003530 <minArr>
 80058fc:	3001      	adds	r0, #1
 80058fe:	b2c4      	uxtb	r4, r0
		if (u == desID) 
 8005900:	42b4      	cmp	r4, r6
 8005902:	d0d4      	beq.n	80058ae <FindRoute+0xae>
			Q[u-1] = 1;													// Remove u from Q 
 8005904:	1e65      	subs	r5, r4, #1
 8005906:	ab01      	add	r3, sp, #4
 8005908:	2201      	movs	r2, #1
 800590a:	555a      	strb	r2, [r3, r5]
 800590c:	2016      	movs	r0, #22
 800590e:	4368      	muls	r0, r5
 8005910:	1c81      	adds	r1, r0, #2
 8005912:	4441      	add	r1, r8
 8005914:	4458      	add	r0, fp
				if (!Q[v-1])												// v is still in Q
 8005916:	001a      	movs	r2, r3
 8005918:	46b2      	mov	sl, r6
 800591a:	e7cf      	b.n	80058bc <FindRoute+0xbc>
 800591c:	464d      	mov	r5, r9
 800591e:	46b2      	mov	sl, r6
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8005920:	4b1c      	ldr	r3, [pc, #112]	; (8005994 <FindRoute+0x194>)
 8005922:	191b      	adds	r3, r3, r4
 8005924:	3b01      	subs	r3, #1
 8005926:	781a      	ldrb	r2, [r3, #0]
 8005928:	2300      	movs	r3, #0
 800592a:	2a00      	cmp	r2, #0
 800592c:	d00e      	beq.n	800594c <FindRoute+0x14c>
		route[j++] = u;          				// Push the vertex onto the stack
 800592e:	4917      	ldr	r1, [pc, #92]	; (800598c <FindRoute+0x18c>)
 8005930:	468c      	mov	ip, r1
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8005932:	4e18      	ldr	r6, [pc, #96]	; (8005994 <FindRoute+0x194>)
 8005934:	e000      	b.n	8005938 <FindRoute+0x138>
 8005936:	000a      	movs	r2, r1
		route[j++] = u;          				// Push the vertex onto the stack
 8005938:	1c58      	adds	r0, r3, #1
 800593a:	4661      	mov	r1, ip
 800593c:	54cc      	strb	r4, [r1, r3]
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 800593e:	18b3      	adds	r3, r6, r2
 8005940:	3b01      	subs	r3, #1
 8005942:	7819      	ldrb	r1, [r3, #0]
 8005944:	0014      	movs	r4, r2
		route[j++] = u;          				// Push the vertex onto the stack
 8005946:	b2c3      	uxtb	r3, r0
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8005948:	2900      	cmp	r1, #0
 800594a:	d1f4      	bne.n	8005936 <FindRoute+0x136>
	for(int col=1 ; col<=6 ; col++)	
 800594c:	2001      	movs	r0, #1
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 800594e:	490f      	ldr	r1, [pc, #60]	; (800598c <FindRoute+0x18c>)
 8005950:	4b0f      	ldr	r3, [pc, #60]	; (8005990 <FindRoute+0x190>)
 8005952:	4453      	add	r3, sl
 8005954:	001f      	movs	r7, r3
 8005956:	3f01      	subs	r7, #1
 8005958:	e003      	b.n	8005962 <FindRoute+0x162>
	for(int col=1 ; col<=6 ; col++)	
 800595a:	3001      	adds	r0, #1
 800595c:	3502      	adds	r5, #2
 800595e:	2807      	cmp	r0, #7
 8005960:	d00b      	beq.n	800597a <FindRoute+0x17a>
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8005962:	882b      	ldrh	r3, [r5, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0f8      	beq.n	800595a <FindRoute+0x15a>
 8005968:	783a      	ldrb	r2, [r7, #0]
 800596a:	188a      	adds	r2, r1, r2
 800596c:	3a01      	subs	r2, #1
 800596e:	7812      	ldrb	r2, [r2, #0]
 8005970:	08db      	lsrs	r3, r3, #3
 8005972:	429a      	cmp	r2, r3
 8005974:	d1f1      	bne.n	800595a <FindRoute+0x15a>
			return col;	
 8005976:	b2c0      	uxtb	r0, r0
 8005978:	e000      	b.n	800597c <FindRoute+0x17c>
	return 0;			
 800597a:	2000      	movs	r0, #0
}
 800597c:	b00f      	add	sp, #60	; 0x3c
 800597e:	bc3c      	pop	{r2, r3, r4, r5}
 8005980:	4690      	mov	r8, r2
 8005982:	4699      	mov	r9, r3
 8005984:	46a2      	mov	sl, r4
 8005986:	46ab      	mov	fp, r5
 8005988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	20000c9c 	.word	0x20000c9c
 8005990:	20000cb8 	.word	0x20000cb8
 8005994:	20000cd4 	.word	0x20000cd4
 8005998:	200003b8 	.word	0x200003b8
 800599c:	2000001c 	.word	0x2000001c

080059a0 <ForwardReceivedMessage>:
{
 80059a0:	b530      	push	{r4, r5, lr}
 80059a2:	b083      	sub	sp, #12
 80059a4:	0005      	movs	r5, r0
	AddBcastPayload = false; 	
 80059a6:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <ForwardReceivedMessage+0x34>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 80059ac:	1e42      	subs	r2, r0, #1
 80059ae:	00d3      	lsls	r3, r2, #3
 80059b0:	1a9b      	subs	r3, r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	4a08      	ldr	r2, [pc, #32]	; (80059d8 <ForwardReceivedMessage+0x38>)
 80059b6:	5c9c      	ldrb	r4, [r3, r2]
	port = FindRoute(myID, dst); 
 80059b8:	4b08      	ldr	r3, [pc, #32]	; (80059dc <ForwardReceivedMessage+0x3c>)
 80059ba:	7818      	ldrb	r0, [r3, #0]
 80059bc:	0021      	movs	r1, r4
 80059be:	f7ff ff1f 	bl	8005800 <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 80059c2:	9500      	str	r5, [sp, #0]
 80059c4:	2300      	movs	r3, #0
 80059c6:	0022      	movs	r2, r4
 80059c8:	2100      	movs	r1, #0
 80059ca:	f7ff f9a9 	bl	8004d20 <SendMessageFromPort>
}
 80059ce:	2000      	movs	r0, #0
 80059d0:	b003      	add	sp, #12
 80059d2:	bd30      	pop	{r4, r5, pc}
 80059d4:	200003b4 	.word	0x200003b4
 80059d8:	200006d8 	.word	0x200006d8
 80059dc:	20000b90 	.word	0x20000b90

080059e0 <SendMessageToModule>:
{
 80059e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e2:	b083      	sub	sp, #12
 80059e4:	0004      	movs	r4, r0
 80059e6:	000e      	movs	r6, r1
 80059e8:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 80059ea:	28ff      	cmp	r0, #255	; 0xff
 80059ec:	d012      	beq.n	8005a14 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 80059ee:	4f0d      	ldr	r7, [pc, #52]	; (8005a24 <SendMessageToModule+0x44>)
 80059f0:	7838      	ldrb	r0, [r7, #0]
 80059f2:	0021      	movs	r1, r4
 80059f4:	f7ff ff04 	bl	8005800 <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 80059f8:	7839      	ldrb	r1, [r7, #0]
 80059fa:	9500      	str	r5, [sp, #0]
 80059fc:	0033      	movs	r3, r6
 80059fe:	0022      	movs	r2, r4
 8005a00:	f7ff f98e 	bl	8004d20 <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 8005a04:	002a      	movs	r2, r5
 8005a06:	2100      	movs	r1, #0
 8005a08:	4807      	ldr	r0, [pc, #28]	; (8005a28 <SendMessageToModule+0x48>)
 8005a0a:	f00c fb4d 	bl	80120a8 <memset>
}
 8005a0e:	2000      	movs	r0, #0
 8005a10:	b003      	add	sp, #12
 8005a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 8005a14:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <SendMessageToModule+0x44>)
 8005a16:	7818      	ldrb	r0, [r3, #0]
 8005a18:	0013      	movs	r3, r2
 8005a1a:	000a      	movs	r2, r1
 8005a1c:	21ff      	movs	r1, #255	; 0xff
 8005a1e:	f7ff fb57 	bl	80050d0 <BroadcastMessage>
 8005a22:	e7f4      	b.n	8005a0e <SendMessageToModule+0x2e>
 8005a24:	20000b90 	.word	0x20000b90
 8005a28:	20000a5c 	.word	0x20000a5c

08005a2c <defaultCommand>:
{
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	0004      	movs	r4, r0
 8005a32:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005a38:	2c00      	cmp	r4, #0
 8005a3a:	d101      	bne.n	8005a40 <defaultCommand+0x14>
 8005a3c:	b672      	cpsid	i
 8005a3e:	e7fe      	b.n	8005a3e <defaultCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005a40:	aa01      	add	r2, sp, #4
 8005a42:	2101      	movs	r1, #1
 8005a44:	f008 fd9e 	bl	800e584 <FreeRTOS_CLIGetParameter>
 8005a48:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 8005a4a:	9e01      	ldr	r6, [sp, #4]
 8005a4c:	0032      	movs	r2, r6
 8005a4e:	491e      	ldr	r1, [pc, #120]	; (8005ac8 <defaultCommand+0x9c>)
 8005a50:	f00c fc6c 	bl	801232c <strncmp>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d01e      	beq.n	8005a96 <defaultCommand+0x6a>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 8005a58:	0032      	movs	r2, r6
 8005a5a:	491c      	ldr	r1, [pc, #112]	; (8005acc <defaultCommand+0xa0>)
 8005a5c:	0028      	movs	r0, r5
 8005a5e:	f00c fc65 	bl	801232c <strncmp>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d12a      	bne.n	8005abc <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 8005a66:	2200      	movs	r2, #0
 8005a68:	2116      	movs	r1, #22
 8005a6a:	20ff      	movs	r0, #255	; 0xff
 8005a6c:	f7ff ffb8 	bl	80059e0 <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 8005a70:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <defaultCommand+0xa4>)
 8005a72:	2202      	movs	r2, #2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	2064      	movs	r0, #100	; 0x64
 8005a78:	f008 fc6b 	bl	800e352 <osDelay>
		ClearEEportsDir();
 8005a7c:	f7fe f8be 	bl	8003bfc <ClearEEportsDir>
		ClearROtopology();
 8005a80:	f7fd ffb0 	bl	80039e4 <ClearROtopology>
		osDelay(100);
 8005a84:	2064      	movs	r0, #100	; 0x64
 8005a86:	f008 fc64 	bl	800e352 <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 8005a8a:	2240      	movs	r2, #64	; 0x40
 8005a8c:	4911      	ldr	r1, [pc, #68]	; (8005ad4 <defaultCommand+0xa8>)
 8005a8e:	0020      	movs	r0, r4
 8005a90:	f00c fb01 	bl	8012096 <memcpy>
 8005a94:	e00f      	b.n	8005ab6 <defaultCommand+0x8a>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 8005a96:	4910      	ldr	r1, [pc, #64]	; (8005ad8 <defaultCommand+0xac>)
 8005a98:	4b10      	ldr	r3, [pc, #64]	; (8005adc <defaultCommand+0xb0>)
 8005a9a:	000a      	movs	r2, r1
 8005a9c:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005a9e:	c223      	stmia	r2!, {r0, r1, r5}
 8005aa0:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005aa2:	c223      	stmia	r2!, {r0, r1, r5}
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8005aa8:	f7fe fac2 	bl	8004030 <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 8005aac:	2227      	movs	r2, #39	; 0x27
 8005aae:	490c      	ldr	r1, [pc, #48]	; (8005ae0 <defaultCommand+0xb4>)
 8005ab0:	0020      	movs	r0, r4
 8005ab2:	f00c faf0 	bl	8012096 <memcpy>
}
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	b002      	add	sp, #8
 8005aba:	bd70      	pop	{r4, r5, r6, pc}
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8005abc:	220f      	movs	r2, #15
 8005abe:	4909      	ldr	r1, [pc, #36]	; (8005ae4 <defaultCommand+0xb8>)
 8005ac0:	0020      	movs	r0, r4
 8005ac2:	f00c fae8 	bl	8012096 <memcpy>
 8005ac6:	e7f6      	b.n	8005ab6 <defaultCommand+0x8a>
 8005ac8:	08016ba0 	.word	0x08016ba0
 8005acc:	08016bd0 	.word	0x08016bd0
 8005ad0:	20000902 	.word	0x20000902
 8005ad4:	08016be8 	.word	0x08016be8
 8005ad8:	20006160 	.word	0x20006160
 8005adc:	20000000 	.word	0x20000000
 8005ae0:	08016ba8 	.word	0x08016ba8
 8005ae4:	08016bd8 	.word	0x08016bd8

08005ae8 <DisplayTopology>:
{
 8005ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aea:	46d6      	mov	lr, sl
 8005aec:	464f      	mov	r7, r9
 8005aee:	4646      	mov	r6, r8
 8005af0:	b5c0      	push	{r6, r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	0005      	movs	r5, r0
 8005af6:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 8005af8:	4c56      	ldr	r4, [pc, #344]	; (8005c54 <DisplayTopology+0x16c>)
 8005afa:	4b57      	ldr	r3, [pc, #348]	; (8005c58 <DisplayTopology+0x170>)
 8005afc:	0022      	movs	r2, r4
 8005afe:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005b00:	c243      	stmia	r2!, {r0, r1, r6}
 8005b02:	6819      	ldr	r1, [r3, #0]
 8005b04:	6011      	str	r1, [r2, #0]
 8005b06:	889b      	ldrh	r3, [r3, #4]
 8005b08:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005b0a:	0020      	movs	r0, r4
 8005b0c:	f7fa fb04 	bl	8000118 <strlen>
 8005b10:	b282      	uxth	r2, r0
 8005b12:	2301      	movs	r3, #1
 8005b14:	425b      	negs	r3, r3
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	3333      	adds	r3, #51	; 0x33
 8005b1a:	0021      	movs	r1, r4
 8005b1c:	0028      	movs	r0, r5
 8005b1e:	f008 fb41 	bl	800e1a4 <writePxMutex>
 8005b22:	2401      	movs	r4, #1
		sprintf(pcUserMessage, "P%d\t", i);
 8005b24:	4f4d      	ldr	r7, [pc, #308]	; (8005c5c <DisplayTopology+0x174>)
 8005b26:	4d4b      	ldr	r5, [pc, #300]	; (8005c54 <DisplayTopology+0x16c>)
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005b28:	2601      	movs	r6, #1
 8005b2a:	4276      	negs	r6, r6
		sprintf(pcUserMessage, "P%d\t", i);
 8005b2c:	0022      	movs	r2, r4
 8005b2e:	0039      	movs	r1, r7
 8005b30:	0028      	movs	r0, r5
 8005b32:	f00c fbb7 	bl	80122a4 <siprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005b36:	0028      	movs	r0, r5
 8005b38:	f7fa faee 	bl	8000118 <strlen>
 8005b3c:	b282      	uxth	r2, r0
 8005b3e:	9600      	str	r6, [sp, #0]
 8005b40:	2332      	movs	r3, #50	; 0x32
 8005b42:	0029      	movs	r1, r5
 8005b44:	9803      	ldr	r0, [sp, #12]
 8005b46:	f008 fb2d 	bl	800e1a4 <writePxMutex>
 8005b4a:	3401      	adds	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 8005b4c:	2c07      	cmp	r4, #7
 8005b4e:	d1ed      	bne.n	8005b2c <DisplayTopology+0x44>
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 8005b50:	2301      	movs	r3, #1
 8005b52:	425b      	negs	r3, r3
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	3333      	adds	r3, #51	; 0x33
 8005b58:	2203      	movs	r2, #3
 8005b5a:	4941      	ldr	r1, [pc, #260]	; (8005c60 <DisplayTopology+0x178>)
 8005b5c:	9803      	ldr	r0, [sp, #12]
 8005b5e:	f008 fb21 	bl	800e1a4 <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 8005b62:	4b40      	ldr	r3, [pc, #256]	; (8005c64 <DisplayTopology+0x17c>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d065      	beq.n	8005c36 <DisplayTopology+0x14e>
 8005b6a:	2600      	movs	r6, #0
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005b6c:	2701      	movs	r7, #1
 8005b6e:	427f      	negs	r7, r7
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8005b70:	4b3d      	ldr	r3, [pc, #244]	; (8005c68 <DisplayTopology+0x180>)
 8005b72:	4699      	mov	r9, r3
 8005b74:	230e      	movs	r3, #14
 8005b76:	444b      	add	r3, r9
 8005b78:	469a      	mov	sl, r3
 8005b7a:	e02a      	b.n	8005bd2 <DisplayTopology+0xea>
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col]>>3), (array[row][col]&0x07) );
 8005b7c:	2307      	movs	r3, #7
 8005b7e:	4013      	ands	r3, r2
 8005b80:	08d2      	lsrs	r2, r2, #3
 8005b82:	493a      	ldr	r1, [pc, #232]	; (8005c6c <DisplayTopology+0x184>)
 8005b84:	4833      	ldr	r0, [pc, #204]	; (8005c54 <DisplayTopology+0x16c>)
 8005b86:	f00c fb8d 	bl	80122a4 <siprintf>
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);			
 8005b8a:	4d32      	ldr	r5, [pc, #200]	; (8005c54 <DisplayTopology+0x16c>)
 8005b8c:	0028      	movs	r0, r5
 8005b8e:	f7fa fac3 	bl	8000118 <strlen>
 8005b92:	b282      	uxth	r2, r0
 8005b94:	9700      	str	r7, [sp, #0]
 8005b96:	2332      	movs	r3, #50	; 0x32
 8005b98:	0029      	movs	r1, r5
 8005b9a:	9803      	ldr	r0, [sp, #12]
 8005b9c:	f008 fb02 	bl	800e1a4 <writePxMutex>
 8005ba0:	3402      	adds	r4, #2
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 8005ba2:	42b4      	cmp	r4, r6
 8005ba4:	d007      	beq.n	8005bb6 <DisplayTopology+0xce>
			if (!array[row][col])
 8005ba6:	8822      	ldrh	r2, [r4, #0]
 8005ba8:	2a00      	cmp	r2, #0
 8005baa:	d1e7      	bne.n	8005b7c <DisplayTopology+0x94>
				sprintf(pcUserMessage, "%d\t",0);
 8005bac:	4930      	ldr	r1, [pc, #192]	; (8005c70 <DisplayTopology+0x188>)
 8005bae:	4829      	ldr	r0, [pc, #164]	; (8005c54 <DisplayTopology+0x16c>)
 8005bb0:	f00c fb78 	bl	80122a4 <siprintf>
 8005bb4:	e7e9      	b.n	8005b8a <DisplayTopology+0xa2>
 8005bb6:	4646      	mov	r6, r8
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 8005bb8:	9700      	str	r7, [sp, #0]
 8005bba:	2332      	movs	r3, #50	; 0x32
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	492d      	ldr	r1, [pc, #180]	; (8005c74 <DisplayTopology+0x18c>)
 8005bc0:	9803      	ldr	r0, [sp, #12]
 8005bc2:	f008 faef 	bl	800e1a4 <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 8005bc6:	3601      	adds	r6, #1
 8005bc8:	b2f6      	uxtb	r6, r6
 8005bca:	4b26      	ldr	r3, [pc, #152]	; (8005c64 <DisplayTopology+0x17c>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	42b3      	cmp	r3, r6
 8005bd0:	d931      	bls.n	8005c36 <DisplayTopology+0x14e>
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 8005bd2:	1c72      	adds	r2, r6, #1
 8005bd4:	4c1f      	ldr	r4, [pc, #124]	; (8005c54 <DisplayTopology+0x16c>)
 8005bd6:	4928      	ldr	r1, [pc, #160]	; (8005c78 <DisplayTopology+0x190>)
 8005bd8:	0020      	movs	r0, r4
 8005bda:	f00c fb63 	bl	80122a4 <siprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005bde:	0020      	movs	r0, r4
 8005be0:	f7fa fa9a 	bl	8000118 <strlen>
 8005be4:	b282      	uxth	r2, r0
 8005be6:	9700      	str	r7, [sp, #0]
 8005be8:	2332      	movs	r3, #50	; 0x32
 8005bea:	0021      	movs	r1, r4
 8005bec:	9803      	ldr	r0, [sp, #12]
 8005bee:	f008 fad9 	bl	800e1a4 <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8005bf2:	2516      	movs	r5, #22
 8005bf4:	4375      	muls	r5, r6
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	5aeb      	ldrh	r3, [r5, r3]
 8005bfa:	0059      	lsls	r1, r3, #1
 8005bfc:	18c9      	adds	r1, r1, r3
 8005bfe:	0049      	lsls	r1, r1, #1
 8005c00:	4b1e      	ldr	r3, [pc, #120]	; (8005c7c <DisplayTopology+0x194>)
 8005c02:	1859      	adds	r1, r3, r1
 8005c04:	2205      	movs	r2, #5
 8005c06:	0020      	movs	r0, r4
 8005c08:	f00c fba1 	bl	801234e <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 8005c0c:	9700      	str	r7, [sp, #0]
 8005c0e:	2332      	movs	r3, #50	; 0x32
 8005c10:	2205      	movs	r2, #5
 8005c12:	0021      	movs	r1, r4
 8005c14:	9c03      	ldr	r4, [sp, #12]
 8005c16:	0020      	movs	r0, r4
 8005c18:	f008 fac4 	bl	800e1a4 <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 8005c1c:	9700      	str	r7, [sp, #0]
 8005c1e:	2332      	movs	r3, #50	; 0x32
 8005c20:	2201      	movs	r2, #1
 8005c22:	4917      	ldr	r1, [pc, #92]	; (8005c80 <DisplayTopology+0x198>)
 8005c24:	0020      	movs	r0, r4
 8005c26:	f008 fabd 	bl	800e1a4 <writePxMutex>
 8005c2a:	1cac      	adds	r4, r5, #2
 8005c2c:	444c      	add	r4, r9
 8005c2e:	4455      	add	r5, sl
				sprintf(pcUserMessage, "%d\t",0);
 8005c30:	46b0      	mov	r8, r6
 8005c32:	002e      	movs	r6, r5
 8005c34:	e7b7      	b.n	8005ba6 <DisplayTopology+0xbe>
	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8005c36:	2301      	movs	r3, #1
 8005c38:	425b      	negs	r3, r3
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	3333      	adds	r3, #51	; 0x33
 8005c3e:	2201      	movs	r2, #1
 8005c40:	4910      	ldr	r1, [pc, #64]	; (8005c84 <DisplayTopology+0x19c>)
 8005c42:	9803      	ldr	r0, [sp, #12]
 8005c44:	f008 faae 	bl	800e1a4 <writePxMutex>
}
 8005c48:	b004      	add	sp, #16
 8005c4a:	bc1c      	pop	{r2, r3, r4}
 8005c4c:	4690      	mov	r8, r2
 8005c4e:	4699      	mov	r9, r3
 8005c50:	46a2      	mov	sl, r4
 8005c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c54:	20000bf0 	.word	0x20000bf0
 8005c58:	080168dc 	.word	0x080168dc
 8005c5c:	080168f0 	.word	0x080168f0
 8005c60:	08018cbc 	.word	0x08018cbc
 8005c64:	2000001c 	.word	0x2000001c
 8005c68:	200003b8 	.word	0x200003b8
 8005c6c:	08016908 	.word	0x08016908
 8005c70:	08016904 	.word	0x08016904
 8005c74:	08016784 	.word	0x08016784
 8005c78:	080168f8 	.word	0x080168f8
 8005c7c:	08016fbc 	.word	0x08016fbc
 8005c80:	080168ec 	.word	0x080168ec
 8005c84:	0801978c 	.word	0x0801978c

08005c88 <DisplayPortsDir>:
{
 8005c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8a:	46c6      	mov	lr, r8
 8005c8c:	b500      	push	{lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	0005      	movs	r5, r0
 8005c92:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 8005c94:	4c30      	ldr	r4, [pc, #192]	; (8005d58 <DisplayPortsDir+0xd0>)
 8005c96:	4b31      	ldr	r3, [pc, #196]	; (8005d5c <DisplayPortsDir+0xd4>)
 8005c98:	0022      	movs	r2, r4
 8005c9a:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005c9c:	c243      	stmia	r2!, {r0, r1, r6}
 8005c9e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005ca0:	c243      	stmia	r2!, {r0, r1, r6}
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005ca6:	0020      	movs	r0, r4
 8005ca8:	f7fa fa36 	bl	8000118 <strlen>
 8005cac:	b282      	uxth	r2, r0
 8005cae:	2301      	movs	r3, #1
 8005cb0:	425b      	negs	r3, r3
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	3333      	adds	r3, #51	; 0x33
 8005cb6:	0021      	movs	r1, r4
 8005cb8:	0028      	movs	r0, r5
 8005cba:	f008 fa73 	bl	800e1a4 <writePxMutex>
	for (uint8_t i=1 ; i<=N ; i++) 
 8005cbe:	4b28      	ldr	r3, [pc, #160]	; (8005d60 <DisplayPortsDir+0xd8>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	4690      	mov	r8, r2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d02c      	beq.n	8005d24 <DisplayPortsDir+0x9c>
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8005cca:	4e26      	ldr	r6, [pc, #152]	; (8005d64 <DisplayPortsDir+0xdc>)
 8005ccc:	e025      	b.n	8005d1a <DisplayPortsDir+0x92>
 8005cce:	0023      	movs	r3, r4
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 8005cd0:	2c0a      	cmp	r4, #10
 8005cd2:	d01a      	beq.n	8005d0a <DisplayPortsDir+0x82>
 8005cd4:	1c5c      	adds	r4, r3, #1
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8005cd6:	5ba9      	ldrh	r1, [r5, r6]
 8005cd8:	2280      	movs	r2, #128	; 0x80
 8005cda:	0212      	lsls	r2, r2, #8
 8005cdc:	411a      	asrs	r2, r3
 8005cde:	420a      	tst	r2, r1
 8005ce0:	d0f5      	beq.n	8005cce <DisplayPortsDir+0x46>
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 8005ce2:	4f1d      	ldr	r7, [pc, #116]	; (8005d58 <DisplayPortsDir+0xd0>)
 8005ce4:	0023      	movs	r3, r4
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	491f      	ldr	r1, [pc, #124]	; (8005d68 <DisplayPortsDir+0xe0>)
 8005cea:	0038      	movs	r0, r7
 8005cec:	f00c fada 	bl	80122a4 <siprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005cf0:	0038      	movs	r0, r7
 8005cf2:	f7fa fa11 	bl	8000118 <strlen>
 8005cf6:	b282      	uxth	r2, r0
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	425b      	negs	r3, r3
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	3333      	adds	r3, #51	; 0x33
 8005d00:	0039      	movs	r1, r7
 8005d02:	9803      	ldr	r0, [sp, #12]
 8005d04:	f008 fa4e 	bl	800e1a4 <writePxMutex>
 8005d08:	e7e1      	b.n	8005cce <DisplayPortsDir+0x46>
	for (uint8_t i=1 ; i<=N ; i++) 
 8005d0a:	4643      	mov	r3, r8
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	4698      	mov	r8, r3
 8005d12:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <DisplayPortsDir+0xd8>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	4543      	cmp	r3, r8
 8005d18:	d304      	bcc.n	8005d24 <DisplayPortsDir+0x9c>
{
 8005d1a:	2300      	movs	r3, #0
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8005d1c:	4642      	mov	r2, r8
 8005d1e:	1e55      	subs	r5, r2, #1
 8005d20:	006d      	lsls	r5, r5, #1
 8005d22:	e7d7      	b.n	8005cd4 <DisplayPortsDir+0x4c>
	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 8005d24:	4c0c      	ldr	r4, [pc, #48]	; (8005d58 <DisplayPortsDir+0xd0>)
 8005d26:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <DisplayPortsDir+0xe4>)
 8005d28:	0022      	movs	r2, r4
 8005d2a:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005d2c:	c223      	stmia	r2!, {r0, r1, r5}
 8005d2e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005d30:	c223      	stmia	r2!, {r0, r1, r5}
 8005d32:	cb03      	ldmia	r3!, {r0, r1}
 8005d34:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005d36:	0020      	movs	r0, r4
 8005d38:	f7fa f9ee 	bl	8000118 <strlen>
 8005d3c:	b282      	uxth	r2, r0
 8005d3e:	2301      	movs	r3, #1
 8005d40:	425b      	negs	r3, r3
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	3333      	adds	r3, #51	; 0x33
 8005d46:	0021      	movs	r1, r4
 8005d48:	9803      	ldr	r0, [sp, #12]
 8005d4a:	f008 fa2b 	bl	800e1a4 <writePxMutex>
}
 8005d4e:	b004      	add	sp, #16
 8005d50:	bc04      	pop	{r2}
 8005d52:	4690      	mov	r8, r2
 8005d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	20000bf0 	.word	0x20000bf0
 8005d5c:	0801688c 	.word	0x0801688c
 8005d60:	2000001c 	.word	0x2000001c
 8005d64:	200005e0 	.word	0x200005e0
 8005d68:	080168a8 	.word	0x080168a8
 8005d6c:	080168bc 	.word	0x080168bc

08005d70 <DisplayModuleStatus>:
{
 8005d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d72:	46d6      	mov	lr, sl
 8005d74:	b500      	push	{lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	9003      	str	r0, [sp, #12]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8005d7a:	f008 fbff 	bl	800e57c <FreeRTOS_CLIGetOutputBuffer>
 8005d7e:	0004      	movs	r4, r0
	strcpy( (char *) pcOutputString, "");
 8005d80:	2300      	movs	r3, #0
 8005d82:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 8005d84:	4b8d      	ldr	r3, [pc, #564]	; (8005fbc <DisplayModuleStatus+0x24c>)
 8005d86:	781a      	ldrb	r2, [r3, #0]
 8005d88:	4d8d      	ldr	r5, [pc, #564]	; (8005fc0 <DisplayModuleStatus+0x250>)
 8005d8a:	498e      	ldr	r1, [pc, #568]	; (8005fc4 <DisplayModuleStatus+0x254>)
 8005d8c:	0028      	movs	r0, r5
 8005d8e:	f00c fa89 	bl	80122a4 <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8005d92:	0029      	movs	r1, r5
 8005d94:	0020      	movs	r0, r4
 8005d96:	f00c faa5 	bl	80122e4 <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 8005d9a:	4b8b      	ldr	r3, [pc, #556]	; (8005fc8 <DisplayModuleStatus+0x258>)
 8005d9c:	781a      	ldrb	r2, [r3, #0]
 8005d9e:	498b      	ldr	r1, [pc, #556]	; (8005fcc <DisplayModuleStatus+0x25c>)
 8005da0:	0028      	movs	r0, r5
 8005da2:	f00c fa7f 	bl	80122a4 <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8005da6:	0029      	movs	r1, r5
 8005da8:	0020      	movs	r0, r4
 8005daa:	f00c fa9b 	bl	80122e4 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor, _firmMinor, _firmPatch);
 8005dae:	2301      	movs	r3, #1
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	2200      	movs	r2, #0
 8005db6:	4986      	ldr	r1, [pc, #536]	; (8005fd0 <DisplayModuleStatus+0x260>)
 8005db8:	0028      	movs	r0, r5
 8005dba:	f00c fa73 	bl	80122a4 <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8005dbe:	0029      	movs	r1, r5
 8005dc0:	0020      	movs	r0, r4
 8005dc2:	f00c fa8f 	bl	80122e4 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 8005dc6:	4a83      	ldr	r2, [pc, #524]	; (8005fd4 <DisplayModuleStatus+0x264>)
 8005dc8:	4983      	ldr	r1, [pc, #524]	; (8005fd8 <DisplayModuleStatus+0x268>)
 8005dca:	0028      	movs	r0, r5
 8005dcc:	f00c fa6a 	bl	80122a4 <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8005dd0:	0029      	movs	r1, r5
 8005dd2:	0020      	movs	r0, r4
 8005dd4:	f00c fa86 	bl	80122e4 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 8005dd8:	4a80      	ldr	r2, [pc, #512]	; (8005fdc <DisplayModuleStatus+0x26c>)
 8005dda:	4981      	ldr	r1, [pc, #516]	; (8005fe0 <DisplayModuleStatus+0x270>)
 8005ddc:	0028      	movs	r0, r5
 8005dde:	f00c fa61 	bl	80122a4 <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);	
 8005de2:	0029      	movs	r1, r5
 8005de4:	0020      	movs	r0, r4
 8005de6:	f00c fa7d 	bl	80122e4 <strcat>
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 8005dea:	4b7e      	ldr	r3, [pc, #504]	; (8005fe4 <DisplayModuleStatus+0x274>)
 8005dec:	002a      	movs	r2, r5
 8005dee:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005df0:	c243      	stmia	r2!, {r0, r1, r6}
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	6011      	str	r1, [r2, #0]
 8005df6:	8899      	ldrh	r1, [r3, #4]
 8005df8:	8091      	strh	r1, [r2, #4]
 8005dfa:	799b      	ldrb	r3, [r3, #6]
 8005dfc:	7193      	strb	r3, [r2, #6]
	strcat( (char *) pcOutputString, pcUserMessage);
 8005dfe:	0029      	movs	r1, r5
 8005e00:	0020      	movs	r0, r4
 8005e02:	f00c fa6f 	bl	80122e4 <strcat>
 8005e06:	2701      	movs	r7, #1
		sprintf(pcUserMessage, "P%d: ", i);
 8005e08:	4d6d      	ldr	r5, [pc, #436]	; (8005fc0 <DisplayModuleStatus+0x250>)
		switch (portStatus[i])
 8005e0a:	4b77      	ldr	r3, [pc, #476]	; (8005fe8 <DisplayModuleStatus+0x278>)
 8005e0c:	469a      	mov	sl, r3
 8005e0e:	e00e      	b.n	8005e2e <DisplayModuleStatus+0xbe>
						sprintf(pcUserMessage, "Free\n\r"); break;
 8005e10:	4b6b      	ldr	r3, [pc, #428]	; (8005fc0 <DisplayModuleStatus+0x250>)
 8005e12:	4a76      	ldr	r2, [pc, #472]	; (8005fec <DisplayModuleStatus+0x27c>)
 8005e14:	6811      	ldr	r1, [r2, #0]
 8005e16:	6019      	str	r1, [r3, #0]
 8005e18:	8891      	ldrh	r1, [r2, #4]
 8005e1a:	8099      	strh	r1, [r3, #4]
 8005e1c:	7992      	ldrb	r2, [r2, #6]
 8005e1e:	719a      	strb	r2, [r3, #6]
		strcat( (char *) pcOutputString, pcUserMessage);
 8005e20:	4967      	ldr	r1, [pc, #412]	; (8005fc0 <DisplayModuleStatus+0x250>)
 8005e22:	0020      	movs	r0, r4
 8005e24:	f00c fa5e 	bl	80122e4 <strcat>
 8005e28:	3701      	adds	r7, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8005e2a:	2f07      	cmp	r7, #7
 8005e2c:	d039      	beq.n	8005ea2 <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage, "P%d: ", i);
 8005e2e:	003a      	movs	r2, r7
 8005e30:	496f      	ldr	r1, [pc, #444]	; (8005ff0 <DisplayModuleStatus+0x280>)
 8005e32:	0028      	movs	r0, r5
 8005e34:	f00c fa36 	bl	80122a4 <siprintf>
		strcat( (char *) pcOutputString, pcUserMessage);
 8005e38:	0029      	movs	r1, r5
 8005e3a:	0020      	movs	r0, r4
 8005e3c:	f00c fa52 	bl	80122e4 <strcat>
		switch (portStatus[i])
 8005e40:	4653      	mov	r3, sl
 8005e42:	5cfb      	ldrb	r3, [r7, r3]
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d8eb      	bhi.n	8005e20 <DisplayModuleStatus+0xb0>
 8005e48:	4653      	mov	r3, sl
 8005e4a:	5cfb      	ldrb	r3, [r7, r3]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4a69      	ldr	r2, [pc, #420]	; (8005ff4 <DisplayModuleStatus+0x284>)
 8005e50:	58d3      	ldr	r3, [r2, r3]
 8005e52:	469f      	mov	pc, r3
						sprintf(pcUserMessage, "Receiving messages\n\r"); break;
 8005e54:	495a      	ldr	r1, [pc, #360]	; (8005fc0 <DisplayModuleStatus+0x250>)
 8005e56:	4b68      	ldr	r3, [pc, #416]	; (8005ff8 <DisplayModuleStatus+0x288>)
 8005e58:	000a      	movs	r2, r1
 8005e5a:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005e5c:	c243      	stmia	r2!, {r0, r1, r6}
 8005e5e:	cb03      	ldmia	r3!, {r0, r1}
 8005e60:	c203      	stmia	r2!, {r0, r1}
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	7013      	strb	r3, [r2, #0]
 8005e66:	e7db      	b.n	8005e20 <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Streaming\n\r"); break;
 8005e68:	4a55      	ldr	r2, [pc, #340]	; (8005fc0 <DisplayModuleStatus+0x250>)
 8005e6a:	4b64      	ldr	r3, [pc, #400]	; (8005ffc <DisplayModuleStatus+0x28c>)
 8005e6c:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005e6e:	c243      	stmia	r2!, {r0, r1, r6}
 8005e70:	e7d6      	b.n	8005e20 <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Receiving user commands\n\r"); break;
 8005e72:	4953      	ldr	r1, [pc, #332]	; (8005fc0 <DisplayModuleStatus+0x250>)
 8005e74:	4b62      	ldr	r3, [pc, #392]	; (8006000 <DisplayModuleStatus+0x290>)
 8005e76:	000a      	movs	r2, r1
 8005e78:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005e7a:	c243      	stmia	r2!, {r0, r1, r6}
 8005e7c:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005e7e:	c243      	stmia	r2!, {r0, r1, r6}
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	8013      	strh	r3, [r2, #0]
 8005e84:	e7cc      	b.n	8005e20 <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
 8005e86:	494e      	ldr	r1, [pc, #312]	; (8005fc0 <DisplayModuleStatus+0x250>)
 8005e88:	4b5e      	ldr	r3, [pc, #376]	; (8006004 <DisplayModuleStatus+0x294>)
 8005e8a:	000a      	movs	r2, r1
 8005e8c:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005e8e:	c243      	stmia	r2!, {r0, r1, r6}
 8005e90:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005e92:	c243      	stmia	r2!, {r0, r1, r6}
 8005e94:	6819      	ldr	r1, [r3, #0]
 8005e96:	6011      	str	r1, [r2, #0]
 8005e98:	8899      	ldrh	r1, [r3, #4]
 8005e9a:	8091      	strh	r1, [r2, #4]
 8005e9c:	799b      	ldrb	r3, [r3, #6]
 8005e9e:	7193      	strb	r3, [r2, #6]
 8005ea0:	e7be      	b.n	8005e20 <DisplayModuleStatus+0xb0>
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 8005ea2:	4947      	ldr	r1, [pc, #284]	; (8005fc0 <DisplayModuleStatus+0x250>)
 8005ea4:	4b58      	ldr	r3, [pc, #352]	; (8006008 <DisplayModuleStatus+0x298>)
 8005ea6:	000a      	movs	r2, r1
 8005ea8:	cb61      	ldmia	r3!, {r0, r5, r6}
 8005eaa:	c261      	stmia	r2!, {r0, r5, r6}
 8005eac:	cb61      	ldmia	r3!, {r0, r5, r6}
 8005eae:	c261      	stmia	r2!, {r0, r5, r6}
	strcat( (char *) pcOutputString, pcUserMessage);	
 8005eb0:	0020      	movs	r0, r4
 8005eb2:	f00c fa17 	bl	80122e4 <strcat>
 8005eb6:	4f55      	ldr	r7, [pc, #340]	; (800600c <DisplayModuleStatus+0x29c>)
 8005eb8:	2601      	movs	r6, #1
 8005eba:	e00d      	b.n	8005ed8 <DisplayModuleStatus+0x168>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 8005ebc:	4d40      	ldr	r5, [pc, #256]	; (8005fc0 <DisplayModuleStatus+0x250>)
 8005ebe:	0032      	movs	r2, r6
 8005ec0:	4953      	ldr	r1, [pc, #332]	; (8006010 <DisplayModuleStatus+0x2a0>)
 8005ec2:	0028      	movs	r0, r5
 8005ec4:	f00c f9ee 	bl	80122a4 <siprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8005ec8:	0029      	movs	r1, r5
 8005eca:	0020      	movs	r0, r4
 8005ecc:	f00c fa0a 	bl	80122e4 <strcat>
 8005ed0:	3601      	adds	r6, #1
 8005ed2:	3738      	adds	r7, #56	; 0x38
	for (char i=1 ; i<=6 ; i++) {
 8005ed4:	2e07      	cmp	r6, #7
 8005ed6:	d018      	beq.n	8005f0a <DisplayModuleStatus+0x19a>
		if (streamDMA[i-1].Instance == 0) {
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0ee      	beq.n	8005ebc <DisplayModuleStatus+0x14c>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 8005ede:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ee0:	f005 fc72 	bl	800b7c8 <GetPort>
 8005ee4:	0005      	movs	r5, r0
 8005ee6:	00b3      	lsls	r3, r6, #2
 8005ee8:	3b04      	subs	r3, #4
 8005eea:	4a4a      	ldr	r2, [pc, #296]	; (8006014 <DisplayModuleStatus+0x2a4>)
 8005eec:	58d0      	ldr	r0, [r2, r3]
 8005eee:	f005 fc6b 	bl	800b7c8 <GetPort>
 8005ef2:	9000      	str	r0, [sp, #0]
 8005ef4:	002b      	movs	r3, r5
 8005ef6:	0032      	movs	r2, r6
 8005ef8:	4947      	ldr	r1, [pc, #284]	; (8006018 <DisplayModuleStatus+0x2a8>)
 8005efa:	4831      	ldr	r0, [pc, #196]	; (8005fc0 <DisplayModuleStatus+0x250>)
 8005efc:	f00c f9d2 	bl	80122a4 <siprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8005f00:	492f      	ldr	r1, [pc, #188]	; (8005fc0 <DisplayModuleStatus+0x250>)
 8005f02:	0020      	movs	r0, r4
 8005f04:	f00c f9ee 	bl	80122e4 <strcat>
 8005f08:	e7e2      	b.n	8005ed0 <DisplayModuleStatus+0x160>
	strcat( (char *) pcOutputString, "\n\r");
 8005f0a:	0020      	movs	r0, r4
 8005f0c:	f7fa f904 	bl	8000118 <strlen>
 8005f10:	1820      	adds	r0, r4, r0
 8005f12:	2203      	movs	r2, #3
 8005f14:	4941      	ldr	r1, [pc, #260]	; (800601c <DisplayModuleStatus+0x2ac>)
 8005f16:	f00c f8be 	bl	8012096 <memcpy>
	strcat( (char *) pcOutputString, "\n\rThese ports are reversed: ");
 8005f1a:	0020      	movs	r0, r4
 8005f1c:	f7fa f8fc 	bl	8000118 <strlen>
 8005f20:	1820      	adds	r0, r4, r0
 8005f22:	221d      	movs	r2, #29
 8005f24:	493e      	ldr	r1, [pc, #248]	; (8006020 <DisplayModuleStatus+0x2b0>)
 8005f26:	f00c f8b6 	bl	8012096 <memcpy>
	temp = strlen( (char *) pcOutputString);
 8005f2a:	0020      	movs	r0, r4
 8005f2c:	f7fa f8f4 	bl	8000118 <strlen>
 8005f30:	4682      	mov	sl, r0
 8005f32:	2200      	movs	r2, #0
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8005f34:	4f3b      	ldr	r7, [pc, #236]	; (8006024 <DisplayModuleStatus+0x2b4>)
 8005f36:	4e21      	ldr	r6, [pc, #132]	; (8005fbc <DisplayModuleStatus+0x24c>)
 8005f38:	e002      	b.n	8005f40 <DisplayModuleStatus+0x1d0>
 8005f3a:	002a      	movs	r2, r5
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8005f3c:	2d06      	cmp	r5, #6
 8005f3e:	d013      	beq.n	8005f68 <DisplayModuleStatus+0x1f8>
 8005f40:	1c55      	adds	r5, r2, #1
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8005f42:	7833      	ldrb	r3, [r6, #0]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	5bd9      	ldrh	r1, [r3, r7]
 8005f4a:	2380      	movs	r3, #128	; 0x80
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	4113      	asrs	r3, r2
 8005f50:	420b      	tst	r3, r1
 8005f52:	d0f2      	beq.n	8005f3a <DisplayModuleStatus+0x1ca>
			sprintf(pcUserMessage, "P%d ", p);
 8005f54:	002a      	movs	r2, r5
 8005f56:	4934      	ldr	r1, [pc, #208]	; (8006028 <DisplayModuleStatus+0x2b8>)
 8005f58:	4819      	ldr	r0, [pc, #100]	; (8005fc0 <DisplayModuleStatus+0x250>)
 8005f5a:	f00c f9a3 	bl	80122a4 <siprintf>
			strcat( (char *) pcOutputString, pcUserMessage);
 8005f5e:	4918      	ldr	r1, [pc, #96]	; (8005fc0 <DisplayModuleStatus+0x250>)
 8005f60:	0020      	movs	r0, r4
 8005f62:	f00c f9bf 	bl	80122e4 <strcat>
 8005f66:	e7e8      	b.n	8005f3a <DisplayModuleStatus+0x1ca>
	if (temp == strlen( (char *) pcOutputString)) {				/* All ports are normal */
 8005f68:	0020      	movs	r0, r4
 8005f6a:	f7fa f8d5 	bl	8000118 <strlen>
 8005f6e:	4653      	mov	r3, sl
 8005f70:	041b      	lsls	r3, r3, #16
 8005f72:	0c1b      	lsrs	r3, r3, #16
 8005f74:	4298      	cmp	r0, r3
 8005f76:	d00e      	beq.n	8005f96 <DisplayModuleStatus+0x226>
	strcat( (char *) pcOutputString, "\n\r");
 8005f78:	0020      	movs	r0, r4
 8005f7a:	f7fa f8cd 	bl	8000118 <strlen>
 8005f7e:	1820      	adds	r0, r4, r0
 8005f80:	2203      	movs	r2, #3
 8005f82:	4926      	ldr	r1, [pc, #152]	; (800601c <DisplayModuleStatus+0x2ac>)
 8005f84:	f00c f887 	bl	8012096 <memcpy>
	if (port)
 8005f88:	9b03      	ldr	r3, [sp, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d109      	bne.n	8005fa2 <DisplayModuleStatus+0x232>
}
 8005f8e:	b004      	add	sp, #16
 8005f90:	bc04      	pop	{r2}
 8005f92:	4692      	mov	sl, r2
 8005f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat( (char *) pcOutputString, "None");
 8005f96:	1820      	adds	r0, r4, r0
 8005f98:	2205      	movs	r2, #5
 8005f9a:	4924      	ldr	r1, [pc, #144]	; (800602c <DisplayModuleStatus+0x2bc>)
 8005f9c:	f00c f87b 	bl	8012096 <memcpy>
 8005fa0:	e7ea      	b.n	8005f78 <DisplayModuleStatus+0x208>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 8005fa2:	0020      	movs	r0, r4
 8005fa4:	f7fa f8b8 	bl	8000118 <strlen>
 8005fa8:	b282      	uxth	r2, r0
 8005faa:	2301      	movs	r3, #1
 8005fac:	425b      	negs	r3, r3
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	3333      	adds	r3, #51	; 0x33
 8005fb2:	0021      	movs	r1, r4
 8005fb4:	9803      	ldr	r0, [sp, #12]
 8005fb6:	f008 f8f5 	bl	800e1a4 <writePxMutex>
}
 8005fba:	e7e8      	b.n	8005f8e <DisplayModuleStatus+0x21e>
 8005fbc:	20000b90 	.word	0x20000b90
 8005fc0:	20000bf0 	.word	0x20000bf0
 8005fc4:	080166e8 	.word	0x080166e8
 8005fc8:	200003b7 	.word	0x200003b7
 8005fcc:	08016704 	.word	0x08016704
 8005fd0:	08016720 	.word	0x08016720
 8005fd4:	0801692c 	.word	0x0801692c
 8005fd8:	08016740 	.word	0x08016740
 8005fdc:	08016938 	.word	0x08016938
 8005fe0:	08016758 	.word	0x08016758
 8005fe4:	08016774 	.word	0x08016774
 8005fe8:	20000c40 	.word	0x20000c40
 8005fec:	08016790 	.word	0x08016790
 8005ff0:	08016788 	.word	0x08016788
 8005ff4:	08016550 	.word	0x08016550
 8005ff8:	08016798 	.word	0x08016798
 8005ffc:	080167b0 	.word	0x080167b0
 8006000:	080167bc 	.word	0x080167bc
 8006004:	080167d8 	.word	0x080167d8
 8006008:	080167f8 	.word	0x080167f8
 800600c:	20001284 	.word	0x20001284
 8006010:	08016810 	.word	0x08016810
 8006014:	20000fec 	.word	0x20000fec
 8006018:	0801682c 	.word	0x0801682c
 800601c:	08016784 	.word	0x08016784
 8006020:	0801685c 	.word	0x0801685c
 8006024:	200005e0 	.word	0x200005e0
 8006028:	0801687c 	.word	0x0801687c
 800602c:	08016884 	.word	0x08016884

08006030 <statusCommand>:
{
 8006030:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 8006032:	2800      	cmp	r0, #0
 8006034:	d101      	bne.n	800603a <statusCommand+0xa>
 8006036:	b672      	cpsid	i
 8006038:	e7fe      	b.n	8006038 <statusCommand+0x8>
	DisplayModuleStatus(0);
 800603a:	2000      	movs	r0, #0
 800603c:	f7ff fe98 	bl	8005d70 <DisplayModuleStatus>
}
 8006040:	2000      	movs	r0, #0
 8006042:	bd10      	pop	{r4, pc}

08006044 <GetID>:
{
 8006044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006046:	46c6      	mov	lr, r8
 8006048:	b500      	push	{lr}
 800604a:	0005      	movs	r5, r0
	if(!strcmp(string, "me"))							/* Check keywords */
 800604c:	4929      	ldr	r1, [pc, #164]	; (80060f4 <GetID+0xb0>)
 800604e:	f7fa f859 	bl	8000104 <strcmp>
 8006052:	2800      	cmp	r0, #0
 8006054:	d010      	beq.n	8006078 <GetID+0x34>
	else if(!strcmp(string, "all"))							
 8006056:	4928      	ldr	r1, [pc, #160]	; (80060f8 <GetID+0xb4>)
 8006058:	0028      	movs	r0, r5
 800605a:	f7fa f853 	bl	8000104 <strcmp>
 800605e:	2800      	cmp	r0, #0
 8006060:	d045      	beq.n	80060ee <GetID+0xaa>
	else if (string[0] == '#') 						/* Check IDs */
 8006062:	782b      	ldrb	r3, [r5, #0]
 8006064:	4698      	mov	r8, r3
 8006066:	2b23      	cmp	r3, #35	; 0x23
 8006068:	d00b      	beq.n	8006082 <GetID+0x3e>
		for (i=0 ; i<N ; i++) {
 800606a:	4b24      	ldr	r3, [pc, #144]	; (80060fc <GetID+0xb8>)
 800606c:	781f      	ldrb	r7, [r3, #0]
 800606e:	2f00      	cmp	r7, #0
 8006070:	d02a      	beq.n	80060c8 <GetID+0x84>
 8006072:	4e23      	ldr	r6, [pc, #140]	; (8006100 <GetID+0xbc>)
 8006074:	2400      	movs	r4, #0
 8006076:	e01c      	b.n	80060b2 <GetID+0x6e>
		return myID;
 8006078:	4b22      	ldr	r3, [pc, #136]	; (8006104 <GetID+0xc0>)
 800607a:	7818      	ldrb	r0, [r3, #0]
}
 800607c:	bc04      	pop	{r2}
 800607e:	4690      	mov	r8, r2
 8006080:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id = atol(string+1);
 8006082:	1c68      	adds	r0, r5, #1
 8006084:	f00b ff95 	bl	8011fb2 <atol>
 8006088:	b2c3      	uxtb	r3, r0
		if (id > 0 && id <= N)
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <GetID+0x52>
 800608e:	4a1b      	ldr	r2, [pc, #108]	; (80060fc <GetID+0xb8>)
 8006090:	7812      	ldrb	r2, [r2, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d206      	bcs.n	80060a4 <GetID+0x60>
		else if (id == myID)
 8006096:	4a1b      	ldr	r2, [pc, #108]	; (8006104 <GetID+0xc0>)
 8006098:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;				
 800609a:	2066      	movs	r0, #102	; 0x66
		else if (id == myID)
 800609c:	429a      	cmp	r2, r3
 800609e:	d1ed      	bne.n	800607c <GetID+0x38>
			return myID;
 80060a0:	b210      	sxth	r0, r2
 80060a2:	e7eb      	b.n	800607c <GetID+0x38>
			return id;
 80060a4:	b218      	sxth	r0, r3
 80060a6:	e7e9      	b.n	800607c <GetID+0x38>
		for (i=0 ; i<N ; i++) {
 80060a8:	3401      	adds	r4, #1
 80060aa:	b2e4      	uxtb	r4, r4
 80060ac:	360a      	adds	r6, #10
 80060ae:	42bc      	cmp	r4, r7
 80060b0:	d00a      	beq.n	80060c8 <GetID+0x84>
			if(!strcmp(string, moduleAlias[i]) && (*string != 0))	return (i);	
 80060b2:	0031      	movs	r1, r6
 80060b4:	0028      	movs	r0, r5
 80060b6:	f7fa f825 	bl	8000104 <strcmp>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d1f4      	bne.n	80060a8 <GetID+0x64>
 80060be:	4643      	mov	r3, r8
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0f1      	beq.n	80060a8 <GetID+0x64>
 80060c4:	b220      	sxth	r0, r4
 80060c6:	e7d9      	b.n	800607c <GetID+0x38>
 80060c8:	4f0f      	ldr	r7, [pc, #60]	; (8006108 <GetID+0xc4>)
		for (i=0 ; i<N ; i++) {
 80060ca:	2600      	movs	r6, #0
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 80060cc:	0039      	movs	r1, r7
 80060ce:	0028      	movs	r0, r5
 80060d0:	f7fa f818 	bl	8000104 <strcmp>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d005      	beq.n	80060e4 <GetID+0xa0>
 80060d8:	3601      	adds	r6, #1
 80060da:	370a      	adds	r7, #10
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 80060dc:	2e0a      	cmp	r6, #10
 80060de:	d1f5      	bne.n	80060cc <GetID+0x88>
		return BOS_ERR_WrongName;			
 80060e0:	2064      	movs	r0, #100	; 0x64
 80060e2:	e7cb      	b.n	800607c <GetID+0x38>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 80060e4:	0234      	lsls	r4, r6, #8
 80060e6:	20fe      	movs	r0, #254	; 0xfe
 80060e8:	4320      	orrs	r0, r4
 80060ea:	b200      	sxth	r0, r0
 80060ec:	e7c6      	b.n	800607c <GetID+0x38>
		return BOS_BROADCAST;				
 80060ee:	20ff      	movs	r0, #255	; 0xff
 80060f0:	e7c4      	b.n	800607c <GetID+0x38>
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	08016910 	.word	0x08016910
 80060f8:	08016d0c 	.word	0x08016d0c
 80060fc:	2000001c 	.word	0x2000001c
 8006100:	20000a8c 	.word	0x20000a8c
 8006104:	20000b90 	.word	0x20000b90
 8006108:	2000086c 	.word	0x2000086c

0800610c <NameModule>:
{
 800610c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610e:	b083      	sub	sp, #12
 8006110:	9001      	str	r0, [sp, #4]
 8006112:	000d      	movs	r5, r1
 8006114:	4c2a      	ldr	r4, [pc, #168]	; (80061c0 <NameModule+0xb4>)
 8006116:	0027      	movs	r7, r4
 8006118:	3710      	adds	r7, #16
		if (!strcmp(alias, BOSkeywords[i]))	
 800611a:	0021      	movs	r1, r4
 800611c:	0028      	movs	r0, r5
 800611e:	f7f9 fff1 	bl	8000104 <strcmp>
 8006122:	2800      	cmp	r0, #0
 8006124:	d043      	beq.n	80061ae <NameModule+0xa2>
 8006126:	3404      	adds	r4, #4
	for(i=0 ; i<NumOfKeywords ; i++)
 8006128:	42bc      	cmp	r4, r7
 800612a:	d1f6      	bne.n	800611a <NameModule+0xe>
	for(i=1 ; i<N ; i++)
 800612c:	4b25      	ldr	r3, [pc, #148]	; (80061c4 <NameModule+0xb8>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d90f      	bls.n	8006154 <NameModule+0x48>
 8006134:	4c24      	ldr	r4, [pc, #144]	; (80061c8 <NameModule+0xbc>)
 8006136:	009f      	lsls	r7, r3, #2
 8006138:	18ff      	adds	r7, r7, r3
 800613a:	007f      	lsls	r7, r7, #1
 800613c:	0023      	movs	r3, r4
 800613e:	3b0a      	subs	r3, #10
 8006140:	18ff      	adds	r7, r7, r3
		if (!strcmp(alias, moduleAlias[i]))	
 8006142:	0021      	movs	r1, r4
 8006144:	0028      	movs	r0, r5
 8006146:	f7f9 ffdd 	bl	8000104 <strcmp>
 800614a:	2800      	cmp	r0, #0
 800614c:	d031      	beq.n	80061b2 <NameModule+0xa6>
 800614e:	340a      	adds	r4, #10
	for(i=1 ; i<N ; i++)
 8006150:	42bc      	cmp	r4, r7
 8006152:	d1f6      	bne.n	8006142 <NameModule+0x36>
 8006154:	4c1d      	ldr	r4, [pc, #116]	; (80061cc <NameModule+0xc0>)
 8006156:	0027      	movs	r7, r4
 8006158:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 800615a:	0021      	movs	r1, r4
 800615c:	0028      	movs	r0, r5
 800615e:	f7f9 ffd1 	bl	8000104 <strcmp>
 8006162:	2800      	cmp	r0, #0
 8006164:	d028      	beq.n	80061b8 <NameModule+0xac>
 8006166:	340a      	adds	r4, #10
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8006168:	42bc      	cmp	r4, r7
 800616a:	d1f6      	bne.n	800615a <NameModule+0x4e>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800616c:	4c18      	ldr	r4, [pc, #96]	; (80061d0 <NameModule+0xc4>)
 800616e:	4b19      	ldr	r3, [pc, #100]	; (80061d4 <NameModule+0xc8>)
 8006170:	601c      	str	r4, [r3, #0]
 8006172:	001e      	movs	r6, r3
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8006178:	0038      	movs	r0, r7
 800617a:	f7f9 ffcd 	bl	8000118 <strlen>
 800617e:	0002      	movs	r2, r0
		if( !strncmp(alias, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8006180:	0039      	movs	r1, r7
 8006182:	0028      	movs	r0, r5
 8006184:	f00c f8d2 	bl	801232c <strncmp>
 8006188:	2800      	cmp	r0, #0
 800618a:	d017      	beq.n	80061bc <NameModule+0xb0>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800618c:	6864      	ldr	r4, [r4, #4]
 800618e:	6034      	str	r4, [r6, #0]
 8006190:	2c00      	cmp	r4, #0
 8006192:	d1ef      	bne.n	8006174 <NameModule+0x68>
	strcpy(moduleAlias[module], alias);
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	0098      	lsls	r0, r3, #2
 8006198:	469c      	mov	ip, r3
 800619a:	4460      	add	r0, ip
 800619c:	0040      	lsls	r0, r0, #1
 800619e:	4e0e      	ldr	r6, [pc, #56]	; (80061d8 <NameModule+0xcc>)
 80061a0:	1980      	adds	r0, r0, r6
 80061a2:	0029      	movs	r1, r5
 80061a4:	f00c f8ba 	bl	801231c <strcpy>
	result = SaveEEalias();
 80061a8:	f7fd fd7c 	bl	8003ca4 <SaveEEalias>
	return result;
 80061ac:	e002      	b.n	80061b4 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 80061ae:	2006      	movs	r0, #6
 80061b0:	e000      	b.n	80061b4 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 80061b2:	2007      	movs	r0, #7
}
 80061b4:	b003      	add	sp, #12
 80061b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 80061b8:	2007      	movs	r0, #7
 80061ba:	e7fb      	b.n	80061b4 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 80061bc:	2008      	movs	r0, #8
 80061be:	e7f9      	b.n	80061b4 <NameModule+0xa8>
 80061c0:	080166d8 	.word	0x080166d8
 80061c4:	2000001c 	.word	0x2000001c
 80061c8:	20000a96 	.word	0x20000a96
 80061cc:	2000086c 	.word	0x2000086c
 80061d0:	20000054 	.word	0x20000054
 80061d4:	20000c68 	.word	0x20000c68
 80061d8:	20000a8c 	.word	0x20000a8c

080061dc <nameCommand>:
{
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	0004      	movs	r4, r0
 80061e0:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 80061e2:	2c00      	cmp	r4, #0
 80061e4:	d101      	bne.n	80061ea <nameCommand+0xe>
 80061e6:	b672      	cpsid	i
 80061e8:	e7fe      	b.n	80061e8 <nameCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80061ea:	4d1c      	ldr	r5, [pc, #112]	; (800625c <nameCommand+0x80>)
 80061ec:	002a      	movs	r2, r5
 80061ee:	2101      	movs	r1, #1
 80061f0:	f008 f9c8 	bl	800e584 <FreeRTOS_CLIGetParameter>
 80061f4:	0001      	movs	r1, r0
 80061f6:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <nameCommand+0x84>)
 80061f8:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 80061fa:	682b      	ldr	r3, [r5, #0]
 80061fc:	2b09      	cmp	r3, #9
 80061fe:	dd01      	ble.n	8006204 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 8006200:	2300      	movs	r3, #0
 8006202:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 8006204:	4b17      	ldr	r3, [pc, #92]	; (8006264 <nameCommand+0x88>)
 8006206:	7818      	ldrb	r0, [r3, #0]
 8006208:	f7ff ff80 	bl	800610c <NameModule>
	if (result == BOS_OK)
 800620c:	2800      	cmp	r0, #0
 800620e:	d007      	beq.n	8006220 <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 8006210:	2806      	cmp	r0, #6
 8006212:	d00e      	beq.n	8006232 <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 8006214:	2807      	cmp	r0, #7
 8006216:	d013      	beq.n	8006240 <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 8006218:	2808      	cmp	r0, #8
 800621a:	d018      	beq.n	800624e <nameCommand+0x72>
}
 800621c:	2000      	movs	r0, #0
 800621e:	bd70      	pop	{r4, r5, r6, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 8006220:	4b10      	ldr	r3, [pc, #64]	; (8006264 <nameCommand+0x88>)
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	4b0e      	ldr	r3, [pc, #56]	; (8006260 <nameCommand+0x84>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	490f      	ldr	r1, [pc, #60]	; (8006268 <nameCommand+0x8c>)
 800622a:	0020      	movs	r0, r4
 800622c:	f00c f83a 	bl	80122a4 <siprintf>
 8006230:	e7f4      	b.n	800621c <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 8006232:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <nameCommand+0x84>)
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	490d      	ldr	r1, [pc, #52]	; (800626c <nameCommand+0x90>)
 8006238:	0020      	movs	r0, r4
 800623a:	f00c f833 	bl	80122a4 <siprintf>
 800623e:	e7ed      	b.n	800621c <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 8006240:	4b07      	ldr	r3, [pc, #28]	; (8006260 <nameCommand+0x84>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	490a      	ldr	r1, [pc, #40]	; (8006270 <nameCommand+0x94>)
 8006246:	0020      	movs	r0, r4
 8006248:	f00c f82c 	bl	80122a4 <siprintf>
 800624c:	e7e6      	b.n	800621c <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 800624e:	4b04      	ldr	r3, [pc, #16]	; (8006260 <nameCommand+0x84>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4908      	ldr	r1, [pc, #32]	; (8006274 <nameCommand+0x98>)
 8006254:	0020      	movs	r0, r4
 8006256:	f00c f825 	bl	80122a4 <siprintf>
 800625a:	e7df      	b.n	800621c <nameCommand+0x40>
 800625c:	20000cfc 	.word	0x20000cfc
 8006260:	20000bc8 	.word	0x20000bc8
 8006264:	20000b90 	.word	0x20000b90
 8006268:	0801706c 	.word	0x0801706c
 800626c:	08017084 	.word	0x08017084
 8006270:	080170c4 	.word	0x080170c4
 8006274:	080170f8 	.word	0x080170f8

08006278 <AddModuleToGroup>:
{
 8006278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627a:	46c6      	mov	lr, r8
 800627c:	b500      	push	{lr}
 800627e:	0007      	movs	r7, r0
 8006280:	000e      	movs	r6, r1
 8006282:	4d3a      	ldr	r5, [pc, #232]	; (800636c <AddModuleToGroup+0xf4>)
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8006284:	2400      	movs	r4, #0
		if (!strcmp(group, groupAlias[i]))	
 8006286:	0029      	movs	r1, r5
 8006288:	0030      	movs	r0, r6
 800628a:	f7f9 ff3b 	bl	8000104 <strcmp>
 800628e:	2800      	cmp	r0, #0
 8006290:	d050      	beq.n	8006334 <AddModuleToGroup+0xbc>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8006292:	3401      	adds	r4, #1
 8006294:	350a      	adds	r5, #10
 8006296:	2c0a      	cmp	r4, #10
 8006298:	d1f5      	bne.n	8006286 <AddModuleToGroup+0xe>
 800629a:	4c35      	ldr	r4, [pc, #212]	; (8006370 <AddModuleToGroup+0xf8>)
 800629c:	0025      	movs	r5, r4
 800629e:	3510      	adds	r5, #16
		if (!strcmp(group, BOSkeywords[j]))	
 80062a0:	0021      	movs	r1, r4
 80062a2:	0030      	movs	r0, r6
 80062a4:	f7f9 ff2e 	bl	8000104 <strcmp>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d058      	beq.n	800635e <AddModuleToGroup+0xe6>
 80062ac:	3404      	adds	r4, #4
	for(j=0 ; j<NumOfKeywords ; j++)
 80062ae:	42ac      	cmp	r4, r5
 80062b0:	d1f6      	bne.n	80062a0 <AddModuleToGroup+0x28>
	for(j=1 ; j<N ; j++)
 80062b2:	4b30      	ldr	r3, [pc, #192]	; (8006374 <AddModuleToGroup+0xfc>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d90f      	bls.n	80062da <AddModuleToGroup+0x62>
 80062ba:	4c2f      	ldr	r4, [pc, #188]	; (8006378 <AddModuleToGroup+0x100>)
 80062bc:	009d      	lsls	r5, r3, #2
 80062be:	18ed      	adds	r5, r5, r3
 80062c0:	006d      	lsls	r5, r5, #1
 80062c2:	0023      	movs	r3, r4
 80062c4:	3b0a      	subs	r3, #10
 80062c6:	18ed      	adds	r5, r5, r3
		if (!strcmp(group, moduleAlias[j]))	
 80062c8:	0021      	movs	r1, r4
 80062ca:	0030      	movs	r0, r6
 80062cc:	f7f9 ff1a 	bl	8000104 <strcmp>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d046      	beq.n	8006362 <AddModuleToGroup+0xea>
 80062d4:	340a      	adds	r4, #10
	for(j=1 ; j<N ; j++)
 80062d6:	42ac      	cmp	r4, r5
 80062d8:	d1f6      	bne.n	80062c8 <AddModuleToGroup+0x50>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80062da:	4c28      	ldr	r4, [pc, #160]	; (800637c <AddModuleToGroup+0x104>)
 80062dc:	4b28      	ldr	r3, [pc, #160]	; (8006380 <AddModuleToGroup+0x108>)
 80062de:	601c      	str	r4, [r3, #0]
 80062e0:	4698      	mov	r8, r3
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 80062e6:	0028      	movs	r0, r5
 80062e8:	f7f9 ff16 	bl	8000118 <strlen>
 80062ec:	0002      	movs	r2, r0
		if( !strncmp(group, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 80062ee:	0029      	movs	r1, r5
 80062f0:	0030      	movs	r0, r6
 80062f2:	f00c f81b 	bl	801232c <strncmp>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d035      	beq.n	8006366 <AddModuleToGroup+0xee>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80062fa:	6864      	ldr	r4, [r4, #4]
 80062fc:	4643      	mov	r3, r8
 80062fe:	601c      	str	r4, [r3, #0]
 8006300:	2c00      	cmp	r4, #0
 8006302:	d1ee      	bne.n	80062e2 <AddModuleToGroup+0x6a>
		if (!groupAlias[i][0]) {	
 8006304:	4b19      	ldr	r3, [pc, #100]	; (800636c <AddModuleToGroup+0xf4>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01e      	beq.n	800634a <AddModuleToGroup+0xd2>
 800630c:	4b17      	ldr	r3, [pc, #92]	; (800636c <AddModuleToGroup+0xf4>)
 800630e:	330a      	adds	r3, #10
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8006310:	3401      	adds	r4, #1
		if (!groupAlias[i][0]) {	
 8006312:	781a      	ldrb	r2, [r3, #0]
 8006314:	2a00      	cmp	r2, #0
 8006316:	d019      	beq.n	800634c <AddModuleToGroup+0xd4>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8006318:	3401      	adds	r4, #1
 800631a:	330a      	adds	r3, #10
 800631c:	2c0a      	cmp	r4, #10
 800631e:	d1f8      	bne.n	8006312 <AddModuleToGroup+0x9a>
	groupModules[module-1] |= (0x0001<<i);
 8006320:	3f01      	subs	r7, #1
 8006322:	4918      	ldr	r1, [pc, #96]	; (8006384 <AddModuleToGroup+0x10c>)
 8006324:	007f      	lsls	r7, r7, #1
 8006326:	2201      	movs	r2, #1
 8006328:	40a2      	lsls	r2, r4
 800632a:	5a7b      	ldrh	r3, [r7, r1]
 800632c:	4313      	orrs	r3, r2
 800632e:	527b      	strh	r3, [r7, r1]
	return result;
 8006330:	2000      	movs	r0, #0
 8006332:	e007      	b.n	8006344 <AddModuleToGroup+0xcc>
			groupModules[module-1] |= (0x0001<<i);	
 8006334:	3f01      	subs	r7, #1
 8006336:	4913      	ldr	r1, [pc, #76]	; (8006384 <AddModuleToGroup+0x10c>)
 8006338:	007f      	lsls	r7, r7, #1
 800633a:	2201      	movs	r2, #1
 800633c:	40a2      	lsls	r2, r4
 800633e:	5a7b      	ldrh	r3, [r7, r1]
 8006340:	4313      	orrs	r3, r2
 8006342:	527b      	strh	r3, [r7, r1]
}
 8006344:	bc04      	pop	{r2}
 8006346:	4690      	mov	r8, r2
 8006348:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i=0 ; i<MaxNumOfGroups ; i++)
 800634a:	2400      	movs	r4, #0
			strcpy(groupAlias[i], group);	
 800634c:	00a0      	lsls	r0, r4, #2
 800634e:	1900      	adds	r0, r0, r4
 8006350:	0040      	lsls	r0, r0, #1
 8006352:	4b06      	ldr	r3, [pc, #24]	; (800636c <AddModuleToGroup+0xf4>)
 8006354:	1818      	adds	r0, r3, r0
 8006356:	0031      	movs	r1, r6
 8006358:	f00b ffe0 	bl	801231c <strcpy>
			break;
 800635c:	e7e0      	b.n	8006320 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 800635e:	2006      	movs	r0, #6
 8006360:	e7f0      	b.n	8006344 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 8006362:	2007      	movs	r0, #7
 8006364:	e7ee      	b.n	8006344 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 8006366:	2008      	movs	r0, #8
 8006368:	e7ec      	b.n	8006344 <AddModuleToGroup+0xcc>
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	2000086c 	.word	0x2000086c
 8006370:	080166d8 	.word	0x080166d8
 8006374:	2000001c 	.word	0x2000001c
 8006378:	20000a96 	.word	0x20000a96
 800637c:	20000054 	.word	0x20000054
 8006380:	20000c6c 	.word	0x20000c6c
 8006384:	200008d0 	.word	0x200008d0

08006388 <groupCommand>:
{
 8006388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800638a:	46ce      	mov	lr, r9
 800638c:	b500      	push	{lr}
 800638e:	b090      	sub	sp, #64	; 0x40
 8006390:	0004      	movs	r4, r0
 8006392:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 8006394:	2227      	movs	r2, #39	; 0x27
 8006396:	2100      	movs	r1, #0
 8006398:	a806      	add	r0, sp, #24
 800639a:	f00b fe85 	bl	80120a8 <memset>
 800639e:	220a      	movs	r2, #10
 80063a0:	2100      	movs	r1, #0
 80063a2:	a803      	add	r0, sp, #12
 80063a4:	f00b fe80 	bl	80120a8 <memset>
	configASSERT( pcWriteBuffer );
 80063a8:	2c00      	cmp	r4, #0
 80063aa:	d101      	bne.n	80063b0 <groupCommand+0x28>
 80063ac:	b672      	cpsid	i
 80063ae:	e7fe      	b.n	80063ae <groupCommand+0x26>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80063b0:	4d54      	ldr	r5, [pc, #336]	; (8006504 <groupCommand+0x17c>)
 80063b2:	002a      	movs	r2, r5
 80063b4:	2101      	movs	r1, #1
 80063b6:	9801      	ldr	r0, [sp, #4]
 80063b8:	f008 f8e4 	bl	800e584 <FreeRTOS_CLIGetParameter>
 80063bc:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 80063be:	682a      	ldr	r2, [r5, #0]
 80063c0:	a803      	add	r0, sp, #12
 80063c2:	f00b ffc4 	bl	801234e <strncpy>
 80063c6:	4d50      	ldr	r5, [pc, #320]	; (8006508 <groupCommand+0x180>)
 80063c8:	002f      	movs	r7, r5
 80063ca:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 80063cc:	0029      	movs	r1, r5
 80063ce:	a803      	add	r0, sp, #12
 80063d0:	f7f9 fe98 	bl	8000104 <strcmp>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d016      	beq.n	8006406 <groupCommand+0x7e>
 80063d8:	350a      	adds	r5, #10
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 80063da:	42bd      	cmp	r5, r7
 80063dc:	d1f6      	bne.n	80063cc <groupCommand+0x44>
	type = 1;
 80063de:	2701      	movs	r7, #1
	count = 2;
 80063e0:	4b4a      	ldr	r3, [pc, #296]	; (800650c <groupCommand+0x184>)
 80063e2:	2202      	movs	r2, #2
 80063e4:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 80063e6:	3208      	adds	r2, #8
 80063e8:	4949      	ldr	r1, [pc, #292]	; (8006510 <groupCommand+0x188>)
 80063ea:	0020      	movs	r0, r4
 80063ec:	f00b fe53 	bl	8012096 <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 80063f0:	4a48      	ldr	r2, [pc, #288]	; (8006514 <groupCommand+0x18c>)
 80063f2:	2102      	movs	r1, #2
 80063f4:	9801      	ldr	r0, [sp, #4]
 80063f6:	f008 f8c5 	bl	800e584 <FreeRTOS_CLIGetParameter>
 80063fa:	4b47      	ldr	r3, [pc, #284]	; (8006518 <groupCommand+0x190>)
 80063fc:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 80063fe:	2800      	cmp	r0, #0
 8006400:	d061      	beq.n	80064c6 <groupCommand+0x13e>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 8006402:	4e44      	ldr	r6, [pc, #272]	; (8006514 <groupCommand+0x18c>)
 8006404:	e011      	b.n	800642a <groupCommand+0xa2>
			type = 0; break;
 8006406:	2700      	movs	r7, #0
 8006408:	e7ea      	b.n	80063e0 <groupCommand+0x58>
		strcat( ( char * ) pcWriteBuffer, module);
 800640a:	a906      	add	r1, sp, #24
 800640c:	0020      	movs	r0, r4
 800640e:	f00b ff69 	bl	80122e4 <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 8006412:	1c69      	adds	r1, r5, #1
 8006414:	b249      	sxtb	r1, r1
 8006416:	4b3d      	ldr	r3, [pc, #244]	; (800650c <groupCommand+0x184>)
 8006418:	7019      	strb	r1, [r3, #0]
 800641a:	4a3e      	ldr	r2, [pc, #248]	; (8006514 <groupCommand+0x18c>)
 800641c:	9801      	ldr	r0, [sp, #4]
 800641e:	f008 f8b1 	bl	800e584 <FreeRTOS_CLIGetParameter>
 8006422:	4b3d      	ldr	r3, [pc, #244]	; (8006518 <groupCommand+0x190>)
 8006424:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 8006426:	2800      	cmp	r0, #0
 8006428:	d04d      	beq.n	80064c6 <groupCommand+0x13e>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 800642a:	6833      	ldr	r3, [r6, #0]
 800642c:	4699      	mov	r9, r3
 800642e:	ad06      	add	r5, sp, #24
 8006430:	001a      	movs	r2, r3
 8006432:	0001      	movs	r1, r0
 8006434:	0028      	movs	r0, r5
 8006436:	f00b ff8a 	bl	801234e <strncpy>
 800643a:	2300      	movs	r3, #0
 800643c:	464a      	mov	r2, r9
 800643e:	54ab      	strb	r3, [r5, r2]
		modID = GetID(module);
 8006440:	0028      	movs	r0, r5
 8006442:	f7ff fdff 	bl	8006044 <GetID>
		if (modID < 0)	break;
 8006446:	2800      	cmp	r0, #0
 8006448:	db37      	blt.n	80064ba <groupCommand+0x132>
		result = AddModuleToGroup(modID, alias);
 800644a:	b2c0      	uxtb	r0, r0
 800644c:	a903      	add	r1, sp, #12
 800644e:	f7ff ff13 	bl	8006278 <AddModuleToGroup>
		if (result != BOS_OK)	break;
 8006452:	2800      	cmp	r0, #0
 8006454:	d146      	bne.n	80064e4 <groupCommand+0x15c>
		if (count > 2)
 8006456:	4b2d      	ldr	r3, [pc, #180]	; (800650c <groupCommand+0x184>)
 8006458:	2500      	movs	r5, #0
 800645a:	575d      	ldrsb	r5, [r3, r5]
 800645c:	2d02      	cmp	r5, #2
 800645e:	ddd4      	ble.n	800640a <groupCommand+0x82>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 8006460:	0020      	movs	r0, r4
 8006462:	f7f9 fe59 	bl	8000118 <strlen>
 8006466:	1820      	adds	r0, r4, r0
 8006468:	2203      	movs	r2, #3
 800646a:	492c      	ldr	r1, [pc, #176]	; (800651c <groupCommand+0x194>)
 800646c:	f00b fe13 	bl	8012096 <memcpy>
 8006470:	e7cb      	b.n	800640a <groupCommand+0x82>
	else if (result == BOS_OK && type) {
 8006472:	2f00      	cmp	r7, #0
 8006474:	d009      	beq.n	800648a <groupCommand+0x102>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 8006476:	aa03      	add	r2, sp, #12
 8006478:	4929      	ldr	r1, [pc, #164]	; (8006520 <groupCommand+0x198>)
 800647a:	a806      	add	r0, sp, #24
 800647c:	f00b ff12 	bl	80122a4 <siprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 8006480:	a906      	add	r1, sp, #24
 8006482:	0020      	movs	r0, r4
 8006484:	f00b ff2e 	bl	80122e4 <strcat>
 8006488:	e027      	b.n	80064da <groupCommand+0x152>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 800648a:	aa03      	add	r2, sp, #12
 800648c:	4925      	ldr	r1, [pc, #148]	; (8006524 <groupCommand+0x19c>)
 800648e:	a806      	add	r0, sp, #24
 8006490:	f00b ff08 	bl	80122a4 <siprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 8006494:	a906      	add	r1, sp, #24
 8006496:	0020      	movs	r0, r4
 8006498:	f00b ff24 	bl	80122e4 <strcat>
 800649c:	e01d      	b.n	80064da <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 800649e:	aa03      	add	r2, sp, #12
 80064a0:	4921      	ldr	r1, [pc, #132]	; (8006528 <groupCommand+0x1a0>)
 80064a2:	0020      	movs	r0, r4
 80064a4:	f00b fefe 	bl	80122a4 <siprintf>
 80064a8:	e017      	b.n	80064da <groupCommand+0x152>
	else if (result == BOS_ERR_ExistingCmd)
 80064aa:	2808      	cmp	r0, #8
 80064ac:	d115      	bne.n	80064da <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 80064ae:	aa03      	add	r2, sp, #12
 80064b0:	491e      	ldr	r1, [pc, #120]	; (800652c <groupCommand+0x1a4>)
 80064b2:	0020      	movs	r0, r4
 80064b4:	f00b fef6 	bl	80122a4 <siprintf>
 80064b8:	e00f      	b.n	80064da <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 80064ba:	aa06      	add	r2, sp, #24
 80064bc:	491c      	ldr	r1, [pc, #112]	; (8006530 <groupCommand+0x1a8>)
 80064be:	0020      	movs	r0, r4
 80064c0:	f00b fef0 	bl	80122a4 <siprintf>
	return pdFALSE;
 80064c4:	e009      	b.n	80064da <groupCommand+0x152>
	else if (count == 2)
 80064c6:	4b11      	ldr	r3, [pc, #68]	; (800650c <groupCommand+0x184>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d1d0      	bne.n	8006472 <groupCommand+0xea>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 80064d0:	aa03      	add	r2, sp, #12
 80064d2:	4918      	ldr	r1, [pc, #96]	; (8006534 <groupCommand+0x1ac>)
 80064d4:	0020      	movs	r0, r4
 80064d6:	f00b fee5 	bl	80122a4 <siprintf>
}
 80064da:	2000      	movs	r0, #0
 80064dc:	b010      	add	sp, #64	; 0x40
 80064de:	bc04      	pop	{r2}
 80064e0:	4691      	mov	r9, r2
 80064e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (count == 2)
 80064e4:	4b09      	ldr	r3, [pc, #36]	; (800650c <groupCommand+0x184>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d0f0      	beq.n	80064d0 <groupCommand+0x148>
	} else if (result == BOS_ERR_Keyword)
 80064ee:	2806      	cmp	r0, #6
 80064f0:	d0d5      	beq.n	800649e <groupCommand+0x116>
	else if (result == BOS_ERR_ExistingAlias)
 80064f2:	2807      	cmp	r0, #7
 80064f4:	d1d9      	bne.n	80064aa <groupCommand+0x122>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 80064f6:	aa03      	add	r2, sp, #12
 80064f8:	490f      	ldr	r1, [pc, #60]	; (8006538 <groupCommand+0x1b0>)
 80064fa:	0020      	movs	r0, r4
 80064fc:	f00b fed2 	bl	80122a4 <siprintf>
 8006500:	e7eb      	b.n	80064da <groupCommand+0x152>
 8006502:	46c0      	nop			; (mov r8, r8)
 8006504:	20000d00 	.word	0x20000d00
 8006508:	2000086c 	.word	0x2000086c
 800650c:	2000085e 	.word	0x2000085e
 8006510:	08016df8 	.word	0x08016df8
 8006514:	20000cf4 	.word	0x20000cf4
 8006518:	20000bc4 	.word	0x20000bc4
 800651c:	08016e04 	.word	0x08016e04
 8006520:	08016e34 	.word	0x08016e34
 8006524:	08016e50 	.word	0x08016e50
 8006528:	08017084 	.word	0x08017084
 800652c:	080170f8 	.word	0x080170f8
 8006530:	08016e70 	.word	0x08016e70
 8006534:	08016e08 	.word	0x08016e08
 8006538:	080170c4 	.word	0x080170c4

0800653c <ReadPortsDir>:
{
 800653c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800653e:	46de      	mov	lr, fp
 8006540:	464f      	mov	r7, r9
 8006542:	4646      	mov	r6, r8
 8006544:	b5c0      	push	{r6, r7, lr}
 8006546:	b082      	sub	sp, #8
	for (uint8_t i=1 ; i<=N ; i++) 
 8006548:	4b25      	ldr	r3, [pc, #148]	; (80065e0 <ReadPortsDir+0xa4>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d03d      	beq.n	80065cc <ReadPortsDir+0x90>
 8006550:	2501      	movs	r5, #1
	BOS_Status result = BOS_OK; 
 8006552:	2300      	movs	r3, #0
 8006554:	9301      	str	r3, [sp, #4]
		if (i != myID) {
 8006556:	4b23      	ldr	r3, [pc, #140]	; (80065e4 <ReadPortsDir+0xa8>)
 8006558:	469b      	mov	fp, r3
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 800655a:	4b23      	ldr	r3, [pc, #140]	; (80065e8 <ReadPortsDir+0xac>)
 800655c:	4698      	mov	r8, r3
 800655e:	e022      	b.n	80065a6 <ReadPortsDir+0x6a>
 8006560:	2600      	movs	r6, #0
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8006562:	2401      	movs	r4, #1
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8006564:	2780      	movs	r7, #128	; 0x80
 8006566:	023f      	lsls	r7, r7, #8
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8006568:	1e6b      	subs	r3, r5, #1
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	4699      	mov	r9, r3
 800656e:	e004      	b.n	800657a <ReadPortsDir+0x3e>
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8006570:	3401      	adds	r4, #1
 8006572:	b2e4      	uxtb	r4, r4
 8006574:	3601      	adds	r6, #1
 8006576:	2c07      	cmp	r4, #7
 8006578:	d00f      	beq.n	800659a <ReadPortsDir+0x5e>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800657a:	0020      	movs	r0, r4
 800657c:	f7fe f82e 	bl	80045dc <GetUart>
 8006580:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006582:	42bb      	cmp	r3, r7
 8006584:	d1f4      	bne.n	8006570 <ReadPortsDir+0x34>
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8006586:	4643      	mov	r3, r8
 8006588:	464a      	mov	r2, r9
 800658a:	5ad3      	ldrh	r3, [r2, r3]
 800658c:	003a      	movs	r2, r7
 800658e:	4132      	asrs	r2, r6
 8006590:	4313      	orrs	r3, r2
 8006592:	4642      	mov	r2, r8
 8006594:	4649      	mov	r1, r9
 8006596:	528b      	strh	r3, [r1, r2]
 8006598:	e7ea      	b.n	8006570 <ReadPortsDir+0x34>
	for (uint8_t i=1 ; i<=N ; i++) 
 800659a:	3501      	adds	r5, #1
 800659c:	b2ed      	uxtb	r5, r5
 800659e:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <ReadPortsDir+0xa4>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	42ab      	cmp	r3, r5
 80065a4:	d314      	bcc.n	80065d0 <ReadPortsDir+0x94>
		if (i != myID) {
 80065a6:	465b      	mov	r3, fp
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	42ab      	cmp	r3, r5
 80065ac:	d0d8      	beq.n	8006560 <ReadPortsDir+0x24>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 80065ae:	2200      	movs	r2, #0
 80065b0:	2113      	movs	r1, #19
 80065b2:	0028      	movs	r0, r5
 80065b4:	f7ff fa14 	bl	80059e0 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80065b8:	2032      	movs	r0, #50	; 0x32
 80065ba:	f7ff f80f 	bl	80055dc <StartMilliDelay>
			if (responseStatus != BOS_OK)	{
 80065be:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <ReadPortsDir+0xb0>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0e9      	beq.n	800659a <ReadPortsDir+0x5e>
				result = BOS_ERR_NoResponse;
 80065c6:	2302      	movs	r3, #2
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	e7e6      	b.n	800659a <ReadPortsDir+0x5e>
	BOS_Status result = BOS_OK; 
 80065cc:	2300      	movs	r3, #0
 80065ce:	9301      	str	r3, [sp, #4]
}
 80065d0:	9801      	ldr	r0, [sp, #4]
 80065d2:	b002      	add	sp, #8
 80065d4:	bc1c      	pop	{r2, r3, r4}
 80065d6:	4690      	mov	r8, r2
 80065d8:	4699      	mov	r9, r3
 80065da:	46a3      	mov	fp, r4
 80065dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	2000001c 	.word	0x2000001c
 80065e4:	20000b90 	.word	0x20000b90
 80065e8:	200005e0 	.word	0x200005e0
 80065ec:	20000c98 	.word	0x20000c98

080065f0 <infoCommand>:
{
 80065f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065f2:	b083      	sub	sp, #12
 80065f4:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80065f6:	d039      	beq.n	800666c <infoCommand+0x7c>
	if (N > 1)
 80065f8:	4b26      	ldr	r3, [pc, #152]	; (8006694 <infoCommand+0xa4>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 80065fc:	2500      	movs	r5, #0
	if (N > 1)
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d902      	bls.n	8006608 <infoCommand+0x18>
		result = ReadPortsDir();
 8006602:	f7ff ff9b 	bl	800653c <ReadPortsDir>
 8006606:	0005      	movs	r5, r0
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 8006608:	4b22      	ldr	r3, [pc, #136]	; (8006694 <infoCommand+0xa4>)
 800660a:	781a      	ldrb	r2, [r3, #0]
 800660c:	4922      	ldr	r1, [pc, #136]	; (8006698 <infoCommand+0xa8>)
 800660e:	0020      	movs	r0, r4
 8006610:	f00b fe48 	bl	80122a4 <siprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006614:	0020      	movs	r0, r4
 8006616:	f7f9 fd7f 	bl	8000118 <strlen>
 800661a:	b282      	uxth	r2, r0
 800661c:	4e1f      	ldr	r6, [pc, #124]	; (800669c <infoCommand+0xac>)
 800661e:	7830      	ldrb	r0, [r6, #0]
 8006620:	2701      	movs	r7, #1
 8006622:	427f      	negs	r7, r7
 8006624:	9700      	str	r7, [sp, #0]
 8006626:	2332      	movs	r3, #50	; 0x32
 8006628:	0021      	movs	r1, r4
 800662a:	f007 fdbb 	bl	800e1a4 <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 800662e:	2213      	movs	r2, #19
 8006630:	491b      	ldr	r1, [pc, #108]	; (80066a0 <infoCommand+0xb0>)
 8006632:	0020      	movs	r0, r4
 8006634:	f00b fd2f 	bl	8012096 <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006638:	0020      	movs	r0, r4
 800663a:	f7f9 fd6d 	bl	8000118 <strlen>
 800663e:	b282      	uxth	r2, r0
 8006640:	7830      	ldrb	r0, [r6, #0]
 8006642:	9700      	str	r7, [sp, #0]
 8006644:	2332      	movs	r3, #50	; 0x32
 8006646:	0021      	movs	r1, r4
 8006648:	f007 fdac 	bl	800e1a4 <writePxMutex>
	DisplayTopology(PcPort);
 800664c:	7830      	ldrb	r0, [r6, #0]
 800664e:	f7ff fa4b 	bl	8005ae8 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006652:	7830      	ldrb	r0, [r6, #0]
 8006654:	f7ff fb18 	bl	8005c88 <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 8006658:	2d02      	cmp	r5, #2
 800665a:	d009      	beq.n	8006670 <infoCommand+0x80>
	sprintf( ( char * ) pcWriteBuffer, " ");
 800665c:	2202      	movs	r2, #2
 800665e:	4911      	ldr	r1, [pc, #68]	; (80066a4 <infoCommand+0xb4>)
 8006660:	0020      	movs	r0, r4
 8006662:	f00b fd18 	bl	8012096 <memcpy>
}
 8006666:	2000      	movs	r0, #0
 8006668:	b003      	add	sp, #12
 800666a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 800666c:	b672      	cpsid	i
 800666e:	e7fe      	b.n	800666e <infoCommand+0x7e>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 8006670:	2244      	movs	r2, #68	; 0x44
 8006672:	490d      	ldr	r1, [pc, #52]	; (80066a8 <infoCommand+0xb8>)
 8006674:	0020      	movs	r0, r4
 8006676:	f00b fd0e 	bl	8012096 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 800667a:	0020      	movs	r0, r4
 800667c:	f7f9 fd4c 	bl	8000118 <strlen>
 8006680:	b282      	uxth	r2, r0
 8006682:	4b06      	ldr	r3, [pc, #24]	; (800669c <infoCommand+0xac>)
 8006684:	7818      	ldrb	r0, [r3, #0]
 8006686:	003b      	movs	r3, r7
 8006688:	9700      	str	r7, [sp, #0]
 800668a:	3333      	adds	r3, #51	; 0x33
 800668c:	0021      	movs	r1, r4
 800668e:	f007 fd89 	bl	800e1a4 <writePxMutex>
 8006692:	e7e3      	b.n	800665c <infoCommand+0x6c>
 8006694:	2000001c 	.word	0x2000001c
 8006698:	08016f24 	.word	0x08016f24
 800669c:	200003b7 	.word	0x200003b7
 80066a0:	08016f40 	.word	0x08016f40
 80066a4:	0801678c 	.word	0x0801678c
 80066a8:	08016f54 	.word	0x08016f54

080066ac <UpdateMyPortsDir>:
{
 80066ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ae:	46c6      	mov	lr, r8
 80066b0:	b500      	push	{lr}
 80066b2:	2500      	movs	r5, #0
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80066b4:	2401      	movs	r4, #1
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 80066b6:	4b12      	ldr	r3, [pc, #72]	; (8006700 <UpdateMyPortsDir+0x54>)
 80066b8:	4698      	mov	r8, r3
 80066ba:	4f12      	ldr	r7, [pc, #72]	; (8006704 <UpdateMyPortsDir+0x58>)
 80066bc:	2680      	movs	r6, #128	; 0x80
 80066be:	0236      	lsls	r6, r6, #8
 80066c0:	e00a      	b.n	80066d8 <UpdateMyPortsDir+0x2c>
			SwapUartPins(GetUart(p), REVERSED);					
 80066c2:	0020      	movs	r0, r4
 80066c4:	f7fd ff8a 	bl	80045dc <GetUart>
 80066c8:	2101      	movs	r1, #1
 80066ca:	f7ff f861 	bl	8005790 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80066ce:	3401      	adds	r4, #1
 80066d0:	b2e4      	uxtb	r4, r4
 80066d2:	3501      	adds	r5, #1
 80066d4:	2c07      	cmp	r4, #7
 80066d6:	d00f      	beq.n	80066f8 <UpdateMyPortsDir+0x4c>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 80066d8:	783b      	ldrb	r3, [r7, #0]
 80066da:	3b01      	subs	r3, #1
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	4642      	mov	r2, r8
 80066e0:	5a9b      	ldrh	r3, [r3, r2]
 80066e2:	0032      	movs	r2, r6
 80066e4:	412a      	asrs	r2, r5
 80066e6:	421a      	tst	r2, r3
 80066e8:	d1eb      	bne.n	80066c2 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p), NORMAL);
 80066ea:	0020      	movs	r0, r4
 80066ec:	f7fd ff76 	bl	80045dc <GetUart>
 80066f0:	2100      	movs	r1, #0
 80066f2:	f7ff f84d 	bl	8005790 <SwapUartPins>
 80066f6:	e7ea      	b.n	80066ce <UpdateMyPortsDir+0x22>
}
 80066f8:	2000      	movs	r0, #0
 80066fa:	bc04      	pop	{r2}
 80066fc:	4690      	mov	r8, r2
 80066fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006700:	200005e0 	.word	0x200005e0
 8006704:	20000b90 	.word	0x20000b90

08006708 <StartScastDMAStream>:
{
 8006708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800670a:	46de      	mov	lr, fp
 800670c:	4657      	mov	r7, sl
 800670e:	464e      	mov	r6, r9
 8006710:	4645      	mov	r5, r8
 8006712:	b5e0      	push	{r5, r6, r7, lr}
 8006714:	b091      	sub	sp, #68	; 0x44
 8006716:	900f      	str	r0, [sp, #60]	; 0x3c
 8006718:	000c      	movs	r4, r1
 800671a:	9106      	str	r1, [sp, #24]
 800671c:	0015      	movs	r5, r2
 800671e:	920e      	str	r2, [sp, #56]	; 0x38
 8006720:	001e      	movs	r6, r3
 8006722:	ab1a      	add	r3, sp, #104	; 0x68
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	4698      	mov	r8, r3
 8006728:	ab1d      	add	r3, sp, #116	; 0x74
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	469a      	mov	sl, r3
	if (srcM != myID) {
 800672e:	4b5a      	ldr	r3, [pc, #360]	; (8006898 <StartScastDMAStream+0x190>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	428b      	cmp	r3, r1
 8006734:	d11e      	bne.n	8006774 <StartScastDMAStream+0x6c>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8006736:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006738:	0e1b      	lsrs	r3, r3, #24
 800673a:	9308      	str	r3, [sp, #32]
			messageParams[1] = (uint8_t) (count >> 16);
 800673c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800673e:	0c1b      	lsrs	r3, r3, #16
 8006740:	b2db      	uxtb	r3, r3
 8006742:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] = (uint8_t) (count >> 8);
 8006744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006746:	0a1b      	lsrs	r3, r3, #8
 8006748:	b2db      	uxtb	r3, r3
 800674a:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 800674c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800674e:	0e1b      	lsrs	r3, r3, #24
 8006750:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] = (uint8_t) (timeout >> 16);
 8006752:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006754:	0c1b      	lsrs	r3, r3, #16
 8006756:	b2db      	uxtb	r3, r3
 8006758:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] = (uint8_t) (timeout >> 8);
 800675a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800675c:	0a1b      	lsrs	r3, r3, #8
 800675e:	b2db      	uxtb	r3, r3
 8006760:	469b      	mov	fp, r3
 8006762:	4b4e      	ldr	r3, [pc, #312]	; (800689c <StartScastDMAStream+0x194>)
 8006764:	1e5d      	subs	r5, r3, #1
 8006766:	2218      	movs	r2, #24
 8006768:	4691      	mov	r9, r2
 800676a:	4499      	add	r9, r3
				temp2 = dstP;
 800676c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800676e:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8006770:	4c4b      	ldr	r4, [pc, #300]	; (80068a0 <StartScastDMAStream+0x198>)
 8006772:	e05c      	b.n	800682e <StartScastDMAStream+0x126>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8006774:	4b4a      	ldr	r3, [pc, #296]	; (80068a0 <StartScastDMAStream+0x198>)
 8006776:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006778:	0e12      	lsrs	r2, r2, #24
 800677a:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 800677c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800677e:	0c12      	lsrs	r2, r2, #16
 8006780:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 8006782:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006784:	0a12      	lsrs	r2, r2, #8
 8006786:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 8006788:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800678a:	70da      	strb	r2, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 800678c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800678e:	0e12      	lsrs	r2, r2, #24
 8006790:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 8006792:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006794:	0c12      	lsrs	r2, r2, #16
 8006796:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 8006798:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800679a:	0a12      	lsrs	r2, r2, #8
 800679c:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 800679e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80067a0:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 80067a2:	4642      	mov	r2, r8
 80067a4:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 80067a6:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 80067a8:	729e      	strb	r6, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 80067aa:	72dd      	strb	r5, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 80067ac:	4652      	mov	r2, sl
 80067ae:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 80067b0:	220d      	movs	r2, #13
 80067b2:	211c      	movs	r1, #28
 80067b4:	0020      	movs	r0, r4
 80067b6:	f7ff f913 	bl	80059e0 <SendMessageToModule>
}
 80067ba:	2000      	movs	r0, #0
 80067bc:	b011      	add	sp, #68	; 0x44
 80067be:	bc3c      	pop	{r2, r3, r4, r5}
 80067c0:	4690      	mov	r8, r2
 80067c2:	4699      	mov	r9, r3
 80067c4:	46a2      	mov	sl, r4
 80067c6:	46ab      	mov	fp, r5
 80067c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 = FindRoute(route[i], srcM);
 80067ca:	9906      	ldr	r1, [sp, #24]
 80067cc:	f7ff f818 	bl	8005800 <FindRoute>
 80067d0:	9007      	str	r0, [sp, #28]
			FindRoute(srcM, dstM);
 80067d2:	0031      	movs	r1, r6
 80067d4:	9806      	ldr	r0, [sp, #24]
 80067d6:	f7ff f813 	bl	8005800 <FindRoute>
			if (route[i] == dstM) {
 80067da:	7878      	ldrb	r0, [r7, #1]
				temp2 = dstP;
 80067dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if (route[i] == dstM) {
 80067de:	42b0      	cmp	r0, r6
 80067e0:	d134      	bne.n	800684c <StartScastDMAStream+0x144>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80067e2:	9a08      	ldr	r2, [sp, #32]
 80067e4:	7022      	strb	r2, [r4, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 80067e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067e8:	7062      	strb	r2, [r4, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 80067ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ec:	70a2      	strb	r2, [r4, #2]
			messageParams[3] = (uint8_t) count;
 80067ee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80067f0:	70e2      	strb	r2, [r4, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 80067f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067f4:	7122      	strb	r2, [r4, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 80067f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067f8:	7162      	strb	r2, [r4, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 80067fa:	465a      	mov	r2, fp
 80067fc:	71a2      	strb	r2, [r4, #6]
			messageParams[7] = (uint8_t) timeout;
 80067fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006800:	71e2      	strb	r2, [r4, #7]
			messageParams[8] = direction;										/* Stream direction */
 8006802:	4642      	mov	r2, r8
 8006804:	7222      	strb	r2, [r4, #8]
			messageParams[9] = temp1;												/* Source port */
 8006806:	9a07      	ldr	r2, [sp, #28]
 8006808:	7262      	strb	r2, [r4, #9]
			messageParams[10] = temp2;											/* destination port */
 800680a:	72a3      	strb	r3, [r4, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 800680c:	4653      	mov	r3, sl
 800680e:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM, dstM);
 8006810:	0031      	movs	r1, r6
 8006812:	9806      	ldr	r0, [sp, #24]
 8006814:	f7fe fff4 	bl	8005800 <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 8006818:	7878      	ldrb	r0, [r7, #1]
 800681a:	220c      	movs	r2, #12
 800681c:	211b      	movs	r1, #27
 800681e:	f7ff f8df 	bl	80059e0 <SendMessageToModule>
			osDelay(10);
 8006822:	200a      	movs	r0, #10
 8006824:	f007 fd95 	bl	800e352 <osDelay>
 8006828:	3501      	adds	r5, #1
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 800682a:	454d      	cmp	r5, r9
 800682c:	d013      	beq.n	8006856 <StartScastDMAStream+0x14e>
		FindRoute(srcM, dstM);
 800682e:	0031      	movs	r1, r6
 8006830:	9806      	ldr	r0, [sp, #24]
 8006832:	f7fe ffe5 	bl	8005800 <FindRoute>
 8006836:	002f      	movs	r7, r5
		if (route[i]) 
 8006838:	7868      	ldrb	r0, [r5, #1]
 800683a:	2800      	cmp	r0, #0
 800683c:	d0f4      	beq.n	8006828 <StartScastDMAStream+0x120>
			if (route[i+1]) {
 800683e:	78a9      	ldrb	r1, [r5, #2]
 8006840:	2900      	cmp	r1, #0
 8006842:	d0c2      	beq.n	80067ca <StartScastDMAStream+0xc2>
				temp1 = FindRoute(route[i], route[i+1]);
 8006844:	f7fe ffdc 	bl	8005800 <FindRoute>
 8006848:	9007      	str	r0, [sp, #28]
 800684a:	e7c2      	b.n	80067d2 <StartScastDMAStream+0xca>
				temp2 = FindRoute(route[i], route[i-1]);
 800684c:	7839      	ldrb	r1, [r7, #0]
 800684e:	f7fe ffd7 	bl	8005800 <FindRoute>
 8006852:	0003      	movs	r3, r0
 8006854:	e7c5      	b.n	80067e2 <StartScastDMAStream+0xda>
	if (srcM == dstM)
 8006856:	9806      	ldr	r0, [sp, #24]
 8006858:	42b0      	cmp	r0, r6
 800685a:	d118      	bne.n	800688e <StartScastDMAStream+0x186>
	SetupDMAStreams(direction, count, timeout, srcP, port);
 800685c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006862:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006864:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006866:	4640      	mov	r0, r8
 8006868:	f7fd feda 	bl	8004620 <SetupDMAStreams>
	if (stored) {		
 800686c:	4653      	mov	r3, sl
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0a3      	beq.n	80067ba <StartScastDMAStream+0xb2>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 8006872:	2300      	movs	r3, #0
 8006874:	9304      	str	r3, [sp, #16]
 8006876:	9303      	str	r3, [sp, #12]
 8006878:	9302      	str	r3, [sp, #8]
 800687a:	9301      	str	r3, [sp, #4]
 800687c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006882:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006884:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006886:	4640      	mov	r0, r8
 8006888:	f7fd fae4 	bl	8003e54 <SaveEEstreams>
 800688c:	e795      	b.n	80067ba <StartScastDMAStream+0xb2>
		port = FindRoute(srcM, dstM);
 800688e:	0031      	movs	r1, r6
 8006890:	f7fe ffb6 	bl	8005800 <FindRoute>
 8006894:	900e      	str	r0, [sp, #56]	; 0x38
 8006896:	e7e1      	b.n	800685c <StartScastDMAStream+0x154>
 8006898:	20000b90 	.word	0x20000b90
 800689c:	20000c9c 	.word	0x20000c9c
 80068a0:	20000a5c 	.word	0x20000a5c

080068a4 <remoteBootloaderUpdate>:
{
 80068a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068a6:	b087      	sub	sp, #28
 80068a8:	0007      	movs	r7, r0
 80068aa:	000e      	movs	r6, r1
 80068ac:	9205      	str	r2, [sp, #20]
 80068ae:	001d      	movs	r5, r3
	myOutport = FindRoute(myID, dst);
 80068b0:	4b37      	ldr	r3, [pc, #220]	; (8006990 <remoteBootloaderUpdate+0xec>)
 80068b2:	7818      	ldrb	r0, [r3, #0]
 80068b4:	f7fe ffa4 	bl	8005800 <FindRoute>
 80068b8:	9004      	str	r0, [sp, #16]
	if (outport && dst == myID) {												/* This is a 'via port' update and I'm the last module */
 80068ba:	2d00      	cmp	r5, #0
 80068bc:	d020      	beq.n	8006900 <remoteBootloaderUpdate+0x5c>
 80068be:	4b34      	ldr	r3, [pc, #208]	; (8006990 <remoteBootloaderUpdate+0xec>)
 80068c0:	781c      	ldrb	r4, [r3, #0]
 80068c2:	42b4      	cmp	r4, r6
 80068c4:	d060      	beq.n	8006988 <remoteBootloaderUpdate+0xe4>
	if (src == myID)
 80068c6:	42bc      	cmp	r4, r7
 80068c8:	d033      	beq.n	8006932 <remoteBootloaderUpdate+0x8e>
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 80068ca:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 80068cc:	9805      	ldr	r0, [sp, #20]
 80068ce:	f7fe f891 	bl	80049f4 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 80068d2:	9804      	ldr	r0, [sp, #16]
 80068d4:	f7fe f88e 	bl	80049f4 <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 80068d8:	4b2d      	ldr	r3, [pc, #180]	; (8006990 <remoteBootloaderUpdate+0xec>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	42a3      	cmp	r3, r4
 80068de:	d047      	beq.n	8006970 <remoteBootloaderUpdate+0xcc>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, false);	
 80068e0:	4b2b      	ldr	r3, [pc, #172]	; (8006990 <remoteBootloaderUpdate+0xec>)
 80068e2:	7819      	ldrb	r1, [r3, #0]
 80068e4:	2300      	movs	r3, #0
 80068e6:	9303      	str	r3, [sp, #12]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	9302      	str	r3, [sp, #8]
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	3303      	adds	r3, #3
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	000b      	movs	r3, r1
 80068f4:	9a04      	ldr	r2, [sp, #16]
 80068f6:	9805      	ldr	r0, [sp, #20]
 80068f8:	f7ff ff06 	bl	8006708 <StartScastDMAStream>
}
 80068fc:	b007      	add	sp, #28
 80068fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfHops(dst) == 1)
 8006900:	4b24      	ldr	r3, [pc, #144]	; (8006994 <remoteBootloaderUpdate+0xf0>)
 8006902:	199b      	adds	r3, r3, r6
 8006904:	3b01      	subs	r3, #1
 8006906:	781a      	ldrb	r2, [r3, #0]
 8006908:	2a01      	cmp	r2, #1
 800690a:	d00f      	beq.n	800692c <remoteBootloaderUpdate+0x88>
			lastModule = route[NumberOfHops(dst)-1];				/* previous module = route[Number of hops - 1] */
 800690c:	4b22      	ldr	r3, [pc, #136]	; (8006998 <remoteBootloaderUpdate+0xf4>)
 800690e:	189b      	adds	r3, r3, r2
 8006910:	3b01      	subs	r3, #1
 8006912:	781c      	ldrb	r4, [r3, #0]
	if (src == myID)
 8006914:	4b1e      	ldr	r3, [pc, #120]	; (8006990 <remoteBootloaderUpdate+0xec>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	42bb      	cmp	r3, r7
 800691a:	d1d7      	bne.n	80068cc <remoteBootloaderUpdate+0x28>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800691c:	f007 fe2e 	bl	800e57c <FreeRTOS_CLIGetOutputBuffer>
 8006920:	0007      	movs	r7, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateMessage, dst);
 8006922:	0032      	movs	r2, r6
 8006924:	491d      	ldr	r1, [pc, #116]	; (800699c <remoteBootloaderUpdate+0xf8>)
 8006926:	f00b fcbd 	bl	80122a4 <siprintf>
 800692a:	e00c      	b.n	8006946 <remoteBootloaderUpdate+0xa2>
			lastModule = myID;
 800692c:	4b18      	ldr	r3, [pc, #96]	; (8006990 <remoteBootloaderUpdate+0xec>)
 800692e:	781c      	ldrb	r4, [r3, #0]
 8006930:	e7f0      	b.n	8006914 <remoteBootloaderUpdate+0x70>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8006932:	f007 fe23 	bl	800e57c <FreeRTOS_CLIGetOutputBuffer>
 8006936:	0007      	movs	r7, r0
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8006938:	2400      	movs	r4, #0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateViaPortMessage, dst, outport);
 800693a:	002b      	movs	r3, r5
 800693c:	0032      	movs	r2, r6
 800693e:	4918      	ldr	r1, [pc, #96]	; (80069a0 <remoteBootloaderUpdate+0xfc>)
 8006940:	0038      	movs	r0, r7
 8006942:	f00b fcaf 	bl	80122a4 <siprintf>
		strcat(( char * ) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 8006946:	0038      	movs	r0, r7
 8006948:	f7f9 fbe6 	bl	8000118 <strlen>
 800694c:	1838      	adds	r0, r7, r0
 800694e:	22fb      	movs	r2, #251	; 0xfb
 8006950:	4914      	ldr	r1, [pc, #80]	; (80069a4 <remoteBootloaderUpdate+0x100>)
 8006952:	f00b fba0 	bl	8012096 <memcpy>
		writePxITMutex(inport, ( char * ) pcOutputString, strlen(( char * )pcOutputString), cmd50ms);
 8006956:	0038      	movs	r0, r7
 8006958:	f7f9 fbde 	bl	8000118 <strlen>
 800695c:	b282      	uxth	r2, r0
 800695e:	2332      	movs	r3, #50	; 0x32
 8006960:	0039      	movs	r1, r7
 8006962:	9805      	ldr	r0, [sp, #20]
 8006964:	f007 fc48 	bl	800e1f8 <writePxITMutex>
		Delay_ms(100);
 8006968:	2064      	movs	r0, #100	; 0x64
 800696a:	f008 f939 	bl	800ebe0 <HAL_Delay>
 800696e:	e7ad      	b.n	80068cc <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport), REVERSED);
 8006970:	9804      	ldr	r0, [sp, #16]
 8006972:	f7fd fe33 	bl	80045dc <GetUart>
 8006976:	2101      	movs	r1, #1
 8006978:	f7fe ff0a 	bl	8005790 <SwapUartPins>
 800697c:	e7b0      	b.n	80068e0 <remoteBootloaderUpdate+0x3c>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800697e:	f007 fdfd 	bl	800e57c <FreeRTOS_CLIGetOutputBuffer>
 8006982:	0007      	movs	r7, r0
		myOutport = outport;
 8006984:	9504      	str	r5, [sp, #16]
 8006986:	e7d8      	b.n	800693a <remoteBootloaderUpdate+0x96>
	if (src == myID)
 8006988:	42bc      	cmp	r4, r7
 800698a:	d0f8      	beq.n	800697e <remoteBootloaderUpdate+0xda>
		myOutport = outport;
 800698c:	9504      	str	r5, [sp, #16]
 800698e:	e79d      	b.n	80068cc <remoteBootloaderUpdate+0x28>
 8006990:	20000b90 	.word	0x20000b90
 8006994:	20000cb8 	.word	0x20000cb8
 8006998:	20000c9c 	.word	0x20000c9c
 800699c:	080173d8 	.word	0x080173d8
 80069a0:	080172a0 	.word	0x080172a0
 80069a4:	080172dc 	.word	0x080172dc

080069a8 <bootloaderUpdateCommand>:
{
 80069a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069aa:	b085      	sub	sp, #20
 80069ac:	1e04      	subs	r4, r0, #0
 80069ae:	9203      	str	r2, [sp, #12]
	configASSERT( pcWriteBuffer );
 80069b0:	d101      	bne.n	80069b6 <bootloaderUpdateCommand+0xe>
 80069b2:	b672      	cpsid	i
 80069b4:	e7fe      	b.n	80069b4 <bootloaderUpdateCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80069b6:	4a47      	ldr	r2, [pc, #284]	; (8006ad4 <bootloaderUpdateCommand+0x12c>)
 80069b8:	2101      	movs	r1, #1
 80069ba:	9803      	ldr	r0, [sp, #12]
 80069bc:	f007 fde2 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d040      	beq.n	8006a46 <bootloaderUpdateCommand+0x9e>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 80069c4:	4b43      	ldr	r3, [pc, #268]	; (8006ad4 <bootloaderUpdateCommand+0x12c>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	4943      	ldr	r1, [pc, #268]	; (8006ad8 <bootloaderUpdateCommand+0x130>)
 80069ca:	f00b fcaf 	bl	801232c <strncmp>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d000      	beq.n	80069d4 <bootloaderUpdateCommand+0x2c>
 80069d2:	e078      	b.n	8006ac6 <bootloaderUpdateCommand+0x11e>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80069d4:	4a41      	ldr	r2, [pc, #260]	; (8006adc <bootloaderUpdateCommand+0x134>)
 80069d6:	2102      	movs	r1, #2
 80069d8:	9803      	ldr	r0, [sp, #12]
 80069da:	f007 fdd3 	bl	800e584 <FreeRTOS_CLIGetParameter>
 80069de:	4f40      	ldr	r7, [pc, #256]	; (8006ae0 <bootloaderUpdateCommand+0x138>)
 80069e0:	6038      	str	r0, [r7, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80069e2:	4a40      	ldr	r2, [pc, #256]	; (8006ae4 <bootloaderUpdateCommand+0x13c>)
 80069e4:	2103      	movs	r1, #3
 80069e6:	9803      	ldr	r0, [sp, #12]
 80069e8:	f007 fdcc 	bl	800e584 <FreeRTOS_CLIGetParameter>
 80069ec:	4b3e      	ldr	r3, [pc, #248]	; (8006ae8 <bootloaderUpdateCommand+0x140>)
 80069ee:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 80069f0:	6838      	ldr	r0, [r7, #0]
 80069f2:	2300      	movs	r3, #0
 80069f4:	56c3      	ldrsb	r3, [r0, r3]
				result = BOS_ERR_WrongValue;				
 80069f6:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString2[0] == '#') {
 80069f8:	2b23      	cmp	r3, #35	; 0x23
 80069fa:	d046      	beq.n	8006a8a <bootloaderUpdateCommand+0xe2>
			if (pcParameterString3[0] == 'p') {
 80069fc:	4b3a      	ldr	r3, [pc, #232]	; (8006ae8 <bootloaderUpdateCommand+0x140>)
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	2300      	movs	r3, #0
 8006a02:	56c3      	ldrsb	r3, [r0, r3]
 8006a04:	2b70      	cmp	r3, #112	; 0x70
 8006a06:	d046      	beq.n	8006a96 <bootloaderUpdateCommand+0xee>
				result = BOS_ERR_WrongValue;		
 8006a08:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 8006a0a:	4b38      	ldr	r3, [pc, #224]	; (8006aec <bootloaderUpdateCommand+0x144>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	42b3      	cmp	r3, r6
 8006a10:	d046      	beq.n	8006aa0 <bootloaderUpdateCommand+0xf8>
				BOS.response = BOS_RESPONSE_NONE;							
 8006a12:	4b37      	ldr	r3, [pc, #220]	; (8006af0 <bootloaderUpdateCommand+0x148>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 8006a18:	4b36      	ldr	r3, [pc, #216]	; (8006af4 <bootloaderUpdateCommand+0x14c>)
 8006a1a:	701d      	strb	r5, [r3, #0]
 8006a1c:	3201      	adds	r2, #1
 8006a1e:	211a      	movs	r1, #26
 8006a20:	0030      	movs	r0, r6
 8006a22:	f7fe ffdd 	bl	80059e0 <SendMessageToModule>
				osDelay(100);			
 8006a26:	2064      	movs	r0, #100	; 0x64
 8006a28:	f007 fc93 	bl	800e352 <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 8006a2c:	4b32      	ldr	r3, [pc, #200]	; (8006af8 <bootloaderUpdateCommand+0x150>)
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	4b2e      	ldr	r3, [pc, #184]	; (8006aec <bootloaderUpdateCommand+0x144>)
 8006a32:	7818      	ldrb	r0, [r3, #0]
 8006a34:	002b      	movs	r3, r5
 8006a36:	0031      	movs	r1, r6
 8006a38:	f7ff ff34 	bl	80068a4 <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 8006a3c:	2f68      	cmp	r7, #104	; 0x68
 8006a3e:	d042      	beq.n	8006ac6 <bootloaderUpdateCommand+0x11e>
}
 8006a40:	2000      	movs	r0, #0
 8006a42:	b005      	add	sp, #20
 8006a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 8006a46:	4b29      	ldr	r3, [pc, #164]	; (8006aec <bootloaderUpdateCommand+0x144>)
 8006a48:	781a      	ldrb	r2, [r3, #0]
 8006a4a:	492c      	ldr	r1, [pc, #176]	; (8006afc <bootloaderUpdateCommand+0x154>)
 8006a4c:	0020      	movs	r0, r4
 8006a4e:	f00b fc29 	bl	80122a4 <siprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 8006a52:	492b      	ldr	r1, [pc, #172]	; (8006b00 <bootloaderUpdateCommand+0x158>)
 8006a54:	0020      	movs	r0, r4
 8006a56:	f00b fc45 	bl	80122e4 <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006a5a:	0020      	movs	r0, r4
 8006a5c:	f7f9 fb5c 	bl	8000118 <strlen>
 8006a60:	b282      	uxth	r2, r0
 8006a62:	4b25      	ldr	r3, [pc, #148]	; (8006af8 <bootloaderUpdateCommand+0x150>)
 8006a64:	7818      	ldrb	r0, [r3, #0]
 8006a66:	2301      	movs	r3, #1
 8006a68:	425b      	negs	r3, r3
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	3333      	adds	r3, #51	; 0x33
 8006a6e:	0021      	movs	r1, r4
 8006a70:	f007 fb98 	bl	800e1a4 <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8006a74:	4b23      	ldr	r3, [pc, #140]	; (8006b04 <bootloaderUpdateCommand+0x15c>)
 8006a76:	4a24      	ldr	r2, [pc, #144]	; (8006b08 <bootloaderUpdateCommand+0x160>)
 8006a78:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 8006a7a:	4b24      	ldr	r3, [pc, #144]	; (8006b0c <bootloaderUpdateCommand+0x164>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006a80:	200a      	movs	r0, #10
 8006a82:	f007 fc66 	bl	800e352 <osDelay>
		NVIC_SystemReset();						
 8006a86:	f7fc f94b 	bl	8002d20 <NVIC_SystemReset>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	f00b fa91 	bl	8011fb2 <atol>
 8006a90:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 8006a92:	2700      	movs	r7, #0
 8006a94:	e7b2      	b.n	80069fc <bootloaderUpdateCommand+0x54>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8006a96:	3001      	adds	r0, #1
 8006a98:	f00b fa8b 	bl	8011fb2 <atol>
 8006a9c:	b2c5      	uxtb	r5, r0
 8006a9e:	e7b4      	b.n	8006a0a <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	9100      	str	r1, [sp, #0]
 8006aa4:	2319      	movs	r3, #25
 8006aa6:	000a      	movs	r2, r1
 8006aa8:	0028      	movs	r0, r5
 8006aaa:	f7fe f939 	bl	8004d20 <SendMessageFromPort>
				osDelay(100);
 8006aae:	2064      	movs	r0, #100	; 0x64
 8006ab0:	f007 fc4f 	bl	800e352 <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 8006ab4:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <bootloaderUpdateCommand+0x144>)
 8006ab6:	7818      	ldrb	r0, [r3, #0]
 8006ab8:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <bootloaderUpdateCommand+0x150>)
 8006aba:	781a      	ldrb	r2, [r3, #0]
 8006abc:	002b      	movs	r3, r5
 8006abe:	0001      	movs	r1, r0
 8006ac0:	f7ff fef0 	bl	80068a4 <remoteBootloaderUpdate>
 8006ac4:	e7ba      	b.n	8006a3c <bootloaderUpdateCommand+0x94>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 8006ac6:	220f      	movs	r2, #15
 8006ac8:	4911      	ldr	r1, [pc, #68]	; (8006b10 <bootloaderUpdateCommand+0x168>)
 8006aca:	0020      	movs	r0, r4
 8006acc:	f00b fae3 	bl	8012096 <memcpy>
 8006ad0:	e7b6      	b.n	8006a40 <bootloaderUpdateCommand+0x98>
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	20000cf8 	.word	0x20000cf8
 8006ad8:	08016b18 	.word	0x08016b18
 8006adc:	20000d04 	.word	0x20000d04
 8006ae0:	20000bd8 	.word	0x20000bd8
 8006ae4:	20000d08 	.word	0x20000d08
 8006ae8:	20000be0 	.word	0x20000be0
 8006aec:	20000b90 	.word	0x20000b90
 8006af0:	20006160 	.word	0x20006160
 8006af4:	20000a5c 	.word	0x20000a5c
 8006af8:	200003b7 	.word	0x200003b7
 8006afc:	08016a14 	.word	0x08016a14
 8006b00:	08016a34 	.word	0x08016a34
 8006b04:	20007ff0 	.word	0x20007ff0
 8006b08:	deadbeef 	.word	0xdeadbeef
 8006b0c:	20000902 	.word	0x20000902
 8006b10:	08016bd8 	.word	0x08016bd8

08006b14 <PxMessagingTask>:
{
 8006b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b16:	46de      	mov	lr, fp
 8006b18:	4657      	mov	r7, sl
 8006b1a:	464e      	mov	r6, r9
 8006b1c:	4645      	mov	r5, r8
 8006b1e:	b5e0      	push	{r5, r6, r7, lr}
 8006b20:	b095      	sub	sp, #84	; 0x54
	port = (int8_t)(unsigned) argument;
 8006b22:	b2c3      	uxtb	r3, r0
 8006b24:	9307      	str	r3, [sp, #28]
 8006b26:	23ff      	movs	r3, #255	; 0xff
 8006b28:	4003      	ands	r3, r0
 8006b2a:	4698      	mov	r8, r3
		if (messageLength[port-1])
 8006b2c:	1e5c      	subs	r4, r3, #1
 8006b2e:	00e3      	lsls	r3, r4, #3
 8006b30:	1b1b      	subs	r3, r3, r4
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	9309      	str	r3, [sp, #36]	; 0x24
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8006b36:	4ad9      	ldr	r2, [pc, #868]	; (8006e9c <PxMessagingTask+0x388>)
 8006b38:	18d3      	adds	r3, r2, r3
 8006b3a:	9305      	str	r3, [sp, #20]
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b40:	4699      	mov	r9, r3
			if (cMessage[port-1][2]>>7) {
 8006b42:	00e6      	lsls	r6, r4, #3
 8006b44:	1b36      	subs	r6, r6, r4
 8006b46:	00f6      	lsls	r6, r6, #3
 8006b48:	1993      	adds	r3, r2, r6
 8006b4a:	3302      	adds	r3, #2
 8006b4c:	469b      	mov	fp, r3
 8006b4e:	e025      	b.n	8006b9c <PxMessagingTask+0x88>
				longMessage = 1;
 8006b50:	4ad3      	ldr	r2, [pc, #844]	; (8006ea0 <PxMessagingTask+0x38c>)
 8006b52:	2001      	movs	r0, #1
 8006b54:	7010      	strb	r0, [r2, #0]
 8006b56:	e032      	b.n	8006bbe <PxMessagingTask+0xaa>
				code = cMessage[port-1][3+shift];
 8006b58:	4bd0      	ldr	r3, [pc, #832]	; (8006e9c <PxMessagingTask+0x388>)
 8006b5a:	199b      	adds	r3, r3, r6
 8006b5c:	189a      	adds	r2, r3, r2
 8006b5e:	78d7      	ldrb	r7, [r2, #3]
 8006b60:	e048      	b.n	8006bf4 <PxMessagingTask+0xe0>
					if (code == CODE_UPDATE) {		// Remote bootloader update
 8006b62:	2f19      	cmp	r7, #25
 8006b64:	d062      	beq.n	8006c2c <PxMessagingTask+0x118>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 8006b66:	2f1a      	cmp	r7, #26
 8006b68:	d06a      	beq.n	8006c40 <PxMessagingTask+0x12c>
		if (result == BOS_ERR_UnknownMessage) {
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <PxMessagingTask+0x60>
 8006b70:	f001 fa40 	bl	8007ff4 <PxMessagingTask+0x14e0>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8006b74:	4dcb      	ldr	r5, [pc, #812]	; (8006ea4 <PxMessagingTask+0x390>)
 8006b76:	5d2a      	ldrb	r2, [r5, r4]
 8006b78:	2100      	movs	r1, #0
 8006b7a:	9805      	ldr	r0, [sp, #20]
 8006b7c:	f00b fa94 	bl	80120a8 <memset>
		messageLength[port-1] = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	552b      	strb	r3, [r5, r4]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 8006b84:	4bc8      	ldr	r3, [pc, #800]	; (8006ea8 <PxMessagingTask+0x394>)
 8006b86:	4642      	mov	r2, r8
 8006b88:	5c9b      	ldrb	r3, [r3, r2]
 8006b8a:	3b02      	subs	r3, #2
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d903      	bls.n	8006b98 <PxMessagingTask+0x84>
			portStatus[port] = FREE;
 8006b90:	4bc5      	ldr	r3, [pc, #788]	; (8006ea8 <PxMessagingTask+0x394>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	4641      	mov	r1, r8
 8006b96:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8006b98:	f007 ff64 	bl	800ea64 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	4249      	negs	r1, r1
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	f007 fea1 	bl	800e8e8 <ulTaskNotifyTake>
		if (messageLength[port-1])
 8006ba6:	4bbf      	ldr	r3, [pc, #764]	; (8006ea4 <PxMessagingTask+0x390>)
 8006ba8:	5d19      	ldrb	r1, [r3, r4]
 8006baa:	2900      	cmp	r1, #0
 8006bac:	d0dd      	beq.n	8006b6a <PxMessagingTask+0x56>
			if (cMessage[port-1][2]>>7) {
 8006bae:	465b      	mov	r3, fp
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	b25a      	sxtb	r2, r3
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	dbcb      	blt.n	8006b50 <PxMessagingTask+0x3c>
				longMessage = 0;
 8006bb8:	4ab9      	ldr	r2, [pc, #740]	; (8006ea0 <PxMessagingTask+0x38c>)
 8006bba:	2000      	movs	r0, #0
 8006bbc:	7010      	strb	r0, [r2, #0]
			dst = cMessage[port-1][0]; 
 8006bbe:	4ab7      	ldr	r2, [pc, #732]	; (8006e9c <PxMessagingTask+0x388>)
 8006bc0:	5cb0      	ldrb	r0, [r6, r2]
 8006bc2:	4682      	mov	sl, r0
			src = cMessage[port-1][1];	
 8006bc4:	1992      	adds	r2, r2, r6
 8006bc6:	7852      	ldrb	r2, [r2, #1]
 8006bc8:	9206      	str	r2, [sp, #24]
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 8006bca:	2201      	movs	r2, #1
 8006bcc:	401a      	ands	r2, r3
			shift = 0;
 8006bce:	0015      	movs	r5, r2
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 8006bd0:	4fb6      	ldr	r7, [pc, #728]	; (8006eac <PxMessagingTask+0x398>)
 8006bd2:	0718      	lsls	r0, r3, #28
 8006bd4:	0f80      	lsrs	r0, r0, #30
 8006bd6:	71f8      	strb	r0, [r7, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 8006bd8:	2060      	movs	r0, #96	; 0x60
 8006bda:	4018      	ands	r0, r3
 8006bdc:	71b8      	strb	r0, [r7, #6]
			if (extendCode == true) {		
 8006bde:	079b      	lsls	r3, r3, #30
 8006be0:	d5ba      	bpl.n	8006b58 <PxMessagingTask+0x44>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 8006be2:	4bae      	ldr	r3, [pc, #696]	; (8006e9c <PxMessagingTask+0x388>)
 8006be4:	199b      	adds	r3, r3, r6
 8006be6:	189b      	adds	r3, r3, r2
 8006be8:	7918      	ldrb	r0, [r3, #4]
 8006bea:	0200      	lsls	r0, r0, #8
 8006bec:	78df      	ldrb	r7, [r3, #3]
 8006bee:	183f      	adds	r7, r7, r0
 8006bf0:	b2bf      	uxth	r7, r7
				++shift;
 8006bf2:	1c55      	adds	r5, r2, #1
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8006bf4:	4653      	mov	r3, sl
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2bfc      	cmp	r3, #252	; 0xfc
 8006bfc:	d901      	bls.n	8006c02 <PxMessagingTask+0xee>
 8006bfe:	f001 fa10 	bl	8008022 <PxMessagingTask+0x150e>
 8006c02:	4bab      	ldr	r3, [pc, #684]	; (8006eb0 <PxMessagingTask+0x39c>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	4553      	cmp	r3, sl
 8006c08:	d101      	bne.n	8006c0e <PxMessagingTask+0xfa>
 8006c0a:	f001 fa0a 	bl	8008022 <PxMessagingTask+0x150e>
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <PxMessagingTask+0x102>
 8006c12:	f001 fa00 	bl	8008016 <PxMessagingTask+0x1502>
				ForwardReceivedMessage(port);
 8006c16:	9807      	ldr	r0, [sp, #28]
 8006c18:	f7fe fec2 	bl	80059a0 <ForwardReceivedMessage>
				if (BOS.trace)
 8006c1c:	4ba3      	ldr	r3, [pc, #652]	; (8006eac <PxMessagingTask+0x398>)
 8006c1e:	79db      	ldrb	r3, [r3, #7]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d09e      	beq.n	8006b62 <PxMessagingTask+0x4e>
					indMode = IND_SHORT_BLINK;
 8006c24:	4ba3      	ldr	r3, [pc, #652]	; (8006eb4 <PxMessagingTask+0x3a0>)
 8006c26:	2203      	movs	r2, #3
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	e79a      	b.n	8006b62 <PxMessagingTask+0x4e>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 8006c2c:	2064      	movs	r0, #100	; 0x64
 8006c2e:	f007 ffd7 	bl	800ebe0 <HAL_Delay>
 8006c32:	2300      	movs	r3, #0
 8006c34:	9a07      	ldr	r2, [sp, #28]
 8006c36:	4651      	mov	r1, sl
 8006c38:	9806      	ldr	r0, [sp, #24]
 8006c3a:	f7ff fe33 	bl	80068a4 <remoteBootloaderUpdate>
 8006c3e:	e794      	b.n	8006b6a <PxMessagingTask+0x56>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 8006c40:	2064      	movs	r0, #100	; 0x64
 8006c42:	f007 ffcd 	bl	800ebe0 <HAL_Delay>
 8006c46:	4b95      	ldr	r3, [pc, #596]	; (8006e9c <PxMessagingTask+0x388>)
 8006c48:	199b      	adds	r3, r3, r6
 8006c4a:	5d5b      	ldrb	r3, [r3, r5]
 8006c4c:	9a07      	ldr	r2, [sp, #28]
 8006c4e:	4651      	mov	r1, sl
 8006c50:	9806      	ldr	r0, [sp, #24]
 8006c52:	f7ff fe27 	bl	80068a4 <remoteBootloaderUpdate>
 8006c56:	e788      	b.n	8006b6a <PxMessagingTask+0x56>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8006c58:	4b90      	ldr	r3, [pc, #576]	; (8006e9c <PxMessagingTask+0x388>)
 8006c5a:	199b      	adds	r3, r3, r6
 8006c5c:	1859      	adds	r1, r3, r1
 8006c5e:	3901      	subs	r1, #1
 8006c60:	780b      	ldrb	r3, [r1, #0]
 8006c62:	4a95      	ldr	r2, [pc, #596]	; (8006eb8 <PxMessagingTask+0x3a4>)
 8006c64:	7812      	ldrb	r2, [r2, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d113      	bne.n	8006c92 <PxMessagingTask+0x17e>
					result = BOS_ERR_MSG_Reflection;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	4699      	mov	r9, r3
				if (result == BOS_OK)
 8006c6e:	464b      	mov	r3, r9
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d000      	beq.n	8006c76 <PxMessagingTask+0x162>
 8006c74:	e779      	b.n	8006b6a <PxMessagingTask+0x56>
				shift += 4;
 8006c76:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 8006c78:	4b8a      	ldr	r3, [pc, #552]	; (8006ea4 <PxMessagingTask+0x390>)
 8006c7a:	5d19      	ldrb	r1, [r3, r4]
 8006c7c:	1b4a      	subs	r2, r1, r5
 8006c7e:	b2d3      	uxtb	r3, r2
 8006c80:	4699      	mov	r9, r3
					switch (code)
 8006c82:	2f23      	cmp	r7, #35	; 0x23
 8006c84:	d901      	bls.n	8006c8a <PxMessagingTask+0x176>
 8006c86:	f001 f993 	bl	8007fb0 <PxMessagingTask+0x149c>
 8006c8a:	00bb      	lsls	r3, r7, #2
 8006c8c:	4a8b      	ldr	r2, [pc, #556]	; (8006ebc <PxMessagingTask+0x3a8>)
 8006c8e:	58d3      	ldr	r3, [r2, r3]
 8006c90:	469f      	mov	pc, r3
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8006c92:	4a89      	ldr	r2, [pc, #548]	; (8006eb8 <PxMessagingTask+0x3a4>)
 8006c94:	7013      	strb	r3, [r2, #0]
 8006c96:	4a8a      	ldr	r2, [pc, #552]	; (8006ec0 <PxMessagingTask+0x3ac>)
 8006c98:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 8006c9a:	9907      	ldr	r1, [sp, #28]
 8006c9c:	20ff      	movs	r0, #255	; 0xff
 8006c9e:	f7fe f9f7 	bl	8005090 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8006ca2:	4b80      	ldr	r3, [pc, #512]	; (8006ea4 <PxMessagingTask+0x390>)
 8006ca4:	5d1a      	ldrb	r2, [r3, r4]
 8006ca6:	4b7d      	ldr	r3, [pc, #500]	; (8006e9c <PxMessagingTask+0x388>)
 8006ca8:	199b      	adds	r3, r3, r6
 8006caa:	189b      	adds	r3, r3, r2
 8006cac:	3b01      	subs	r3, #1
 8006cae:	2200      	movs	r2, #0
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	e7dc      	b.n	8006c6e <PxMessagingTask+0x15a>
							for (p=0 ; p<numOfParams ; p++) 
 8006cb4:	464b      	mov	r3, r9
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d020      	beq.n	8006cfc <PxMessagingTask+0x1e8>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	1e58      	subs	r0, r3, #1
 8006cbe:	0042      	lsls	r2, r0, #1
 8006cc0:	4b80      	ldr	r3, [pc, #512]	; (8006ec4 <PxMessagingTask+0x3b0>)
 8006cc2:	5ad3      	ldrh	r3, [r2, r3]
 8006cc4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006cc6:	19e9      	adds	r1, r5, r7
 8006cc8:	4a74      	ldr	r2, [pc, #464]	; (8006e9c <PxMessagingTask+0x388>)
 8006cca:	1889      	adds	r1, r1, r2
 8006ccc:	3201      	adds	r2, #1
 8006cce:	46bc      	mov	ip, r7
 8006cd0:	4462      	add	r2, ip
 8006cd2:	1955      	adds	r5, r2, r5
 8006cd4:	464a      	mov	r2, r9
 8006cd6:	3a01      	subs	r2, #1
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	18ad      	adds	r5, r5, r2
 8006cdc:	2780      	movs	r7, #128	; 0x80
 8006cde:	023f      	lsls	r7, r7, #8
 8006ce0:	4684      	mov	ip, r0
 8006ce2:	780a      	ldrb	r2, [r1, #0]
 8006ce4:	3a01      	subs	r2, #1
 8006ce6:	0038      	movs	r0, r7
 8006ce8:	4110      	asrs	r0, r2
 8006cea:	4303      	orrs	r3, r0
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3101      	adds	r1, #1
							for (p=0 ; p<numOfParams ; p++) 
 8006cf0:	42a9      	cmp	r1, r5
 8006cf2:	d1f6      	bne.n	8006ce2 <PxMessagingTask+0x1ce>
 8006cf4:	4660      	mov	r0, ip
 8006cf6:	0040      	lsls	r0, r0, #1
 8006cf8:	4a72      	ldr	r2, [pc, #456]	; (8006ec4 <PxMessagingTask+0x3b0>)
 8006cfa:	5283      	strh	r3, [r0, r2]
							responseStatus = BOS_OK;
 8006cfc:	4b72      	ldr	r3, [pc, #456]	; (8006ec8 <PxMessagingTask+0x3b4>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
							break;		
 8006d02:	2300      	movs	r3, #0
 8006d04:	4699      	mov	r9, r3
 8006d06:	e735      	b.n	8006b74 <PxMessagingTask+0x60>
							indMode = IND_PING;	osDelay(10);
 8006d08:	4b6a      	ldr	r3, [pc, #424]	; (8006eb4 <PxMessagingTask+0x3a0>)
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	200a      	movs	r0, #10
 8006d10:	f007 fb1f 	bl	800e352 <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8006d14:	4b65      	ldr	r3, [pc, #404]	; (8006eac <PxMessagingTask+0x398>)
 8006d16:	799b      	ldrb	r3, [r3, #6]
 8006d18:	2240      	movs	r2, #64	; 0x40
 8006d1a:	4393      	bics	r3, r2
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	4691      	mov	r9, r2
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	d000      	beq.n	8006d26 <PxMessagingTask+0x212>
 8006d24:	e726      	b.n	8006b74 <PxMessagingTask+0x60>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 8006d26:	2102      	movs	r1, #2
 8006d28:	9806      	ldr	r0, [sp, #24]
 8006d2a:	f7fe fe59 	bl	80059e0 <SendMessageToModule>
 8006d2e:	e721      	b.n	8006b74 <PxMessagingTask+0x60>
							if (!moduleAlias[myID][0])
 8006d30:	4b5f      	ldr	r3, [pc, #380]	; (8006eb0 <PxMessagingTask+0x39c>)
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	0093      	lsls	r3, r2, #2
 8006d36:	189b      	adds	r3, r3, r2
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4a64      	ldr	r2, [pc, #400]	; (8006ecc <PxMessagingTask+0x3b8>)
 8006d3c:	5c9b      	ldrb	r3, [r3, r2]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d118      	bne.n	8006d74 <PxMessagingTask+0x260>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 8006d42:	9a06      	ldr	r2, [sp, #24]
 8006d44:	4962      	ldr	r1, [pc, #392]	; (8006ed0 <PxMessagingTask+0x3bc>)
 8006d46:	4863      	ldr	r0, [pc, #396]	; (8006ed4 <PxMessagingTask+0x3c0>)
 8006d48:	f00b faac 	bl	80122a4 <siprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8006d4c:	4d61      	ldr	r5, [pc, #388]	; (8006ed4 <PxMessagingTask+0x3c0>)
 8006d4e:	0028      	movs	r0, r5
 8006d50:	f7f9 f9e2 	bl	8000118 <strlen>
 8006d54:	b282      	uxth	r2, r0
 8006d56:	4b60      	ldr	r3, [pc, #384]	; (8006ed8 <PxMessagingTask+0x3c4>)
 8006d58:	7818      	ldrb	r0, [r3, #0]
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	425b      	negs	r3, r3
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	3333      	adds	r3, #51	; 0x33
 8006d62:	0029      	movs	r1, r5
 8006d64:	f007 fa1e 	bl	800e1a4 <writePxMutex>
							responseStatus = BOS_OK;								
 8006d68:	4b57      	ldr	r3, [pc, #348]	; (8006ec8 <PxMessagingTask+0x3b4>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	701a      	strb	r2, [r3, #0]
							break;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	4699      	mov	r9, r3
 8006d72:	e6ff      	b.n	8006b74 <PxMessagingTask+0x60>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 8006d74:	230a      	movs	r3, #10
 8006d76:	9906      	ldr	r1, [sp, #24]
 8006d78:	434b      	muls	r3, r1
 8006d7a:	4a54      	ldr	r2, [pc, #336]	; (8006ecc <PxMessagingTask+0x3b8>)
 8006d7c:	189b      	adds	r3, r3, r2
 8006d7e:	000a      	movs	r2, r1
 8006d80:	4956      	ldr	r1, [pc, #344]	; (8006edc <PxMessagingTask+0x3c8>)
 8006d82:	4854      	ldr	r0, [pc, #336]	; (8006ed4 <PxMessagingTask+0x3c0>)
 8006d84:	f00b fa8e 	bl	80122a4 <siprintf>
 8006d88:	e7e0      	b.n	8006d4c <PxMessagingTask+0x238>
							IND_ON();
 8006d8a:	2180      	movs	r1, #128	; 0x80
 8006d8c:	2090      	movs	r0, #144	; 0x90
 8006d8e:	2201      	movs	r2, #1
 8006d90:	0109      	lsls	r1, r1, #4
 8006d92:	05c0      	lsls	r0, r0, #23
 8006d94:	f008 fff0 	bl	800fd78 <HAL_GPIO_WritePin>
							break;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	4699      	mov	r9, r3
 8006d9c:	e6ea      	b.n	8006b74 <PxMessagingTask+0x60>
							IND_OFF();
 8006d9e:	2180      	movs	r1, #128	; 0x80
 8006da0:	2090      	movs	r0, #144	; 0x90
 8006da2:	2200      	movs	r2, #0
 8006da4:	0109      	lsls	r1, r1, #4
 8006da6:	05c0      	lsls	r0, r0, #23
 8006da8:	f008 ffe6 	bl	800fd78 <HAL_GPIO_WritePin>
							break;
 8006dac:	2300      	movs	r3, #0
 8006dae:	4699      	mov	r9, r3
 8006db0:	e6e0      	b.n	8006b74 <PxMessagingTask+0x60>
							IND_toggle();
 8006db2:	2180      	movs	r1, #128	; 0x80
 8006db4:	2090      	movs	r0, #144	; 0x90
 8006db6:	0109      	lsls	r1, r1, #4
 8006db8:	05c0      	lsls	r0, r0, #23
 8006dba:	f008 ffe3 	bl	800fd84 <HAL_GPIO_TogglePin>
							break;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	4699      	mov	r9, r3
 8006dc2:	e6d7      	b.n	8006b74 <PxMessagingTask+0x60>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 8006dc4:	4f46      	ldr	r7, [pc, #280]	; (8006ee0 <PxMessagingTask+0x3cc>)
 8006dc6:	00a3      	lsls	r3, r4, #2
 8006dc8:	4a34      	ldr	r2, [pc, #208]	; (8006e9c <PxMessagingTask+0x388>)
 8006dca:	1992      	adds	r2, r2, r6
 8006dcc:	1950      	adds	r0, r2, r5
 8006dce:	7881      	ldrb	r1, [r0, #2]
 8006dd0:	468c      	mov	ip, r1
 8006dd2:	9906      	ldr	r1, [sp, #24]
 8006dd4:	0209      	lsls	r1, r1, #8
 8006dd6:	4461      	add	r1, ip
 8006dd8:	53d9      	strh	r1, [r3, r7]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 8006dda:	18fb      	adds	r3, r7, r3
 8006ddc:	5d51      	ldrb	r1, [r2, r5]
 8006dde:	0209      	lsls	r1, r1, #8
 8006de0:	7842      	ldrb	r2, [r0, #1]
 8006de2:	1852      	adds	r2, r2, r1
 8006de4:	805a      	strh	r2, [r3, #2]
							messageParams[1] = (uint8_t) myPN;
 8006de6:	4b3f      	ldr	r3, [pc, #252]	; (8006ee4 <PxMessagingTask+0x3d0>)
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	4a3f      	ldr	r2, [pc, #252]	; (8006ee8 <PxMessagingTask+0x3d4>)
 8006dec:	7053      	strb	r3, [r2, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 8006dee:	0a1b      	lsrs	r3, r3, #8
 8006df0:	7013      	strb	r3, [r2, #0]
							messageParams[2] = port;
 8006df2:	9d07      	ldr	r5, [sp, #28]
 8006df4:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 8006df6:	2002      	movs	r0, #2
 8006df8:	f007 faab 	bl	800e352 <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	3308      	adds	r3, #8
 8006e02:	2200      	movs	r2, #0
 8006e04:	2100      	movs	r1, #0
 8006e06:	0028      	movs	r0, r5
 8006e08:	f7fd ff8a 	bl	8004d20 <SendMessageFromPort>
							break;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	4699      	mov	r9, r3
 8006e10:	e6b0      	b.n	8006b74 <PxMessagingTask+0x60>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 8006e12:	4f33      	ldr	r7, [pc, #204]	; (8006ee0 <PxMessagingTask+0x3cc>)
 8006e14:	00a3      	lsls	r3, r4, #2
 8006e16:	4a21      	ldr	r2, [pc, #132]	; (8006e9c <PxMessagingTask+0x388>)
 8006e18:	1992      	adds	r2, r2, r6
 8006e1a:	1950      	adds	r0, r2, r5
 8006e1c:	7881      	ldrb	r1, [r0, #2]
 8006e1e:	468c      	mov	ip, r1
 8006e20:	9906      	ldr	r1, [sp, #24]
 8006e22:	0209      	lsls	r1, r1, #8
 8006e24:	4461      	add	r1, ip
 8006e26:	53d9      	strh	r1, [r3, r7]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 8006e28:	18fb      	adds	r3, r7, r3
 8006e2a:	5d51      	ldrb	r1, [r2, r5]
 8006e2c:	0209      	lsls	r1, r1, #8
 8006e2e:	7842      	ldrb	r2, [r0, #1]
 8006e30:	1852      	adds	r2, r2, r1
 8006e32:	805a      	strh	r2, [r3, #2]
							responseStatus = BOS_OK;
 8006e34:	4b24      	ldr	r3, [pc, #144]	; (8006ec8 <PxMessagingTask+0x3b4>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	701a      	strb	r2, [r3, #0]
							break;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	4699      	mov	r9, r3
 8006e3e:	e699      	b.n	8006b74 <PxMessagingTask+0x60>
							ExploreNeighbors(port);	indMode = IND_TOPOLOGY;
 8006e40:	9807      	ldr	r0, [sp, #28]
 8006e42:	f7fe f96d 	bl	8005120 <ExploreNeighbors>
 8006e46:	4b1b      	ldr	r3, [pc, #108]	; (8006eb4 <PxMessagingTask+0x3a0>)
 8006e48:	2202      	movs	r2, #2
 8006e4a:	701a      	strb	r2, [r3, #0]
							osDelay(10); temp = 0;
 8006e4c:	200a      	movs	r0, #10
 8006e4e:	f007 fa80 	bl	800e352 <osDelay>
 8006e52:	4d23      	ldr	r5, [pc, #140]	; (8006ee0 <PxMessagingTask+0x3cc>)
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 8006e54:	2701      	movs	r7, #1
							osDelay(10); temp = 0;
 8006e56:	2300      	movs	r3, #0
									messageParams[temp] = p;
 8006e58:	46a1      	mov	r9, r4
 8006e5a:	001c      	movs	r4, r3
 8006e5c:	e004      	b.n	8006e68 <PxMessagingTask+0x354>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 8006e5e:	3701      	adds	r7, #1
 8006e60:	b2ff      	uxtb	r7, r7
 8006e62:	3504      	adds	r5, #4
 8006e64:	2f07      	cmp	r7, #7
 8006e66:	d00e      	beq.n	8006e86 <PxMessagingTask+0x372>
								if (neighbors[p-1][0])
 8006e68:	882b      	ldrh	r3, [r5, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0f7      	beq.n	8006e5e <PxMessagingTask+0x34a>
									messageParams[temp] = p;
 8006e6e:	4b1e      	ldr	r3, [pc, #120]	; (8006ee8 <PxMessagingTask+0x3d4>)
 8006e70:	551f      	strb	r7, [r3, r4]
									memcpy(messageParams+temp+1, neighbors[p-1], (size_t)(4));
 8006e72:	1c60      	adds	r0, r4, #1
 8006e74:	469c      	mov	ip, r3
 8006e76:	4460      	add	r0, ip
 8006e78:	2204      	movs	r2, #4
 8006e7a:	0029      	movs	r1, r5
 8006e7c:	f00b f90b 	bl	8012096 <memcpy>
									temp += 5;		
 8006e80:	3405      	adds	r4, #5
 8006e82:	b2e4      	uxtb	r4, r4
 8006e84:	e7eb      	b.n	8006e5e <PxMessagingTask+0x34a>
 8006e86:	0023      	movs	r3, r4
 8006e88:	9408      	str	r4, [sp, #32]
 8006e8a:	464c      	mov	r4, r9
							SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE, temp);
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	210d      	movs	r1, #13
 8006e90:	9806      	ldr	r0, [sp, #24]
 8006e92:	f7fe fda5 	bl	80059e0 <SendMessageToModule>
							break;
 8006e96:	2300      	movs	r3, #0
 8006e98:	4699      	mov	r9, r3
 8006e9a:	e66b      	b.n	8006b74 <PxMessagingTask+0x60>
 8006e9c:	200006d8 	.word	0x200006d8
 8006ea0:	20000903 	.word	0x20000903
 8006ea4:	20000a54 	.word	0x20000a54
 8006ea8:	20000c40 	.word	0x20000c40
 8006eac:	20006160 	.word	0x20006160
 8006eb0:	20000b90 	.word	0x20000b90
 8006eb4:	20000902 	.word	0x20000902
 8006eb8:	20000613 	.word	0x20000613
 8006ebc:	08016564 	.word	0x08016564
 8006ec0:	20000612 	.word	0x20000612
 8006ec4:	200005e0 	.word	0x200005e0
 8006ec8:	20000c98 	.word	0x20000c98
 8006ecc:	20000a8c 	.word	0x20000a8c
 8006ed0:	08017190 	.word	0x08017190
 8006ed4:	20000bf0 	.word	0x20000bf0
 8006ed8:	200003b7 	.word	0x200003b7
 8006edc:	080171a4 	.word	0x080171a4
 8006ee0:	20000b94 	.word	0x20000b94
 8006ee4:	2000001e 	.word	0x2000001e
 8006ee8:	20000a5c 	.word	0x20000a5c
							temp = numOfParams/5;
 8006eec:	2105      	movs	r1, #5
 8006eee:	4648      	mov	r0, r9
 8006ef0:	f7f9 f924 	bl	800013c <__udivsi3>
 8006ef4:	b2c2      	uxtb	r2, r0
 8006ef6:	9208      	str	r2, [sp, #32]
							for (uint8_t k=0 ; k<temp ; k++)  {
 8006ef8:	2a00      	cmp	r2, #0
 8006efa:	d019      	beq.n	8006f30 <PxMessagingTask+0x41c>
 8006efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006efe:	194f      	adds	r7, r1, r5
 8006f00:	4bdc      	ldr	r3, [pc, #880]	; (8007274 <PxMessagingTask+0x760>)
 8006f02:	18ff      	adds	r7, r7, r3
 8006f04:	3305      	adds	r3, #5
 8006f06:	468c      	mov	ip, r1
 8006f08:	4463      	add	r3, ip
 8006f0a:	195d      	adds	r5, r3, r5
 8006f0c:	1e53      	subs	r3, r2, #1
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	009a      	lsls	r2, r3, #2
 8006f12:	18d3      	adds	r3, r2, r3
 8006f14:	18ed      	adds	r5, r5, r3
								memcpy(&neighbors2[(cMessage[port-1][shift+k*5])-1][0], &cMessage[port-1][1+shift+k*5], (size_t)(4));
 8006f16:	4bd8      	ldr	r3, [pc, #864]	; (8007278 <PxMessagingTask+0x764>)
 8006f18:	4699      	mov	r9, r3
 8006f1a:	7838      	ldrb	r0, [r7, #0]
 8006f1c:	3801      	subs	r0, #1
 8006f1e:	0080      	lsls	r0, r0, #2
 8006f20:	4448      	add	r0, r9
 8006f22:	1c79      	adds	r1, r7, #1
 8006f24:	2204      	movs	r2, #4
 8006f26:	f00b f8b6 	bl	8012096 <memcpy>
 8006f2a:	3705      	adds	r7, #5
							for (uint8_t k=0 ; k<temp ; k++)  {
 8006f2c:	42bd      	cmp	r5, r7
 8006f2e:	d1f4      	bne.n	8006f1a <PxMessagingTask+0x406>
							responseStatus = BOS_OK;
 8006f30:	4bd2      	ldr	r3, [pc, #840]	; (800727c <PxMessagingTask+0x768>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	701a      	strb	r2, [r3, #0]
							break;
 8006f36:	2300      	movs	r3, #0
 8006f38:	4699      	mov	r9, r3
 8006f3a:	e61b      	b.n	8006b74 <PxMessagingTask+0x60>
 8006f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3e:	18eb      	adds	r3, r5, r3
 8006f40:	4acc      	ldr	r2, [pc, #816]	; (8007274 <PxMessagingTask+0x760>)
 8006f42:	4699      	mov	r9, r3
 8006f44:	4491      	add	r9, r2
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8006f46:	2701      	movs	r7, #1
 8006f48:	464b      	mov	r3, r9
 8006f4a:	46a1      	mov	r9, r4
 8006f4c:	46aa      	mov	sl, r5
 8006f4e:	9d07      	ldr	r5, [sp, #28]
 8006f50:	001c      	movs	r4, r3
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 8006f52:	42bd      	cmp	r5, r7
 8006f54:	d005      	beq.n	8006f62 <PxMessagingTask+0x44e>
 8006f56:	0038      	movs	r0, r7
 8006f58:	f7fd fb40 	bl	80045dc <GetUart>
 8006f5c:	7821      	ldrb	r1, [r4, #0]
 8006f5e:	f7fe fc17 	bl	8005790 <SwapUartPins>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8006f62:	3701      	adds	r7, #1
 8006f64:	b2ff      	uxtb	r7, r7
 8006f66:	3401      	adds	r4, #1
 8006f68:	2f07      	cmp	r7, #7
 8006f6a:	d1f2      	bne.n	8006f52 <PxMessagingTask+0x43e>
 8006f6c:	464c      	mov	r4, r9
 8006f6e:	4655      	mov	r5, sl
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 8006f70:	9807      	ldr	r0, [sp, #28]
 8006f72:	f7fd fb33 	bl	80045dc <GetUart>
 8006f76:	4bbf      	ldr	r3, [pc, #764]	; (8007274 <PxMessagingTask+0x760>)
 8006f78:	199b      	adds	r3, r3, r6
 8006f7a:	195d      	adds	r5, r3, r5
 8006f7c:	7aa9      	ldrb	r1, [r5, #10]
 8006f7e:	f7fe fc07 	bl	8005790 <SwapUartPins>
							break;
 8006f82:	2300      	movs	r3, #0
 8006f84:	4699      	mov	r9, r3
 8006f86:	e5f5      	b.n	8006b74 <PxMessagingTask+0x60>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 8006f88:	002a      	movs	r2, r5
 8006f8a:	4bba      	ldr	r3, [pc, #744]	; (8007274 <PxMessagingTask+0x760>)
 8006f8c:	199b      	adds	r3, r3, r6
 8006f8e:	5d5b      	ldrb	r3, [r3, r5]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <PxMessagingTask+0x496>
								myID = cMessage[port-1][1+shift];
 8006f94:	2238      	movs	r2, #56	; 0x38
 8006f96:	4362      	muls	r2, r4
 8006f98:	4bb6      	ldr	r3, [pc, #728]	; (8007274 <PxMessagingTask+0x760>)
 8006f9a:	189b      	adds	r3, r3, r2
 8006f9c:	195d      	adds	r5, r3, r5
 8006f9e:	786a      	ldrb	r2, [r5, #1]
 8006fa0:	4bb7      	ldr	r3, [pc, #732]	; (8007280 <PxMessagingTask+0x76c>)
 8006fa2:	701a      	strb	r2, [r3, #0]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4699      	mov	r9, r3
 8006fa8:	e5e4      	b.n	8006b74 <PxMessagingTask+0x60>
 8006faa:	2100      	movs	r1, #0
 8006fac:	4689      	mov	r9, r1
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d000      	beq.n	8006fb4 <PxMessagingTask+0x4a0>
 8006fb2:	e5df      	b.n	8006b74 <PxMessagingTask+0x60>
								messageParams[0] = 0;											/* change own ID */
 8006fb4:	49b3      	ldr	r1, [pc, #716]	; (8007284 <PxMessagingTask+0x770>)
 8006fb6:	464d      	mov	r5, r9
 8006fb8:	700d      	strb	r5, [r1, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 8006fba:	2038      	movs	r0, #56	; 0x38
 8006fbc:	4360      	muls	r0, r4
 8006fbe:	4bad      	ldr	r3, [pc, #692]	; (8007274 <PxMessagingTask+0x760>)
 8006fc0:	181b      	adds	r3, r3, r0
 8006fc2:	189b      	adds	r3, r3, r2
 8006fc4:	785a      	ldrb	r2, [r3, #1]
 8006fc6:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 8006fc8:	7898      	ldrb	r0, [r3, #2]
 8006fca:	2303      	movs	r3, #3
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	330d      	adds	r3, #13
 8006fd0:	464a      	mov	r2, r9
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	f7fd fea4 	bl	8004d20 <SendMessageFromPort>
 8006fd8:	e5cc      	b.n	8006b74 <PxMessagingTask+0x60>
							if (longMessage) {
 8006fda:	4bab      	ldr	r3, [pc, #684]	; (8007288 <PxMessagingTask+0x774>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d012      	beq.n	8007008 <PxMessagingTask+0x4f4>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 8006fe2:	4baa      	ldr	r3, [pc, #680]	; (800728c <PxMessagingTask+0x778>)
 8006fe4:	469a      	mov	sl, r3
 8006fe6:	881f      	ldrh	r7, [r3, #0]
 8006fe8:	48a9      	ldr	r0, [pc, #676]	; (8007290 <PxMessagingTask+0x77c>)
 8006fea:	1838      	adds	r0, r7, r0
 8006fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fee:	469c      	mov	ip, r3
 8006ff0:	4465      	add	r5, ip
 8006ff2:	49a0      	ldr	r1, [pc, #640]	; (8007274 <PxMessagingTask+0x760>)
 8006ff4:	1869      	adds	r1, r5, r1
 8006ff6:	464a      	mov	r2, r9
 8006ff8:	f00b f84d 	bl	8012096 <memcpy>
								longMessageLastPtr += numOfParams;
 8006ffc:	444f      	add	r7, r9
 8006ffe:	4653      	mov	r3, sl
 8007000:	801f      	strh	r7, [r3, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	4699      	mov	r9, r3
 8007006:	e5b5      	b.n	8006b74 <PxMessagingTask+0x60>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8007008:	4ba0      	ldr	r3, [pc, #640]	; (800728c <PxMessagingTask+0x778>)
 800700a:	469a      	mov	sl, r3
 800700c:	881f      	ldrh	r7, [r3, #0]
 800700e:	4ba0      	ldr	r3, [pc, #640]	; (8007290 <PxMessagingTask+0x77c>)
 8007010:	18f8      	adds	r0, r7, r3
 8007012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007014:	469c      	mov	ip, r3
 8007016:	4465      	add	r5, ip
 8007018:	4996      	ldr	r1, [pc, #600]	; (8007274 <PxMessagingTask+0x760>)
 800701a:	1869      	adds	r1, r5, r1
 800701c:	464a      	mov	r2, r9
 800701e:	f00b f83a 	bl	8012096 <memcpy>
								longMessageLastPtr += numOfParams;
 8007022:	444f      	add	r7, r9
 8007024:	b2bf      	uxth	r7, r7
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 8007026:	2116      	movs	r1, #22
 8007028:	0038      	movs	r0, r7
 800702a:	f7f9 f887 	bl	800013c <__udivsi3>
 800702e:	4b99      	ldr	r3, [pc, #612]	; (8007294 <PxMessagingTask+0x780>)
 8007030:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 8007032:	003a      	movs	r2, r7
 8007034:	4996      	ldr	r1, [pc, #600]	; (8007290 <PxMessagingTask+0x77c>)
 8007036:	4898      	ldr	r0, [pc, #608]	; (8007298 <PxMessagingTask+0x784>)
 8007038:	f00b f82d 	bl	8012096 <memcpy>
								longMessageLastPtr = 0;
 800703c:	2500      	movs	r5, #0
 800703e:	4653      	mov	r3, sl
 8007040:	801d      	strh	r5, [r3, #0]
 8007042:	46a9      	mov	r9, r5
 8007044:	e596      	b.n	8006b74 <PxMessagingTask+0x60>
								for (p=1 ; p<=NumOfPorts ; p++) {
 8007046:	2501      	movs	r5, #1
							temp = 0;
 8007048:	2300      	movs	r3, #0
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800704a:	2780      	movs	r7, #128	; 0x80
 800704c:	023f      	lsls	r7, r7, #8
									messageParams[temp++] = p;
 800704e:	46a1      	mov	r9, r4
 8007050:	001c      	movs	r4, r3
 8007052:	e003      	b.n	800705c <PxMessagingTask+0x548>
								for (p=1 ; p<=NumOfPorts ; p++) {
 8007054:	3501      	adds	r5, #1
 8007056:	b2ed      	uxtb	r5, r5
 8007058:	2d07      	cmp	r5, #7
 800705a:	d00a      	beq.n	8007072 <PxMessagingTask+0x55e>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800705c:	0028      	movs	r0, r5
 800705e:	f7fd fabd 	bl	80045dc <GetUart>
 8007062:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007064:	42bb      	cmp	r3, r7
 8007066:	d1f5      	bne.n	8007054 <PxMessagingTask+0x540>
									messageParams[temp++] = p;
 8007068:	1c63      	adds	r3, r4, #1
 800706a:	4a86      	ldr	r2, [pc, #536]	; (8007284 <PxMessagingTask+0x770>)
 800706c:	5515      	strb	r5, [r2, r4]
 800706e:	b2dc      	uxtb	r4, r3
 8007070:	e7f0      	b.n	8007054 <PxMessagingTask+0x540>
 8007072:	0023      	movs	r3, r4
 8007074:	9408      	str	r4, [sp, #32]
 8007076:	464c      	mov	r4, r9
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 8007078:	b29a      	uxth	r2, r3
 800707a:	2114      	movs	r1, #20
 800707c:	9806      	ldr	r0, [sp, #24]
 800707e:	f7fe fcaf 	bl	80059e0 <SendMessageToModule>
							break;
 8007082:	2300      	movs	r3, #0
 8007084:	4699      	mov	r9, r3
 8007086:	e575      	b.n	8006b74 <PxMessagingTask+0x60>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 8007088:	4b7a      	ldr	r3, [pc, #488]	; (8007274 <PxMessagingTask+0x760>)
 800708a:	199b      	adds	r3, r3, r6
 800708c:	5d5f      	ldrb	r7, [r3, r5]
 800708e:	063f      	lsls	r7, r7, #24
 8007090:	195b      	adds	r3, r3, r5
 8007092:	78da      	ldrb	r2, [r3, #3]
 8007094:	18bf      	adds	r7, r7, r2
 8007096:	785a      	ldrb	r2, [r3, #1]
 8007098:	0412      	lsls	r2, r2, #16
 800709a:	18bf      	adds	r7, r7, r2
 800709c:	789a      	ldrb	r2, [r3, #2]
 800709e:	0212      	lsls	r2, r2, #8
 80070a0:	18ba      	adds	r2, r7, r2
 80070a2:	9208      	str	r2, [sp, #32]
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 80070a4:	791b      	ldrb	r3, [r3, #4]
 80070a6:	2bff      	cmp	r3, #255	; 0xff
 80070a8:	d014      	beq.n	80070d4 <PxMessagingTask+0x5c0>
									for (p=0 ; p<numOfParams ; p++) 
 80070aa:	464b      	mov	r3, r9
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00f      	beq.n	80070d0 <PxMessagingTask+0x5bc>
 80070b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070b2:	1d0a      	adds	r2, r1, #4
 80070b4:	1952      	adds	r2, r2, r5
 80070b6:	4b6f      	ldr	r3, [pc, #444]	; (8007274 <PxMessagingTask+0x760>)
 80070b8:	18d7      	adds	r7, r2, r3
 80070ba:	3305      	adds	r3, #5
 80070bc:	468c      	mov	ip, r1
 80070be:	4463      	add	r3, ip
 80070c0:	195d      	adds	r5, r3, r5
 80070c2:	464b      	mov	r3, r9
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	18ed      	adds	r5, r5, r3
 80070ca:	46a1      	mov	r9, r4
 80070cc:	002c      	movs	r4, r5
 80070ce:	e011      	b.n	80070f4 <PxMessagingTask+0x5e0>
								temp = temp32 = 0;
 80070d0:	9308      	str	r3, [sp, #32]
 80070d2:	e54f      	b.n	8006b74 <PxMessagingTask+0x60>
									for (p=1 ; p<=NumOfPorts ; p++) 
 80070d4:	2501      	movs	r5, #1
										UpdateBaudrate(p, temp32); 
 80070d6:	9908      	ldr	r1, [sp, #32]
 80070d8:	0028      	movs	r0, r5
 80070da:	f007 f8d1 	bl	800e280 <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 80070de:	3501      	adds	r5, #1
 80070e0:	b2ed      	uxtb	r5, r5
 80070e2:	2d07      	cmp	r5, #7
 80070e4:	d1f7      	bne.n	80070d6 <PxMessagingTask+0x5c2>
								temp = temp32 = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	9308      	str	r3, [sp, #32]
 80070ea:	4699      	mov	r9, r3
 80070ec:	e542      	b.n	8006b74 <PxMessagingTask+0x60>
 80070ee:	3701      	adds	r7, #1
									for (p=0 ; p<numOfParams ; p++) 
 80070f0:	42a7      	cmp	r7, r4
 80070f2:	d008      	beq.n	8007106 <PxMessagingTask+0x5f2>
										temp = cMessage[port-1][4+shift+p];
 80070f4:	783d      	ldrb	r5, [r7, #0]
										if (temp>0 && temp<=NumOfPorts)	{
 80070f6:	1e6b      	subs	r3, r5, #1
 80070f8:	2b05      	cmp	r3, #5
 80070fa:	d8f8      	bhi.n	80070ee <PxMessagingTask+0x5da>
											UpdateBaudrate(temp, temp32); 
 80070fc:	9908      	ldr	r1, [sp, #32]
 80070fe:	0028      	movs	r0, r5
 8007100:	f007 f8be 	bl	800e280 <UpdateBaudrate>
 8007104:	e7f3      	b.n	80070ee <PxMessagingTask+0x5da>
 8007106:	464c      	mov	r4, r9
 8007108:	9508      	str	r5, [sp, #32]
 800710a:	2300      	movs	r3, #0
 800710c:	4699      	mov	r9, r3
 800710e:	e531      	b.n	8006b74 <PxMessagingTask+0x60>
								SaveToRO();
 8007110:	f7fc fa84 	bl	800361c <SaveToRO>
							SaveEEportsDir();
 8007114:	f7fc fd48 	bl	8003ba8 <SaveEEportsDir>
							indMode = IND_PING;
 8007118:	4b60      	ldr	r3, [pc, #384]	; (800729c <PxMessagingTask+0x788>)
 800711a:	2201      	movs	r2, #1
 800711c:	701a      	strb	r2, [r3, #0]
							break;
 800711e:	2300      	movs	r3, #0
 8007120:	4699      	mov	r9, r3
 8007122:	e527      	b.n	8006b74 <PxMessagingTask+0x60>
							ClearEEportsDir();
 8007124:	f7fc fd6a 	bl	8003bfc <ClearEEportsDir>
							ClearROtopology();
 8007128:	f7fc fc5c 	bl	80039e4 <ClearROtopology>
							osDelay(100);
 800712c:	2064      	movs	r0, #100	; 0x64
 800712e:	f007 f910 	bl	800e352 <osDelay>
							indMode = IND_TOPOLOGY;
 8007132:	4b5a      	ldr	r3, [pc, #360]	; (800729c <PxMessagingTask+0x788>)
 8007134:	2202      	movs	r2, #2
 8007136:	701a      	strb	r2, [r3, #0]
							break;
 8007138:	2300      	movs	r3, #0
 800713a:	4699      	mov	r9, r3
 800713c:	e51a      	b.n	8006b74 <PxMessagingTask+0x60>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800713e:	f007 fa1d 	bl	800e57c <FreeRTOS_CLIGetOutputBuffer>
 8007142:	900a      	str	r0, [sp, #40]	; 0x28
							if (dst == BOS_BROADCAST)
 8007144:	4653      	mov	r3, sl
 8007146:	2bff      	cmp	r3, #255	; 0xff
 8007148:	d011      	beq.n	800716e <PxMessagingTask+0x65a>
							else if (dst == BOS_MULTICAST)
 800714a:	2bfe      	cmp	r3, #254	; 0xfe
 800714c:	d01a      	beq.n	8007184 <PxMessagingTask+0x670>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 800714e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007150:	469c      	mov	ip, r3
 8007152:	4465      	add	r5, ip
 8007154:	4947      	ldr	r1, [pc, #284]	; (8007274 <PxMessagingTask+0x760>)
 8007156:	1869      	adds	r1, r5, r1
 8007158:	464a      	mov	r2, r9
 800715a:	4851      	ldr	r0, [pc, #324]	; (80072a0 <PxMessagingTask+0x78c>)
 800715c:	f00a ff9b 	bl	8012096 <memcpy>
								temp = PcPort; PcPort = port;
 8007160:	4d50      	ldr	r5, [pc, #320]	; (80072a4 <PxMessagingTask+0x790>)
								if (BOS.response == BOS_RESPONSE_ALL)
 8007162:	4b51      	ldr	r3, [pc, #324]	; (80072a8 <PxMessagingTask+0x794>)
 8007164:	4699      	mov	r9, r3
 8007166:	46a2      	mov	sl, r4
 8007168:	960c      	str	r6, [sp, #48]	; 0x30
 800716a:	9e07      	ldr	r6, [sp, #28]
 800716c:	e019      	b.n	80071a2 <PxMessagingTask+0x68e>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 800716e:	464a      	mov	r2, r9
 8007170:	3a01      	subs	r2, #1
 8007172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007174:	469c      	mov	ip, r3
 8007176:	4465      	add	r5, ip
 8007178:	493e      	ldr	r1, [pc, #248]	; (8007274 <PxMessagingTask+0x760>)
 800717a:	1869      	adds	r1, r5, r1
 800717c:	4848      	ldr	r0, [pc, #288]	; (80072a0 <PxMessagingTask+0x78c>)
 800717e:	f00a ff8a 	bl	8012096 <memcpy>
 8007182:	e7ed      	b.n	8007160 <PxMessagingTask+0x64c>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 8007184:	464b      	mov	r3, r9
 8007186:	9a08      	ldr	r2, [sp, #32]
 8007188:	1a9a      	subs	r2, r3, r2
 800718a:	3a02      	subs	r2, #2
 800718c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718e:	469c      	mov	ip, r3
 8007190:	4465      	add	r5, ip
 8007192:	4938      	ldr	r1, [pc, #224]	; (8007274 <PxMessagingTask+0x760>)
 8007194:	1869      	adds	r1, r5, r1
 8007196:	4842      	ldr	r0, [pc, #264]	; (80072a0 <PxMessagingTask+0x78c>)
 8007198:	f00a ff7d 	bl	8012096 <memcpy>
 800719c:	e7e0      	b.n	8007160 <PxMessagingTask+0x64c>
							while( xReturned != pdFALSE );								
 800719e:	2c00      	cmp	r4, #0
 80071a0:	d021      	beq.n	80071e6 <PxMessagingTask+0x6d2>
								temp = PcPort; PcPort = port;
 80071a2:	782f      	ldrb	r7, [r5, #0]
 80071a4:	702e      	strb	r6, [r5, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 80071a6:	2299      	movs	r2, #153	; 0x99
 80071a8:	0092      	lsls	r2, r2, #2
 80071aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071ac:	483c      	ldr	r0, [pc, #240]	; (80072a0 <PxMessagingTask+0x78c>)
 80071ae:	f007 f967 	bl	800e480 <FreeRTOS_CLIProcessCommand>
 80071b2:	0004      	movs	r4, r0
								PcPort = temp;
 80071b4:	702f      	strb	r7, [r5, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 80071b6:	464b      	mov	r3, r9
 80071b8:	799b      	ldrb	r3, [r3, #6]
 80071ba:	2b60      	cmp	r3, #96	; 0x60
 80071bc:	d1ef      	bne.n	800719e <PxMessagingTask+0x68a>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 80071be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071c0:	f7f8 ffaa 	bl	8000118 <strlen>
 80071c4:	0002      	movs	r2, r0
 80071c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071c8:	482e      	ldr	r0, [pc, #184]	; (8007284 <PxMessagingTask+0x770>)
 80071ca:	f00a ff64 	bl	8012096 <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 80071ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071d0:	f7f8 ffa2 	bl	8000118 <strlen>
 80071d4:	b282      	uxth	r2, r0
 80071d6:	2118      	movs	r1, #24
 80071d8:	9806      	ldr	r0, [sp, #24]
 80071da:	f7fe fc01 	bl	80059e0 <SendMessageToModule>
									osDelay(10); 
 80071de:	200a      	movs	r0, #10
 80071e0:	f007 f8b7 	bl	800e352 <osDelay>
 80071e4:	e7db      	b.n	800719e <PxMessagingTask+0x68a>
 80071e6:	4654      	mov	r4, sl
 80071e8:	9708      	str	r7, [sp, #32]
 80071ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 80071ec:	2232      	movs	r2, #50	; 0x32
 80071ee:	2100      	movs	r1, #0
 80071f0:	482b      	ldr	r0, [pc, #172]	; (80072a0 <PxMessagingTask+0x78c>)
 80071f2:	f00a ff59 	bl	80120a8 <memset>
							break;
 80071f6:	2300      	movs	r3, #0
 80071f8:	4699      	mov	r9, r3
 80071fa:	e4bb      	b.n	8006b74 <PxMessagingTask+0x60>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80071fc:	f007 f9be 	bl	800e57c <FreeRTOS_CLIGetOutputBuffer>
 8007200:	0007      	movs	r7, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8007202:	f7f8 ff89 	bl	8000118 <strlen>
 8007206:	0002      	movs	r2, r0
 8007208:	2100      	movs	r1, #0
 800720a:	0038      	movs	r0, r7
 800720c:	f00a ff4c 	bl	80120a8 <memset>
							if (longMessage) {
 8007210:	4b1d      	ldr	r3, [pc, #116]	; (8007288 <PxMessagingTask+0x774>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d012      	beq.n	800723e <PxMessagingTask+0x72a>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8007218:	4b1c      	ldr	r3, [pc, #112]	; (800728c <PxMessagingTask+0x778>)
 800721a:	469a      	mov	sl, r3
 800721c:	8818      	ldrh	r0, [r3, #0]
 800721e:	1838      	adds	r0, r7, r0
 8007220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007222:	469c      	mov	ip, r3
 8007224:	4465      	add	r5, ip
 8007226:	4913      	ldr	r1, [pc, #76]	; (8007274 <PxMessagingTask+0x760>)
 8007228:	1869      	adds	r1, r5, r1
 800722a:	464a      	mov	r2, r9
 800722c:	f00a ff33 	bl	8012096 <memcpy>
								longMessageLastPtr += numOfParams;
 8007230:	4653      	mov	r3, sl
 8007232:	881a      	ldrh	r2, [r3, #0]
 8007234:	444a      	add	r2, r9
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	2300      	movs	r3, #0
 800723a:	4699      	mov	r9, r3
 800723c:	e49a      	b.n	8006b74 <PxMessagingTask+0x60>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <PxMessagingTask+0x778>)
 8007240:	469a      	mov	sl, r3
 8007242:	8818      	ldrh	r0, [r3, #0]
 8007244:	1838      	adds	r0, r7, r0
 8007246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007248:	469c      	mov	ip, r3
 800724a:	4465      	add	r5, ip
 800724c:	4909      	ldr	r1, [pc, #36]	; (8007274 <PxMessagingTask+0x760>)
 800724e:	1869      	adds	r1, r5, r1
 8007250:	464a      	mov	r2, r9
 8007252:	f00a ff20 	bl	8012096 <memcpy>
								longMessageLastPtr = 0;
 8007256:	2500      	movs	r5, #0
 8007258:	4653      	mov	r3, sl
 800725a:	801d      	strh	r5, [r3, #0]
								responseStatus = BOS_OK;
 800725c:	4b07      	ldr	r3, [pc, #28]	; (800727c <PxMessagingTask+0x768>)
 800725e:	701d      	strb	r5, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 8007260:	002b      	movs	r3, r5
 8007262:	002a      	movs	r2, r5
 8007264:	0029      	movs	r1, r5
 8007266:	4811      	ldr	r0, [pc, #68]	; (80072ac <PxMessagingTask+0x798>)
 8007268:	6800      	ldr	r0, [r0, #0]
 800726a:	f007 fb85 	bl	800e978 <xTaskGenericNotify>
 800726e:	46a9      	mov	r9, r5
 8007270:	e480      	b.n	8006b74 <PxMessagingTask+0x60>
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	200006d8 	.word	0x200006d8
 8007278:	20000bac 	.word	0x20000bac
 800727c:	20000c98 	.word	0x20000c98
 8007280:	20000b90 	.word	0x20000b90
 8007284:	20000a5c 	.word	0x20000a5c
 8007288:	20000903 	.word	0x20000903
 800728c:	20000904 	.word	0x20000904
 8007290:	20000908 	.word	0x20000908
 8007294:	2000001c 	.word	0x2000001c
 8007298:	200003b8 	.word	0x200003b8
 800729c:	20000902 	.word	0x20000902
 80072a0:	200006a4 	.word	0x200006a4
 80072a4:	200003b7 	.word	0x200003b7
 80072a8:	20006160 	.word	0x20006160
 80072ac:	20001050 	.word	0x20001050
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 80072b0:	4be4      	ldr	r3, [pc, #912]	; (8007644 <PxMessagingTask+0xb30>)
 80072b2:	4ae5      	ldr	r2, [pc, #916]	; (8007648 <PxMessagingTask+0xb34>)
 80072b4:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 80072b6:	4be5      	ldr	r3, [pc, #916]	; (800764c <PxMessagingTask+0xb38>)
 80072b8:	2201      	movs	r2, #1
 80072ba:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 80072bc:	200a      	movs	r0, #10
 80072be:	f007 f848 	bl	800e352 <osDelay>
								NVIC_SystemReset();												
 80072c2:	f7fb fd2d 	bl	8002d20 <NVIC_SystemReset>
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 80072c6:	4fe2      	ldr	r7, [pc, #904]	; (8007650 <PxMessagingTask+0xb3c>)
 80072c8:	19bf      	adds	r7, r7, r6
 80072ca:	5d78      	ldrb	r0, [r7, r5]
 80072cc:	2300      	movs	r3, #0
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	3319      	adds	r3, #25
 80072d2:	2200      	movs	r2, #0
 80072d4:	2100      	movs	r1, #0
 80072d6:	f7fd fd23 	bl	8004d20 <SendMessageFromPort>
								osDelay(100);
 80072da:	2064      	movs	r0, #100	; 0x64
 80072dc:	f007 f839 	bl	800e352 <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 80072e0:	5d7b      	ldrb	r3, [r7, r5]
 80072e2:	4adc      	ldr	r2, [pc, #880]	; (8007654 <PxMessagingTask+0xb40>)
 80072e4:	7811      	ldrb	r1, [r2, #0]
 80072e6:	9a07      	ldr	r2, [sp, #28]
 80072e8:	9806      	ldr	r0, [sp, #24]
 80072ea:	f7ff fadb 	bl	80068a4 <remoteBootloaderUpdate>
								break;
 80072ee:	2300      	movs	r3, #0
 80072f0:	4699      	mov	r9, r3
 80072f2:	e43f      	b.n	8006b74 <PxMessagingTask+0x60>
							temp = cMessage[port-1][11+shift];
 80072f4:	002f      	movs	r7, r5
 80072f6:	230b      	movs	r3, #11
 80072f8:	469a      	mov	sl, r3
 80072fa:	44aa      	add	sl, r5
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 80072fc:	464b      	mov	r3, r9
 80072fe:	2b0f      	cmp	r3, #15
 8007300:	d011      	beq.n	8007326 <PxMessagingTask+0x812>
							temp = cMessage[port-1][11+shift];
 8007302:	2238      	movs	r2, #56	; 0x38
 8007304:	4362      	muls	r2, r4
 8007306:	4bd2      	ldr	r3, [pc, #840]	; (8007650 <PxMessagingTask+0xb3c>)
 8007308:	189b      	adds	r3, r3, r2
 800730a:	4652      	mov	r2, sl
 800730c:	5c9b      	ldrb	r3, [r3, r2]
 800730e:	930a      	str	r3, [sp, #40]	; 0x28
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 8007310:	464b      	mov	r3, r9
 8007312:	2b11      	cmp	r3, #17
 8007314:	d10e      	bne.n	8007334 <PxMessagingTask+0x820>
 8007316:	2238      	movs	r2, #56	; 0x38
 8007318:	4362      	muls	r2, r4
 800731a:	4bcd      	ldr	r3, [pc, #820]	; (8007650 <PxMessagingTask+0xb3c>)
 800731c:	189b      	adds	r3, r3, r2
 800731e:	195b      	adds	r3, r3, r5
 8007320:	7bdb      	ldrb	r3, [r3, #15]
 8007322:	930a      	str	r3, [sp, #40]	; 0x28
 8007324:	e006      	b.n	8007334 <PxMessagingTask+0x820>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 8007326:	2238      	movs	r2, #56	; 0x38
 8007328:	4362      	muls	r2, r4
 800732a:	4bc9      	ldr	r3, [pc, #804]	; (8007650 <PxMessagingTask+0xb3c>)
 800732c:	189b      	adds	r3, r3, r2
 800732e:	195d      	adds	r5, r3, r5
 8007330:	7b6b      	ldrb	r3, [r5, #13]
 8007332:	930a      	str	r3, [sp, #40]	; 0x28
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 8007334:	1c78      	adds	r0, r7, #1
 8007336:	9008      	str	r0, [sp, #32]
 8007338:	1cbd      	adds	r5, r7, #2
 800733a:	950d      	str	r5, [sp, #52]	; 0x34
 800733c:	1cf9      	adds	r1, r7, #3
 800733e:	910e      	str	r1, [sp, #56]	; 0x38
 8007340:	4bc3      	ldr	r3, [pc, #780]	; (8007650 <PxMessagingTask+0xb3c>)
 8007342:	199b      	adds	r3, r3, r6
 8007344:	5dda      	ldrb	r2, [r3, r7]
 8007346:	0612      	lsls	r2, r2, #24
 8007348:	5c59      	ldrb	r1, [r3, r1]
 800734a:	1852      	adds	r2, r2, r1
 800734c:	5c19      	ldrb	r1, [r3, r0]
 800734e:	0409      	lsls	r1, r1, #16
 8007350:	1852      	adds	r2, r2, r1
 8007352:	5d59      	ldrb	r1, [r3, r5]
 8007354:	0209      	lsls	r1, r1, #8
 8007356:	1852      	adds	r2, r2, r1
 8007358:	920c      	str	r2, [sp, #48]	; 0x30
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 800735a:	1d3a      	adds	r2, r7, #4
 800735c:	920f      	str	r2, [sp, #60]	; 0x3c
 800735e:	1d79      	adds	r1, r7, #5
 8007360:	468c      	mov	ip, r1
 8007362:	1db9      	adds	r1, r7, #6
 8007364:	1df8      	adds	r0, r7, #7
 8007366:	5c9d      	ldrb	r5, [r3, r2]
 8007368:	062d      	lsls	r5, r5, #24
 800736a:	4662      	mov	r2, ip
 800736c:	5c9a      	ldrb	r2, [r3, r2]
 800736e:	0412      	lsls	r2, r2, #16
 8007370:	18aa      	adds	r2, r5, r2
 8007372:	5c1d      	ldrb	r5, [r3, r0]
 8007374:	1952      	adds	r2, r2, r5
 8007376:	5c5d      	ldrb	r5, [r3, r1]
 8007378:	022d      	lsls	r5, r5, #8
 800737a:	1955      	adds	r5, r2, r5
							if (temp == false)
 800737c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800737e:	2b00      	cmp	r3, #0
 8007380:	d15b      	bne.n	800743a <PxMessagingTask+0x926>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 8007382:	4bb3      	ldr	r3, [pc, #716]	; (8007650 <PxMessagingTask+0xb3c>)
 8007384:	199b      	adds	r3, r3, r6
 8007386:	19db      	adds	r3, r3, r7
 8007388:	7a5b      	ldrb	r3, [r3, #9]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <PxMessagingTask+0x88a>
 800738e:	2138      	movs	r1, #56	; 0x38
 8007390:	4361      	muls	r1, r4
 8007392:	4aaf      	ldr	r2, [pc, #700]	; (8007650 <PxMessagingTask+0xb3c>)
 8007394:	1852      	adds	r2, r2, r1
 8007396:	19d2      	adds	r2, r2, r7
 8007398:	7a91      	ldrb	r1, [r2, #10]
 800739a:	2900      	cmp	r1, #0
 800739c:	d125      	bne.n	80073ea <PxMessagingTask+0x8d6>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 800739e:	4bac      	ldr	r3, [pc, #688]	; (8007650 <PxMessagingTask+0xb3c>)
 80073a0:	199b      	adds	r3, r3, r6
 80073a2:	4652      	mov	r2, sl
 80073a4:	5c9b      	ldrb	r3, [r3, r2]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d007      	beq.n	80073ba <PxMessagingTask+0x8a6>
 80073aa:	2138      	movs	r1, #56	; 0x38
 80073ac:	4361      	muls	r1, r4
 80073ae:	4aa8      	ldr	r2, [pc, #672]	; (8007650 <PxMessagingTask+0xb3c>)
 80073b0:	1852      	adds	r2, r2, r1
 80073b2:	19d2      	adds	r2, r2, r7
 80073b4:	7b11      	ldrb	r1, [r2, #12]
 80073b6:	2900      	cmp	r1, #0
 80073b8:	d123      	bne.n	8007402 <PxMessagingTask+0x8ee>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 80073ba:	4ba5      	ldr	r3, [pc, #660]	; (8007650 <PxMessagingTask+0xb3c>)
 80073bc:	199b      	adds	r3, r3, r6
 80073be:	19db      	adds	r3, r3, r7
 80073c0:	7b5b      	ldrb	r3, [r3, #13]
 80073c2:	9308      	str	r3, [sp, #32]
 80073c4:	2200      	movs	r2, #0
 80073c6:	4691      	mov	r9, r2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <PxMessagingTask+0x8bc>
 80073cc:	f7ff fbd2 	bl	8006b74 <PxMessagingTask+0x60>
 80073d0:	3238      	adds	r2, #56	; 0x38
 80073d2:	4362      	muls	r2, r4
 80073d4:	4b9e      	ldr	r3, [pc, #632]	; (8007650 <PxMessagingTask+0xb3c>)
 80073d6:	189b      	adds	r3, r3, r2
 80073d8:	19db      	adds	r3, r3, r7
 80073da:	7b9a      	ldrb	r2, [r3, #14]
 80073dc:	454a      	cmp	r2, r9
 80073de:	d11c      	bne.n	800741a <PxMessagingTask+0x906>
 80073e0:	9208      	str	r2, [sp, #32]
 80073e2:	2300      	movs	r3, #0
 80073e4:	4699      	mov	r9, r3
 80073e6:	f7ff fbc5 	bl	8006b74 <PxMessagingTask+0x60>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 80073ea:	2038      	movs	r0, #56	; 0x38
 80073ec:	4360      	muls	r0, r4
 80073ee:	4a98      	ldr	r2, [pc, #608]	; (8007650 <PxMessagingTask+0xb3c>)
 80073f0:	1812      	adds	r2, r2, r0
 80073f2:	19d2      	adds	r2, r2, r7
 80073f4:	7a10      	ldrb	r0, [r2, #8]
 80073f6:	9100      	str	r1, [sp, #0]
 80073f8:	002a      	movs	r2, r5
 80073fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073fc:	f7fd f910 	bl	8004620 <SetupDMAStreams>
 8007400:	e7cd      	b.n	800739e <PxMessagingTask+0x88a>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 8007402:	2038      	movs	r0, #56	; 0x38
 8007404:	4360      	muls	r0, r4
 8007406:	4a92      	ldr	r2, [pc, #584]	; (8007650 <PxMessagingTask+0xb3c>)
 8007408:	1812      	adds	r2, r2, r0
 800740a:	19d2      	adds	r2, r2, r7
 800740c:	7a10      	ldrb	r0, [r2, #8]
 800740e:	9100      	str	r1, [sp, #0]
 8007410:	002a      	movs	r2, r5
 8007412:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007414:	f7fd f904 	bl	8004620 <SetupDMAStreams>
 8007418:	e7cf      	b.n	80073ba <PxMessagingTask+0x8a6>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 800741a:	2138      	movs	r1, #56	; 0x38
 800741c:	4361      	muls	r1, r4
 800741e:	4b8c      	ldr	r3, [pc, #560]	; (8007650 <PxMessagingTask+0xb3c>)
 8007420:	185b      	adds	r3, r3, r1
 8007422:	19df      	adds	r7, r3, r7
 8007424:	7a38      	ldrb	r0, [r7, #8]
 8007426:	9200      	str	r2, [sp, #0]
 8007428:	9b08      	ldr	r3, [sp, #32]
 800742a:	002a      	movs	r2, r5
 800742c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800742e:	f7fd f8f7 	bl	8004620 <SetupDMAStreams>
 8007432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007434:	9308      	str	r3, [sp, #32]
 8007436:	f7ff fb9d 	bl	8006b74 <PxMessagingTask+0x60>
 800743a:	9705      	str	r7, [sp, #20]
 800743c:	4663      	mov	r3, ip
 800743e:	9306      	str	r3, [sp, #24]
 8007440:	468b      	mov	fp, r1
 8007442:	4680      	mov	r8, r0
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 8007444:	2338      	movs	r3, #56	; 0x38
 8007446:	4363      	muls	r3, r4
 8007448:	4d81      	ldr	r5, [pc, #516]	; (8007650 <PxMessagingTask+0xb3c>)
 800744a:	18ed      	adds	r5, r5, r3
 800744c:	19ee      	adds	r6, r5, r7
 800744e:	7a31      	ldrb	r1, [r6, #8]
 8007450:	20e4      	movs	r0, #228	; 0xe4
 8007452:	f003 f9b3 	bl	800a7bc <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 8007456:	5deb      	ldrb	r3, [r5, r7]
 8007458:	021b      	lsls	r3, r3, #8
 800745a:	9f08      	ldr	r7, [sp, #32]
 800745c:	5de9      	ldrb	r1, [r5, r7]
 800745e:	18c9      	adds	r1, r1, r3
 8007460:	b289      	uxth	r1, r1
 8007462:	20e5      	movs	r0, #229	; 0xe5
 8007464:	f003 f9aa 	bl	800a7bc <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 8007468:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800746a:	5deb      	ldrb	r3, [r5, r7]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007470:	5de9      	ldrb	r1, [r5, r7]
 8007472:	18c9      	adds	r1, r1, r3
 8007474:	b289      	uxth	r1, r1
 8007476:	20e6      	movs	r0, #230	; 0xe6
 8007478:	f003 f9a0 	bl	800a7bc <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 800747c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800747e:	5deb      	ldrb	r3, [r5, r7]
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	9a06      	ldr	r2, [sp, #24]
 8007484:	5ca9      	ldrb	r1, [r5, r2]
 8007486:	18c9      	adds	r1, r1, r3
 8007488:	b289      	uxth	r1, r1
 800748a:	20e7      	movs	r0, #231	; 0xe7
 800748c:	f003 f996 	bl	800a7bc <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 8007490:	465b      	mov	r3, fp
 8007492:	5ceb      	ldrb	r3, [r5, r3]
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	4642      	mov	r2, r8
 8007498:	5ca9      	ldrb	r1, [r5, r2]
 800749a:	18c9      	adds	r1, r1, r3
 800749c:	b289      	uxth	r1, r1
 800749e:	20e8      	movs	r0, #232	; 0xe8
 80074a0:	f003 f98c 	bl	800a7bc <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 80074a4:	7a73      	ldrb	r3, [r6, #9]
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	7ab1      	ldrb	r1, [r6, #10]
 80074aa:	18c9      	adds	r1, r1, r3
 80074ac:	b289      	uxth	r1, r1
 80074ae:	20e9      	movs	r0, #233	; 0xe9
 80074b0:	f003 f984 	bl	800a7bc <EE_WriteVariable>
								if (numOfParams == 19)
 80074b4:	464b      	mov	r3, r9
 80074b6:	2b13      	cmp	r3, #19
 80074b8:	d003      	beq.n	80074c2 <PxMessagingTask+0x9ae>
								if (numOfParams == 21)
 80074ba:	2b15      	cmp	r3, #21
 80074bc:	d012      	beq.n	80074e4 <PxMessagingTask+0x9d0>
								NVIC_SystemReset();
 80074be:	f7fb fc2f 	bl	8002d20 <NVIC_SystemReset>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 80074c2:	3325      	adds	r3, #37	; 0x25
 80074c4:	4363      	muls	r3, r4
 80074c6:	4c62      	ldr	r4, [pc, #392]	; (8007650 <PxMessagingTask+0xb3c>)
 80074c8:	18e4      	adds	r4, r4, r3
 80074ca:	4653      	mov	r3, sl
 80074cc:	5ce3      	ldrb	r3, [r4, r3]
 80074ce:	021b      	lsls	r3, r3, #8
 80074d0:	9a05      	ldr	r2, [sp, #20]
 80074d2:	4694      	mov	ip, r2
 80074d4:	4464      	add	r4, ip
 80074d6:	7b21      	ldrb	r1, [r4, #12]
 80074d8:	18c9      	adds	r1, r1, r3
 80074da:	b289      	uxth	r1, r1
 80074dc:	20ea      	movs	r0, #234	; 0xea
 80074de:	f003 f96d 	bl	800a7bc <EE_WriteVariable>
 80074e2:	e7ec      	b.n	80074be <PxMessagingTask+0x9aa>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 80074e4:	3323      	adds	r3, #35	; 0x23
 80074e6:	435c      	muls	r4, r3
 80074e8:	4b59      	ldr	r3, [pc, #356]	; (8007650 <PxMessagingTask+0xb3c>)
 80074ea:	191b      	adds	r3, r3, r4
 80074ec:	9a05      	ldr	r2, [sp, #20]
 80074ee:	4694      	mov	ip, r2
 80074f0:	4463      	add	r3, ip
 80074f2:	7b5a      	ldrb	r2, [r3, #13]
 80074f4:	0212      	lsls	r2, r2, #8
 80074f6:	7b99      	ldrb	r1, [r3, #14]
 80074f8:	1889      	adds	r1, r1, r2
 80074fa:	b289      	uxth	r1, r1
 80074fc:	20eb      	movs	r0, #235	; 0xeb
 80074fe:	f003 f95d 	bl	800a7bc <EE_WriteVariable>
 8007502:	e7dc      	b.n	80074be <PxMessagingTask+0x9aa>
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8007504:	4f52      	ldr	r7, [pc, #328]	; (8007650 <PxMessagingTask+0xb3c>)
 8007506:	19bf      	adds	r7, r7, r6
 8007508:	1979      	adds	r1, r7, r5
 800750a:	7a8b      	ldrb	r3, [r1, #10]
 800750c:	930a      	str	r3, [sp, #40]	; 0x28
 800750e:	7aca      	ldrb	r2, [r1, #11]
 8007510:	4850      	ldr	r0, [pc, #320]	; (8007654 <PxMessagingTask+0xb40>)
 8007512:	7800      	ldrb	r0, [r0, #0]
 8007514:	4681      	mov	r9, r0
 8007516:	7a48      	ldrb	r0, [r1, #9]
 8007518:	4682      	mov	sl, r0
 800751a:	7b08      	ldrb	r0, [r1, #12]
 800751c:	1e43      	subs	r3, r0, #1
 800751e:	4198      	sbcs	r0, r3
 8007520:	9003      	str	r0, [sp, #12]
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 8007522:	7908      	ldrb	r0, [r1, #4]
 8007524:	0600      	lsls	r0, r0, #24
 8007526:	4684      	mov	ip, r0
 8007528:	7948      	ldrb	r0, [r1, #5]
 800752a:	0400      	lsls	r0, r0, #16
 800752c:	4460      	add	r0, ip
 800752e:	79cb      	ldrb	r3, [r1, #7]
 8007530:	469c      	mov	ip, r3
 8007532:	4460      	add	r0, ip
 8007534:	798b      	ldrb	r3, [r1, #6]
 8007536:	021b      	lsls	r3, r3, #8
 8007538:	469c      	mov	ip, r3
 800753a:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800753c:	9002      	str	r0, [sp, #8]
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800753e:	5d78      	ldrb	r0, [r7, r5]
 8007540:	0600      	lsls	r0, r0, #24
 8007542:	78cd      	ldrb	r5, [r1, #3]
 8007544:	1940      	adds	r0, r0, r5
 8007546:	784d      	ldrb	r5, [r1, #1]
 8007548:	042d      	lsls	r5, r5, #16
 800754a:	1940      	adds	r0, r0, r5
 800754c:	788d      	ldrb	r5, [r1, #2]
 800754e:	022d      	lsls	r5, r5, #8
 8007550:	1940      	adds	r0, r0, r5
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8007552:	9001      	str	r0, [sp, #4]
 8007554:	7a09      	ldrb	r1, [r1, #8]
 8007556:	9100      	str	r1, [sp, #0]
 8007558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800755a:	4649      	mov	r1, r9
 800755c:	4650      	mov	r0, sl
 800755e:	f7ff f8d3 	bl	8006708 <StartScastDMAStream>
							break;								
 8007562:	2300      	movs	r3, #0
 8007564:	4699      	mov	r9, r3
 8007566:	f7ff fb05 	bl	8006b74 <PxMessagingTask+0x60>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 800756a:	4b39      	ldr	r3, [pc, #228]	; (8007650 <PxMessagingTask+0xb3c>)
 800756c:	199b      	adds	r3, r3, r6
 800756e:	5d5b      	ldrb	r3, [r3, r5]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d000      	beq.n	8007576 <PxMessagingTask+0xa62>
 8007574:	e09b      	b.n	80076ae <PxMessagingTask+0xb9a>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 8007576:	2238      	movs	r2, #56	; 0x38
 8007578:	4362      	muls	r2, r4
 800757a:	4b35      	ldr	r3, [pc, #212]	; (8007650 <PxMessagingTask+0xb3c>)
 800757c:	189b      	adds	r3, r3, r2
 800757e:	195d      	adds	r5, r3, r5
 8007580:	78ab      	ldrb	r3, [r5, #2]
 8007582:	061b      	lsls	r3, r3, #24
 8007584:	78ea      	ldrb	r2, [r5, #3]
 8007586:	0412      	lsls	r2, r2, #16
 8007588:	189b      	adds	r3, r3, r2
 800758a:	796a      	ldrb	r2, [r5, #5]
 800758c:	189b      	adds	r3, r3, r2
 800758e:	792a      	ldrb	r2, [r5, #4]
 8007590:	0212      	lsls	r2, r2, #8
 8007592:	189b      	adds	r3, r3, r2
									switch (cMessage[port-1][1+shift])											// requested format
 8007594:	786a      	ldrb	r2, [r5, #1]
 8007596:	3a01      	subs	r2, #1
 8007598:	b2d1      	uxtb	r1, r2
 800759a:	2907      	cmp	r1, #7
 800759c:	d901      	bls.n	80075a2 <PxMessagingTask+0xa8e>
 800759e:	f000 fd1d 	bl	8007fdc <PxMessagingTask+0x14c8>
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	0092      	lsls	r2, r2, #2
 80075a6:	492c      	ldr	r1, [pc, #176]	; (8007658 <PxMessagingTask+0xb44>)
 80075a8:	588a      	ldr	r2, [r1, r2]
 80075aa:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	4b2b      	ldr	r3, [pc, #172]	; (800765c <PxMessagingTask+0xb48>)
 80075b0:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 80075b2:	2201      	movs	r2, #1
 80075b4:	211f      	movs	r1, #31
 80075b6:	9806      	ldr	r0, [sp, #24]
 80075b8:	f7fe fa12 	bl	80059e0 <SendMessageToModule>
 80075bc:	2300      	movs	r3, #0
 80075be:	4699      	mov	r9, r3
 80075c0:	f7ff fad8 	bl	8006b74 <PxMessagingTask+0x60>
											messageParams[0] = *(__IO int8_t *)temp32; 
 80075c4:	781a      	ldrb	r2, [r3, #0]
 80075c6:	4b25      	ldr	r3, [pc, #148]	; (800765c <PxMessagingTask+0xb48>)
 80075c8:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 80075ca:	2201      	movs	r2, #1
 80075cc:	211f      	movs	r1, #31
 80075ce:	9806      	ldr	r0, [sp, #24]
 80075d0:	f7fe fa06 	bl	80059e0 <SendMessageToModule>
 80075d4:	2300      	movs	r3, #0
 80075d6:	4699      	mov	r9, r3
 80075d8:	f7ff facc 	bl	8006b74 <PxMessagingTask+0x60>
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 80075dc:	8819      	ldrh	r1, [r3, #0]
 80075de:	4a1f      	ldr	r2, [pc, #124]	; (800765c <PxMessagingTask+0xb48>)
 80075e0:	7011      	strb	r1, [r2, #0]
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	0a1b      	lsrs	r3, r3, #8
 80075e6:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 80075e8:	2202      	movs	r2, #2
 80075ea:	211f      	movs	r1, #31
 80075ec:	9806      	ldr	r0, [sp, #24]
 80075ee:	f7fe f9f7 	bl	80059e0 <SendMessageToModule>
 80075f2:	2300      	movs	r3, #0
 80075f4:	4699      	mov	r9, r3
 80075f6:	f7ff fabd 	bl	8006b74 <PxMessagingTask+0x60>
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 80075fa:	8819      	ldrh	r1, [r3, #0]
 80075fc:	4a17      	ldr	r2, [pc, #92]	; (800765c <PxMessagingTask+0xb48>)
 80075fe:	7011      	strb	r1, [r2, #0]
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b21b      	sxth	r3, r3
 8007604:	121b      	asrs	r3, r3, #8
 8007606:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8007608:	2202      	movs	r2, #2
 800760a:	211f      	movs	r1, #31
 800760c:	9806      	ldr	r0, [sp, #24]
 800760e:	f7fe f9e7 	bl	80059e0 <SendMessageToModule>
 8007612:	2300      	movs	r3, #0
 8007614:	4699      	mov	r9, r3
 8007616:	f7ff faad 	bl	8006b74 <PxMessagingTask+0x60>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800761a:	6819      	ldr	r1, [r3, #0]
 800761c:	4a0f      	ldr	r2, [pc, #60]	; (800765c <PxMessagingTask+0xb48>)
 800761e:	7011      	strb	r1, [r2, #0]
 8007620:	6819      	ldr	r1, [r3, #0]
 8007622:	0a09      	lsrs	r1, r1, #8
 8007624:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8007626:	6819      	ldr	r1, [r3, #0]
 8007628:	0c09      	lsrs	r1, r1, #16
 800762a:	7091      	strb	r1, [r2, #2]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	0e1b      	lsrs	r3, r3, #24
 8007630:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 8007632:	2204      	movs	r2, #4
 8007634:	211f      	movs	r1, #31
 8007636:	9806      	ldr	r0, [sp, #24]
 8007638:	f7fe f9d2 	bl	80059e0 <SendMessageToModule>
 800763c:	2300      	movs	r3, #0
 800763e:	4699      	mov	r9, r3
 8007640:	f7ff fa98 	bl	8006b74 <PxMessagingTask+0x60>
 8007644:	20007ff0 	.word	0x20007ff0
 8007648:	deadbeef 	.word	0xdeadbeef
 800764c:	20000902 	.word	0x20000902
 8007650:	200006d8 	.word	0x200006d8
 8007654:	20000b90 	.word	0x20000b90
 8007658:	080165f4 	.word	0x080165f4
 800765c:	20000a5c 	.word	0x20000a5c
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8007660:	6819      	ldr	r1, [r3, #0]
 8007662:	4aef      	ldr	r2, [pc, #956]	; (8007a20 <PxMessagingTask+0xf0c>)
 8007664:	7011      	strb	r1, [r2, #0]
 8007666:	6819      	ldr	r1, [r3, #0]
 8007668:	1209      	asrs	r1, r1, #8
 800766a:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800766c:	6819      	ldr	r1, [r3, #0]
 800766e:	1409      	asrs	r1, r1, #16
 8007670:	7091      	strb	r1, [r2, #2]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	161b      	asrs	r3, r3, #24
 8007676:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 8007678:	2204      	movs	r2, #4
 800767a:	211f      	movs	r1, #31
 800767c:	9806      	ldr	r0, [sp, #24]
 800767e:	f7fe f9af 	bl	80059e0 <SendMessageToModule>
 8007682:	2300      	movs	r3, #0
 8007684:	4699      	mov	r9, r3
 8007686:	f7ff fa75 	bl	8006b74 <PxMessagingTask+0x60>
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 800768a:	7819      	ldrb	r1, [r3, #0]
 800768c:	4ae4      	ldr	r2, [pc, #912]	; (8007a20 <PxMessagingTask+0xf0c>)
 800768e:	7011      	strb	r1, [r2, #0]
 8007690:	7859      	ldrb	r1, [r3, #1]
 8007692:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 8007694:	7899      	ldrb	r1, [r3, #2]
 8007696:	7091      	strb	r1, [r2, #2]
 8007698:	78db      	ldrb	r3, [r3, #3]
 800769a:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 800769c:	2208      	movs	r2, #8
 800769e:	211f      	movs	r1, #31
 80076a0:	9806      	ldr	r0, [sp, #24]
 80076a2:	f7fe f99d 	bl	80059e0 <SendMessageToModule>
 80076a6:	2300      	movs	r3, #0
 80076a8:	4699      	mov	r9, r3
 80076aa:	f7ff fa63 	bl	8006b74 <PxMessagingTask+0x60>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d01f      	beq.n	80076f2 <PxMessagingTask+0xbde>
									}
 80076b2:	2200      	movs	r2, #0
 80076b4:	4691      	mov	r9, r2
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d801      	bhi.n	80076be <PxMessagingTask+0xbaa>
 80076ba:	f7ff fa5b 	bl	8006b74 <PxMessagingTask+0x60>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 80076be:	3b04      	subs	r3, #4
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4ad8      	ldr	r2, [pc, #864]	; (8007a24 <PxMessagingTask+0xf10>)
 80076c4:	5899      	ldr	r1, [r3, r2]
 80076c6:	220f      	movs	r2, #15
 80076c8:	400a      	ands	r2, r1
 80076ca:	4bd5      	ldr	r3, [pc, #852]	; (8007a20 <PxMessagingTask+0xf0c>)
 80076cc:	701a      	strb	r2, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 80076ce:	454a      	cmp	r2, r9
 80076d0:	d100      	bne.n	80076d4 <PxMessagingTask+0xbc0>
 80076d2:	e0b0      	b.n	8007836 <PxMessagingTask+0xd22>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 80076d4:	0c09      	lsrs	r1, r1, #16
 80076d6:	2380      	movs	r3, #128	; 0x80
 80076d8:	059b      	lsls	r3, r3, #22
 80076da:	18cb      	adds	r3, r1, r3
										switch (messageParams[0])											// requested format
 80076dc:	3a01      	subs	r2, #1
 80076de:	b2d0      	uxtb	r0, r2
 80076e0:	2807      	cmp	r0, #7
 80076e2:	d901      	bls.n	80076e8 <PxMessagingTask+0xbd4>
 80076e4:	f000 fc82 	bl	8007fec <PxMessagingTask+0x14d8>
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	0092      	lsls	r2, r2, #2
 80076ec:	48ce      	ldr	r0, [pc, #824]	; (8007a28 <PxMessagingTask+0xf14>)
 80076ee:	5882      	ldr	r2, [r0, r2]
 80076f0:	4697      	mov	pc, r2
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 80076f2:	4bce      	ldr	r3, [pc, #824]	; (8007a2c <PxMessagingTask+0xf18>)
 80076f4:	2038      	movs	r0, #56	; 0x38
 80076f6:	4360      	muls	r0, r4
 80076f8:	1818      	adds	r0, r3, r0
 80076fa:	1841      	adds	r1, r0, r1
 80076fc:	3901      	subs	r1, #1
 80076fe:	2000      	movs	r0, #0
 8007700:	7008      	strb	r0, [r1, #0]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 8007702:	1c68      	adds	r0, r5, #1
 8007704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007706:	4694      	mov	ip, r2
 8007708:	4460      	add	r0, ip
 800770a:	18c0      	adds	r0, r0, r3
 800770c:	f7fc fe20 	bl	8004350 <IsModuleParameter>
 8007710:	9008      	str	r0, [sp, #32]
									if (temp == 0) {																					// Parameter does not exist
 8007712:	2800      	cmp	r0, #0
 8007714:	d013      	beq.n	800773e <PxMessagingTask+0xc2a>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 8007716:	3801      	subs	r0, #1
 8007718:	4ac5      	ldr	r2, [pc, #788]	; (8007a30 <PxMessagingTask+0xf1c>)
 800771a:	210c      	movs	r1, #12
 800771c:	4341      	muls	r1, r0
 800771e:	588b      	ldr	r3, [r1, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 8007720:	1852      	adds	r2, r2, r1
 8007722:	7912      	ldrb	r2, [r2, #4]
 8007724:	49be      	ldr	r1, [pc, #760]	; (8007a20 <PxMessagingTask+0xf0c>)
 8007726:	700a      	strb	r2, [r1, #0]
									switch (messageParams[0])											// requested format
 8007728:	3a01      	subs	r2, #1
 800772a:	b2d1      	uxtb	r1, r2
 800772c:	2907      	cmp	r1, #7
 800772e:	d901      	bls.n	8007734 <PxMessagingTask+0xc20>
 8007730:	f000 fc58 	bl	8007fe4 <PxMessagingTask+0x14d0>
 8007734:	b2d2      	uxtb	r2, r2
 8007736:	0092      	lsls	r2, r2, #2
 8007738:	49be      	ldr	r1, [pc, #760]	; (8007a34 <PxMessagingTask+0xf20>)
 800773a:	588a      	ldr	r2, [r1, r2]
 800773c:	4697      	mov	pc, r2
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800773e:	2201      	movs	r2, #1
 8007740:	211f      	movs	r1, #31
 8007742:	9806      	ldr	r0, [sp, #24]
 8007744:	f7fe f94c 	bl	80059e0 <SendMessageToModule>
 8007748:	2300      	movs	r3, #0
 800774a:	4699      	mov	r9, r3
 800774c:	f7ff fa12 	bl	8006b74 <PxMessagingTask+0x60>
											messageParams[1] = *(__IO uint8_t *)temp32; 
 8007750:	781a      	ldrb	r2, [r3, #0]
 8007752:	4bb3      	ldr	r3, [pc, #716]	; (8007a20 <PxMessagingTask+0xf0c>)
 8007754:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8007756:	2202      	movs	r2, #2
 8007758:	211f      	movs	r1, #31
 800775a:	9806      	ldr	r0, [sp, #24]
 800775c:	f7fe f940 	bl	80059e0 <SendMessageToModule>
 8007760:	2300      	movs	r3, #0
 8007762:	4699      	mov	r9, r3
 8007764:	f7ff fa06 	bl	8006b74 <PxMessagingTask+0x60>
											messageParams[1] = *(__IO int8_t *)temp32; 
 8007768:	781a      	ldrb	r2, [r3, #0]
 800776a:	4bad      	ldr	r3, [pc, #692]	; (8007a20 <PxMessagingTask+0xf0c>)
 800776c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800776e:	2202      	movs	r2, #2
 8007770:	211f      	movs	r1, #31
 8007772:	9806      	ldr	r0, [sp, #24]
 8007774:	f7fe f934 	bl	80059e0 <SendMessageToModule>
 8007778:	2300      	movs	r3, #0
 800777a:	4699      	mov	r9, r3
 800777c:	f7ff f9fa 	bl	8006b74 <PxMessagingTask+0x60>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 8007780:	8819      	ldrh	r1, [r3, #0]
 8007782:	4aa7      	ldr	r2, [pc, #668]	; (8007a20 <PxMessagingTask+0xf0c>)
 8007784:	7051      	strb	r1, [r2, #1]
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	0a1b      	lsrs	r3, r3, #8
 800778a:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800778c:	2203      	movs	r2, #3
 800778e:	211f      	movs	r1, #31
 8007790:	9806      	ldr	r0, [sp, #24]
 8007792:	f7fe f925 	bl	80059e0 <SendMessageToModule>
 8007796:	2300      	movs	r3, #0
 8007798:	4699      	mov	r9, r3
 800779a:	f7ff f9eb 	bl	8006b74 <PxMessagingTask+0x60>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800779e:	8819      	ldrh	r1, [r3, #0]
 80077a0:	4a9f      	ldr	r2, [pc, #636]	; (8007a20 <PxMessagingTask+0xf0c>)
 80077a2:	7051      	strb	r1, [r2, #1]
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b21b      	sxth	r3, r3
 80077a8:	121b      	asrs	r3, r3, #8
 80077aa:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 80077ac:	2203      	movs	r2, #3
 80077ae:	211f      	movs	r1, #31
 80077b0:	9806      	ldr	r0, [sp, #24]
 80077b2:	f7fe f915 	bl	80059e0 <SendMessageToModule>
 80077b6:	2300      	movs	r3, #0
 80077b8:	4699      	mov	r9, r3
 80077ba:	f7ff f9db 	bl	8006b74 <PxMessagingTask+0x60>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 80077be:	6819      	ldr	r1, [r3, #0]
 80077c0:	4a97      	ldr	r2, [pc, #604]	; (8007a20 <PxMessagingTask+0xf0c>)
 80077c2:	7051      	strb	r1, [r2, #1]
 80077c4:	6819      	ldr	r1, [r3, #0]
 80077c6:	0a09      	lsrs	r1, r1, #8
 80077c8:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 80077ca:	6819      	ldr	r1, [r3, #0]
 80077cc:	0c09      	lsrs	r1, r1, #16
 80077ce:	70d1      	strb	r1, [r2, #3]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	0e1b      	lsrs	r3, r3, #24
 80077d4:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 80077d6:	2205      	movs	r2, #5
 80077d8:	211f      	movs	r1, #31
 80077da:	9806      	ldr	r0, [sp, #24]
 80077dc:	f7fe f900 	bl	80059e0 <SendMessageToModule>
 80077e0:	2300      	movs	r3, #0
 80077e2:	4699      	mov	r9, r3
 80077e4:	f7ff f9c6 	bl	8006b74 <PxMessagingTask+0x60>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 80077e8:	6819      	ldr	r1, [r3, #0]
 80077ea:	4a8d      	ldr	r2, [pc, #564]	; (8007a20 <PxMessagingTask+0xf0c>)
 80077ec:	7051      	strb	r1, [r2, #1]
 80077ee:	6819      	ldr	r1, [r3, #0]
 80077f0:	1209      	asrs	r1, r1, #8
 80077f2:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 80077f4:	6819      	ldr	r1, [r3, #0]
 80077f6:	1409      	asrs	r1, r1, #16
 80077f8:	70d1      	strb	r1, [r2, #3]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	161b      	asrs	r3, r3, #24
 80077fe:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 8007800:	2205      	movs	r2, #5
 8007802:	211f      	movs	r1, #31
 8007804:	9806      	ldr	r0, [sp, #24]
 8007806:	f7fe f8eb 	bl	80059e0 <SendMessageToModule>
 800780a:	2300      	movs	r3, #0
 800780c:	4699      	mov	r9, r3
 800780e:	f7ff f9b1 	bl	8006b74 <PxMessagingTask+0x60>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 8007812:	7819      	ldrb	r1, [r3, #0]
 8007814:	4a82      	ldr	r2, [pc, #520]	; (8007a20 <PxMessagingTask+0xf0c>)
 8007816:	7051      	strb	r1, [r2, #1]
 8007818:	7859      	ldrb	r1, [r3, #1]
 800781a:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800781c:	7899      	ldrb	r1, [r3, #2]
 800781e:	70d1      	strb	r1, [r2, #3]
 8007820:	78db      	ldrb	r3, [r3, #3]
 8007822:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 8007824:	2209      	movs	r2, #9
 8007826:	211f      	movs	r1, #31
 8007828:	9806      	ldr	r0, [sp, #24]
 800782a:	f7fe f8d9 	bl	80059e0 <SendMessageToModule>
 800782e:	2300      	movs	r3, #0
 8007830:	4699      	mov	r9, r3
 8007832:	f7ff f99f 	bl	8006b74 <PxMessagingTask+0x60>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 8007836:	2201      	movs	r2, #1
 8007838:	211f      	movs	r1, #31
 800783a:	9806      	ldr	r0, [sp, #24]
 800783c:	f7fe f8d0 	bl	80059e0 <SendMessageToModule>
 8007840:	f7ff f998 	bl	8006b74 <PxMessagingTask+0x60>
												messageParams[1] = *(__IO uint8_t *)temp32; 
 8007844:	781a      	ldrb	r2, [r3, #0]
 8007846:	4b76      	ldr	r3, [pc, #472]	; (8007a20 <PxMessagingTask+0xf0c>)
 8007848:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800784a:	2202      	movs	r2, #2
 800784c:	211f      	movs	r1, #31
 800784e:	9806      	ldr	r0, [sp, #24]
 8007850:	f7fe f8c6 	bl	80059e0 <SendMessageToModule>
 8007854:	2300      	movs	r3, #0
 8007856:	4699      	mov	r9, r3
 8007858:	f7ff f98c 	bl	8006b74 <PxMessagingTask+0x60>
												messageParams[1] = *(__IO int8_t *)temp32; 
 800785c:	781a      	ldrb	r2, [r3, #0]
 800785e:	4b70      	ldr	r3, [pc, #448]	; (8007a20 <PxMessagingTask+0xf0c>)
 8007860:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8007862:	2202      	movs	r2, #2
 8007864:	211f      	movs	r1, #31
 8007866:	9806      	ldr	r0, [sp, #24]
 8007868:	f7fe f8ba 	bl	80059e0 <SendMessageToModule>
 800786c:	2300      	movs	r3, #0
 800786e:	4699      	mov	r9, r3
 8007870:	f7ff f980 	bl	8006b74 <PxMessagingTask+0x60>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 8007874:	8819      	ldrh	r1, [r3, #0]
 8007876:	4a6a      	ldr	r2, [pc, #424]	; (8007a20 <PxMessagingTask+0xf0c>)
 8007878:	7051      	strb	r1, [r2, #1]
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	0a1b      	lsrs	r3, r3, #8
 800787e:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8007880:	2203      	movs	r2, #3
 8007882:	211f      	movs	r1, #31
 8007884:	9806      	ldr	r0, [sp, #24]
 8007886:	f7fe f8ab 	bl	80059e0 <SendMessageToModule>
 800788a:	2300      	movs	r3, #0
 800788c:	4699      	mov	r9, r3
 800788e:	f7ff f971 	bl	8006b74 <PxMessagingTask+0x60>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8007892:	8819      	ldrh	r1, [r3, #0]
 8007894:	4a62      	ldr	r2, [pc, #392]	; (8007a20 <PxMessagingTask+0xf0c>)
 8007896:	7051      	strb	r1, [r2, #1]
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b21b      	sxth	r3, r3
 800789c:	121b      	asrs	r3, r3, #8
 800789e:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 80078a0:	2203      	movs	r2, #3
 80078a2:	211f      	movs	r1, #31
 80078a4:	9806      	ldr	r0, [sp, #24]
 80078a6:	f7fe f89b 	bl	80059e0 <SendMessageToModule>
 80078aa:	2300      	movs	r3, #0
 80078ac:	4699      	mov	r9, r3
 80078ae:	f7ff f961 	bl	8006b74 <PxMessagingTask+0x60>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 80078b2:	6819      	ldr	r1, [r3, #0]
 80078b4:	4a5a      	ldr	r2, [pc, #360]	; (8007a20 <PxMessagingTask+0xf0c>)
 80078b6:	7051      	strb	r1, [r2, #1]
 80078b8:	6819      	ldr	r1, [r3, #0]
 80078ba:	0a09      	lsrs	r1, r1, #8
 80078bc:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 80078be:	6819      	ldr	r1, [r3, #0]
 80078c0:	0c09      	lsrs	r1, r1, #16
 80078c2:	70d1      	strb	r1, [r2, #3]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	0e1b      	lsrs	r3, r3, #24
 80078c8:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 80078ca:	2205      	movs	r2, #5
 80078cc:	211f      	movs	r1, #31
 80078ce:	9806      	ldr	r0, [sp, #24]
 80078d0:	f7fe f886 	bl	80059e0 <SendMessageToModule>
 80078d4:	2300      	movs	r3, #0
 80078d6:	4699      	mov	r9, r3
 80078d8:	f7ff f94c 	bl	8006b74 <PxMessagingTask+0x60>
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 80078dc:	6819      	ldr	r1, [r3, #0]
 80078de:	4a50      	ldr	r2, [pc, #320]	; (8007a20 <PxMessagingTask+0xf0c>)
 80078e0:	7051      	strb	r1, [r2, #1]
 80078e2:	6819      	ldr	r1, [r3, #0]
 80078e4:	1209      	asrs	r1, r1, #8
 80078e6:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 80078e8:	6819      	ldr	r1, [r3, #0]
 80078ea:	1409      	asrs	r1, r1, #16
 80078ec:	70d1      	strb	r1, [r2, #3]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	161b      	asrs	r3, r3, #24
 80078f2:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 80078f4:	2205      	movs	r2, #5
 80078f6:	211f      	movs	r1, #31
 80078f8:	9806      	ldr	r0, [sp, #24]
 80078fa:	f7fe f871 	bl	80059e0 <SendMessageToModule>
 80078fe:	2300      	movs	r3, #0
 8007900:	4699      	mov	r9, r3
 8007902:	f7ff f937 	bl	8006b74 <PxMessagingTask+0x60>
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 8007906:	781a      	ldrb	r2, [r3, #0]
 8007908:	4b45      	ldr	r3, [pc, #276]	; (8007a20 <PxMessagingTask+0xf0c>)
 800790a:	705a      	strb	r2, [r3, #1]
 800790c:	4a4a      	ldr	r2, [pc, #296]	; (8007a38 <PxMessagingTask+0xf24>)
 800790e:	188a      	adds	r2, r1, r2
 8007910:	7812      	ldrb	r2, [r2, #0]
 8007912:	709a      	strb	r2, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 8007914:	4a49      	ldr	r2, [pc, #292]	; (8007a3c <PxMessagingTask+0xf28>)
 8007916:	188a      	adds	r2, r1, r2
 8007918:	7812      	ldrb	r2, [r2, #0]
 800791a:	70da      	strb	r2, [r3, #3]
 800791c:	4a48      	ldr	r2, [pc, #288]	; (8007a40 <PxMessagingTask+0xf2c>)
 800791e:	4694      	mov	ip, r2
 8007920:	4461      	add	r1, ip
 8007922:	780a      	ldrb	r2, [r1, #0]
 8007924:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 8007926:	2209      	movs	r2, #9
 8007928:	211f      	movs	r1, #31
 800792a:	9806      	ldr	r0, [sp, #24]
 800792c:	f7fe f858 	bl	80059e0 <SendMessageToModule>
 8007930:	2300      	movs	r3, #0
 8007932:	4699      	mov	r9, r3
 8007934:	f7ff f91e 	bl	8006b74 <PxMessagingTask+0x60>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 8007938:	4b42      	ldr	r3, [pc, #264]	; (8007a44 <PxMessagingTask+0xf30>)
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2002      	movs	r0, #2
 8007940:	4240      	negs	r0, r0
 8007942:	17c1      	asrs	r1, r0, #31
 8007944:	1812      	adds	r2, r2, r0
 8007946:	414b      	adcs	r3, r1
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00a      	beq.n	8007962 <PxMessagingTask+0xe4e>
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 800794c:	4b3e      	ldr	r3, [pc, #248]	; (8007a48 <PxMessagingTask+0xf34>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b10      	cmp	r3, #16
 8007952:	d100      	bne.n	8007956 <PxMessagingTask+0xe42>
 8007954:	e35b      	b.n	800800e <PxMessagingTask+0x14fa>
 8007956:	2500      	movs	r5, #0
 8007958:	4b3b      	ldr	r3, [pc, #236]	; (8007a48 <PxMessagingTask+0xf34>)
 800795a:	701d      	strb	r5, [r3, #0]
 800795c:	46a9      	mov	r9, r5
 800795e:	f7ff f909 	bl	8006b74 <PxMessagingTask+0x60>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <PxMessagingTask+0xe56>
 8007966:	2a01      	cmp	r2, #1
 8007968:	d8f0      	bhi.n	800794c <PxMessagingTask+0xe38>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 800796a:	2238      	movs	r2, #56	; 0x38
 800796c:	4362      	muls	r2, r4
 800796e:	4b2f      	ldr	r3, [pc, #188]	; (8007a2c <PxMessagingTask+0xf18>)
 8007970:	189b      	adds	r3, r3, r2
 8007972:	5d5b      	ldrb	r3, [r3, r5]
 8007974:	4a35      	ldr	r2, [pc, #212]	; (8007a4c <PxMessagingTask+0xf38>)
 8007976:	7013      	strb	r3, [r2, #0]
								switch (cMessage[port-1][shift])											// Remote format
 8007978:	2b08      	cmp	r3, #8
 800797a:	d8e7      	bhi.n	800794c <PxMessagingTask+0xe38>
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4a34      	ldr	r2, [pc, #208]	; (8007a50 <PxMessagingTask+0xf3c>)
 8007980:	58d3      	ldr	r3, [r2, r3]
 8007982:	469f      	mov	pc, r3
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 8007984:	4b30      	ldr	r3, [pc, #192]	; (8007a48 <PxMessagingTask+0xf34>)
 8007986:	2210      	movs	r2, #16
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	2300      	movs	r3, #0
 800798c:	4699      	mov	r9, r3
 800798e:	f7ff f8f1 	bl	8006b74 <PxMessagingTask+0x60>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 8007992:	4b2c      	ldr	r3, [pc, #176]	; (8007a44 <PxMessagingTask+0xf30>)
 8007994:	2238      	movs	r2, #56	; 0x38
 8007996:	4362      	muls	r2, r4
 8007998:	4924      	ldr	r1, [pc, #144]	; (8007a2c <PxMessagingTask+0xf18>)
 800799a:	1889      	adds	r1, r1, r2
 800799c:	1949      	adds	r1, r1, r5
 800799e:	784a      	ldrb	r2, [r1, #1]
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	2200      	movs	r2, #0
 80079a4:	605a      	str	r2, [r3, #4]
 80079a6:	e7d1      	b.n	800794c <PxMessagingTask+0xe38>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 80079a8:	4b26      	ldr	r3, [pc, #152]	; (8007a44 <PxMessagingTask+0xf30>)
 80079aa:	2238      	movs	r2, #56	; 0x38
 80079ac:	4362      	muls	r2, r4
 80079ae:	491f      	ldr	r1, [pc, #124]	; (8007a2c <PxMessagingTask+0xf18>)
 80079b0:	1889      	adds	r1, r1, r2
 80079b2:	1949      	adds	r1, r1, r5
 80079b4:	2201      	movs	r2, #1
 80079b6:	568a      	ldrsb	r2, [r1, r2]
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	17d2      	asrs	r2, r2, #31
 80079bc:	605a      	str	r2, [r3, #4]
 80079be:	e7c5      	b.n	800794c <PxMessagingTask+0xe38>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 80079c0:	4a20      	ldr	r2, [pc, #128]	; (8007a44 <PxMessagingTask+0xf30>)
 80079c2:	2338      	movs	r3, #56	; 0x38
 80079c4:	4363      	muls	r3, r4
 80079c6:	4919      	ldr	r1, [pc, #100]	; (8007a2c <PxMessagingTask+0xf18>)
 80079c8:	18c9      	adds	r1, r1, r3
 80079ca:	1949      	adds	r1, r1, r5
 80079cc:	788b      	ldrb	r3, [r1, #2]
 80079ce:	021b      	lsls	r3, r3, #8
 80079d0:	7849      	ldrb	r1, [r1, #1]
 80079d2:	185b      	adds	r3, r3, r1
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	17db      	asrs	r3, r3, #31
 80079d8:	6053      	str	r3, [r2, #4]
 80079da:	e7b7      	b.n	800794c <PxMessagingTask+0xe38>
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 80079dc:	4a19      	ldr	r2, [pc, #100]	; (8007a44 <PxMessagingTask+0xf30>)
 80079de:	2338      	movs	r3, #56	; 0x38
 80079e0:	4363      	muls	r3, r4
 80079e2:	4912      	ldr	r1, [pc, #72]	; (8007a2c <PxMessagingTask+0xf18>)
 80079e4:	18c9      	adds	r1, r1, r3
 80079e6:	1949      	adds	r1, r1, r5
 80079e8:	788b      	ldrb	r3, [r1, #2]
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	7849      	ldrb	r1, [r1, #1]
 80079ee:	185b      	adds	r3, r3, r1
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	17db      	asrs	r3, r3, #31
 80079f4:	6053      	str	r3, [r2, #4]
 80079f6:	e7a9      	b.n	800794c <PxMessagingTask+0xe38>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 80079f8:	4a12      	ldr	r2, [pc, #72]	; (8007a44 <PxMessagingTask+0xf30>)
 80079fa:	2338      	movs	r3, #56	; 0x38
 80079fc:	4363      	muls	r3, r4
 80079fe:	490b      	ldr	r1, [pc, #44]	; (8007a2c <PxMessagingTask+0xf18>)
 8007a00:	18c9      	adds	r1, r1, r3
 8007a02:	1949      	adds	r1, r1, r5
 8007a04:	788b      	ldrb	r3, [r1, #2]
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	78c8      	ldrb	r0, [r1, #3]
 8007a0a:	0400      	lsls	r0, r0, #16
 8007a0c:	181b      	adds	r3, r3, r0
 8007a0e:	7848      	ldrb	r0, [r1, #1]
 8007a10:	181b      	adds	r3, r3, r0
 8007a12:	7909      	ldrb	r1, [r1, #4]
 8007a14:	0609      	lsls	r1, r1, #24
 8007a16:	185b      	adds	r3, r3, r1
 8007a18:	6013      	str	r3, [r2, #0]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	6053      	str	r3, [r2, #4]
 8007a1e:	e795      	b.n	800794c <PxMessagingTask+0xe38>
 8007a20:	20000a5c 	.word	0x20000a5c
 8007a24:	200060e8 	.word	0x200060e8
 8007a28:	08016614 	.word	0x08016614
 8007a2c:	200006d8 	.word	0x200006d8
 8007a30:	20000040 	.word	0x20000040
 8007a34:	08016634 	.word	0x08016634
 8007a38:	20000001 	.word	0x20000001
 8007a3c:	20000002 	.word	0x20000002
 8007a40:	20000003 	.word	0x20000003
 8007a44:	20000c90 	.word	0x20000c90
 8007a48:	20000c98 	.word	0x20000c98
 8007a4c:	2000003c 	.word	0x2000003c
 8007a50:	08016654 	.word	0x08016654
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 8007a54:	4ae5      	ldr	r2, [pc, #916]	; (8007dec <PxMessagingTask+0x12d8>)
 8007a56:	2338      	movs	r3, #56	; 0x38
 8007a58:	4363      	muls	r3, r4
 8007a5a:	49e5      	ldr	r1, [pc, #916]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007a5c:	18c9      	adds	r1, r1, r3
 8007a5e:	1949      	adds	r1, r1, r5
 8007a60:	788b      	ldrb	r3, [r1, #2]
 8007a62:	021b      	lsls	r3, r3, #8
 8007a64:	7848      	ldrb	r0, [r1, #1]
 8007a66:	181b      	adds	r3, r3, r0
 8007a68:	78c8      	ldrb	r0, [r1, #3]
 8007a6a:	0400      	lsls	r0, r0, #16
 8007a6c:	181b      	adds	r3, r3, r0
 8007a6e:	7909      	ldrb	r1, [r1, #4]
 8007a70:	0609      	lsls	r1, r1, #24
 8007a72:	185b      	adds	r3, r3, r1
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	17db      	asrs	r3, r3, #31
 8007a78:	6053      	str	r3, [r2, #4]
 8007a7a:	e767      	b.n	800794c <PxMessagingTask+0xe38>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 8007a7c:	4adb      	ldr	r2, [pc, #876]	; (8007dec <PxMessagingTask+0x12d8>)
 8007a7e:	2338      	movs	r3, #56	; 0x38
 8007a80:	4363      	muls	r3, r4
 8007a82:	49db      	ldr	r1, [pc, #876]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007a84:	18c9      	adds	r1, r1, r3
 8007a86:	1949      	adds	r1, r1, r5
 8007a88:	788b      	ldrb	r3, [r1, #2]
 8007a8a:	021b      	lsls	r3, r3, #8
 8007a8c:	78c8      	ldrb	r0, [r1, #3]
 8007a8e:	0400      	lsls	r0, r0, #16
 8007a90:	181b      	adds	r3, r3, r0
 8007a92:	7848      	ldrb	r0, [r1, #1]
 8007a94:	181b      	adds	r3, r3, r0
 8007a96:	7909      	ldrb	r1, [r1, #4]
 8007a98:	0609      	lsls	r1, r1, #24
 8007a9a:	185b      	adds	r3, r3, r1
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	6053      	str	r3, [r2, #4]
 8007aa2:	e753      	b.n	800794c <PxMessagingTask+0xe38>
							responseStatus = BOS_OK;		// Initialize response
 8007aa4:	4bd3      	ldr	r3, [pc, #844]	; (8007df4 <PxMessagingTask+0x12e0>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 8007aaa:	46a9      	mov	r9, r5
 8007aac:	4bd0      	ldr	r3, [pc, #832]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007aae:	199b      	adds	r3, r3, r6
 8007ab0:	5d5b      	ldrb	r3, [r3, r5]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d100      	bne.n	8007ab8 <PxMessagingTask+0xfa4>
 8007ab6:	e113      	b.n	8007ce0 <PxMessagingTask+0x11cc>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 8007ab8:	2b1e      	cmp	r3, #30
 8007aba:	d900      	bls.n	8007abe <PxMessagingTask+0xfaa>
 8007abc:	e0f8      	b.n	8007cb0 <PxMessagingTask+0x119c>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 8007abe:	1e5d      	subs	r5, r3, #1
 8007ac0:	00aa      	lsls	r2, r5, #2
 8007ac2:	4bcd      	ldr	r3, [pc, #820]	; (8007df8 <PxMessagingTask+0x12e4>)
 8007ac4:	58d2      	ldr	r2, [r2, r3]
 8007ac6:	0c13      	lsrs	r3, r2, #16
 8007ac8:	2180      	movs	r1, #128	; 0x80
 8007aca:	0589      	lsls	r1, r1, #22
 8007acc:	468c      	mov	ip, r1
 8007ace:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	1c4f      	adds	r7, r1, #1
 8007ad4:	2038      	movs	r0, #56	; 0x38
 8007ad6:	4360      	muls	r0, r4
 8007ad8:	49c5      	ldr	r1, [pc, #788]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007ada:	1809      	adds	r1, r1, r0
 8007adc:	5dc9      	ldrb	r1, [r1, r7]
 8007ade:	468a      	mov	sl, r1
 8007ae0:	3901      	subs	r1, #1
 8007ae2:	b2c8      	uxtb	r0, r1
 8007ae4:	2807      	cmp	r0, #7
 8007ae6:	d818      	bhi.n	8007b1a <PxMessagingTask+0x1006>
 8007ae8:	b2c9      	uxtb	r1, r1
 8007aea:	0089      	lsls	r1, r1, #2
 8007aec:	48c3      	ldr	r0, [pc, #780]	; (8007dfc <PxMessagingTask+0x12e8>)
 8007aee:	5841      	ldr	r1, [r0, r1]
 8007af0:	468f      	mov	pc, r1
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007af2:	0712      	lsls	r2, r2, #28
 8007af4:	d10a      	bne.n	8007b0c <PxMessagingTask+0xff8>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 8007af6:	2001      	movs	r0, #1
 8007af8:	f00a fa98 	bl	801202c <malloc>
												if (temp32 != 0) {
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d027      	beq.n	8007b50 <PxMessagingTask+0x103c>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 8007b00:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007b02:	00ad      	lsls	r5, r5, #2
 8007b04:	0400      	lsls	r0, r0, #16
 8007b06:	4450      	add	r0, sl
 8007b08:	4abb      	ldr	r2, [pc, #748]	; (8007df8 <PxMessagingTask+0x12e4>)
 8007b0a:	50a8      	str	r0, [r5, r2]
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 8007b0c:	2138      	movs	r1, #56	; 0x38
 8007b0e:	4361      	muls	r1, r4
 8007b10:	4ab7      	ldr	r2, [pc, #732]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007b12:	1852      	adds	r2, r2, r1
 8007b14:	444a      	add	r2, r9
 8007b16:	7892      	ldrb	r2, [r2, #2]
 8007b18:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 8007b1a:	2338      	movs	r3, #56	; 0x38
 8007b1c:	4363      	muls	r3, r4
 8007b1e:	4ab4      	ldr	r2, [pc, #720]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007b20:	18d2      	adds	r2, r2, r3
 8007b22:	464b      	mov	r3, r9
 8007b24:	5cd3      	ldrb	r3, [r2, r3]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	0098      	lsls	r0, r3, #2
 8007b2a:	49b3      	ldr	r1, [pc, #716]	; (8007df8 <PxMessagingTask+0x12e4>)
 8007b2c:	5841      	ldr	r1, [r0, r1]
 8007b2e:	5dd2      	ldrb	r2, [r2, r7]
 8007b30:	200f      	movs	r0, #15
 8007b32:	4008      	ands	r0, r1
 8007b34:	4290      	cmp	r0, r2
 8007b36:	d100      	bne.n	8007b3a <PxMessagingTask+0x1026>
 8007b38:	e0bd      	b.n	8007cb6 <PxMessagingTask+0x11a2>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	48b0      	ldr	r0, [pc, #704]	; (8007e00 <PxMessagingTask+0x12ec>)
 8007b3e:	4684      	mov	ip, r0
 8007b40:	4462      	add	r2, ip
 8007b42:	400a      	ands	r2, r1
 8007b44:	49ac      	ldr	r1, [pc, #688]	; (8007df8 <PxMessagingTask+0x12e4>)
 8007b46:	505a      	str	r2, [r3, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 8007b48:	4baa      	ldr	r3, [pc, #680]	; (8007df4 <PxMessagingTask+0x12e0>)
 8007b4a:	2214      	movs	r2, #20
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	e0b2      	b.n	8007cb6 <PxMessagingTask+0x11a2>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8007b50:	4ba8      	ldr	r3, [pc, #672]	; (8007df4 <PxMessagingTask+0x12e0>)
 8007b52:	2212      	movs	r2, #18
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	e7e0      	b.n	8007b1a <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007b58:	0712      	lsls	r2, r2, #28
 8007b5a:	d10b      	bne.n	8007b74 <PxMessagingTask+0x1060>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	f00a fa65 	bl	801202c <malloc>
												if (temp32 != 0) {
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d100      	bne.n	8007b68 <PxMessagingTask+0x1054>
 8007b66:	e2b1      	b.n	80080cc <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 8007b68:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007b6a:	00ad      	lsls	r5, r5, #2
 8007b6c:	0400      	lsls	r0, r0, #16
 8007b6e:	3002      	adds	r0, #2
 8007b70:	4aa1      	ldr	r2, [pc, #644]	; (8007df8 <PxMessagingTask+0x12e4>)
 8007b72:	50a8      	str	r0, [r5, r2]
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 8007b74:	2138      	movs	r1, #56	; 0x38
 8007b76:	4361      	muls	r1, r4
 8007b78:	4a9d      	ldr	r2, [pc, #628]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007b7a:	1852      	adds	r2, r2, r1
 8007b7c:	444a      	add	r2, r9
 8007b7e:	7892      	ldrb	r2, [r2, #2]
 8007b80:	b252      	sxtb	r2, r2
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	e7c9      	b.n	8007b1a <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007b86:	0712      	lsls	r2, r2, #28
 8007b88:	d10b      	bne.n	8007ba2 <PxMessagingTask+0x108e>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 8007b8a:	2002      	movs	r0, #2
 8007b8c:	f00a fa4e 	bl	801202c <malloc>
												if (temp32 != 0) {
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d100      	bne.n	8007b96 <PxMessagingTask+0x1082>
 8007b94:	e29a      	b.n	80080cc <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 8007b96:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007b98:	00ad      	lsls	r5, r5, #2
 8007b9a:	0400      	lsls	r0, r0, #16
 8007b9c:	3003      	adds	r0, #3
 8007b9e:	4a96      	ldr	r2, [pc, #600]	; (8007df8 <PxMessagingTask+0x12e4>)
 8007ba0:	50a8      	str	r0, [r5, r2]
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 8007ba2:	2138      	movs	r1, #56	; 0x38
 8007ba4:	4361      	muls	r1, r4
 8007ba6:	4a92      	ldr	r2, [pc, #584]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007ba8:	1852      	adds	r2, r2, r1
 8007baa:	444a      	add	r2, r9
 8007bac:	78d1      	ldrb	r1, [r2, #3]
 8007bae:	0209      	lsls	r1, r1, #8
 8007bb0:	7892      	ldrb	r2, [r2, #2]
 8007bb2:	1852      	adds	r2, r2, r1
 8007bb4:	b292      	uxth	r2, r2
 8007bb6:	801a      	strh	r2, [r3, #0]
 8007bb8:	e7af      	b.n	8007b1a <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007bba:	0712      	lsls	r2, r2, #28
 8007bbc:	d10b      	bne.n	8007bd6 <PxMessagingTask+0x10c2>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 8007bbe:	2002      	movs	r0, #2
 8007bc0:	f00a fa34 	bl	801202c <malloc>
												if (temp32 != 0) {
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d100      	bne.n	8007bca <PxMessagingTask+0x10b6>
 8007bc8:	e280      	b.n	80080cc <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 8007bca:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007bcc:	00ad      	lsls	r5, r5, #2
 8007bce:	0400      	lsls	r0, r0, #16
 8007bd0:	3004      	adds	r0, #4
 8007bd2:	4a89      	ldr	r2, [pc, #548]	; (8007df8 <PxMessagingTask+0x12e4>)
 8007bd4:	50a8      	str	r0, [r5, r2]
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 8007bd6:	2138      	movs	r1, #56	; 0x38
 8007bd8:	4361      	muls	r1, r4
 8007bda:	4a85      	ldr	r2, [pc, #532]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007bdc:	1852      	adds	r2, r2, r1
 8007bde:	444a      	add	r2, r9
 8007be0:	78d1      	ldrb	r1, [r2, #3]
 8007be2:	0209      	lsls	r1, r1, #8
 8007be4:	7892      	ldrb	r2, [r2, #2]
 8007be6:	1852      	adds	r2, r2, r1
 8007be8:	b212      	sxth	r2, r2
 8007bea:	801a      	strh	r2, [r3, #0]
 8007bec:	e795      	b.n	8007b1a <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007bee:	0712      	lsls	r2, r2, #28
 8007bf0:	d10b      	bne.n	8007c0a <PxMessagingTask+0x10f6>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 8007bf2:	2004      	movs	r0, #4
 8007bf4:	f00a fa1a 	bl	801202c <malloc>
												if (temp32 != 0) {
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d100      	bne.n	8007bfe <PxMessagingTask+0x10ea>
 8007bfc:	e266      	b.n	80080cc <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 8007bfe:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007c00:	00ad      	lsls	r5, r5, #2
 8007c02:	0400      	lsls	r0, r0, #16
 8007c04:	3005      	adds	r0, #5
 8007c06:	4a7c      	ldr	r2, [pc, #496]	; (8007df8 <PxMessagingTask+0x12e4>)
 8007c08:	50a8      	str	r0, [r5, r2]
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 8007c0a:	2238      	movs	r2, #56	; 0x38
 8007c0c:	4362      	muls	r2, r4
 8007c0e:	4978      	ldr	r1, [pc, #480]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007c10:	1889      	adds	r1, r1, r2
 8007c12:	4449      	add	r1, r9
 8007c14:	78ca      	ldrb	r2, [r1, #3]
 8007c16:	0212      	lsls	r2, r2, #8
 8007c18:	7908      	ldrb	r0, [r1, #4]
 8007c1a:	0400      	lsls	r0, r0, #16
 8007c1c:	1812      	adds	r2, r2, r0
 8007c1e:	7888      	ldrb	r0, [r1, #2]
 8007c20:	1812      	adds	r2, r2, r0
 8007c22:	7949      	ldrb	r1, [r1, #5]
 8007c24:	0609      	lsls	r1, r1, #24
 8007c26:	1852      	adds	r2, r2, r1
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	e776      	b.n	8007b1a <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007c2c:	0712      	lsls	r2, r2, #28
 8007c2e:	d10b      	bne.n	8007c48 <PxMessagingTask+0x1134>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 8007c30:	2004      	movs	r0, #4
 8007c32:	f00a f9fb 	bl	801202c <malloc>
												if (temp32 != 0) {
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d100      	bne.n	8007c3c <PxMessagingTask+0x1128>
 8007c3a:	e247      	b.n	80080cc <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 8007c3c:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007c3e:	00ad      	lsls	r5, r5, #2
 8007c40:	0400      	lsls	r0, r0, #16
 8007c42:	3006      	adds	r0, #6
 8007c44:	4a6c      	ldr	r2, [pc, #432]	; (8007df8 <PxMessagingTask+0x12e4>)
 8007c46:	50a8      	str	r0, [r5, r2]
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 8007c48:	2238      	movs	r2, #56	; 0x38
 8007c4a:	4362      	muls	r2, r4
 8007c4c:	4968      	ldr	r1, [pc, #416]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007c4e:	1889      	adds	r1, r1, r2
 8007c50:	4449      	add	r1, r9
 8007c52:	78ca      	ldrb	r2, [r1, #3]
 8007c54:	0212      	lsls	r2, r2, #8
 8007c56:	7888      	ldrb	r0, [r1, #2]
 8007c58:	1812      	adds	r2, r2, r0
 8007c5a:	7908      	ldrb	r0, [r1, #4]
 8007c5c:	0400      	lsls	r0, r0, #16
 8007c5e:	1812      	adds	r2, r2, r0
 8007c60:	7949      	ldrb	r1, [r1, #5]
 8007c62:	0609      	lsls	r1, r1, #24
 8007c64:	1852      	adds	r2, r2, r1
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	e757      	b.n	8007b1a <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007c6a:	0712      	lsls	r2, r2, #28
 8007c6c:	d10b      	bne.n	8007c86 <PxMessagingTask+0x1172>
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 8007c6e:	2004      	movs	r0, #4
 8007c70:	f00a f9dc 	bl	801202c <malloc>
												if (temp32 != 0) {
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d100      	bne.n	8007c7a <PxMessagingTask+0x1166>
 8007c78:	e228      	b.n	80080cc <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 8007c7a:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007c7c:	00ad      	lsls	r5, r5, #2
 8007c7e:	0400      	lsls	r0, r0, #16
 8007c80:	3007      	adds	r0, #7
 8007c82:	4a5d      	ldr	r2, [pc, #372]	; (8007df8 <PxMessagingTask+0x12e4>)
 8007c84:	50a8      	str	r0, [r5, r2]
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 8007c86:	2238      	movs	r2, #56	; 0x38
 8007c88:	4362      	muls	r2, r4
 8007c8a:	4959      	ldr	r1, [pc, #356]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007c8c:	1889      	adds	r1, r1, r2
 8007c8e:	4449      	add	r1, r9
 8007c90:	78ca      	ldrb	r2, [r1, #3]
 8007c92:	0212      	lsls	r2, r2, #8
 8007c94:	7908      	ldrb	r0, [r1, #4]
 8007c96:	0400      	lsls	r0, r0, #16
 8007c98:	1812      	adds	r2, r2, r0
 8007c9a:	7888      	ldrb	r0, [r1, #2]
 8007c9c:	1812      	adds	r2, r2, r0
 8007c9e:	7949      	ldrb	r1, [r1, #5]
 8007ca0:	0609      	lsls	r1, r1, #24
 8007ca2:	1852      	adds	r2, r2, r1
 8007ca4:	4951      	ldr	r1, [pc, #324]	; (8007dec <PxMessagingTask+0x12d8>)
 8007ca6:	600a      	str	r2, [r1, #0]
 8007ca8:	2000      	movs	r0, #0
 8007caa:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	e734      	b.n	8007b1a <PxMessagingTask+0x1006>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 8007cb0:	4b50      	ldr	r3, [pc, #320]	; (8007df4 <PxMessagingTask+0x12e0>)
 8007cb2:	2213      	movs	r2, #19
 8007cb4:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 8007cb6:	4b53      	ldr	r3, [pc, #332]	; (8007e04 <PxMessagingTask+0x12f0>)
 8007cb8:	799b      	ldrb	r3, [r3, #6]
 8007cba:	2240      	movs	r2, #64	; 0x40
 8007cbc:	4393      	bics	r3, r2
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	4691      	mov	r9, r2
 8007cc2:	2b20      	cmp	r3, #32
 8007cc4:	d001      	beq.n	8007cca <PxMessagingTask+0x11b6>
 8007cc6:	f7fe ff55 	bl	8006b74 <PxMessagingTask+0x60>
								messageParams[0] = responseStatus;
 8007cca:	4b4a      	ldr	r3, [pc, #296]	; (8007df4 <PxMessagingTask+0x12e0>)
 8007ccc:	781a      	ldrb	r2, [r3, #0]
 8007cce:	4b4e      	ldr	r3, [pc, #312]	; (8007e08 <PxMessagingTask+0x12f4>)
 8007cd0:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	2121      	movs	r1, #33	; 0x21
 8007cd6:	9806      	ldr	r0, [sp, #24]
 8007cd8:	f7fd fe82 	bl	80059e0 <SendMessageToModule>
 8007cdc:	f7fe ff4a 	bl	8006b74 <PxMessagingTask+0x60>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 8007ce0:	2238      	movs	r2, #56	; 0x38
 8007ce2:	4362      	muls	r2, r4
 8007ce4:	4b42      	ldr	r3, [pc, #264]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007ce6:	189b      	adds	r3, r3, r2
 8007ce8:	195b      	adds	r3, r3, r5
 8007cea:	789d      	ldrb	r5, [r3, #2]
 8007cec:	062d      	lsls	r5, r5, #24
 8007cee:	78da      	ldrb	r2, [r3, #3]
 8007cf0:	0412      	lsls	r2, r2, #16
 8007cf2:	18ad      	adds	r5, r5, r2
 8007cf4:	795a      	ldrb	r2, [r3, #5]
 8007cf6:	18ad      	adds	r5, r5, r2
 8007cf8:	791b      	ldrb	r3, [r3, #4]
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	18ed      	adds	r5, r5, r3
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 8007cfe:	23e0      	movs	r3, #224	; 0xe0
 8007d00:	061b      	lsls	r3, r3, #24
 8007d02:	18ea      	adds	r2, r5, r3
 8007d04:	4b41      	ldr	r3, [pc, #260]	; (8007e0c <PxMessagingTask+0x12f8>)
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d900      	bls.n	8007d0c <PxMessagingTask+0x11f8>
 8007d0a:	e083      	b.n	8007e14 <PxMessagingTask+0x1300>
									switch (cMessage[port-1][1+shift])															// Requested format
 8007d0c:	2238      	movs	r2, #56	; 0x38
 8007d0e:	4362      	muls	r2, r4
 8007d10:	4b37      	ldr	r3, [pc, #220]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007d12:	189b      	adds	r3, r3, r2
 8007d14:	444b      	add	r3, r9
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	2a07      	cmp	r2, #7
 8007d1e:	d8ca      	bhi.n	8007cb6 <PxMessagingTask+0x11a2>
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4a3a      	ldr	r2, [pc, #232]	; (8007e10 <PxMessagingTask+0x12fc>)
 8007d26:	58d3      	ldr	r3, [r2, r3]
 8007d28:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 8007d2a:	2238      	movs	r2, #56	; 0x38
 8007d2c:	4362      	muls	r2, r4
 8007d2e:	4b30      	ldr	r3, [pc, #192]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007d30:	189b      	adds	r3, r3, r2
 8007d32:	444b      	add	r3, r9
 8007d34:	799b      	ldrb	r3, [r3, #6]
 8007d36:	702b      	strb	r3, [r5, #0]
 8007d38:	e7bd      	b.n	8007cb6 <PxMessagingTask+0x11a2>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 8007d3a:	2238      	movs	r2, #56	; 0x38
 8007d3c:	4362      	muls	r2, r4
 8007d3e:	4b2c      	ldr	r3, [pc, #176]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007d40:	189b      	adds	r3, r3, r2
 8007d42:	444b      	add	r3, r9
 8007d44:	799b      	ldrb	r3, [r3, #6]
 8007d46:	b25b      	sxtb	r3, r3
 8007d48:	702b      	strb	r3, [r5, #0]
 8007d4a:	e7b4      	b.n	8007cb6 <PxMessagingTask+0x11a2>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 8007d4c:	2238      	movs	r2, #56	; 0x38
 8007d4e:	4362      	muls	r2, r4
 8007d50:	4b27      	ldr	r3, [pc, #156]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007d52:	189b      	adds	r3, r3, r2
 8007d54:	444b      	add	r3, r9
 8007d56:	79da      	ldrb	r2, [r3, #7]
 8007d58:	0212      	lsls	r2, r2, #8
 8007d5a:	799b      	ldrb	r3, [r3, #6]
 8007d5c:	189b      	adds	r3, r3, r2
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	802b      	strh	r3, [r5, #0]
 8007d62:	e7a8      	b.n	8007cb6 <PxMessagingTask+0x11a2>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 8007d64:	2238      	movs	r2, #56	; 0x38
 8007d66:	4362      	muls	r2, r4
 8007d68:	4b21      	ldr	r3, [pc, #132]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007d6a:	189b      	adds	r3, r3, r2
 8007d6c:	444b      	add	r3, r9
 8007d6e:	79da      	ldrb	r2, [r3, #7]
 8007d70:	0212      	lsls	r2, r2, #8
 8007d72:	799b      	ldrb	r3, [r3, #6]
 8007d74:	189b      	adds	r3, r3, r2
 8007d76:	b21b      	sxth	r3, r3
 8007d78:	802b      	strh	r3, [r5, #0]
 8007d7a:	e79c      	b.n	8007cb6 <PxMessagingTask+0x11a2>
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 8007d7c:	2338      	movs	r3, #56	; 0x38
 8007d7e:	4363      	muls	r3, r4
 8007d80:	4a1b      	ldr	r2, [pc, #108]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007d82:	18d2      	adds	r2, r2, r3
 8007d84:	444a      	add	r2, r9
 8007d86:	79d3      	ldrb	r3, [r2, #7]
 8007d88:	021b      	lsls	r3, r3, #8
 8007d8a:	7a11      	ldrb	r1, [r2, #8]
 8007d8c:	0409      	lsls	r1, r1, #16
 8007d8e:	185b      	adds	r3, r3, r1
 8007d90:	7991      	ldrb	r1, [r2, #6]
 8007d92:	185b      	adds	r3, r3, r1
 8007d94:	7a52      	ldrb	r2, [r2, #9]
 8007d96:	0612      	lsls	r2, r2, #24
 8007d98:	189b      	adds	r3, r3, r2
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	e78b      	b.n	8007cb6 <PxMessagingTask+0x11a2>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 8007d9e:	2338      	movs	r3, #56	; 0x38
 8007da0:	4363      	muls	r3, r4
 8007da2:	4a13      	ldr	r2, [pc, #76]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007da4:	18d2      	adds	r2, r2, r3
 8007da6:	444a      	add	r2, r9
 8007da8:	79d3      	ldrb	r3, [r2, #7]
 8007daa:	021b      	lsls	r3, r3, #8
 8007dac:	7991      	ldrb	r1, [r2, #6]
 8007dae:	185b      	adds	r3, r3, r1
 8007db0:	7a11      	ldrb	r1, [r2, #8]
 8007db2:	0409      	lsls	r1, r1, #16
 8007db4:	185b      	adds	r3, r3, r1
 8007db6:	7a52      	ldrb	r2, [r2, #9]
 8007db8:	0612      	lsls	r2, r2, #24
 8007dba:	189b      	adds	r3, r3, r2
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	e77a      	b.n	8007cb6 <PxMessagingTask+0x11a2>
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 8007dc0:	2338      	movs	r3, #56	; 0x38
 8007dc2:	4363      	muls	r3, r4
 8007dc4:	4a0a      	ldr	r2, [pc, #40]	; (8007df0 <PxMessagingTask+0x12dc>)
 8007dc6:	18d2      	adds	r2, r2, r3
 8007dc8:	444a      	add	r2, r9
 8007dca:	79d3      	ldrb	r3, [r2, #7]
 8007dcc:	021b      	lsls	r3, r3, #8
 8007dce:	7a11      	ldrb	r1, [r2, #8]
 8007dd0:	0409      	lsls	r1, r1, #16
 8007dd2:	185b      	adds	r3, r3, r1
 8007dd4:	7991      	ldrb	r1, [r2, #6]
 8007dd6:	185b      	adds	r3, r3, r1
 8007dd8:	7a52      	ldrb	r2, [r2, #9]
 8007dda:	0612      	lsls	r2, r2, #24
 8007ddc:	189b      	adds	r3, r3, r2
 8007dde:	4a03      	ldr	r2, [pc, #12]	; (8007dec <PxMessagingTask+0x12d8>)
 8007de0:	6013      	str	r3, [r2, #0]
 8007de2:	2100      	movs	r1, #0
 8007de4:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 8007de6:	602b      	str	r3, [r5, #0]
 8007de8:	e765      	b.n	8007cb6 <PxMessagingTask+0x11a2>
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	20000c90 	.word	0x20000c90
 8007df0:	200006d8 	.word	0x200006d8
 8007df4:	20000c98 	.word	0x20000c98
 8007df8:	200060e8 	.word	0x200060e8
 8007dfc:	08016678 	.word	0x08016678
 8007e00:	0000fff0 	.word	0x0000fff0
 8007e04:	20006160 	.word	0x20006160
 8007e08:	20000a5c 	.word	0x20000a5c
 8007e0c:	00007fff 	.word	0x00007fff
 8007e10:	08016698 	.word	0x08016698
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 8007e14:	4ab5      	ldr	r2, [pc, #724]	; (80080ec <PxMessagingTask+0x15d8>)
 8007e16:	23f8      	movs	r3, #248	; 0xf8
 8007e18:	061b      	lsls	r3, r3, #24
 8007e1a:	18eb      	adds	r3, r5, r3
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d903      	bls.n	8007e28 <PxMessagingTask+0x1314>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 8007e20:	4bb3      	ldr	r3, [pc, #716]	; (80080f0 <PxMessagingTask+0x15dc>)
 8007e22:	2215      	movs	r2, #21
 8007e24:	701a      	strb	r2, [r3, #0]
 8007e26:	e746      	b.n	8007cb6 <PxMessagingTask+0x11a2>
									HAL_FLASH_Unlock();
 8007e28:	f007 fd8c 	bl	800f944 <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 8007e2c:	2f22      	cmp	r7, #34	; 0x22
 8007e2e:	d012      	beq.n	8007e56 <PxMessagingTask+0x1342>
									if (responseStatus == BOS_OK)
 8007e30:	4baf      	ldr	r3, [pc, #700]	; (80080f0 <PxMessagingTask+0x15dc>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d129      	bne.n	8007e8c <PxMessagingTask+0x1378>
										switch (cMessage[port-1][1+shift])															// Requested format
 8007e38:	2238      	movs	r2, #56	; 0x38
 8007e3a:	4362      	muls	r2, r4
 8007e3c:	4bad      	ldr	r3, [pc, #692]	; (80080f4 <PxMessagingTask+0x15e0>)
 8007e3e:	189b      	adds	r3, r3, r2
 8007e40:	444b      	add	r3, r9
 8007e42:	785b      	ldrb	r3, [r3, #1]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	2a07      	cmp	r2, #7
 8007e4a:	d81f      	bhi.n	8007e8c <PxMessagingTask+0x1378>
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4aa9      	ldr	r2, [pc, #676]	; (80080f8 <PxMessagingTask+0x15e4>)
 8007e52:	58d3      	ldr	r3, [r2, r3]
 8007e54:	469f      	mov	pc, r3
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8007e56:	2300      	movs	r3, #0
 8007e58:	9311      	str	r3, [sp, #68]	; 0x44
										erase.PageAddress = temp32;
 8007e5a:	9512      	str	r5, [sp, #72]	; 0x48
										erase.NbPages = 1;
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	9313      	str	r3, [sp, #76]	; 0x4c
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 8007e60:	a910      	add	r1, sp, #64	; 0x40
 8007e62:	a811      	add	r0, sp, #68	; 0x44
 8007e64:	f007 fe42 	bl	800faec <HAL_FLASHEx_Erase>
 8007e68:	900b      	str	r0, [sp, #44]	; 0x2c
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d102      	bne.n	8007e74 <PxMessagingTask+0x1360>
 8007e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e70:	3301      	adds	r3, #1
 8007e72:	d0dd      	beq.n	8007e30 <PxMessagingTask+0x131c>
 8007e74:	4b9e      	ldr	r3, [pc, #632]	; (80080f0 <PxMessagingTask+0x15dc>)
 8007e76:	2216      	movs	r2, #22
 8007e78:	701a      	strb	r2, [r3, #0]
 8007e7a:	e7d9      	b.n	8007e30 <PxMessagingTask+0x131c>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 8007e7c:	882b      	ldrh	r3, [r5, #0]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	4a9e      	ldr	r2, [pc, #632]	; (80080fc <PxMessagingTask+0x15e8>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d00c      	beq.n	8007ea0 <PxMessagingTask+0x138c>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 8007e86:	4b9a      	ldr	r3, [pc, #616]	; (80080f0 <PxMessagingTask+0x15dc>)
 8007e88:	2216      	movs	r2, #22
 8007e8a:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 8007e8c:	f007 fd6c 	bl	800f968 <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 8007e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d100      	bne.n	8007e98 <PxMessagingTask+0x1384>
 8007e96:	e70e      	b.n	8007cb6 <PxMessagingTask+0x11a2>
 8007e98:	4b95      	ldr	r3, [pc, #596]	; (80080f0 <PxMessagingTask+0x15dc>)
 8007e9a:	2216      	movs	r2, #22
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	e70a      	b.n	8007cb6 <PxMessagingTask+0x11a2>
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 8007ea0:	2238      	movs	r2, #56	; 0x38
 8007ea2:	4362      	muls	r2, r4
 8007ea4:	4b93      	ldr	r3, [pc, #588]	; (80080f4 <PxMessagingTask+0x15e0>)
 8007ea6:	189b      	adds	r3, r3, r2
 8007ea8:	444b      	add	r3, r9
 8007eaa:	799a      	ldrb	r2, [r3, #6]
 8007eac:	2300      	movs	r3, #0
 8007eae:	4994      	ldr	r1, [pc, #592]	; (8008100 <PxMessagingTask+0x15ec>)
 8007eb0:	600a      	str	r2, [r1, #0]
 8007eb2:	604b      	str	r3, [r1, #4]
 8007eb4:	0029      	movs	r1, r5
 8007eb6:	2001      	movs	r0, #1
 8007eb8:	f007 fd8e 	bl	800f9d8 <HAL_FLASH_Program>
 8007ebc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ebe:	e7e5      	b.n	8007e8c <PxMessagingTask+0x1378>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 8007ec0:	882b      	ldrh	r3, [r5, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	4a8d      	ldr	r2, [pc, #564]	; (80080fc <PxMessagingTask+0x15e8>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d003      	beq.n	8007ed2 <PxMessagingTask+0x13be>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 8007eca:	4b89      	ldr	r3, [pc, #548]	; (80080f0 <PxMessagingTask+0x15dc>)
 8007ecc:	2216      	movs	r2, #22
 8007ece:	701a      	strb	r2, [r3, #0]
 8007ed0:	e7dc      	b.n	8007e8c <PxMessagingTask+0x1378>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 8007ed2:	2238      	movs	r2, #56	; 0x38
 8007ed4:	4362      	muls	r2, r4
 8007ed6:	4b87      	ldr	r3, [pc, #540]	; (80080f4 <PxMessagingTask+0x15e0>)
 8007ed8:	189b      	adds	r3, r3, r2
 8007eda:	444b      	add	r3, r9
 8007edc:	79da      	ldrb	r2, [r3, #7]
 8007ede:	0212      	lsls	r2, r2, #8
 8007ee0:	799b      	ldrb	r3, [r3, #6]
 8007ee2:	18d2      	adds	r2, r2, r3
 8007ee4:	17d3      	asrs	r3, r2, #31
 8007ee6:	4986      	ldr	r1, [pc, #536]	; (8008100 <PxMessagingTask+0x15ec>)
 8007ee8:	600a      	str	r2, [r1, #0]
 8007eea:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 8007eec:	0029      	movs	r1, r5
 8007eee:	2001      	movs	r0, #1
 8007ef0:	f007 fd72 	bl	800f9d8 <HAL_FLASH_Program>
 8007ef4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ef6:	e7c9      	b.n	8007e8c <PxMessagingTask+0x1378>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	3301      	adds	r3, #1
 8007efc:	d003      	beq.n	8007f06 <PxMessagingTask+0x13f2>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 8007efe:	4b7c      	ldr	r3, [pc, #496]	; (80080f0 <PxMessagingTask+0x15dc>)
 8007f00:	2216      	movs	r2, #22
 8007f02:	701a      	strb	r2, [r3, #0]
 8007f04:	e7c2      	b.n	8007e8c <PxMessagingTask+0x1378>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 8007f06:	2238      	movs	r2, #56	; 0x38
 8007f08:	4362      	muls	r2, r4
 8007f0a:	4b7a      	ldr	r3, [pc, #488]	; (80080f4 <PxMessagingTask+0x15e0>)
 8007f0c:	189b      	adds	r3, r3, r2
 8007f0e:	444b      	add	r3, r9
 8007f10:	79da      	ldrb	r2, [r3, #7]
 8007f12:	0212      	lsls	r2, r2, #8
 8007f14:	7a19      	ldrb	r1, [r3, #8]
 8007f16:	0409      	lsls	r1, r1, #16
 8007f18:	1852      	adds	r2, r2, r1
 8007f1a:	7999      	ldrb	r1, [r3, #6]
 8007f1c:	1852      	adds	r2, r2, r1
 8007f1e:	7a5b      	ldrb	r3, [r3, #9]
 8007f20:	061b      	lsls	r3, r3, #24
 8007f22:	18d2      	adds	r2, r2, r3
 8007f24:	2300      	movs	r3, #0
 8007f26:	4976      	ldr	r1, [pc, #472]	; (8008100 <PxMessagingTask+0x15ec>)
 8007f28:	600a      	str	r2, [r1, #0]
 8007f2a:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 8007f2c:	0029      	movs	r1, r5
 8007f2e:	2002      	movs	r0, #2
 8007f30:	f007 fd52 	bl	800f9d8 <HAL_FLASH_Program>
 8007f34:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f36:	e7a9      	b.n	8007e8c <PxMessagingTask+0x1378>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	d003      	beq.n	8007f46 <PxMessagingTask+0x1432>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 8007f3e:	4b6c      	ldr	r3, [pc, #432]	; (80080f0 <PxMessagingTask+0x15dc>)
 8007f40:	2216      	movs	r2, #22
 8007f42:	701a      	strb	r2, [r3, #0]
 8007f44:	e7a2      	b.n	8007e8c <PxMessagingTask+0x1378>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 8007f46:	2238      	movs	r2, #56	; 0x38
 8007f48:	4362      	muls	r2, r4
 8007f4a:	4b6a      	ldr	r3, [pc, #424]	; (80080f4 <PxMessagingTask+0x15e0>)
 8007f4c:	189b      	adds	r3, r3, r2
 8007f4e:	444b      	add	r3, r9
 8007f50:	79da      	ldrb	r2, [r3, #7]
 8007f52:	0212      	lsls	r2, r2, #8
 8007f54:	7a19      	ldrb	r1, [r3, #8]
 8007f56:	0409      	lsls	r1, r1, #16
 8007f58:	1852      	adds	r2, r2, r1
 8007f5a:	7999      	ldrb	r1, [r3, #6]
 8007f5c:	1852      	adds	r2, r2, r1
 8007f5e:	7a5b      	ldrb	r3, [r3, #9]
 8007f60:	061b      	lsls	r3, r3, #24
 8007f62:	18d2      	adds	r2, r2, r3
 8007f64:	2300      	movs	r3, #0
 8007f66:	4966      	ldr	r1, [pc, #408]	; (8008100 <PxMessagingTask+0x15ec>)
 8007f68:	600a      	str	r2, [r1, #0]
 8007f6a:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 8007f6c:	0029      	movs	r1, r5
 8007f6e:	2003      	movs	r0, #3
 8007f70:	f007 fd32 	bl	800f9d8 <HAL_FLASH_Program>
 8007f74:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f76:	e789      	b.n	8007e8c <PxMessagingTask+0x1378>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 8007f78:	4b5e      	ldr	r3, [pc, #376]	; (80080f4 <PxMessagingTask+0x15e0>)
 8007f7a:	199b      	adds	r3, r3, r6
 8007f7c:	5d5a      	ldrb	r2, [r3, r5]
 8007f7e:	4b5c      	ldr	r3, [pc, #368]	; (80080f0 <PxMessagingTask+0x15dc>)
 8007f80:	701a      	strb	r2, [r3, #0]
							break;	
 8007f82:	2300      	movs	r3, #0
 8007f84:	4699      	mov	r9, r3
 8007f86:	f7fe fdf5 	bl	8006b74 <PxMessagingTask+0x60>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 8007f8a:	464a      	mov	r2, r9
 8007f8c:	3a01      	subs	r2, #1
 8007f8e:	b292      	uxth	r2, r2
 8007f90:	1c69      	adds	r1, r5, #1
 8007f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f94:	469c      	mov	ip, r3
 8007f96:	4461      	add	r1, ip
 8007f98:	4b56      	ldr	r3, [pc, #344]	; (80080f4 <PxMessagingTask+0x15e0>)
 8007f9a:	18c9      	adds	r1, r1, r3
 8007f9c:	199b      	adds	r3, r3, r6
 8007f9e:	5d58      	ldrb	r0, [r3, r5]
 8007fa0:	230a      	movs	r3, #10
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	f006 f8fe 	bl	800e1a4 <writePxMutex>
							break;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4699      	mov	r9, r3
 8007fac:	f7fe fde2 	bl	8006b74 <PxMessagingTask+0x60>
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 8007fb0:	9500      	str	r5, [sp, #0]
 8007fb2:	4653      	mov	r3, sl
 8007fb4:	9a06      	ldr	r2, [sp, #24]
 8007fb6:	9907      	ldr	r1, [sp, #28]
 8007fb8:	0038      	movs	r0, r7
 8007fba:	f7fc f905 	bl	80041c8 <User_MessagingParser>
 8007fbe:	4681      	mov	r9, r0
							if (result == BOS_ERR_UnknownMessage) {
 8007fc0:	2801      	cmp	r0, #1
 8007fc2:	d001      	beq.n	8007fc8 <PxMessagingTask+0x14b4>
 8007fc4:	f7fe fdd6 	bl	8006b74 <PxMessagingTask+0x60>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 8007fc8:	9500      	str	r5, [sp, #0]
 8007fca:	4653      	mov	r3, sl
 8007fcc:	9a06      	ldr	r2, [sp, #24]
 8007fce:	9907      	ldr	r1, [sp, #28]
 8007fd0:	0038      	movs	r0, r7
 8007fd2:	f004 fadd 	bl	800c590 <Module_MessagingTask>
 8007fd6:	4681      	mov	r9, r0
 8007fd8:	f7fe fdc7 	bl	8006b6a <PxMessagingTask+0x56>
									switch (cMessage[port-1][1+shift])											// requested format
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4699      	mov	r9, r3
 8007fe0:	f7fe fdc3 	bl	8006b6a <PxMessagingTask+0x56>
									switch (messageParams[0])											// requested format
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4699      	mov	r9, r3
 8007fe8:	f7fe fdbf 	bl	8006b6a <PxMessagingTask+0x56>
										switch (messageParams[0])											// requested format
 8007fec:	2300      	movs	r3, #0
 8007fee:	4699      	mov	r9, r3
 8007ff0:	f7fe fdbb 	bl	8006b6a <PxMessagingTask+0x56>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	9806      	ldr	r0, [sp, #24]
 8007ffa:	f7fd fcf1 	bl	80059e0 <SendMessageToModule>
			result = BOS_OK;			
 8007ffe:	2300      	movs	r3, #0
 8008000:	4699      	mov	r9, r3
 8008002:	f7fe fdb7 	bl	8006b74 <PxMessagingTask+0x60>
					switch (code)
 8008006:	2300      	movs	r3, #0
 8008008:	4699      	mov	r9, r3
 800800a:	f7fe fdb3 	bl	8006b74 <PxMessagingTask+0x60>
 800800e:	2300      	movs	r3, #0
 8008010:	4699      	mov	r9, r3
 8008012:	f7fe fdaf 	bl	8006b74 <PxMessagingTask+0x60>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 8008016:	4553      	cmp	r3, sl
 8008018:	d003      	beq.n	8008022 <PxMessagingTask+0x150e>
 800801a:	2f10      	cmp	r7, #16
 800801c:	d001      	beq.n	8008022 <PxMessagingTask+0x150e>
 800801e:	f7fe fdfa 	bl	8006c16 <PxMessagingTask+0x102>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8008022:	4653      	mov	r3, sl
 8008024:	2bff      	cmp	r3, #255	; 0xff
 8008026:	d101      	bne.n	800802c <PxMessagingTask+0x1518>
 8008028:	f7fe fe16 	bl	8006c58 <PxMessagingTask+0x144>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 800802c:	2bfe      	cmp	r3, #254	; 0xfe
 800802e:	d001      	beq.n	8008034 <PxMessagingTask+0x1520>
 8008030:	f7fe fe1d 	bl	8006c6e <PxMessagingTask+0x15a>
 8008034:	4b2f      	ldr	r3, [pc, #188]	; (80080f4 <PxMessagingTask+0x15e0>)
 8008036:	199b      	adds	r3, r3, r6
 8008038:	1859      	adds	r1, r3, r1
 800803a:	3901      	subs	r1, #1
 800803c:	780b      	ldrb	r3, [r1, #0]
 800803e:	4a31      	ldr	r2, [pc, #196]	; (8008104 <PxMessagingTask+0x15f0>)
 8008040:	7812      	ldrb	r2, [r2, #0]
					result = BOS_ERR_MSG_Reflection;
 8008042:	2103      	movs	r1, #3
 8008044:	4689      	mov	r9, r1
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8008046:	429a      	cmp	r2, r3
 8008048:	d101      	bne.n	800804e <PxMessagingTask+0x153a>
 800804a:	f7fe fd8e 	bl	8006b6a <PxMessagingTask+0x56>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 800804e:	4a2d      	ldr	r2, [pc, #180]	; (8008104 <PxMessagingTask+0x15f0>)
 8008050:	7013      	strb	r3, [r2, #0]
 8008052:	4a2d      	ldr	r2, [pc, #180]	; (8008108 <PxMessagingTask+0x15f4>)
 8008054:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 8008056:	9907      	ldr	r1, [sp, #28]
 8008058:	20fe      	movs	r0, #254	; 0xfe
 800805a:	f7fd f819 	bl	8005090 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 800805e:	4b2b      	ldr	r3, [pc, #172]	; (800810c <PxMessagingTask+0x15f8>)
 8008060:	5d19      	ldrb	r1, [r3, r4]
 8008062:	4b24      	ldr	r3, [pc, #144]	; (80080f4 <PxMessagingTask+0x15e0>)
 8008064:	199b      	adds	r3, r3, r6
 8008066:	185a      	adds	r2, r3, r1
 8008068:	3a01      	subs	r2, #1
 800806a:	2000      	movs	r0, #0
 800806c:	7010      	strb	r0, [r2, #0]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800806e:	1e8a      	subs	r2, r1, #2
 8008070:	5c9b      	ldrb	r3, [r3, r2]
 8008072:	9308      	str	r3, [sp, #32]
					for(i=0 ; i<temp ; i++)
 8008074:	2b00      	cmp	r3, #0
 8008076:	d035      	beq.n	80080e4 <PxMessagingTask+0x15d0>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 8008078:	1ad2      	subs	r2, r2, r3
 800807a:	4694      	mov	ip, r2
 800807c:	4b24      	ldr	r3, [pc, #144]	; (8008110 <PxMessagingTask+0x15fc>)
 800807e:	7818      	ldrb	r0, [r3, #0]
 8008080:	4b1c      	ldr	r3, [pc, #112]	; (80080f4 <PxMessagingTask+0x15e0>)
 8008082:	199b      	adds	r3, r3, r6
 8008084:	5c9b      	ldrb	r3, [r3, r2]
 8008086:	900a      	str	r0, [sp, #40]	; 0x28
 8008088:	4283      	cmp	r3, r0
 800808a:	d019      	beq.n	80080c0 <PxMessagingTask+0x15ac>
 800808c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800808e:	1c43      	adds	r3, r0, #1
 8008090:	4463      	add	r3, ip
 8008092:	4a18      	ldr	r2, [pc, #96]	; (80080f4 <PxMessagingTask+0x15e0>)
 8008094:	189b      	adds	r3, r3, r2
 8008096:	3201      	adds	r2, #1
 8008098:	4681      	mov	r9, r0
 800809a:	444a      	add	r2, r9
 800809c:	9808      	ldr	r0, [sp, #32]
 800809e:	3801      	subs	r0, #1
 80080a0:	b2c0      	uxtb	r0, r0
 80080a2:	4681      	mov	r9, r0
 80080a4:	444a      	add	r2, r9
 80080a6:	4494      	add	ip, r2
 80080a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080aa:	4660      	mov	r0, ip
 80080ac:	468c      	mov	ip, r1
 80080ae:	0011      	movs	r1, r2
					for(i=0 ; i<temp ; i++)
 80080b0:	4283      	cmp	r3, r0
 80080b2:	d017      	beq.n	80080e4 <PxMessagingTask+0x15d0>
 80080b4:	3301      	adds	r3, #1
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 80080b6:	1e5a      	subs	r2, r3, #1
 80080b8:	7812      	ldrb	r2, [r2, #0]
 80080ba:	428a      	cmp	r2, r1
 80080bc:	d1f8      	bne.n	80080b0 <PxMessagingTask+0x159c>
 80080be:	4661      	mov	r1, ip
				shift += 4;
 80080c0:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 80080c2:	1b4a      	subs	r2, r1, r5
 80080c4:	b2d3      	uxtb	r3, r2
 80080c6:	4699      	mov	r9, r3
 80080c8:	f7fe fddb 	bl	8006c82 <PxMessagingTask+0x16e>
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 80080cc:	2338      	movs	r3, #56	; 0x38
 80080ce:	4363      	muls	r3, r4
 80080d0:	4a08      	ldr	r2, [pc, #32]	; (80080f4 <PxMessagingTask+0x15e0>)
 80080d2:	18d2      	adds	r2, r2, r3
 80080d4:	464b      	mov	r3, r9
 80080d6:	5cd3      	ldrb	r3, [r2, r3]
 80080d8:	3b01      	subs	r3, #1
 80080da:	0098      	lsls	r0, r3, #2
 80080dc:	490d      	ldr	r1, [pc, #52]	; (8008114 <PxMessagingTask+0x1600>)
 80080de:	5841      	ldr	r1, [r0, r1]
 80080e0:	5dd2      	ldrb	r2, [r2, r7]
 80080e2:	e52a      	b.n	8007b3a <PxMessagingTask+0x1026>
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 80080e4:	2366      	movs	r3, #102	; 0x66
 80080e6:	4699      	mov	r9, r3
 80080e8:	f7fe fd44 	bl	8006b74 <PxMessagingTask+0x60>
 80080ec:	0001ffff 	.word	0x0001ffff
 80080f0:	20000c98 	.word	0x20000c98
 80080f4:	200006d8 	.word	0x200006d8
 80080f8:	080166b8 	.word	0x080166b8
 80080fc:	0000ffff 	.word	0x0000ffff
 8008100:	20000c90 	.word	0x20000c90
 8008104:	20000613 	.word	0x20000613
 8008108:	20000612 	.word	0x20000612
 800810c:	20000a54 	.word	0x20000a54
 8008110:	20000b90 	.word	0x20000b90
 8008114:	200060e8 	.word	0x200060e8

08008118 <scastCommand>:
{
 8008118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800811a:	46de      	mov	lr, fp
 800811c:	4657      	mov	r7, sl
 800811e:	b580      	push	{r7, lr}
 8008120:	b09b      	sub	sp, #108	; 0x6c
 8008122:	0005      	movs	r5, r0
 8008124:	9009      	str	r0, [sp, #36]	; 0x24
 8008126:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 8008128:	2300      	movs	r3, #0
 800812a:	9319      	str	r3, [sp, #100]	; 0x64
 800812c:	9318      	str	r3, [sp, #96]	; 0x60
 800812e:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 8008130:	9316      	str	r3, [sp, #88]	; 0x58
 8008132:	9315      	str	r3, [sp, #84]	; 0x54
 8008134:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 = 0;
 8008136:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 8008138:	220a      	movs	r2, #10
 800813a:	2100      	movs	r1, #0
 800813c:	a810      	add	r0, sp, #64	; 0x40
 800813e:	f009 ffb3 	bl	80120a8 <memset>
 8008142:	220a      	movs	r2, #10
 8008144:	2100      	movs	r1, #0
 8008146:	a80d      	add	r0, sp, #52	; 0x34
 8008148:	f009 ffae 	bl	80120a8 <memset>
 800814c:	220a      	movs	r2, #10
 800814e:	2100      	movs	r1, #0
 8008150:	a80a      	add	r0, sp, #40	; 0x28
 8008152:	f009 ffa9 	bl	80120a8 <memset>
	configASSERT( pcWriteBuffer );
 8008156:	2d00      	cmp	r5, #0
 8008158:	d101      	bne.n	800815e <scastCommand+0x46>
 800815a:	b672      	cpsid	i
 800815c:	e7fe      	b.n	800815c <scastCommand+0x44>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800815e:	aa19      	add	r2, sp, #100	; 0x64
 8008160:	2101      	movs	r1, #1
 8008162:	0020      	movs	r0, r4
 8008164:	f006 fa0e 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 8008168:	2300      	movs	r3, #0
 800816a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 800816c:	2200      	movs	r2, #0
 800816e:	9208      	str	r2, [sp, #32]
	if (pcParameterString1[0] == 'P') {
 8008170:	2b50      	cmp	r3, #80	; 0x50
 8008172:	d100      	bne.n	8008176 <scastCommand+0x5e>
 8008174:	e06d      	b.n	8008252 <scastCommand+0x13a>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8008176:	aa18      	add	r2, sp, #96	; 0x60
 8008178:	2102      	movs	r1, #2
 800817a:	0020      	movs	r0, r4
 800817c:	f006 fa02 	bl	800e584 <FreeRTOS_CLIGetParameter>
 8008180:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 8008182:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008184:	a810      	add	r0, sp, #64	; 0x40
 8008186:	f00a f8e2 	bl	801234e <strncpy>
	srcM = (uint8_t) GetID(par1);
 800818a:	a810      	add	r0, sp, #64	; 0x40
 800818c:	f7fd ff5a 	bl	8006044 <GetID>
 8008190:	b2c3      	uxtb	r3, r0
 8008192:	469a      	mov	sl, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8008194:	aa17      	add	r2, sp, #92	; 0x5c
 8008196:	2103      	movs	r1, #3
 8008198:	0020      	movs	r0, r4
 800819a:	f006 f9f3 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 800819e:	2300      	movs	r3, #0
 80081a0:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 80081a2:	2700      	movs	r7, #0
	if (pcParameterString3[0] == 'p') {
 80081a4:	2b70      	cmp	r3, #112	; 0x70
 80081a6:	d05a      	beq.n	800825e <scastCommand+0x146>
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 80081a8:	aa16      	add	r2, sp, #88	; 0x58
 80081aa:	2104      	movs	r1, #4
 80081ac:	0020      	movs	r0, r4
 80081ae:	f006 f9e9 	bl	800e584 <FreeRTOS_CLIGetParameter>
 80081b2:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 80081b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80081b6:	a80d      	add	r0, sp, #52	; 0x34
 80081b8:	f00a f8c9 	bl	801234e <strncpy>
	dstM = (uint8_t) GetID(par2);
 80081bc:	a80d      	add	r0, sp, #52	; 0x34
 80081be:	f7fd ff41 	bl	8006044 <GetID>
 80081c2:	b2c3      	uxtb	r3, r0
 80081c4:	469b      	mov	fp, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 80081c6:	aa15      	add	r2, sp, #84	; 0x54
 80081c8:	2105      	movs	r1, #5
 80081ca:	0020      	movs	r0, r4
 80081cc:	f006 f9da 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 80081d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80081d2:	0032      	movs	r2, r6
 80081d4:	492b      	ldr	r1, [pc, #172]	; (8008284 <scastCommand+0x16c>)
 80081d6:	9007      	str	r0, [sp, #28]
 80081d8:	f00a f8a8 	bl	801232c <strncmp>
		direction = FORWARD;
 80081dc:	2500      	movs	r5, #0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 80081de:	2800      	cmp	r0, #0
 80081e0:	d00f      	beq.n	8008202 <scastCommand+0xea>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 80081e2:	0032      	movs	r2, r6
 80081e4:	4928      	ldr	r1, [pc, #160]	; (8008288 <scastCommand+0x170>)
 80081e6:	9807      	ldr	r0, [sp, #28]
 80081e8:	f00a f8a0 	bl	801232c <strncmp>
		direction = BACKWARD;
 80081ec:	3501      	adds	r5, #1
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d007      	beq.n	8008202 <scastCommand+0xea>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 80081f2:	0032      	movs	r2, r6
 80081f4:	4925      	ldr	r1, [pc, #148]	; (800828c <scastCommand+0x174>)
 80081f6:	9807      	ldr	r0, [sp, #28]
 80081f8:	f00a f898 	bl	801232c <strncmp>
		direction = BIDIRECTIONAL;
 80081fc:	4243      	negs	r3, r0
 80081fe:	4158      	adcs	r0, r3
 8008200:	0045      	lsls	r5, r0, #1
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 8008202:	0032      	movs	r2, r6
 8008204:	9907      	ldr	r1, [sp, #28]
 8008206:	a80a      	add	r0, sp, #40	; 0x28
 8008208:	f00a f8a1 	bl	801234e <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 800820c:	aa14      	add	r2, sp, #80	; 0x50
 800820e:	2106      	movs	r1, #6
 8008210:	0020      	movs	r0, r4
 8008212:	f006 f9b7 	bl	800e584 <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 8008216:	f009 fecc 	bl	8011fb2 <atol>
 800821a:	0006      	movs	r6, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 800821c:	aa13      	add	r2, sp, #76	; 0x4c
 800821e:	2107      	movs	r1, #7
 8008220:	0020      	movs	r0, r4
 8008222:	f006 f9af 	bl	800e584 <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 8008226:	f009 fec4 	bl	8011fb2 <atol>
 800822a:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 800822c:	2300      	movs	r3, #0
 800822e:	9303      	str	r3, [sp, #12]
 8008230:	9002      	str	r0, [sp, #8]
 8008232:	9601      	str	r6, [sp, #4]
 8008234:	9500      	str	r5, [sp, #0]
 8008236:	465b      	mov	r3, fp
 8008238:	003a      	movs	r2, r7
 800823a:	4651      	mov	r1, sl
 800823c:	9808      	ldr	r0, [sp, #32]
 800823e:	f7fe fa63 	bl	8006708 <StartScastDMAStream>
	if (result == BOS_OK) 
 8008242:	2800      	cmp	r0, #0
 8008244:	d010      	beq.n	8008268 <scastCommand+0x150>
}
 8008246:	2000      	movs	r0, #0
 8008248:	b01b      	add	sp, #108	; 0x6c
 800824a:	bc0c      	pop	{r2, r3}
 800824c:	4692      	mov	sl, r2
 800824e:	469b      	mov	fp, r3
 8008250:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8008252:	3001      	adds	r0, #1
 8008254:	f009 fead 	bl	8011fb2 <atol>
 8008258:	b2c3      	uxtb	r3, r0
 800825a:	9308      	str	r3, [sp, #32]
 800825c:	e78b      	b.n	8008176 <scastCommand+0x5e>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 800825e:	3001      	adds	r0, #1
 8008260:	f009 fea7 	bl	8011fb2 <atol>
 8008264:	b2c7      	uxtb	r7, r0
 8008266:	e79f      	b.n	80081a8 <scastCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 8008268:	9404      	str	r4, [sp, #16]
 800826a:	9603      	str	r6, [sp, #12]
 800826c:	ab0d      	add	r3, sp, #52	; 0x34
 800826e:	9302      	str	r3, [sp, #8]
 8008270:	9701      	str	r7, [sp, #4]
 8008272:	ab10      	add	r3, sp, #64	; 0x40
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	9b08      	ldr	r3, [sp, #32]
 8008278:	aa0a      	add	r2, sp, #40	; 0x28
 800827a:	4905      	ldr	r1, [pc, #20]	; (8008290 <scastCommand+0x178>)
 800827c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800827e:	f00a f811 	bl	80122a4 <siprintf>
 8008282:	e7e0      	b.n	8008246 <scastCommand+0x12e>
 8008284:	08017454 	.word	0x08017454
 8008288:	0801745c 	.word	0x0801745c
 800828c:	08017468 	.word	0x08017468
 8008290:	08017478 	.word	0x08017478

08008294 <AddPortButton>:
{
 8008294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008296:	b08d      	sub	sp, #52	; 0x34
 8008298:	0006      	movs	r6, r0
 800829a:	000c      	movs	r4, r1
	if (BOS_initialized) {
 800829c:	4b41      	ldr	r3, [pc, #260]	; (80083a4 <AddPortButton+0x110>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d157      	bne.n	8008354 <AddPortButton+0xc0>
	portStatus[port] = PORTBUTTON;	
 80082a4:	4b40      	ldr	r3, [pc, #256]	; (80083a8 <AddPortButton+0x114>)
 80082a6:	2204      	movs	r2, #4
 80082a8:	551a      	strb	r2, [r3, r4]
	if (BOS_initialized) {
 80082aa:	4b3e      	ldr	r3, [pc, #248]	; (80083a4 <AddPortButton+0x110>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d15a      	bne.n	8008368 <AddPortButton+0xd4>
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 80082b2:	2512      	movs	r5, #18
 80082b4:	446d      	add	r5, sp
 80082b6:	af04      	add	r7, sp, #16
 80082b8:	9700      	str	r7, [sp, #0]
 80082ba:	ab05      	add	r3, sp, #20
 80082bc:	002a      	movs	r2, r5
 80082be:	a906      	add	r1, sp, #24
 80082c0:	0020      	movs	r0, r4
 80082c2:	f7fc fb2b 	bl	800491c <GetPortGPIOs>
	GPIO_InitStruct.Pin = TX_Pin;
 80082c6:	882b      	ldrh	r3, [r5, #0]
 80082c8:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082ca:	2301      	movs	r3, #1
 80082cc:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ce:	2500      	movs	r5, #0
 80082d0:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80082d2:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 80082d4:	a907      	add	r1, sp, #28
 80082d6:	9806      	ldr	r0, [sp, #24]
 80082d8:	f007 fc68 	bl	800fbac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RX_Pin;
 80082dc:	883b      	ldrh	r3, [r7, #0]
 80082de:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082e0:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80082e2:	2302      	movs	r3, #2
 80082e4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 80082e6:	a907      	add	r1, sp, #28
 80082e8:	9805      	ldr	r0, [sp, #20]
 80082ea:	f007 fc5f 	bl	800fbac <HAL_GPIO_Init>
	button[port].type = buttonType;	
 80082ee:	00e2      	lsls	r2, r4, #3
 80082f0:	1912      	adds	r2, r2, r4
 80082f2:	4b2e      	ldr	r3, [pc, #184]	; (80083ac <AddPortButton+0x118>)
 80082f4:	189b      	adds	r3, r3, r2
 80082f6:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 80082f8:	0025      	movs	r5, r4
 80082fa:	353a      	adds	r5, #58	; 0x3a
 80082fc:	00ad      	lsls	r5, r5, #2
 80082fe:	210e      	movs	r1, #14
 8008300:	4469      	add	r1, sp
 8008302:	0028      	movs	r0, r5
 8008304:	f002 fa2a 	bl	800a75c <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008308:	2800      	cmp	r0, #0
 800830a:	d133      	bne.n	8008374 <AddPortButton+0xe0>
		temp8 = (uint8_t)(temp16 >> 8);
 800830c:	230e      	movs	r3, #14
 800830e:	446b      	add	r3, sp
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	0a1b      	lsrs	r3, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 8008314:	091a      	lsrs	r2, r3, #4
 8008316:	42a2      	cmp	r2, r4
 8008318:	d103      	bne.n	8008322 <AddPortButton+0x8e>
 800831a:	220f      	movs	r2, #15
 800831c:	4013      	ands	r3, r2
 800831e:	42b3      	cmp	r3, r6
 8008320:	d015      	beq.n	800834e <AddPortButton+0xba>
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8008322:	0324      	lsls	r4, r4, #12
 8008324:	0231      	lsls	r1, r6, #8
 8008326:	4321      	orrs	r1, r4
 8008328:	b289      	uxth	r1, r1
 800832a:	230e      	movs	r3, #14
 800832c:	446b      	add	r3, sp
 800832e:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008330:	0028      	movs	r0, r5
 8008332:	f002 fa43 	bl	800a7bc <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008336:	1c68      	adds	r0, r5, #1
 8008338:	2100      	movs	r1, #0
 800833a:	f002 fa3f 	bl	800a7bc <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 800833e:	1ca8      	adds	r0, r5, #2
 8008340:	2100      	movs	r1, #0
 8008342:	f002 fa3b 	bl	800a7bc <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8008346:	1ce8      	adds	r0, r5, #3
 8008348:	2100      	movs	r1, #0
 800834a:	f002 fa37 	bl	800a7bc <EE_WriteVariable>
}
 800834e:	2000      	movs	r0, #0
 8008350:	b00d      	add	sp, #52	; 0x34
 8008352:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 8008354:	008d      	lsls	r5, r1, #2
 8008356:	4b16      	ldr	r3, [pc, #88]	; (80083b0 <AddPortButton+0x11c>)
 8008358:	58e8      	ldr	r0, [r5, r3]
 800835a:	f006 f845 	bl	800e3e8 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800835e:	4b15      	ldr	r3, [pc, #84]	; (80083b4 <AddPortButton+0x120>)
 8008360:	58e8      	ldr	r0, [r5, r3]
 8008362:	f006 f841 	bl	800e3e8 <osSemaphoreRelease>
 8008366:	e79d      	b.n	80082a4 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008368:	0020      	movs	r0, r4
 800836a:	f7fc f937 	bl	80045dc <GetUart>
 800836e:	f009 f85a 	bl	8011426 <HAL_UART_DeInit>
 8008372:	e79e      	b.n	80082b2 <AddPortButton+0x1e>
		temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8008374:	0324      	lsls	r4, r4, #12
 8008376:	0231      	lsls	r1, r6, #8
 8008378:	4321      	orrs	r1, r4
 800837a:	b289      	uxth	r1, r1
 800837c:	230e      	movs	r3, #14
 800837e:	446b      	add	r3, sp
 8008380:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 8008382:	0028      	movs	r0, r5
 8008384:	f002 fa1a 	bl	800a7bc <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008388:	1c68      	adds	r0, r5, #1
 800838a:	2100      	movs	r1, #0
 800838c:	f002 fa16 	bl	800a7bc <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008390:	1ca8      	adds	r0, r5, #2
 8008392:	2100      	movs	r1, #0
 8008394:	f002 fa12 	bl	800a7bc <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8008398:	1ce8      	adds	r0, r5, #3
 800839a:	2100      	movs	r1, #0
 800839c:	f002 fa0e 	bl	800a7bc <EE_WriteVariable>
 80083a0:	e7d5      	b.n	800834e <AddPortButton+0xba>
 80083a2:	46c0      	nop			; (mov r8, r8)
 80083a4:	200003b5 	.word	0x200003b5
 80083a8:	20000c40 	.word	0x20000c40
 80083ac:	20000664 	.word	0x20000664
 80083b0:	2000625c 	.word	0x2000625c
 80083b4:	20006240 	.word	0x20006240

080083b8 <addbuttonCommand>:
{
 80083b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ba:	b087      	sub	sp, #28
 80083bc:	0006      	movs	r6, r0
 80083be:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 80083c0:	2300      	movs	r3, #0
 80083c2:	9305      	str	r3, [sp, #20]
 80083c4:	9304      	str	r3, [sp, #16]
	configASSERT( pcWriteBuffer );
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d101      	bne.n	80083ce <addbuttonCommand+0x16>
 80083ca:	b672      	cpsid	i
 80083cc:	e7fe      	b.n	80083cc <addbuttonCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80083ce:	aa05      	add	r2, sp, #20
 80083d0:	2101      	movs	r1, #1
 80083d2:	9803      	ldr	r0, [sp, #12]
 80083d4:	f006 f8d6 	bl	800e584 <FreeRTOS_CLIGetParameter>
 80083d8:	0004      	movs	r4, r0
 80083da:	4b23      	ldr	r3, [pc, #140]	; (8008468 <addbuttonCommand+0xb0>)
 80083dc:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 80083de:	9d05      	ldr	r5, [sp, #20]
 80083e0:	002a      	movs	r2, r5
 80083e2:	4922      	ldr	r1, [pc, #136]	; (800846c <addbuttonCommand+0xb4>)
 80083e4:	f009 ffa2 	bl	801232c <strncmp>
		type = MOMENTARY_NO;
 80083e8:	2701      	movs	r7, #1
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d017      	beq.n	800841e <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 80083ee:	002a      	movs	r2, r5
 80083f0:	491f      	ldr	r1, [pc, #124]	; (8008470 <addbuttonCommand+0xb8>)
 80083f2:	0020      	movs	r0, r4
 80083f4:	f009 ff9a 	bl	801232c <strncmp>
		type = MOMENTARY_NC;
 80083f8:	3701      	adds	r7, #1
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d00f      	beq.n	800841e <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 80083fe:	002a      	movs	r2, r5
 8008400:	491c      	ldr	r1, [pc, #112]	; (8008474 <addbuttonCommand+0xbc>)
 8008402:	0020      	movs	r0, r4
 8008404:	f009 ff92 	bl	801232c <strncmp>
		type = ONOFF_NO;
 8008408:	3701      	adds	r7, #1
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 800840a:	2800      	cmp	r0, #0
 800840c:	d007      	beq.n	800841e <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 800840e:	002a      	movs	r2, r5
 8008410:	4919      	ldr	r1, [pc, #100]	; (8008478 <addbuttonCommand+0xc0>)
 8008412:	0020      	movs	r0, r4
 8008414:	f009 ff8a 	bl	801232c <strncmp>
		type = ONOFF_NC;
 8008418:	4243      	negs	r3, r0
 800841a:	4158      	adcs	r0, r3
 800841c:	0087      	lsls	r7, r0, #2
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800841e:	aa04      	add	r2, sp, #16
 8008420:	2102      	movs	r1, #2
 8008422:	9803      	ldr	r0, [sp, #12]
 8008424:	f006 f8ae 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8008428:	2300      	movs	r3, #0
 800842a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0, type = 0;
 800842c:	2400      	movs	r4, #0
	if (pcParameterString2[0] == 'p') {
 800842e:	2b70      	cmp	r3, #112	; 0x70
 8008430:	d008      	beq.n	8008444 <addbuttonCommand+0x8c>
	result = AddPortButton(type, port);
 8008432:	0021      	movs	r1, r4
 8008434:	0038      	movs	r0, r7
 8008436:	f7ff ff2d 	bl	8008294 <AddPortButton>
	if (result == BOS_OK) 
 800843a:	2800      	cmp	r0, #0
 800843c:	d007      	beq.n	800844e <addbuttonCommand+0x96>
}
 800843e:	2000      	movs	r0, #0
 8008440:	b007      	add	sp, #28
 8008442:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8008444:	3001      	adds	r0, #1
 8008446:	f009 fdb4 	bl	8011fb2 <atol>
 800844a:	b2c4      	uxtb	r4, r0
 800844c:	e7f1      	b.n	8008432 <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 800844e:	4b06      	ldr	r3, [pc, #24]	; (8008468 <addbuttonCommand+0xb0>)
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	2300      	movs	r3, #0
 8008454:	9905      	ldr	r1, [sp, #20]
 8008456:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 8008458:	9400      	str	r4, [sp, #0]
 800845a:	0023      	movs	r3, r4
 800845c:	4907      	ldr	r1, [pc, #28]	; (800847c <addbuttonCommand+0xc4>)
 800845e:	0030      	movs	r0, r6
 8008460:	f009 ff20 	bl	80122a4 <siprintf>
 8008464:	e7eb      	b.n	800843e <addbuttonCommand+0x86>
 8008466:	46c0      	nop			; (mov r8, r8)
 8008468:	20000bcc 	.word	0x20000bcc
 800846c:	08016998 	.word	0x08016998
 8008470:	080169a8 	.word	0x080169a8
 8008474:	080169b8 	.word	0x080169b8
 8008478:	080169c4 	.word	0x080169c4
 800847c:	080169d0 	.word	0x080169d0

08008480 <RemovePortButton>:
{
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	0005      	movs	r5, r0
	button[port].type = NONE;
 8008486:	4837      	ldr	r0, [pc, #220]	; (8008564 <RemovePortButton+0xe4>)
 8008488:	00e9      	lsls	r1, r5, #3
 800848a:	1949      	adds	r1, r1, r5
 800848c:	1842      	adds	r2, r0, r1
 800848e:	2300      	movs	r3, #0
 8008490:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 8008492:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 8008494:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 8008496:	7093      	strb	r3, [r2, #2]
 8008498:	70d3      	strb	r3, [r2, #3]
 800849a:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 800849c:	7153      	strb	r3, [r2, #5]
 800849e:	7193      	strb	r3, [r2, #6]
 80084a0:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 80084a2:	002c      	movs	r4, r5
 80084a4:	343a      	adds	r4, #58	; 0x3a
 80084a6:	00a4      	lsls	r4, r4, #2
 80084a8:	466b      	mov	r3, sp
 80084aa:	1d99      	adds	r1, r3, #6
 80084ac:	0020      	movs	r0, r4
 80084ae:	f002 f955 	bl	800a75c <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d02b      	beq.n	800850e <RemovePortButton+0x8e>
	UART_HandleTypeDef* huart = GetUart(port);
 80084b6:	0028      	movs	r0, r5
 80084b8:	f7fc f890 	bl	80045dc <GetUart>
 80084bc:	0006      	movs	r6, r0
	if (huart->Instance == USART1) 
 80084be:	6803      	ldr	r3, [r0, #0]
 80084c0:	4a29      	ldr	r2, [pc, #164]	; (8008568 <RemovePortButton+0xe8>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d034      	beq.n	8008530 <RemovePortButton+0xb0>
	else if (huart->Instance == USART2) 
 80084c6:	4a29      	ldr	r2, [pc, #164]	; (800856c <RemovePortButton+0xec>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d035      	beq.n	8008538 <RemovePortButton+0xb8>
	else if (huart->Instance == USART3) 
 80084cc:	4a28      	ldr	r2, [pc, #160]	; (8008570 <RemovePortButton+0xf0>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d036      	beq.n	8008540 <RemovePortButton+0xc0>
	else if (huart->Instance == USART4) 
 80084d2:	4a28      	ldr	r2, [pc, #160]	; (8008574 <RemovePortButton+0xf4>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d037      	beq.n	8008548 <RemovePortButton+0xc8>
	else if (huart->Instance == USART5) 
 80084d8:	4a27      	ldr	r2, [pc, #156]	; (8008578 <RemovePortButton+0xf8>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d038      	beq.n	8008550 <RemovePortButton+0xd0>
	else if (huart->Instance == USART6) 
 80084de:	4a27      	ldr	r2, [pc, #156]	; (800857c <RemovePortButton+0xfc>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d039      	beq.n	8008558 <RemovePortButton+0xd8>
	else if (huart->Instance == USART7) 
 80084e4:	4a26      	ldr	r2, [pc, #152]	; (8008580 <RemovePortButton+0x100>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d03a      	beq.n	8008560 <RemovePortButton+0xe0>
	else if (huart->Instance == USART8) 
 80084ea:	4a26      	ldr	r2, [pc, #152]	; (8008584 <RemovePortButton+0x104>)
 80084ec:	4694      	mov	ip, r2
 80084ee:	4463      	add	r3, ip
 80084f0:	1e5c      	subs	r4, r3, #1
 80084f2:	41a3      	sbcs	r3, r4
 80084f4:	425c      	negs	r4, r3
 80084f6:	b2e4      	uxtb	r4, r4
	portStatus[port] = FREE;
 80084f8:	4b23      	ldr	r3, [pc, #140]	; (8008588 <RemovePortButton+0x108>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 80084fe:	3201      	adds	r2, #1
 8008500:	4922      	ldr	r1, [pc, #136]	; (800858c <RemovePortButton+0x10c>)
 8008502:	0030      	movs	r0, r6
 8008504:	f008 ffe8 	bl	80114d8 <HAL_UART_Receive_IT>
}
 8008508:	0020      	movs	r0, r4
 800850a:	b002      	add	sp, #8
 800850c:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 800850e:	2100      	movs	r1, #0
 8008510:	0020      	movs	r0, r4
 8008512:	f002 f953 	bl	800a7bc <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008516:	1c60      	adds	r0, r4, #1
 8008518:	2100      	movs	r1, #0
 800851a:	f002 f94f 	bl	800a7bc <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 800851e:	1ca0      	adds	r0, r4, #2
 8008520:	2100      	movs	r1, #0
 8008522:	f002 f94b 	bl	800a7bc <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 8008526:	1ce0      	adds	r0, r4, #3
 8008528:	2100      	movs	r1, #0
 800852a:	f002 f947 	bl	800a7bc <EE_WriteVariable>
 800852e:	e7c2      	b.n	80084b6 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008530:	f005 fc70 	bl	800de14 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8008534:	2400      	movs	r4, #0
 8008536:	e7df      	b.n	80084f8 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008538:	f005 fc84 	bl	800de44 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800853c:	2400      	movs	r4, #0
 800853e:	e7db      	b.n	80084f8 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008540:	f005 fc98 	bl	800de74 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008544:	2400      	movs	r4, #0
 8008546:	e7d7      	b.n	80084f8 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8008548:	f005 fcac 	bl	800dea4 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800854c:	2400      	movs	r4, #0
 800854e:	e7d3      	b.n	80084f8 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8008550:	f005 fcc0 	bl	800ded4 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8008554:	2400      	movs	r4, #0
 8008556:	e7cf      	b.n	80084f8 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 8008558:	f005 fcd4 	bl	800df04 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800855c:	2400      	movs	r4, #0
 800855e:	e7cb      	b.n	80084f8 <RemovePortButton+0x78>
 8008560:	2400      	movs	r4, #0
 8008562:	e7c9      	b.n	80084f8 <RemovePortButton+0x78>
 8008564:	20000664 	.word	0x20000664
 8008568:	40013800 	.word	0x40013800
 800856c:	40004400 	.word	0x40004400
 8008570:	40004800 	.word	0x40004800
 8008574:	40004c00 	.word	0x40004c00
 8008578:	40005000 	.word	0x40005000
 800857c:	40011400 	.word	0x40011400
 8008580:	40011800 	.word	0x40011800
 8008584:	bffee400 	.word	0xbffee400
 8008588:	20000c40 	.word	0x20000c40
 800858c:	20000828 	.word	0x20000828

08008590 <removebuttonCommand>:
{
 8008590:	b530      	push	{r4, r5, lr}
 8008592:	b083      	sub	sp, #12
 8008594:	0005      	movs	r5, r0
 8008596:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 8008598:	2300      	movs	r3, #0
 800859a:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 800859c:	2d00      	cmp	r5, #0
 800859e:	d101      	bne.n	80085a4 <removebuttonCommand+0x14>
 80085a0:	b672      	cpsid	i
 80085a2:	e7fe      	b.n	80085a2 <removebuttonCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80085a4:	aa01      	add	r2, sp, #4
 80085a6:	2101      	movs	r1, #1
 80085a8:	f005 ffec 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 80085ac:	2300      	movs	r3, #0
 80085ae:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0;
 80085b0:	2400      	movs	r4, #0
	if (pcParameterString1[0] == 'p') {
 80085b2:	2b70      	cmp	r3, #112	; 0x70
 80085b4:	d007      	beq.n	80085c6 <removebuttonCommand+0x36>
	result = RemovePortButton(port);
 80085b6:	0020      	movs	r0, r4
 80085b8:	f7ff ff62 	bl	8008480 <RemovePortButton>
	if (result == BOS_OK) 
 80085bc:	2800      	cmp	r0, #0
 80085be:	d007      	beq.n	80085d0 <removebuttonCommand+0x40>
}
 80085c0:	2000      	movs	r0, #0
 80085c2:	b003      	add	sp, #12
 80085c4:	bd30      	pop	{r4, r5, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 80085c6:	3001      	adds	r0, #1
 80085c8:	f009 fcf3 	bl	8011fb2 <atol>
 80085cc:	b2c4      	uxtb	r4, r0
 80085ce:	e7f2      	b.n	80085b6 <removebuttonCommand+0x26>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 80085d0:	0023      	movs	r3, r4
 80085d2:	0022      	movs	r2, r4
 80085d4:	4902      	ldr	r1, [pc, #8]	; (80085e0 <removebuttonCommand+0x50>)
 80085d6:	0028      	movs	r0, r5
 80085d8:	f009 fe64 	bl	80122a4 <siprintf>
 80085dc:	e7f0      	b.n	80085c0 <removebuttonCommand+0x30>
 80085de:	46c0      	nop			; (mov r8, r8)
 80085e0:	0801740c 	.word	0x0801740c

080085e4 <SetButtonEvents>:
{
 80085e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085e6:	46de      	mov	lr, fp
 80085e8:	4657      	mov	r7, sl
 80085ea:	464e      	mov	r6, r9
 80085ec:	4645      	mov	r5, r8
 80085ee:	b5e0      	push	{r5, r6, r7, lr}
 80085f0:	b085      	sub	sp, #20
 80085f2:	0007      	movs	r7, r0
 80085f4:	001e      	movs	r6, r3
 80085f6:	ab0e      	add	r3, sp, #56	; 0x38
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	4698      	mov	r8, r3
 80085fc:	ab0f      	add	r3, sp, #60	; 0x3c
 80085fe:	781d      	ldrb	r5, [r3, #0]
 8008600:	ab10      	add	r3, sp, #64	; 0x40
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	469b      	mov	fp, r3
 8008606:	ab11      	add	r3, sp, #68	; 0x44
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	469a      	mov	sl, r3
 800860c:	ab12      	add	r3, sp, #72	; 0x48
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	4699      	mov	r9, r3
 8008612:	ab13      	add	r3, sp, #76	; 0x4c
 8008614:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 8008616:	00fc      	lsls	r4, r7, #3
 8008618:	19e4      	adds	r4, r4, r7
 800861a:	4b9e      	ldr	r3, [pc, #632]	; (8008894 <SetButtonEvents+0x2b0>)
 800861c:	191b      	adds	r3, r3, r4
 800861e:	785b      	ldrb	r3, [r3, #1]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d04c      	beq.n	80086be <SetButtonEvents+0xda>
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 8008624:	00fc      	lsls	r4, r7, #3
 8008626:	19e4      	adds	r4, r4, r7
 8008628:	4b9a      	ldr	r3, [pc, #616]	; (8008894 <SetButtonEvents+0x2b0>)
 800862a:	191b      	adds	r3, r3, r4
 800862c:	709e      	strb	r6, [r3, #2]
 800862e:	4644      	mov	r4, r8
 8008630:	70dc      	strb	r4, [r3, #3]
 8008632:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 8008634:	465c      	mov	r4, fp
 8008636:	715c      	strb	r4, [r3, #5]
 8008638:	4654      	mov	r4, sl
 800863a:	719c      	strb	r4, [r3, #6]
 800863c:	464c      	mov	r4, r9
 800863e:	71dc      	strb	r4, [r3, #7]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 8008640:	2801      	cmp	r0, #1
 8008642:	d003      	beq.n	800864c <SetButtonEvents+0x68>
 8008644:	2800      	cmp	r0, #0
 8008646:	d113      	bne.n	8008670 <SetButtonEvents+0x8c>
 8008648:	2900      	cmp	r1, #0
 800864a:	d042      	beq.n	80086d2 <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800864c:	00f9      	lsls	r1, r7, #3
 800864e:	19c9      	adds	r1, r1, r7
 8008650:	4b90      	ldr	r3, [pc, #576]	; (8008894 <SetButtonEvents+0x2b0>)
 8008652:	185b      	adds	r3, r3, r1
 8008654:	7a19      	ldrb	r1, [r3, #8]
 8008656:	2401      	movs	r4, #1
 8008658:	4321      	orrs	r1, r4
 800865a:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 800865c:	2801      	cmp	r0, #1
 800865e:	d10c      	bne.n	800867a <SetButtonEvents+0x96>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008660:	00fa      	lsls	r2, r7, #3
 8008662:	19d2      	adds	r2, r2, r7
 8008664:	4b8b      	ldr	r3, [pc, #556]	; (8008894 <SetButtonEvents+0x2b0>)
 8008666:	189b      	adds	r3, r3, r2
 8008668:	7a1a      	ldrb	r2, [r3, #8]
 800866a:	2102      	movs	r1, #2
 800866c:	430a      	orrs	r2, r1
 800866e:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008670:	2801      	cmp	r0, #1
 8008672:	d042      	beq.n	80086fa <SetButtonEvents+0x116>
 8008674:	2800      	cmp	r0, #0
 8008676:	d152      	bne.n	800871e <SetButtonEvents+0x13a>
 8008678:	e03d      	b.n	80086f6 <SetButtonEvents+0x112>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 800867a:	2800      	cmp	r0, #0
 800867c:	d031      	beq.n	80086e2 <SetButtonEvents+0xfe>
 800867e:	e044      	b.n	800870a <SetButtonEvents+0x126>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008680:	2800      	cmp	r0, #0
 8008682:	d059      	beq.n	8008738 <SetButtonEvents+0x154>
 8008684:	e06d      	b.n	8008762 <SetButtonEvents+0x17e>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008686:	2800      	cmp	r0, #0
 8008688:	d100      	bne.n	800868c <SetButtonEvents+0xa8>
 800868a:	e082      	b.n	8008792 <SetButtonEvents+0x1ae>
 800868c:	e097      	b.n	80087be <SetButtonEvents+0x1da>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 800868e:	2800      	cmp	r0, #0
 8008690:	d100      	bne.n	8008694 <SetButtonEvents+0xb0>
 8008692:	e0f2      	b.n	800887a <SetButtonEvents+0x296>
 8008694:	e09f      	b.n	80087d6 <SetButtonEvents+0x1f2>
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 8008696:	0a19      	lsrs	r1, r3, #8
 8008698:	0209      	lsls	r1, r1, #8
 800869a:	4311      	orrs	r1, r2
 800869c:	ab02      	add	r3, sp, #8
 800869e:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 80086a0:	0020      	movs	r0, r4
 80086a2:	f002 f88b 	bl	800a7bc <EE_WriteVariable>
 80086a6:	e0ad      	b.n	8008804 <SetButtonEvents+0x220>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 80086a8:	0019      	movs	r1, r3
 80086aa:	9801      	ldr	r0, [sp, #4]
 80086ac:	f002 f886 	bl	800a7bc <EE_WriteVariable>
 80086b0:	e0b7      	b.n	8008822 <SetButtonEvents+0x23e>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 80086b2:	4653      	mov	r3, sl
 80086b4:	4319      	orrs	r1, r3
 80086b6:	0030      	movs	r0, r6
 80086b8:	f002 f880 	bl	800a7bc <EE_WriteVariable>
 80086bc:	e0c0      	b.n	8008840 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80086be:	200b      	movs	r0, #11
}
 80086c0:	b005      	add	sp, #20
 80086c2:	bc3c      	pop	{r2, r3, r4, r5}
 80086c4:	4690      	mov	r8, r2
 80086c6:	4699      	mov	r9, r3
 80086c8:	46a2      	mov	sl, r4
 80086ca:	46ab      	mov	fp, r5
 80086cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 80086ce:	200b      	movs	r0, #11
 80086d0:	e7f6      	b.n	80086c0 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 80086d2:	00f9      	lsls	r1, r7, #3
 80086d4:	19c9      	adds	r1, r1, r7
 80086d6:	4b6f      	ldr	r3, [pc, #444]	; (8008894 <SetButtonEvents+0x2b0>)
 80086d8:	185b      	adds	r3, r3, r1
 80086da:	7a19      	ldrb	r1, [r3, #8]
 80086dc:	2401      	movs	r4, #1
 80086de:	43a1      	bics	r1, r4
 80086e0:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 80086e2:	2a00      	cmp	r2, #0
 80086e4:	d1bc      	bne.n	8008660 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 80086e6:	00fa      	lsls	r2, r7, #3
 80086e8:	19d2      	adds	r2, r2, r7
 80086ea:	4b6a      	ldr	r3, [pc, #424]	; (8008894 <SetButtonEvents+0x2b0>)
 80086ec:	189b      	adds	r3, r3, r2
 80086ee:	7a1a      	ldrb	r2, [r3, #8]
 80086f0:	2102      	movs	r1, #2
 80086f2:	438a      	bics	r2, r1
 80086f4:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 80086f6:	2e00      	cmp	r6, #0
 80086f8:	d016      	beq.n	8008728 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80086fa:	00fa      	lsls	r2, r7, #3
 80086fc:	19d2      	adds	r2, r2, r7
 80086fe:	4b65      	ldr	r3, [pc, #404]	; (8008894 <SetButtonEvents+0x2b0>)
 8008700:	189b      	adds	r3, r3, r2
 8008702:	7a1a      	ldrb	r2, [r3, #8]
 8008704:	2104      	movs	r1, #4
 8008706:	430a      	orrs	r2, r1
 8008708:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 800870a:	2801      	cmp	r0, #1
 800870c:	d1b8      	bne.n	8008680 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800870e:	00fa      	lsls	r2, r7, #3
 8008710:	19d2      	adds	r2, r2, r7
 8008712:	4b60      	ldr	r3, [pc, #384]	; (8008894 <SetButtonEvents+0x2b0>)
 8008714:	189b      	adds	r3, r3, r2
 8008716:	7a1a      	ldrb	r2, [r3, #8]
 8008718:	2108      	movs	r1, #8
 800871a:	430a      	orrs	r2, r1
 800871c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 800871e:	2801      	cmp	r0, #1
 8008720:	d017      	beq.n	8008752 <SetButtonEvents+0x16e>
 8008722:	2800      	cmp	r0, #0
 8008724:	d128      	bne.n	8008778 <SetButtonEvents+0x194>
 8008726:	e012      	b.n	800874e <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 8008728:	00fa      	lsls	r2, r7, #3
 800872a:	19d2      	adds	r2, r2, r7
 800872c:	4b59      	ldr	r3, [pc, #356]	; (8008894 <SetButtonEvents+0x2b0>)
 800872e:	189b      	adds	r3, r3, r2
 8008730:	7a1a      	ldrb	r2, [r3, #8]
 8008732:	2104      	movs	r1, #4
 8008734:	438a      	bics	r2, r1
 8008736:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008738:	4643      	mov	r3, r8
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1e7      	bne.n	800870e <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 800873e:	00fa      	lsls	r2, r7, #3
 8008740:	19d2      	adds	r2, r2, r7
 8008742:	4b54      	ldr	r3, [pc, #336]	; (8008894 <SetButtonEvents+0x2b0>)
 8008744:	189b      	adds	r3, r3, r2
 8008746:	7a1a      	ldrb	r2, [r3, #8]
 8008748:	2108      	movs	r1, #8
 800874a:	438a      	bics	r2, r1
 800874c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 800874e:	2d00      	cmp	r5, #0
 8008750:	d017      	beq.n	8008782 <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008752:	00fa      	lsls	r2, r7, #3
 8008754:	19d2      	adds	r2, r2, r7
 8008756:	4b4f      	ldr	r3, [pc, #316]	; (8008894 <SetButtonEvents+0x2b0>)
 8008758:	189b      	adds	r3, r3, r2
 800875a:	7a1a      	ldrb	r2, [r3, #8]
 800875c:	2110      	movs	r1, #16
 800875e:	430a      	orrs	r2, r1
 8008760:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008762:	2801      	cmp	r0, #1
 8008764:	d000      	beq.n	8008768 <SetButtonEvents+0x184>
 8008766:	e78e      	b.n	8008686 <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008768:	00fa      	lsls	r2, r7, #3
 800876a:	19d2      	adds	r2, r2, r7
 800876c:	4b49      	ldr	r3, [pc, #292]	; (8008894 <SetButtonEvents+0x2b0>)
 800876e:	189b      	adds	r3, r3, r2
 8008770:	7a1a      	ldrb	r2, [r3, #8]
 8008772:	2120      	movs	r1, #32
 8008774:	430a      	orrs	r2, r1
 8008776:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008778:	2801      	cmp	r0, #1
 800877a:	d018      	beq.n	80087ae <SetButtonEvents+0x1ca>
 800877c:	2800      	cmp	r0, #0
 800877e:	d12a      	bne.n	80087d6 <SetButtonEvents+0x1f2>
 8008780:	e012      	b.n	80087a8 <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 8008782:	00fa      	lsls	r2, r7, #3
 8008784:	19d2      	adds	r2, r2, r7
 8008786:	4b43      	ldr	r3, [pc, #268]	; (8008894 <SetButtonEvents+0x2b0>)
 8008788:	189b      	adds	r3, r3, r2
 800878a:	7a1a      	ldrb	r2, [r3, #8]
 800878c:	2110      	movs	r1, #16
 800878e:	438a      	bics	r2, r1
 8008790:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008792:	465b      	mov	r3, fp
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e7      	bne.n	8008768 <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 8008798:	00fa      	lsls	r2, r7, #3
 800879a:	19d2      	adds	r2, r2, r7
 800879c:	4b3d      	ldr	r3, [pc, #244]	; (8008894 <SetButtonEvents+0x2b0>)
 800879e:	189b      	adds	r3, r3, r2
 80087a0:	7a1a      	ldrb	r2, [r3, #8]
 80087a2:	2120      	movs	r1, #32
 80087a4:	438a      	bics	r2, r1
 80087a6:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 80087a8:	4653      	mov	r3, sl
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d05d      	beq.n	800886a <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80087ae:	00fa      	lsls	r2, r7, #3
 80087b0:	19d2      	adds	r2, r2, r7
 80087b2:	4b38      	ldr	r3, [pc, #224]	; (8008894 <SetButtonEvents+0x2b0>)
 80087b4:	189b      	adds	r3, r3, r2
 80087b6:	7a1a      	ldrb	r2, [r3, #8]
 80087b8:	2140      	movs	r1, #64	; 0x40
 80087ba:	430a      	orrs	r2, r1
 80087bc:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 80087be:	2801      	cmp	r0, #1
 80087c0:	d000      	beq.n	80087c4 <SetButtonEvents+0x1e0>
 80087c2:	e764      	b.n	800868e <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 80087c4:	00fa      	lsls	r2, r7, #3
 80087c6:	19d2      	adds	r2, r2, r7
 80087c8:	4b32      	ldr	r3, [pc, #200]	; (8008894 <SetButtonEvents+0x2b0>)
 80087ca:	189b      	adds	r3, r3, r2
 80087cc:	7a19      	ldrb	r1, [r3, #8]
 80087ce:	2280      	movs	r2, #128	; 0x80
 80087d0:	4252      	negs	r2, r2
 80087d2:	430a      	orrs	r2, r1
 80087d4:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 80087d6:	003c      	movs	r4, r7
 80087d8:	343a      	adds	r4, #58	; 0x3a
 80087da:	00a4      	lsls	r4, r4, #2
 80087dc:	ab02      	add	r3, sp, #8
 80087de:	1d99      	adds	r1, r3, #6
 80087e0:	0020      	movs	r0, r4
 80087e2:	f001 ffbb 	bl	800a75c <EE_ReadVariable>
	if(!res)																														// This variable exists
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d000      	beq.n	80087ec <SetButtonEvents+0x208>
 80087ea:	e770      	b.n	80086ce <SetButtonEvents+0xea>
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 80087ec:	ab02      	add	r3, sp, #8
 80087ee:	3306      	adds	r3, #6
 80087f0:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 80087f2:	00fa      	lsls	r2, r7, #3
 80087f4:	19d2      	adds	r2, r2, r7
 80087f6:	4f27      	ldr	r7, [pc, #156]	; (8008894 <SetButtonEvents+0x2b0>)
 80087f8:	18bf      	adds	r7, r7, r2
 80087fa:	7a3a      	ldrb	r2, [r7, #8]
 80087fc:	b2d9      	uxtb	r1, r3
 80087fe:	4291      	cmp	r1, r2
 8008800:	d000      	beq.n	8008804 <SetButtonEvents+0x220>
 8008802:	e748      	b.n	8008696 <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 8008804:	1c63      	adds	r3, r4, #1
 8008806:	aa02      	add	r2, sp, #8
 8008808:	1d97      	adds	r7, r2, #6
 800880a:	0039      	movs	r1, r7
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	0018      	movs	r0, r3
 8008810:	f001 ffa4 	bl	800a75c <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 8008814:	0236      	lsls	r6, r6, #8
 8008816:	883a      	ldrh	r2, [r7, #0]
 8008818:	465b      	mov	r3, fp
 800881a:	4333      	orrs	r3, r6
 800881c:	429a      	cmp	r2, r3
 800881e:	d000      	beq.n	8008822 <SetButtonEvents+0x23e>
 8008820:	e742      	b.n	80086a8 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 8008822:	1ca6      	adds	r6, r4, #2
 8008824:	ab02      	add	r3, sp, #8
 8008826:	1d9f      	adds	r7, r3, #6
 8008828:	0039      	movs	r1, r7
 800882a:	0030      	movs	r0, r6
 800882c:	f001 ff96 	bl	800a75c <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 8008830:	4643      	mov	r3, r8
 8008832:	0219      	lsls	r1, r3, #8
 8008834:	883a      	ldrh	r2, [r7, #0]
 8008836:	4653      	mov	r3, sl
 8008838:	430b      	orrs	r3, r1
 800883a:	429a      	cmp	r2, r3
 800883c:	d000      	beq.n	8008840 <SetButtonEvents+0x25c>
 800883e:	e738      	b.n	80086b2 <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 8008840:	3403      	adds	r4, #3
 8008842:	ab02      	add	r3, sp, #8
 8008844:	1d9e      	adds	r6, r3, #6
 8008846:	0031      	movs	r1, r6
 8008848:	0020      	movs	r0, r4
 800884a:	f001 ff87 	bl	800a75c <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 800884e:	022d      	lsls	r5, r5, #8
 8008850:	8832      	ldrh	r2, [r6, #0]
 8008852:	464b      	mov	r3, r9
 8008854:	432b      	orrs	r3, r5
	return result;
 8008856:	2000      	movs	r0, #0
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008858:	429a      	cmp	r2, r3
 800885a:	d100      	bne.n	800885e <SetButtonEvents+0x27a>
 800885c:	e730      	b.n	80086c0 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 800885e:	0019      	movs	r1, r3
 8008860:	0020      	movs	r0, r4
 8008862:	f001 ffab 	bl	800a7bc <EE_WriteVariable>
	return result;
 8008866:	2000      	movs	r0, #0
 8008868:	e72a      	b.n	80086c0 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 800886a:	00fa      	lsls	r2, r7, #3
 800886c:	19d2      	adds	r2, r2, r7
 800886e:	4b09      	ldr	r3, [pc, #36]	; (8008894 <SetButtonEvents+0x2b0>)
 8008870:	189b      	adds	r3, r3, r2
 8008872:	7a1a      	ldrb	r2, [r3, #8]
 8008874:	2140      	movs	r1, #64	; 0x40
 8008876:	438a      	bics	r2, r1
 8008878:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 800887a:	464b      	mov	r3, r9
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1a1      	bne.n	80087c4 <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 8008880:	00fa      	lsls	r2, r7, #3
 8008882:	19d2      	adds	r2, r2, r7
 8008884:	4b03      	ldr	r3, [pc, #12]	; (8008894 <SetButtonEvents+0x2b0>)
 8008886:	189b      	adds	r3, r3, r2
 8008888:	7a19      	ldrb	r1, [r3, #8]
 800888a:	227f      	movs	r2, #127	; 0x7f
 800888c:	400a      	ands	r2, r1
 800888e:	721a      	strb	r2, [r3, #8]
 8008890:	e7a1      	b.n	80087d6 <SetButtonEvents+0x1f2>
 8008892:	46c0      	nop			; (mov r8, r8)
 8008894:	20000664 	.word	0x20000664

08008898 <LoadEEbuttons>:
{
 8008898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800889a:	46ce      	mov	lr, r9
 800889c:	4647      	mov	r7, r8
 800889e:	b580      	push	{r7, lr}
 80088a0:	b089      	sub	sp, #36	; 0x24
	uint16_t temp16 = 0, status1 = 0; 
 80088a2:	231e      	movs	r3, #30
 80088a4:	446b      	add	r3, sp
 80088a6:	2200      	movs	r2, #0
 80088a8:	801a      	strh	r2, [r3, #0]
 80088aa:	2501      	movs	r5, #1
 80088ac:	24ec      	movs	r4, #236	; 0xec
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 80088ae:	001e      	movs	r6, r3
 80088b0:	230f      	movs	r3, #15
 80088b2:	4698      	mov	r8, r3
 80088b4:	e004      	b.n	80088c0 <LoadEEbuttons+0x28>
 80088b6:	3404      	adds	r4, #4
 80088b8:	b2a4      	uxth	r4, r4
 80088ba:	3501      	adds	r5, #1
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 80088bc:	2d08      	cmp	r5, #8
 80088be:	d058      	beq.n	8008972 <LoadEEbuttons+0xda>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 80088c0:	0031      	movs	r1, r6
 80088c2:	0020      	movs	r0, r4
 80088c4:	f001 ff4a 	bl	800a75c <EE_ReadVariable>
		if(!status1)																												// This variable exists
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d1f4      	bne.n	80088b6 <LoadEEbuttons+0x1e>
			temp8 = (uint8_t)(temp16 >> 8);
 80088cc:	8831      	ldrh	r1, [r6, #0]
 80088ce:	0a0b      	lsrs	r3, r1, #8
			if ( ((temp8 >> 4) == i+1) && ((temp8 & 0x0F) != NONE) )					// This is same port and button type is not none
 80088d0:	091a      	lsrs	r2, r3, #4
 80088d2:	42aa      	cmp	r2, r5
 80088d4:	d1ef      	bne.n	80088b6 <LoadEEbuttons+0x1e>
 80088d6:	4640      	mov	r0, r8
 80088d8:	4003      	ands	r3, r0
 80088da:	d0ec      	beq.n	80088b6 <LoadEEbuttons+0x1e>
				button[i+1].type = temp8 & 0x0F;
 80088dc:	00d0      	lsls	r0, r2, #3
 80088de:	1882      	adds	r2, r0, r2
 80088e0:	4827      	ldr	r0, [pc, #156]	; (8008980 <LoadEEbuttons+0xe8>)
 80088e2:	4681      	mov	r9, r0
 80088e4:	4491      	add	r9, r2
 80088e6:	464a      	mov	r2, r9
 80088e8:	7053      	strb	r3, [r2, #1]
				button[i+1].events = (uint8_t)temp16;
 80088ea:	7211      	strb	r1, [r2, #8]
 80088ec:	00af      	lsls	r7, r5, #2
 80088ee:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+1, &temp16);
 80088f0:	0038      	movs	r0, r7
 80088f2:	30e9      	adds	r0, #233	; 0xe9
 80088f4:	b280      	uxth	r0, r0
 80088f6:	0031      	movs	r1, r6
 80088f8:	f001 ff30 	bl	800a75c <EE_ReadVariable>
				button[i+1].pressedX1Sec = (uint8_t)(temp16 >> 8);
 80088fc:	8833      	ldrh	r3, [r6, #0]
 80088fe:	0a1a      	lsrs	r2, r3, #8
 8008900:	4649      	mov	r1, r9
 8008902:	708a      	strb	r2, [r1, #2]
				button[i+1].releasedY1Sec = (uint8_t)temp16;
 8008904:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+2, &temp16);
 8008906:	0038      	movs	r0, r7
 8008908:	30ea      	adds	r0, #234	; 0xea
 800890a:	b280      	uxth	r0, r0
 800890c:	0031      	movs	r1, r6
 800890e:	f001 ff25 	bl	800a75c <EE_ReadVariable>
				button[i+1].pressedX2Sec = (uint8_t)(temp16 >> 8);
 8008912:	8833      	ldrh	r3, [r6, #0]
 8008914:	0a1a      	lsrs	r2, r3, #8
 8008916:	4649      	mov	r1, r9
 8008918:	70ca      	strb	r2, [r1, #3]
				button[i+1].releasedY2Sec = (uint8_t)temp16;
 800891a:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
 800891c:	37eb      	adds	r7, #235	; 0xeb
 800891e:	b2b8      	uxth	r0, r7
 8008920:	0031      	movs	r1, r6
 8008922:	f001 ff1b 	bl	800a75c <EE_ReadVariable>
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
 8008926:	8833      	ldrh	r3, [r6, #0]
 8008928:	0a1a      	lsrs	r2, r3, #8
 800892a:	4649      	mov	r1, r9
 800892c:	710a      	strb	r2, [r1, #4]
				button[i+1].releasedY3Sec = (uint8_t)temp16;
 800892e:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i+1].type, i+1);
 8008930:	b2ef      	uxtb	r7, r5
 8008932:	7848      	ldrb	r0, [r1, #1]
 8008934:	0039      	movs	r1, r7
 8008936:	f7ff fcad 	bl	8008294 <AddPortButton>
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 800893a:	464b      	mov	r3, r9
 800893c:	7a19      	ldrb	r1, [r3, #8]
 800893e:	789b      	ldrb	r3, [r3, #2]
 8008940:	104a      	asrs	r2, r1, #1
 8008942:	2001      	movs	r0, #1
 8008944:	4002      	ands	r2, r0
 8008946:	4001      	ands	r1, r0
 8008948:	2000      	movs	r0, #0
 800894a:	9005      	str	r0, [sp, #20]
 800894c:	4648      	mov	r0, r9
 800894e:	79c0      	ldrb	r0, [r0, #7]
 8008950:	9004      	str	r0, [sp, #16]
 8008952:	4648      	mov	r0, r9
 8008954:	7980      	ldrb	r0, [r0, #6]
 8008956:	9003      	str	r0, [sp, #12]
 8008958:	4648      	mov	r0, r9
 800895a:	7940      	ldrb	r0, [r0, #5]
 800895c:	9002      	str	r0, [sp, #8]
 800895e:	4648      	mov	r0, r9
 8008960:	7900      	ldrb	r0, [r0, #4]
 8008962:	9001      	str	r0, [sp, #4]
 8008964:	4648      	mov	r0, r9
 8008966:	78c0      	ldrb	r0, [r0, #3]
 8008968:	9000      	str	r0, [sp, #0]
 800896a:	0038      	movs	r0, r7
 800896c:	f7ff fe3a 	bl	80085e4 <SetButtonEvents>
 8008970:	e7a1      	b.n	80088b6 <LoadEEbuttons+0x1e>
}
 8008972:	2000      	movs	r0, #0
 8008974:	b009      	add	sp, #36	; 0x24
 8008976:	bc0c      	pop	{r2, r3}
 8008978:	4690      	mov	r8, r2
 800897a:	4699      	mov	r9, r3
 800897c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800897e:	46c0      	nop			; (mov r8, r8)
 8008980:	20000664 	.word	0x20000664

08008984 <LoadEEvars>:
{
 8008984:	b510      	push	{r4, lr}
	LoadROtopology();
 8008986:	f7fb f8cb 	bl	8003b20 <LoadROtopology>
	LoadEEportsDir();
 800898a:	f7fb f967 	bl	8003c5c <LoadEEportsDir>
	LoadEEalias();
 800898e:	f7fb f9cb 	bl	8003d28 <LoadEEalias>
	LoadEEgroup();
 8008992:	f7fb fa0b 	bl	8003dac <LoadEEgroup>
	LoadEEstreams();
 8008996:	f7fb ff1b 	bl	80047d0 <LoadEEstreams>
	LoadEEparams();	
 800899a:	f7fb faa1 	bl	8003ee0 <LoadEEparams>
	LoadEEbuttons();	
 800899e:	f7ff ff7b 	bl	8008898 <LoadEEbuttons>
	LoadROsnippets();
 80089a2:	f7fb f837 	bl	8003a14 <LoadROsnippets>
}
 80089a6:	bd10      	pop	{r4, pc}

080089a8 <BOS_CalendarConfig>:
{
 80089a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089aa:	46c6      	mov	lr, r8
 80089ac:	b500      	push	{lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	ac0c      	add	r4, sp, #48	; 0x30
 80089b2:	7827      	ldrb	r7, [r4, #0]
 80089b4:	ac0d      	add	r4, sp, #52	; 0x34
 80089b6:	7824      	ldrb	r4, [r4, #0]
 80089b8:	46a0      	mov	r8, r4
 80089ba:	ac0e      	add	r4, sp, #56	; 0x38
 80089bc:	7825      	ldrb	r5, [r4, #0]
 80089be:	ac0f      	add	r4, sp, #60	; 0x3c
 80089c0:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 80089c2:	ac05      	add	r4, sp, #20
 80089c4:	3230      	adds	r2, #48	; 0x30
 80089c6:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 80089c8:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 80089ca:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 80089cc:	7023      	strb	r3, [r4, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 80089ce:	2200      	movs	r2, #0
 80089d0:	0021      	movs	r1, r4
 80089d2:	481f      	ldr	r0, [pc, #124]	; (8008a50 <BOS_CalendarConfig+0xa8>)
 80089d4:	f008 f812 	bl	80109fc <HAL_RTC_SetDate>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d136      	bne.n	8008a4a <BOS_CalendarConfig+0xa2>
  stimestructure.Hours = hours;
 80089dc:	466b      	mov	r3, sp
 80089de:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 80089e0:	4642      	mov	r2, r8
 80089e2:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 80089e4:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 80089e6:	2300      	movs	r3, #0
 80089e8:	9304      	str	r3, [sp, #16]
	if (AMPM == RTC_AM) {
 80089ea:	2e01      	cmp	r6, #1
 80089ec:	d020      	beq.n	8008a30 <BOS_CalendarConfig+0x88>
	} else if (AMPM == RTC_PM) {
 80089ee:	2e02      	cmp	r6, #2
 80089f0:	d024      	beq.n	8008a3c <BOS_CalendarConfig+0x94>
		BOS.hourformat = 24;
 80089f2:	4b18      	ldr	r3, [pc, #96]	; (8008a54 <BOS_CalendarConfig+0xac>)
 80089f4:	2218      	movs	r2, #24
 80089f6:	735a      	strb	r2, [r3, #13]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 80089f8:	2200      	movs	r2, #0
 80089fa:	4669      	mov	r1, sp
 80089fc:	4814      	ldr	r0, [pc, #80]	; (8008a50 <BOS_CalendarConfig+0xa8>)
 80089fe:	f007 ff77 	bl	80108f0 <HAL_RTC_SetTime>
		return BOS_ERROR;
 8008a02:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d10e      	bne.n	8008a26 <BOS_CalendarConfig+0x7e>
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8008a08:	4a12      	ldr	r2, [pc, #72]	; (8008a54 <BOS_CalendarConfig+0xac>)
 8008a0a:	7b53      	ldrb	r3, [r2, #13]
 8008a0c:	021b      	lsls	r3, r3, #8
 8008a0e:	7911      	ldrb	r1, [r2, #4]
 8008a10:	4319      	orrs	r1, r3
 8008a12:	308d      	adds	r0, #141	; 0x8d
 8008a14:	0040      	lsls	r0, r0, #1
 8008a16:	f001 fed1 	bl	800a7bc <EE_WriteVariable>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 8008a1a:	4a0f      	ldr	r2, [pc, #60]	; (8008a58 <BOS_CalendarConfig+0xb0>)
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	480c      	ldr	r0, [pc, #48]	; (8008a50 <BOS_CalendarConfig+0xa8>)
 8008a20:	f008 f8b0 	bl	8010b84 <HAL_RTCEx_BKUPWrite>
	return BOS_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	0018      	movs	r0, r3
 8008a28:	b006      	add	sp, #24
 8008a2a:	bc04      	pop	{r2}
 8008a2c:	4690      	mov	r8, r2
 8008a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 8008a30:	466a      	mov	r2, sp
 8008a32:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 8008a34:	4b07      	ldr	r3, [pc, #28]	; (8008a54 <BOS_CalendarConfig+0xac>)
 8008a36:	220c      	movs	r2, #12
 8008a38:	735a      	strb	r2, [r3, #13]
 8008a3a:	e7dd      	b.n	80089f8 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 8008a3c:	2340      	movs	r3, #64	; 0x40
 8008a3e:	466a      	mov	r2, sp
 8008a40:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 8008a42:	4b04      	ldr	r3, [pc, #16]	; (8008a54 <BOS_CalendarConfig+0xac>)
 8008a44:	220c      	movs	r2, #12
 8008a46:	735a      	strb	r2, [r3, #13]
 8008a48:	e7d6      	b.n	80089f8 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 8008a4a:	23ff      	movs	r3, #255	; 0xff
 8008a4c:	e7eb      	b.n	8008a26 <BOS_CalendarConfig+0x7e>
 8008a4e:	46c0      	nop			; (mov r8, r8)
 8008a50:	200061b8 	.word	0x200061b8
 8008a54:	20006160 	.word	0x20006160
 8008a58:	000032f2 	.word	0x000032f2

08008a5c <GetTimeDate>:
{
 8008a5c:	b530      	push	{r4, r5, lr}
 8008a5e:	b089      	sub	sp, #36	; 0x24
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 8008a60:	4d16      	ldr	r5, [pc, #88]	; (8008abc <GetTimeDate+0x60>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	a902      	add	r1, sp, #8
 8008a66:	0028      	movs	r0, r5
 8008a68:	f008 f844 	bl	8010af4 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 8008a6c:	ac07      	add	r4, sp, #28
 8008a6e:	2200      	movs	r2, #0
 8008a70:	0021      	movs	r1, r4
 8008a72:	0028      	movs	r0, r5
 8008a74:	f008 f864 	bl	8010b40 <HAL_RTC_GetDate>
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 8008a78:	4b11      	ldr	r3, [pc, #68]	; (8008ac0 <GetTimeDate+0x64>)
 8008a7a:	aa02      	add	r2, sp, #8
 8008a7c:	7a12      	ldrb	r2, [r2, #8]
 8008a7e:	09d2      	lsrs	r2, r2, #7
 8008a80:	3201      	adds	r2, #1
 8008a82:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 8008a84:	9a03      	ldr	r2, [sp, #12]
 8008a86:	9201      	str	r2, [sp, #4]
 8008a88:	0852      	lsrs	r2, r2, #1
 8008a8a:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 8008a8c:	aa02      	add	r2, sp, #8
 8008a8e:	7892      	ldrb	r2, [r2, #2]
 8008a90:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 8008a92:	aa02      	add	r2, sp, #8
 8008a94:	7852      	ldrb	r2, [r2, #1]
 8008a96:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 8008a98:	aa02      	add	r2, sp, #8
 8008a9a:	7812      	ldrb	r2, [r2, #0]
 8008a9c:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 8008a9e:	78a2      	ldrb	r2, [r4, #2]
 8008aa0:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 8008aa2:	7862      	ldrb	r2, [r4, #1]
 8008aa4:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 8008aa6:	7822      	ldrb	r2, [r4, #0]
 8008aa8:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 8008aaa:	78e2      	ldrb	r2, [r4, #3]
 8008aac:	21fa      	movs	r1, #250	; 0xfa
 8008aae:	00c9      	lsls	r1, r1, #3
 8008ab0:	468c      	mov	ip, r1
 8008ab2:	4462      	add	r2, ip
 8008ab4:	831a      	strh	r2, [r3, #24]
}
 8008ab6:	b009      	add	sp, #36	; 0x24
 8008ab8:	bd30      	pop	{r4, r5, pc}
 8008aba:	46c0      	nop			; (mov r8, r8)
 8008abc:	200061b8 	.word	0x200061b8
 8008ac0:	20006160 	.word	0x20006160

08008ac4 <BOS_Init>:
{
 8008ac4:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8008ac6:	f7fb fbfd 	bl	80042c4 <RTC_Init>
	GetTimeDate();
 8008aca:	f7ff ffc7 	bl	8008a5c <GetTimeDate>
	EE_Init();
 8008ace:	f001 ff81 	bl	800a9d4 <EE_Init>
  GPIO_Init();
 8008ad2:	f005 f865 	bl	800dba0 <GPIO_Init>
	DMA_Init();
 8008ad6:	f004 f805 	bl	800cae4 <DMA_Init>
	TIM_USEC_Init();
 8008ada:	f7fa fcc7 	bl	800346c <TIM_USEC_Init>
	CRC_Init();
 8008ade:	f005 f82b 	bl	800db38 <CRC_Init>
	TIM_MSEC_Init();
 8008ae2:	f7fa fcf5 	bl	80034d0 <TIM_MSEC_Init>
	if (IsFactoryReset())
 8008ae6:	f7fc fd8b 	bl	8005600 <IsFactoryReset>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d11a      	bne.n	8008b24 <BOS_Init+0x60>
	if (IsLowerCLIbaud())
 8008aee:	f7fc fe01 	bl	80056f4 <IsLowerCLIbaud>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d01a      	beq.n	8008b2c <BOS_Init+0x68>
		CLI_LOW_Baudrate_Flag = 1;
 8008af6:	4b3a      	ldr	r3, [pc, #232]	; (8008be0 <BOS_Init+0x11c>)
 8008af8:	2201      	movs	r2, #1
 8008afa:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8008afc:	2032      	movs	r0, #50	; 0x32
 8008afe:	f7fc fd6d 	bl	80055dc <StartMilliDelay>
		Module_Init();	
 8008b02:	f002 feff 	bl	800b904 <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8008b06:	4b37      	ldr	r3, [pc, #220]	; (8008be4 <BOS_Init+0x120>)
 8008b08:	22e1      	movs	r2, #225	; 0xe1
 8008b0a:	0252      	lsls	r2, r2, #9
 8008b0c:	609a      	str	r2, [r3, #8]
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8008b0e:	2401      	movs	r4, #1
			UpdateBaudrate(port, BOS.clibaudrate);
 8008b10:	001d      	movs	r5, r3
 8008b12:	68a9      	ldr	r1, [r5, #8]
 8008b14:	0020      	movs	r0, r4
 8008b16:	f005 fbb3 	bl	800e280 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8008b1a:	3401      	adds	r4, #1
 8008b1c:	b2e4      	uxtb	r4, r4
 8008b1e:	2c07      	cmp	r4, #7
 8008b20:	d1f7      	bne.n	8008b12 <BOS_Init+0x4e>
 8008b22:	e008      	b.n	8008b36 <BOS_Init+0x72>
		EE_FormatForFactoryReset();
 8008b24:	f7fb fabc 	bl	80040a0 <EE_FormatForFactoryReset>
		NVIC_SystemReset();
 8008b28:	f7fa f8fa 	bl	8002d20 <NVIC_SystemReset>
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8008b2c:	2032      	movs	r0, #50	; 0x32
 8008b2e:	f7fc fd55 	bl	80055dc <StartMilliDelay>
		Module_Init();				
 8008b32:	f002 fee7 	bl	800b904 <Module_Init>
	LoadEEvars();
 8008b36:	f7ff ff25 	bl	8008984 <LoadEEvars>
	UpdateMyPortsDir();
 8008b3a:	f7fd fdb7 	bl	80066ac <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8008b3e:	f004 fc39 	bl	800d3b4 <SetupMessagingRxDMAs>
	if (myID == 0)		/* Native module */
 8008b42:	4b29      	ldr	r3, [pc, #164]	; (8008be8 <BOS_Init+0x124>)
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d037      	beq.n	8008bba <BOS_Init+0xf6>
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8008b4a:	2580      	movs	r5, #128	; 0x80
 8008b4c:	012d      	lsls	r5, r5, #4
 8008b4e:	2490      	movs	r4, #144	; 0x90
 8008b50:	05e4      	lsls	r4, r4, #23
 8008b52:	2201      	movs	r2, #1
 8008b54:	0029      	movs	r1, r5
 8008b56:	0020      	movs	r0, r4
 8008b58:	f007 f90e 	bl	800fd78 <HAL_GPIO_WritePin>
 8008b5c:	20fa      	movs	r0, #250	; 0xfa
 8008b5e:	0040      	lsls	r0, r0, #1
 8008b60:	f7fc fd3c 	bl	80055dc <StartMilliDelay>
 8008b64:	2200      	movs	r2, #0
 8008b66:	0029      	movs	r1, r5
 8008b68:	0020      	movs	r0, r4
 8008b6a:	f007 f905 	bl	800fd78 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8008b6e:	2064      	movs	r0, #100	; 0x64
 8008b70:	f7fc fd34 	bl	80055dc <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8008b74:	2201      	movs	r2, #1
 8008b76:	0029      	movs	r1, r5
 8008b78:	0020      	movs	r0, r4
 8008b7a:	f007 f8fd 	bl	800fd78 <HAL_GPIO_WritePin>
 8008b7e:	2064      	movs	r0, #100	; 0x64
 8008b80:	f7fc fd2c 	bl	80055dc <StartMilliDelay>
 8008b84:	2200      	movs	r2, #0
 8008b86:	0029      	movs	r1, r5
 8008b88:	0020      	movs	r0, r4
 8008b8a:	f007 f8f5 	bl	800fd78 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8008b8e:	2064      	movs	r0, #100	; 0x64
 8008b90:	f7fc fd24 	bl	80055dc <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8008b94:	2201      	movs	r2, #1
 8008b96:	0029      	movs	r1, r5
 8008b98:	0020      	movs	r0, r4
 8008b9a:	f007 f8ed 	bl	800fd78 <HAL_GPIO_WritePin>
 8008b9e:	2064      	movs	r0, #100	; 0x64
 8008ba0:	f7fc fd1c 	bl	80055dc <StartMilliDelay>
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	0029      	movs	r1, r5
 8008ba8:	0020      	movs	r0, r4
 8008baa:	f007 f8e5 	bl	800fd78 <HAL_GPIO_WritePin>
	ResetUartORE();
 8008bae:	f001 fd49 	bl	800a644 <ResetUartORE>
	BOS_initialized = 1;
 8008bb2:	4b0e      	ldr	r3, [pc, #56]	; (8008bec <BOS_Init+0x128>)
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	701a      	strb	r2, [r3, #0]
}
 8008bb8:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8008bba:	2580      	movs	r5, #128	; 0x80
 8008bbc:	012d      	lsls	r5, r5, #4
 8008bbe:	2490      	movs	r4, #144	; 0x90
 8008bc0:	05e4      	lsls	r4, r4, #23
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	0029      	movs	r1, r5
 8008bc6:	0020      	movs	r0, r4
 8008bc8:	f007 f8d6 	bl	800fd78 <HAL_GPIO_WritePin>
 8008bcc:	20fa      	movs	r0, #250	; 0xfa
 8008bce:	0040      	lsls	r0, r0, #1
 8008bd0:	f7fc fd04 	bl	80055dc <StartMilliDelay>
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	0029      	movs	r1, r5
 8008bd8:	0020      	movs	r0, r4
 8008bda:	f007 f8cd 	bl	800fd78 <HAL_GPIO_WritePin>
 8008bde:	e7e6      	b.n	8008bae <BOS_Init+0xea>
 8008be0:	200003b6 	.word	0x200003b6
 8008be4:	20006160 	.word	0x20006160
 8008be8:	20000b90 	.word	0x20000b90
 8008bec:	200003b5 	.word	0x200003b5

08008bf0 <timeCommand>:
{
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8008bf6:	d101      	bne.n	8008bfc <timeCommand+0xc>
 8008bf8:	b672      	cpsid	i
 8008bfa:	e7fe      	b.n	8008bfa <timeCommand+0xa>
	GetTimeDate();
 8008bfc:	f7ff ff2e 	bl	8008a5c <GetTimeDate>
	if (BOS.hourformat == 24)
 8008c00:	4b1b      	ldr	r3, [pc, #108]	; (8008c70 <timeCommand+0x80>)
 8008c02:	7b5b      	ldrb	r3, [r3, #13]
 8008c04:	2b18      	cmp	r3, #24
 8008c06:	d004      	beq.n	8008c12 <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 8008c08:	2b0c      	cmp	r3, #12
 8008c0a:	d00e      	beq.n	8008c2a <timeCommand+0x3a>
}
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	b004      	add	sp, #16
 8008c10:	bd10      	pop	{r4, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 8008c12:	4917      	ldr	r1, [pc, #92]	; (8008c70 <timeCommand+0x80>)
 8008c14:	7c4b      	ldrb	r3, [r1, #17]
 8008c16:	7c8a      	ldrb	r2, [r1, #18]
 8008c18:	89c8      	ldrh	r0, [r1, #14]
 8008c1a:	9001      	str	r0, [sp, #4]
 8008c1c:	7c09      	ldrb	r1, [r1, #16]
 8008c1e:	9100      	str	r1, [sp, #0]
 8008c20:	4914      	ldr	r1, [pc, #80]	; (8008c74 <timeCommand+0x84>)
 8008c22:	0020      	movs	r0, r4
 8008c24:	f009 fb3e 	bl	80122a4 <siprintf>
 8008c28:	e7f0      	b.n	8008c0c <timeCommand+0x1c>
		if (BOS.time.ampm == RTC_AM)
 8008c2a:	4b11      	ldr	r3, [pc, #68]	; (8008c70 <timeCommand+0x80>)
 8008c2c:	7cdb      	ldrb	r3, [r3, #19]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d10d      	bne.n	8008c4e <timeCommand+0x5e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 8008c32:	490f      	ldr	r1, [pc, #60]	; (8008c70 <timeCommand+0x80>)
 8008c34:	7c4b      	ldrb	r3, [r1, #17]
 8008c36:	7c8a      	ldrb	r2, [r1, #18]
 8008c38:	480f      	ldr	r0, [pc, #60]	; (8008c78 <timeCommand+0x88>)
 8008c3a:	9002      	str	r0, [sp, #8]
 8008c3c:	89c8      	ldrh	r0, [r1, #14]
 8008c3e:	9001      	str	r0, [sp, #4]
 8008c40:	7c09      	ldrb	r1, [r1, #16]
 8008c42:	9100      	str	r1, [sp, #0]
 8008c44:	490d      	ldr	r1, [pc, #52]	; (8008c7c <timeCommand+0x8c>)
 8008c46:	0020      	movs	r0, r4
 8008c48:	f009 fb2c 	bl	80122a4 <siprintf>
 8008c4c:	e7de      	b.n	8008c0c <timeCommand+0x1c>
		else if (BOS.time.ampm == RTC_PM)
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d1dc      	bne.n	8008c0c <timeCommand+0x1c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 8008c52:	4907      	ldr	r1, [pc, #28]	; (8008c70 <timeCommand+0x80>)
 8008c54:	7c4b      	ldrb	r3, [r1, #17]
 8008c56:	7c8a      	ldrb	r2, [r1, #18]
 8008c58:	4809      	ldr	r0, [pc, #36]	; (8008c80 <timeCommand+0x90>)
 8008c5a:	9002      	str	r0, [sp, #8]
 8008c5c:	89c8      	ldrh	r0, [r1, #14]
 8008c5e:	9001      	str	r0, [sp, #4]
 8008c60:	7c09      	ldrb	r1, [r1, #16]
 8008c62:	9100      	str	r1, [sp, #0]
 8008c64:	4905      	ldr	r1, [pc, #20]	; (8008c7c <timeCommand+0x8c>)
 8008c66:	0020      	movs	r0, r4
 8008c68:	f009 fb1c 	bl	80122a4 <siprintf>
 8008c6c:	e7ce      	b.n	8008c0c <timeCommand+0x1c>
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	20006160 	.word	0x20006160
 8008c74:	080186f4 	.word	0x080186f4
 8008c78:	08018748 	.word	0x08018748
 8008c7c:	0801871c 	.word	0x0801871c
 8008c80:	0801874c 	.word	0x0801874c

08008c84 <setCommand>:
{
 8008c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c86:	46ce      	mov	lr, r9
 8008c88:	4647      	mov	r7, r8
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b08d      	sub	sp, #52	; 0x34
 8008c8e:	0005      	movs	r5, r0
 8008c90:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c96:	930a      	str	r3, [sp, #40]	; 0x28
 8008c98:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 8008c9a:	9308      	str	r3, [sp, #32]
 8008c9c:	9307      	str	r3, [sp, #28]
	configASSERT( pcWriteBuffer );
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d101      	bne.n	8008ca6 <setCommand+0x22>
 8008ca2:	b672      	cpsid	i
 8008ca4:	e7fe      	b.n	8008ca4 <setCommand+0x20>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8008ca6:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ca8:	2101      	movs	r1, #1
 8008caa:	0020      	movs	r0, r4
 8008cac:	f005 fc6a 	bl	800e584 <FreeRTOS_CLIGetParameter>
 8008cb0:	0006      	movs	r6, r0
 8008cb2:	4bb3      	ldr	r3, [pc, #716]	; (8008f80 <setCommand+0x2fc>)
 8008cb4:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 8008cb6:	2204      	movs	r2, #4
 8008cb8:	49b2      	ldr	r1, [pc, #712]	; (8008f84 <setCommand+0x300>)
 8008cba:	f009 fb37 	bl	801232c <strncmp>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d015      	beq.n	8008cee <setCommand+0x6a>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 8008cc2:	2204      	movs	r2, #4
 8008cc4:	49b0      	ldr	r1, [pc, #704]	; (8008f88 <setCommand+0x304>)
 8008cc6:	0030      	movs	r0, r6
 8008cc8:	f009 fb30 	bl	801232c <strncmp>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d100      	bne.n	8008cd2 <setCommand+0x4e>
 8008cd0:	e180      	b.n	8008fd4 <setCommand+0x350>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 8008cd2:	2204      	movs	r2, #4
 8008cd4:	49ad      	ldr	r1, [pc, #692]	; (8008f8c <setCommand+0x308>)
 8008cd6:	0030      	movs	r0, r6
 8008cd8:	f009 fb28 	bl	801232c <strncmp>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d100      	bne.n	8008ce2 <setCommand+0x5e>
 8008ce0:	e1e6      	b.n	80090b0 <setCommand+0x42c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8008ce2:	2213      	movs	r2, #19
 8008ce4:	49aa      	ldr	r1, [pc, #680]	; (8008f90 <setCommand+0x30c>)
 8008ce6:	0028      	movs	r0, r5
 8008ce8:	f009 f9d5 	bl	8012096 <memcpy>
 8008cec:	e1d7      	b.n	800909e <setCommand+0x41a>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8008cee:	aa0a      	add	r2, sp, #40	; 0x28
 8008cf0:	2102      	movs	r1, #2
 8008cf2:	0020      	movs	r0, r4
 8008cf4:	f005 fc46 	bl	800e584 <FreeRTOS_CLIGetParameter>
 8008cf8:	0004      	movs	r4, r0
 8008cfa:	4ba6      	ldr	r3, [pc, #664]	; (8008f94 <setCommand+0x310>)
 8008cfc:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8008cfe:	4ba0      	ldr	r3, [pc, #640]	; (8008f80 <setCommand+0x2fc>)
 8008d00:	681e      	ldr	r6, [r3, #0]
 8008d02:	3604      	adds	r6, #4
 8008d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d06:	1f1f      	subs	r7, r3, #4
 8008d08:	003a      	movs	r2, r7
 8008d0a:	49a3      	ldr	r1, [pc, #652]	; (8008f98 <setCommand+0x314>)
 8008d0c:	0030      	movs	r0, r6
 8008d0e:	f009 fb0d 	bl	801232c <strncmp>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d153      	bne.n	8008dbe <setCommand+0x13a>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8008d16:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008d18:	0032      	movs	r2, r6
 8008d1a:	49a0      	ldr	r1, [pc, #640]	; (8008f9c <setCommand+0x318>)
 8008d1c:	0020      	movs	r0, r4
 8008d1e:	f009 fb05 	bl	801232c <strncmp>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d115      	bne.n	8008d52 <setCommand+0xce>
				BOS.response = BOS_RESPONSE_ALL;
 8008d26:	4b9e      	ldr	r3, [pc, #632]	; (8008fa0 <setCommand+0x31c>)
 8008d28:	2160      	movs	r1, #96	; 0x60
 8008d2a:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8008d2c:	79db      	ldrb	r3, [r3, #7]
 8008d2e:	021b      	lsls	r3, r3, #8
 8008d30:	4319      	orrs	r1, r3
 8008d32:	308a      	adds	r0, #138	; 0x8a
 8008d34:	0040      	lsls	r0, r0, #1
 8008d36:	f001 fd41 	bl	800a7bc <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8008d3a:	4b91      	ldr	r3, [pc, #580]	; (8008f80 <setCommand+0x2fc>)
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	2300      	movs	r3, #0
 8008d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d42:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 8008d44:	4b93      	ldr	r3, [pc, #588]	; (8008f94 <setCommand+0x310>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4996      	ldr	r1, [pc, #600]	; (8008fa4 <setCommand+0x320>)
 8008d4a:	0028      	movs	r0, r5
 8008d4c:	f009 faaa 	bl	80122a4 <siprintf>
	return pdFALSE;
 8008d50:	e1a5      	b.n	800909e <setCommand+0x41a>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8008d52:	0032      	movs	r2, r6
 8008d54:	4994      	ldr	r1, [pc, #592]	; (8008fa8 <setCommand+0x324>)
 8008d56:	0020      	movs	r0, r4
 8008d58:	f009 fae8 	bl	801232c <strncmp>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d10a      	bne.n	8008d76 <setCommand+0xf2>
				BOS.response = BOS_RESPONSE_MSG;
 8008d60:	4b8f      	ldr	r3, [pc, #572]	; (8008fa0 <setCommand+0x31c>)
 8008d62:	2120      	movs	r1, #32
 8008d64:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8008d66:	79db      	ldrb	r3, [r3, #7]
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	4319      	orrs	r1, r3
 8008d6c:	308a      	adds	r0, #138	; 0x8a
 8008d6e:	0040      	lsls	r0, r0, #1
 8008d70:	f001 fd24 	bl	800a7bc <EE_WriteVariable>
 8008d74:	e7e1      	b.n	8008d3a <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 8008d76:	0032      	movs	r2, r6
 8008d78:	498c      	ldr	r1, [pc, #560]	; (8008fac <setCommand+0x328>)
 8008d7a:	0020      	movs	r0, r4
 8008d7c:	f009 fad6 	bl	801232c <strncmp>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d10a      	bne.n	8008d9a <setCommand+0x116>
				BOS.response = BOS_RESPONSE_CLI;
 8008d84:	4b86      	ldr	r3, [pc, #536]	; (8008fa0 <setCommand+0x31c>)
 8008d86:	2140      	movs	r1, #64	; 0x40
 8008d88:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8008d8a:	79db      	ldrb	r3, [r3, #7]
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	4319      	orrs	r1, r3
 8008d90:	308a      	adds	r0, #138	; 0x8a
 8008d92:	0040      	lsls	r0, r0, #1
 8008d94:	f001 fd12 	bl	800a7bc <EE_WriteVariable>
 8008d98:	e7cf      	b.n	8008d3a <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8008d9a:	0032      	movs	r2, r6
 8008d9c:	4984      	ldr	r1, [pc, #528]	; (8008fb0 <setCommand+0x32c>)
 8008d9e:	0020      	movs	r0, r4
 8008da0:	f009 fac4 	bl	801232c <strncmp>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d000      	beq.n	8008daa <setCommand+0x126>
 8008da8:	e2a7      	b.n	80092fa <setCommand+0x676>
				BOS.response = BOS_RESPONSE_NONE;
 8008daa:	4b7d      	ldr	r3, [pc, #500]	; (8008fa0 <setCommand+0x31c>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8008db0:	79d9      	ldrb	r1, [r3, #7]
 8008db2:	0209      	lsls	r1, r1, #8
 8008db4:	308a      	adds	r0, #138	; 0x8a
 8008db6:	0040      	lsls	r0, r0, #1
 8008db8:	f001 fd00 	bl	800a7bc <EE_WriteVariable>
 8008dbc:	e7bd      	b.n	8008d3a <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 8008dbe:	003a      	movs	r2, r7
 8008dc0:	497c      	ldr	r1, [pc, #496]	; (8008fb4 <setCommand+0x330>)
 8008dc2:	0030      	movs	r0, r6
 8008dc4:	f009 fab2 	bl	801232c <strncmp>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d14a      	bne.n	8008e62 <setCommand+0x1de>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8008dcc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008dce:	0032      	movs	r2, r6
 8008dd0:	4972      	ldr	r1, [pc, #456]	; (8008f9c <setCommand+0x318>)
 8008dd2:	0020      	movs	r0, r4
 8008dd4:	f009 faaa 	bl	801232c <strncmp>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d10b      	bne.n	8008df4 <setCommand+0x170>
				BOS.trace = TRACE_BOTH;
 8008ddc:	4b70      	ldr	r3, [pc, #448]	; (8008fa0 <setCommand+0x31c>)
 8008dde:	2203      	movs	r2, #3
 8008de0:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8008de2:	799b      	ldrb	r3, [r3, #6]
 8008de4:	21c0      	movs	r1, #192	; 0xc0
 8008de6:	0089      	lsls	r1, r1, #2
 8008de8:	4319      	orrs	r1, r3
 8008dea:	308a      	adds	r0, #138	; 0x8a
 8008dec:	0040      	lsls	r0, r0, #1
 8008dee:	f001 fce5 	bl	800a7bc <EE_WriteVariable>
 8008df2:	e7a2      	b.n	8008d3a <setCommand+0xb6>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8008df4:	0032      	movs	r2, r6
 8008df6:	496c      	ldr	r1, [pc, #432]	; (8008fa8 <setCommand+0x324>)
 8008df8:	0020      	movs	r0, r4
 8008dfa:	f009 fa97 	bl	801232c <strncmp>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d10b      	bne.n	8008e1a <setCommand+0x196>
				BOS.trace = TRACE_MESSAGE;
 8008e02:	4b67      	ldr	r3, [pc, #412]	; (8008fa0 <setCommand+0x31c>)
 8008e04:	2201      	movs	r2, #1
 8008e06:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8008e08:	799b      	ldrb	r3, [r3, #6]
 8008e0a:	2180      	movs	r1, #128	; 0x80
 8008e0c:	0049      	lsls	r1, r1, #1
 8008e0e:	4319      	orrs	r1, r3
 8008e10:	308a      	adds	r0, #138	; 0x8a
 8008e12:	4090      	lsls	r0, r2
 8008e14:	f001 fcd2 	bl	800a7bc <EE_WriteVariable>
 8008e18:	e78f      	b.n	8008d3a <setCommand+0xb6>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 8008e1a:	0032      	movs	r2, r6
 8008e1c:	495e      	ldr	r1, [pc, #376]	; (8008f98 <setCommand+0x314>)
 8008e1e:	0020      	movs	r0, r4
 8008e20:	f009 fa84 	bl	801232c <strncmp>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d10b      	bne.n	8008e40 <setCommand+0x1bc>
				BOS.trace = TRACE_RESPONSE;
 8008e28:	4b5d      	ldr	r3, [pc, #372]	; (8008fa0 <setCommand+0x31c>)
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8008e2e:	799b      	ldrb	r3, [r3, #6]
 8008e30:	2180      	movs	r1, #128	; 0x80
 8008e32:	0089      	lsls	r1, r1, #2
 8008e34:	4319      	orrs	r1, r3
 8008e36:	308a      	adds	r0, #138	; 0x8a
 8008e38:	0040      	lsls	r0, r0, #1
 8008e3a:	f001 fcbf 	bl	800a7bc <EE_WriteVariable>
 8008e3e:	e77c      	b.n	8008d3a <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8008e40:	0032      	movs	r2, r6
 8008e42:	495b      	ldr	r1, [pc, #364]	; (8008fb0 <setCommand+0x32c>)
 8008e44:	0020      	movs	r0, r4
 8008e46:	f009 fa71 	bl	801232c <strncmp>
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d000      	beq.n	8008e50 <setCommand+0x1cc>
 8008e4e:	e254      	b.n	80092fa <setCommand+0x676>
				BOS.trace = TRACE_NONE;
 8008e50:	4b53      	ldr	r3, [pc, #332]	; (8008fa0 <setCommand+0x31c>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8008e56:	7999      	ldrb	r1, [r3, #6]
 8008e58:	308a      	adds	r0, #138	; 0x8a
 8008e5a:	0040      	lsls	r0, r0, #1
 8008e5c:	f001 fcae 	bl	800a7bc <EE_WriteVariable>
 8008e60:	e76b      	b.n	8008d3a <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 8008e62:	003a      	movs	r2, r7
 8008e64:	4954      	ldr	r1, [pc, #336]	; (8008fb8 <setCommand+0x334>)
 8008e66:	0030      	movs	r0, r6
 8008e68:	f009 fa60 	bl	801232c <strncmp>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d128      	bne.n	8008ec2 <setCommand+0x23e>
			temp2 = atoi((const char *)pcParameterString2);
 8008e70:	0020      	movs	r0, r4
 8008e72:	f009 f898 	bl	8011fa6 <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 8008e76:	23e1      	movs	r3, #225	; 0xe1
 8008e78:	031b      	lsls	r3, r3, #12
 8008e7a:	4298      	cmp	r0, r3
 8008e7c:	d900      	bls.n	8008e80 <setCommand+0x1fc>
 8008e7e:	e23c      	b.n	80092fa <setCommand+0x676>
				BOS.clibaudrate = temp2;
 8008e80:	4c47      	ldr	r4, [pc, #284]	; (8008fa0 <setCommand+0x31c>)
 8008e82:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8008e84:	b281      	uxth	r1, r0
 8008e86:	208c      	movs	r0, #140	; 0x8c
 8008e88:	0040      	lsls	r0, r0, #1
 8008e8a:	f001 fc97 	bl	800a7bc <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8008e8e:	68a1      	ldr	r1, [r4, #8]
 8008e90:	0c09      	lsrs	r1, r1, #16
 8008e92:	201a      	movs	r0, #26
 8008e94:	30ff      	adds	r0, #255	; 0xff
 8008e96:	f001 fc91 	bl	800a7bc <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8008e9a:	4b39      	ldr	r3, [pc, #228]	; (8008f80 <setCommand+0x2fc>)
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ea2:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 8008ea4:	4b3b      	ldr	r3, [pc, #236]	; (8008f94 <setCommand+0x310>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	493e      	ldr	r1, [pc, #248]	; (8008fa4 <setCommand+0x320>)
 8008eaa:	0028      	movs	r0, r5
 8008eac:	f009 f9fa 	bl	80122a4 <siprintf>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 8008eb0:	4942      	ldr	r1, [pc, #264]	; (8008fbc <setCommand+0x338>)
 8008eb2:	0028      	movs	r0, r5
 8008eb4:	f009 fa16 	bl	80122e4 <strcat>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 8008eb8:	4941      	ldr	r1, [pc, #260]	; (8008fc0 <setCommand+0x33c>)
 8008eba:	0028      	movs	r0, r5
 8008ebc:	f009 fa12 	bl	80122e4 <strcat>
 8008ec0:	e0ed      	b.n	800909e <setCommand+0x41a>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 8008ec2:	003a      	movs	r2, r7
 8008ec4:	493f      	ldr	r1, [pc, #252]	; (8008fc4 <setCommand+0x340>)
 8008ec6:	0030      	movs	r0, r6
 8008ec8:	f009 fa30 	bl	801232c <strncmp>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d10d      	bne.n	8008eec <setCommand+0x268>
			temp16 = atoi((const char *)pcParameterString2);
 8008ed0:	0020      	movs	r0, r4
 8008ed2:	f009 f868 	bl	8011fa6 <atoi>
 8008ed6:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	d100      	bne.n	8008ede <setCommand+0x25a>
 8008edc:	e20d      	b.n	80092fa <setCommand+0x676>
				BOS.buttons.debounce = temp16;
 8008ede:	4b30      	ldr	r3, [pc, #192]	; (8008fa0 <setCommand+0x31c>)
 8008ee0:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 8008ee2:	2016      	movs	r0, #22
 8008ee4:	30ff      	adds	r0, #255	; 0xff
 8008ee6:	f001 fc69 	bl	800a7bc <EE_WriteVariable>
 8008eea:	e726      	b.n	8008d3a <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8008eec:	003a      	movs	r2, r7
 8008eee:	4936      	ldr	r1, [pc, #216]	; (8008fc8 <setCommand+0x344>)
 8008ef0:	0030      	movs	r0, r6
 8008ef2:	f009 fa1b 	bl	801232c <strncmp>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d10d      	bne.n	8008f16 <setCommand+0x292>
			temp16 = atoi((const char *)pcParameterString2);
 8008efa:	0020      	movs	r0, r4
 8008efc:	f009 f853 	bl	8011fa6 <atoi>
 8008f00:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8008f02:	2900      	cmp	r1, #0
 8008f04:	d100      	bne.n	8008f08 <setCommand+0x284>
 8008f06:	e1f8      	b.n	80092fa <setCommand+0x676>
				BOS.buttons.singleClickTime = temp16;
 8008f08:	4b25      	ldr	r3, [pc, #148]	; (8008fa0 <setCommand+0x31c>)
 8008f0a:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 8008f0c:	208b      	movs	r0, #139	; 0x8b
 8008f0e:	0040      	lsls	r0, r0, #1
 8008f10:	f001 fc54 	bl	800a7bc <EE_WriteVariable>
 8008f14:	e711      	b.n	8008d3a <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8008f16:	003a      	movs	r2, r7
 8008f18:	492c      	ldr	r1, [pc, #176]	; (8008fcc <setCommand+0x348>)
 8008f1a:	0030      	movs	r0, r6
 8008f1c:	f009 fa06 	bl	801232c <strncmp>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d112      	bne.n	8008f4a <setCommand+0x2c6>
			temp16 = atoi((const char *)pcParameterString2);
 8008f24:	0020      	movs	r0, r4
 8008f26:	f009 f83e 	bl	8011fa6 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8008f2a:	1e43      	subs	r3, r0, #1
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2bfe      	cmp	r3, #254	; 0xfe
 8008f30:	d900      	bls.n	8008f34 <setCommand+0x2b0>
 8008f32:	e1e2      	b.n	80092fa <setCommand+0x676>
				BOS.buttons.minInterClickTime = temp16;
 8008f34:	b2c0      	uxtb	r0, r0
 8008f36:	4b1a      	ldr	r3, [pc, #104]	; (8008fa0 <setCommand+0x31c>)
 8008f38:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8008f3a:	7959      	ldrb	r1, [r3, #5]
 8008f3c:	0209      	lsls	r1, r1, #8
 8008f3e:	4301      	orrs	r1, r0
 8008f40:	2018      	movs	r0, #24
 8008f42:	30ff      	adds	r0, #255	; 0xff
 8008f44:	f001 fc3a 	bl	800a7bc <EE_WriteVariable>
 8008f48:	e6f7      	b.n	8008d3a <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8008f4a:	003a      	movs	r2, r7
 8008f4c:	4920      	ldr	r1, [pc, #128]	; (8008fd0 <setCommand+0x34c>)
 8008f4e:	0030      	movs	r0, r6
 8008f50:	f009 f9ec 	bl	801232c <strncmp>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d000      	beq.n	8008f5a <setCommand+0x2d6>
 8008f58:	e6c3      	b.n	8008ce2 <setCommand+0x5e>
			temp16 = atoi((const char *)pcParameterString2);
 8008f5a:	0020      	movs	r0, r4
 8008f5c:	f009 f823 	bl	8011fa6 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8008f60:	1e43      	subs	r3, r0, #1
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	2bfe      	cmp	r3, #254	; 0xfe
 8008f66:	d900      	bls.n	8008f6a <setCommand+0x2e6>
 8008f68:	e1c7      	b.n	80092fa <setCommand+0x676>
				BOS.buttons.maxInterClickTime = temp16;
 8008f6a:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <setCommand+0x31c>)
 8008f6c:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8008f6e:	0200      	lsls	r0, r0, #8
 8008f70:	7919      	ldrb	r1, [r3, #4]
 8008f72:	4301      	orrs	r1, r0
 8008f74:	b289      	uxth	r1, r1
 8008f76:	2018      	movs	r0, #24
 8008f78:	30ff      	adds	r0, #255	; 0xff
 8008f7a:	f001 fc1f 	bl	800a7bc <EE_WriteVariable>
 8008f7e:	e6dc      	b.n	8008d3a <setCommand+0xb6>
 8008f80:	20000bd0 	.word	0x20000bd0
 8008f84:	08016cf8 	.word	0x08016cf8
 8008f88:	08017650 	.word	0x08017650
 8008f8c:	08017660 	.word	0x08017660
 8008f90:	08016d84 	.word	0x08016d84
 8008f94:	20000bdc 	.word	0x20000bdc
 8008f98:	08016d00 	.word	0x08016d00
 8008f9c:	08016d0c 	.word	0x08016d0c
 8008fa0:	20006160 	.word	0x20006160
 8008fa4:	08017568 	.word	0x08017568
 8008fa8:	0801755c 	.word	0x0801755c
 8008fac:	08017564 	.word	0x08017564
 8008fb0:	08016d14 	.word	0x08016d14
 8008fb4:	08016d1c 	.word	0x08016d1c
 8008fb8:	08016d24 	.word	0x08016d24
 8008fbc:	0801757c 	.word	0x0801757c
 8008fc0:	080175ac 	.word	0x080175ac
 8008fc4:	08016d30 	.word	0x08016d30
 8008fc8:	08016d3c 	.word	0x08016d3c
 8008fcc:	08016d4c 	.word	0x08016d4c
 8008fd0:	08016d60 	.word	0x08016d60
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8008fd4:	aa0a      	add	r2, sp, #40	; 0x28
 8008fd6:	2102      	movs	r1, #2
 8008fd8:	0020      	movs	r0, r4
 8008fda:	f005 fad3 	bl	800e584 <FreeRTOS_CLIGetParameter>
 8008fde:	4bca      	ldr	r3, [pc, #808]	; (8009308 <setCommand+0x684>)
 8008fe0:	4699      	mov	r9, r3
 8008fe2:	6018      	str	r0, [r3, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8008fe4:	aa09      	add	r2, sp, #36	; 0x24
 8008fe6:	2103      	movs	r1, #3
 8008fe8:	0020      	movs	r0, r4
 8008fea:	f005 facb 	bl	800e584 <FreeRTOS_CLIGetParameter>
 8008fee:	4fc7      	ldr	r7, [pc, #796]	; (800930c <setCommand+0x688>)
 8008ff0:	6038      	str	r0, [r7, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8008ff2:	aa08      	add	r2, sp, #32
 8008ff4:	2104      	movs	r1, #4
 8008ff6:	0020      	movs	r0, r4
 8008ff8:	f005 fac4 	bl	800e584 <FreeRTOS_CLIGetParameter>
 8008ffc:	4ec4      	ldr	r6, [pc, #784]	; (8009310 <setCommand+0x68c>)
 8008ffe:	6030      	str	r0, [r6, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8009000:	aa07      	add	r2, sp, #28
 8009002:	2105      	movs	r1, #5
 8009004:	0020      	movs	r0, r4
 8009006:	f005 fabd 	bl	800e584 <FreeRTOS_CLIGetParameter>
 800900a:	4cc2      	ldr	r4, [pc, #776]	; (8009314 <setCommand+0x690>)
 800900c:	6020      	str	r0, [r4, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 800900e:	464b      	mov	r3, r9
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	f008 ffc8 	bl	8011fa6 <atoi>
 8009016:	b2c3      	uxtb	r3, r0
 8009018:	4699      	mov	r9, r3
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 800901a:	6838      	ldr	r0, [r7, #0]
 800901c:	f008 ffc3 	bl	8011fa6 <atoi>
 8009020:	b2c7      	uxtb	r7, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8009022:	6830      	ldr	r0, [r6, #0]
 8009024:	f008 ffbf 	bl	8011fa6 <atoi>
 8009028:	b2c6      	uxtb	r6, r0
		if (pcParameterString5 != NULL) {
 800902a:	6824      	ldr	r4, [r4, #0]
 800902c:	2c00      	cmp	r4, #0
 800902e:	d010      	beq.n	8009052 <setCommand+0x3ce>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 8009030:	2202      	movs	r2, #2
 8009032:	49b9      	ldr	r1, [pc, #740]	; (8009318 <setCommand+0x694>)
 8009034:	0020      	movs	r0, r4
 8009036:	f009 f979 	bl	801232c <strncmp>
 800903a:	2800      	cmp	r0, #0
 800903c:	d035      	beq.n	80090aa <setCommand+0x426>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 800903e:	2202      	movs	r2, #2
 8009040:	49b6      	ldr	r1, [pc, #728]	; (800931c <setCommand+0x698>)
 8009042:	0020      	movs	r0, r4
 8009044:	f009 f972 	bl	801232c <strncmp>
 8009048:	2800      	cmp	r0, #0
 800904a:	d000      	beq.n	800904e <setCommand+0x3ca>
 800904c:	e155      	b.n	80092fa <setCommand+0x676>
				temp84 = RTC_PM;
 800904e:	2302      	movs	r3, #2
 8009050:	4698      	mov	r8, r3
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8009052:	464b      	mov	r3, r9
 8009054:	2b17      	cmp	r3, #23
 8009056:	d900      	bls.n	800905a <setCommand+0x3d6>
 8009058:	e14f      	b.n	80092fa <setCommand+0x676>
 800905a:	2f3b      	cmp	r7, #59	; 0x3b
 800905c:	d900      	bls.n	8009060 <setCommand+0x3dc>
 800905e:	e14c      	b.n	80092fa <setCommand+0x676>
 8009060:	2e3b      	cmp	r6, #59	; 0x3b
 8009062:	d900      	bls.n	8009066 <setCommand+0x3e2>
 8009064:	e149      	b.n	80092fa <setCommand+0x676>
				GetTimeDate();				
 8009066:	f7ff fcf9 	bl	8008a5c <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 800906a:	4cad      	ldr	r4, [pc, #692]	; (8009320 <setCommand+0x69c>)
 800906c:	7d23      	ldrb	r3, [r4, #20]
 800906e:	8b22      	ldrh	r2, [r4, #24]
 8009070:	7d61      	ldrb	r1, [r4, #21]
 8009072:	7da0      	ldrb	r0, [r4, #22]
 8009074:	7b24      	ldrb	r4, [r4, #12]
 8009076:	b264      	sxtb	r4, r4
 8009078:	9404      	str	r4, [sp, #16]
 800907a:	4644      	mov	r4, r8
 800907c:	9403      	str	r4, [sp, #12]
 800907e:	464c      	mov	r4, r9
 8009080:	9402      	str	r4, [sp, #8]
 8009082:	9701      	str	r7, [sp, #4]
 8009084:	9600      	str	r6, [sp, #0]
 8009086:	f7ff fc8f 	bl	80089a8 <BOS_CalendarConfig>
 800908a:	0006      	movs	r6, r0
	if (result == BOS_OK) 
 800908c:	2e00      	cmp	r6, #0
 800908e:	d100      	bne.n	8009092 <setCommand+0x40e>
 8009090:	e653      	b.n	8008d3a <setCommand+0xb6>
	else if (result == BOS_ERR_WrongParam)
 8009092:	2e67      	cmp	r6, #103	; 0x67
 8009094:	d100      	bne.n	8009098 <setCommand+0x414>
 8009096:	e624      	b.n	8008ce2 <setCommand+0x5e>
	else if (result == BOS_ERR_WrongValue)
 8009098:	2e68      	cmp	r6, #104	; 0x68
 800909a:	d100      	bne.n	800909e <setCommand+0x41a>
 800909c:	e12d      	b.n	80092fa <setCommand+0x676>
}
 800909e:	2000      	movs	r0, #0
 80090a0:	b00d      	add	sp, #52	; 0x34
 80090a2:	bc0c      	pop	{r2, r3}
 80090a4:	4690      	mov	r8, r2
 80090a6:	4699      	mov	r9, r3
 80090a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 = RTC_AM;
 80090aa:	2301      	movs	r3, #1
 80090ac:	4698      	mov	r8, r3
 80090ae:	e7d0      	b.n	8009052 <setCommand+0x3ce>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80090b0:	aa0a      	add	r2, sp, #40	; 0x28
 80090b2:	2102      	movs	r1, #2
 80090b4:	0020      	movs	r0, r4
 80090b6:	f005 fa65 	bl	800e584 <FreeRTOS_CLIGetParameter>
 80090ba:	4e93      	ldr	r6, [pc, #588]	; (8009308 <setCommand+0x684>)
 80090bc:	6030      	str	r0, [r6, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80090be:	aa09      	add	r2, sp, #36	; 0x24
 80090c0:	2103      	movs	r1, #3
 80090c2:	0020      	movs	r0, r4
 80090c4:	f005 fa5e 	bl	800e584 <FreeRTOS_CLIGetParameter>
 80090c8:	4b90      	ldr	r3, [pc, #576]	; (800930c <setCommand+0x688>)
 80090ca:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 80090cc:	aa08      	add	r2, sp, #32
 80090ce:	2104      	movs	r1, #4
 80090d0:	0020      	movs	r0, r4
 80090d2:	f005 fa57 	bl	800e584 <FreeRTOS_CLIGetParameter>
 80090d6:	4b8e      	ldr	r3, [pc, #568]	; (8009310 <setCommand+0x68c>)
 80090d8:	4698      	mov	r8, r3
 80090da:	6018      	str	r0, [r3, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 80090dc:	aa07      	add	r2, sp, #28
 80090de:	2105      	movs	r1, #5
 80090e0:	0020      	movs	r0, r4
 80090e2:	f005 fa4f 	bl	800e584 <FreeRTOS_CLIGetParameter>
 80090e6:	4c8b      	ldr	r4, [pc, #556]	; (8009314 <setCommand+0x690>)
 80090e8:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 80090ea:	4643      	mov	r3, r8
 80090ec:	6818      	ldr	r0, [r3, #0]
 80090ee:	f008 ff5a 	bl	8011fa6 <atoi>
 80090f2:	b2c3      	uxtb	r3, r0
 80090f4:	4698      	mov	r8, r3
		temp16 = atoi((const char *)pcParameterString5);		// year	
 80090f6:	6820      	ldr	r0, [r4, #0]
 80090f8:	f008 ff55 	bl	8011fa6 <atoi>
 80090fc:	b283      	uxth	r3, r0
 80090fe:	4699      	mov	r9, r3
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 8009100:	6834      	ldr	r4, [r6, #0]
 8009102:	2206      	movs	r2, #6
 8009104:	4987      	ldr	r1, [pc, #540]	; (8009324 <setCommand+0x6a0>)
 8009106:	0020      	movs	r0, r4
 8009108:	f009 f910 	bl	801232c <strncmp>
 800910c:	2800      	cmp	r0, #0
 800910e:	d100      	bne.n	8009112 <setCommand+0x48e>
 8009110:	e195      	b.n	800943e <setCommand+0x7ba>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 8009112:	2207      	movs	r2, #7
 8009114:	4984      	ldr	r1, [pc, #528]	; (8009328 <setCommand+0x6a4>)
 8009116:	0020      	movs	r0, r4
 8009118:	f009 f908 	bl	801232c <strncmp>
 800911c:	2800      	cmp	r0, #0
 800911e:	d100      	bne.n	8009122 <setCommand+0x49e>
 8009120:	e19b      	b.n	800945a <setCommand+0x7d6>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 8009122:	2209      	movs	r2, #9
 8009124:	4981      	ldr	r1, [pc, #516]	; (800932c <setCommand+0x6a8>)
 8009126:	0020      	movs	r0, r4
 8009128:	f009 f900 	bl	801232c <strncmp>
 800912c:	2800      	cmp	r0, #0
 800912e:	d100      	bne.n	8009132 <setCommand+0x4ae>
 8009130:	e195      	b.n	800945e <setCommand+0x7da>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 8009132:	2208      	movs	r2, #8
 8009134:	497e      	ldr	r1, [pc, #504]	; (8009330 <setCommand+0x6ac>)
 8009136:	0020      	movs	r0, r4
 8009138:	f009 f8f8 	bl	801232c <strncmp>
 800913c:	2800      	cmp	r0, #0
 800913e:	d100      	bne.n	8009142 <setCommand+0x4be>
 8009140:	e18f      	b.n	8009462 <setCommand+0x7de>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 8009142:	2206      	movs	r2, #6
 8009144:	497b      	ldr	r1, [pc, #492]	; (8009334 <setCommand+0x6b0>)
 8009146:	0020      	movs	r0, r4
 8009148:	f009 f8f0 	bl	801232c <strncmp>
 800914c:	2800      	cmp	r0, #0
 800914e:	d100      	bne.n	8009152 <setCommand+0x4ce>
 8009150:	e189      	b.n	8009466 <setCommand+0x7e2>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 8009152:	2208      	movs	r2, #8
 8009154:	4978      	ldr	r1, [pc, #480]	; (8009338 <setCommand+0x6b4>)
 8009156:	0020      	movs	r0, r4
 8009158:	f009 f8e8 	bl	801232c <strncmp>
 800915c:	2800      	cmp	r0, #0
 800915e:	d100      	bne.n	8009162 <setCommand+0x4de>
 8009160:	e183      	b.n	800946a <setCommand+0x7e6>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 8009162:	2206      	movs	r2, #6
 8009164:	4975      	ldr	r1, [pc, #468]	; (800933c <setCommand+0x6b8>)
 8009166:	0020      	movs	r0, r4
 8009168:	f009 f8e0 	bl	801232c <strncmp>
 800916c:	2800      	cmp	r0, #0
 800916e:	d100      	bne.n	8009172 <setCommand+0x4ee>
 8009170:	e17d      	b.n	800946e <setCommand+0x7ea>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8009172:	4b66      	ldr	r3, [pc, #408]	; (800930c <setCommand+0x688>)
 8009174:	681c      	ldr	r4, [r3, #0]
 8009176:	2207      	movs	r2, #7
 8009178:	4971      	ldr	r1, [pc, #452]	; (8009340 <setCommand+0x6bc>)
 800917a:	0020      	movs	r0, r4
 800917c:	f009 f8d6 	bl	801232c <strncmp>
			result = BOS_ERR_WrongValue;		
 8009180:	2668      	movs	r6, #104	; 0x68
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8009182:	2800      	cmp	r0, #0
 8009184:	d101      	bne.n	800918a <setCommand+0x506>
			result = BOS_ERR_WrongValue;		
 8009186:	2668      	movs	r6, #104	; 0x68
 8009188:	e783      	b.n	8009092 <setCommand+0x40e>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 800918a:	2202      	movs	r2, #2
 800918c:	496d      	ldr	r1, [pc, #436]	; (8009344 <setCommand+0x6c0>)
 800918e:	0020      	movs	r0, r4
 8009190:	f009 f8cc 	bl	801232c <strncmp>
 8009194:	2800      	cmp	r0, #0
 8009196:	d100      	bne.n	800919a <setCommand+0x516>
 8009198:	e104      	b.n	80093a4 <setCommand+0x720>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 800919a:	2208      	movs	r2, #8
 800919c:	496a      	ldr	r1, [pc, #424]	; (8009348 <setCommand+0x6c4>)
 800919e:	0020      	movs	r0, r4
 80091a0:	f009 f8c4 	bl	801232c <strncmp>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d100      	bne.n	80091aa <setCommand+0x526>
 80091a8:	e11f      	b.n	80093ea <setCommand+0x766>
 80091aa:	2202      	movs	r2, #2
 80091ac:	4967      	ldr	r1, [pc, #412]	; (800934c <setCommand+0x6c8>)
 80091ae:	0020      	movs	r0, r4
 80091b0:	f009 f8bc 	bl	801232c <strncmp>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d100      	bne.n	80091ba <setCommand+0x536>
 80091b8:	e119      	b.n	80093ee <setCommand+0x76a>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 80091ba:	2205      	movs	r2, #5
 80091bc:	4964      	ldr	r1, [pc, #400]	; (8009350 <setCommand+0x6cc>)
 80091be:	0020      	movs	r0, r4
 80091c0:	f009 f8b4 	bl	801232c <strncmp>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d100      	bne.n	80091ca <setCommand+0x546>
 80091c8:	e113      	b.n	80093f2 <setCommand+0x76e>
 80091ca:	2202      	movs	r2, #2
 80091cc:	4961      	ldr	r1, [pc, #388]	; (8009354 <setCommand+0x6d0>)
 80091ce:	0020      	movs	r0, r4
 80091d0:	f009 f8ac 	bl	801232c <strncmp>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d100      	bne.n	80091da <setCommand+0x556>
 80091d8:	e10d      	b.n	80093f6 <setCommand+0x772>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 80091da:	2205      	movs	r2, #5
 80091dc:	495e      	ldr	r1, [pc, #376]	; (8009358 <setCommand+0x6d4>)
 80091de:	0020      	movs	r0, r4
 80091e0:	f009 f8a4 	bl	801232c <strncmp>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d100      	bne.n	80091ea <setCommand+0x566>
 80091e8:	e107      	b.n	80093fa <setCommand+0x776>
 80091ea:	2202      	movs	r2, #2
 80091ec:	495b      	ldr	r1, [pc, #364]	; (800935c <setCommand+0x6d8>)
 80091ee:	0020      	movs	r0, r4
 80091f0:	f009 f89c 	bl	801232c <strncmp>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d100      	bne.n	80091fa <setCommand+0x576>
 80091f8:	e101      	b.n	80093fe <setCommand+0x77a>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 80091fa:	2203      	movs	r2, #3
 80091fc:	4958      	ldr	r1, [pc, #352]	; (8009360 <setCommand+0x6dc>)
 80091fe:	0020      	movs	r0, r4
 8009200:	f009 f894 	bl	801232c <strncmp>
 8009204:	2800      	cmp	r0, #0
 8009206:	d100      	bne.n	800920a <setCommand+0x586>
 8009208:	e0fb      	b.n	8009402 <setCommand+0x77e>
 800920a:	2202      	movs	r2, #2
 800920c:	4955      	ldr	r1, [pc, #340]	; (8009364 <setCommand+0x6e0>)
 800920e:	0020      	movs	r0, r4
 8009210:	f009 f88c 	bl	801232c <strncmp>
 8009214:	2800      	cmp	r0, #0
 8009216:	d100      	bne.n	800921a <setCommand+0x596>
 8009218:	e0f5      	b.n	8009406 <setCommand+0x782>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 800921a:	2204      	movs	r2, #4
 800921c:	4952      	ldr	r1, [pc, #328]	; (8009368 <setCommand+0x6e4>)
 800921e:	0020      	movs	r0, r4
 8009220:	f009 f884 	bl	801232c <strncmp>
 8009224:	2800      	cmp	r0, #0
 8009226:	d100      	bne.n	800922a <setCommand+0x5a6>
 8009228:	e0ef      	b.n	800940a <setCommand+0x786>
 800922a:	2202      	movs	r2, #2
 800922c:	494f      	ldr	r1, [pc, #316]	; (800936c <setCommand+0x6e8>)
 800922e:	0020      	movs	r0, r4
 8009230:	f009 f87c 	bl	801232c <strncmp>
 8009234:	2800      	cmp	r0, #0
 8009236:	d100      	bne.n	800923a <setCommand+0x5b6>
 8009238:	e0e9      	b.n	800940e <setCommand+0x78a>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 800923a:	2204      	movs	r2, #4
 800923c:	494c      	ldr	r1, [pc, #304]	; (8009370 <setCommand+0x6ec>)
 800923e:	0020      	movs	r0, r4
 8009240:	f009 f874 	bl	801232c <strncmp>
 8009244:	2800      	cmp	r0, #0
 8009246:	d100      	bne.n	800924a <setCommand+0x5c6>
 8009248:	e0e3      	b.n	8009412 <setCommand+0x78e>
 800924a:	2202      	movs	r2, #2
 800924c:	4949      	ldr	r1, [pc, #292]	; (8009374 <setCommand+0x6f0>)
 800924e:	0020      	movs	r0, r4
 8009250:	f009 f86c 	bl	801232c <strncmp>
 8009254:	2800      	cmp	r0, #0
 8009256:	d100      	bne.n	800925a <setCommand+0x5d6>
 8009258:	e0dd      	b.n	8009416 <setCommand+0x792>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 800925a:	2205      	movs	r2, #5
 800925c:	4946      	ldr	r1, [pc, #280]	; (8009378 <setCommand+0x6f4>)
 800925e:	0020      	movs	r0, r4
 8009260:	f009 f864 	bl	801232c <strncmp>
 8009264:	2800      	cmp	r0, #0
 8009266:	d100      	bne.n	800926a <setCommand+0x5e6>
 8009268:	e0d7      	b.n	800941a <setCommand+0x796>
 800926a:	2202      	movs	r2, #2
 800926c:	4943      	ldr	r1, [pc, #268]	; (800937c <setCommand+0x6f8>)
 800926e:	0020      	movs	r0, r4
 8009270:	f009 f85c 	bl	801232c <strncmp>
 8009274:	2800      	cmp	r0, #0
 8009276:	d100      	bne.n	800927a <setCommand+0x5f6>
 8009278:	e0d1      	b.n	800941e <setCommand+0x79a>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 800927a:	2209      	movs	r2, #9
 800927c:	4940      	ldr	r1, [pc, #256]	; (8009380 <setCommand+0x6fc>)
 800927e:	0020      	movs	r0, r4
 8009280:	f009 f854 	bl	801232c <strncmp>
 8009284:	2800      	cmp	r0, #0
 8009286:	d100      	bne.n	800928a <setCommand+0x606>
 8009288:	e0cb      	b.n	8009422 <setCommand+0x79e>
 800928a:	2202      	movs	r2, #2
 800928c:	493d      	ldr	r1, [pc, #244]	; (8009384 <setCommand+0x700>)
 800928e:	0020      	movs	r0, r4
 8009290:	f009 f84c 	bl	801232c <strncmp>
 8009294:	2800      	cmp	r0, #0
 8009296:	d100      	bne.n	800929a <setCommand+0x616>
 8009298:	e0c5      	b.n	8009426 <setCommand+0x7a2>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 800929a:	2207      	movs	r2, #7
 800929c:	493a      	ldr	r1, [pc, #232]	; (8009388 <setCommand+0x704>)
 800929e:	0020      	movs	r0, r4
 80092a0:	f009 f844 	bl	801232c <strncmp>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d100      	bne.n	80092aa <setCommand+0x626>
 80092a8:	e0bf      	b.n	800942a <setCommand+0x7a6>
 80092aa:	2202      	movs	r2, #2
 80092ac:	4937      	ldr	r1, [pc, #220]	; (800938c <setCommand+0x708>)
 80092ae:	0020      	movs	r0, r4
 80092b0:	f009 f83c 	bl	801232c <strncmp>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d100      	bne.n	80092ba <setCommand+0x636>
 80092b8:	e0b9      	b.n	800942e <setCommand+0x7aa>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 80092ba:	2208      	movs	r2, #8
 80092bc:	4934      	ldr	r1, [pc, #208]	; (8009390 <setCommand+0x70c>)
 80092be:	0020      	movs	r0, r4
 80092c0:	f009 f834 	bl	801232c <strncmp>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d100      	bne.n	80092ca <setCommand+0x646>
 80092c8:	e0b3      	b.n	8009432 <setCommand+0x7ae>
 80092ca:	2202      	movs	r2, #2
 80092cc:	4931      	ldr	r1, [pc, #196]	; (8009394 <setCommand+0x710>)
 80092ce:	0020      	movs	r0, r4
 80092d0:	f009 f82c 	bl	801232c <strncmp>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d100      	bne.n	80092da <setCommand+0x656>
 80092d8:	e0ad      	b.n	8009436 <setCommand+0x7b2>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 80092da:	2208      	movs	r2, #8
 80092dc:	492e      	ldr	r1, [pc, #184]	; (8009398 <setCommand+0x714>)
 80092de:	0020      	movs	r0, r4
 80092e0:	f009 f824 	bl	801232c <strncmp>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d100      	bne.n	80092ea <setCommand+0x666>
 80092e8:	e0a7      	b.n	800943a <setCommand+0x7b6>
 80092ea:	2202      	movs	r2, #2
 80092ec:	492b      	ldr	r1, [pc, #172]	; (800939c <setCommand+0x718>)
 80092ee:	0020      	movs	r0, r4
 80092f0:	f009 f81c 	bl	801232c <strncmp>
			temp82 = DECEMBER;
 80092f4:	240c      	movs	r4, #12
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d055      	beq.n	80093a6 <setCommand+0x722>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 80092fa:	220f      	movs	r2, #15
 80092fc:	4928      	ldr	r1, [pc, #160]	; (80093a0 <setCommand+0x71c>)
 80092fe:	0028      	movs	r0, r5
 8009300:	f008 fec9 	bl	8012096 <memcpy>
 8009304:	e6cb      	b.n	800909e <setCommand+0x41a>
 8009306:	46c0      	nop			; (mov r8, r8)
 8009308:	20000bdc 	.word	0x20000bdc
 800930c:	20000be4 	.word	0x20000be4
 8009310:	20000be8 	.word	0x20000be8
 8009314:	20000bec 	.word	0x20000bec
 8009318:	08017658 	.word	0x08017658
 800931c:	0801765c 	.word	0x0801765c
 8009320:	20006160 	.word	0x20006160
 8009324:	08017668 	.word	0x08017668
 8009328:	08017670 	.word	0x08017670
 800932c:	08017678 	.word	0x08017678
 8009330:	08017684 	.word	0x08017684
 8009334:	08017690 	.word	0x08017690
 8009338:	08017698 	.word	0x08017698
 800933c:	080176a4 	.word	0x080176a4
 8009340:	08017740 	.word	0x08017740
 8009344:	080176ac 	.word	0x080176ac
 8009348:	080176b0 	.word	0x080176b0
 800934c:	080176bc 	.word	0x080176bc
 8009350:	080176c0 	.word	0x080176c0
 8009354:	080176c8 	.word	0x080176c8
 8009358:	080176cc 	.word	0x080176cc
 800935c:	080176d4 	.word	0x080176d4
 8009360:	080176d8 	.word	0x080176d8
 8009364:	080176dc 	.word	0x080176dc
 8009368:	080176e0 	.word	0x080176e0
 800936c:	080176e8 	.word	0x080176e8
 8009370:	080176ec 	.word	0x080176ec
 8009374:	080176f4 	.word	0x080176f4
 8009378:	080176f8 	.word	0x080176f8
 800937c:	08017700 	.word	0x08017700
 8009380:	08017704 	.word	0x08017704
 8009384:	08017710 	.word	0x08017710
 8009388:	08017714 	.word	0x08017714
 800938c:	0801771c 	.word	0x0801771c
 8009390:	08017720 	.word	0x08017720
 8009394:	0801772c 	.word	0x0801772c
 8009398:	08017730 	.word	0x08017730
 800939c:	0801773c 	.word	0x0801773c
 80093a0:	08016bd8 	.word	0x08016bd8
			temp82 = JANUARY;
 80093a4:	2401      	movs	r4, #1
		if (result == BOS_OK) 
 80093a6:	2e00      	cmp	r6, #0
 80093a8:	d000      	beq.n	80093ac <setCommand+0x728>
 80093aa:	e672      	b.n	8009092 <setCommand+0x40e>
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80093ac:	4643      	mov	r3, r8
 80093ae:	3b01      	subs	r3, #1
 80093b0:	2b1e      	cmp	r3, #30
 80093b2:	d8a2      	bhi.n	80092fa <setCommand+0x676>
 80093b4:	4b2f      	ldr	r3, [pc, #188]	; (8009474 <setCommand+0x7f0>)
 80093b6:	444b      	add	r3, r9
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	2b64      	cmp	r3, #100	; 0x64
 80093bc:	d89d      	bhi.n	80092fa <setCommand+0x676>
				GetTimeDate();
 80093be:	f7ff fb4d 	bl	8008a5c <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 80093c2:	4b2d      	ldr	r3, [pc, #180]	; (8009478 <setCommand+0x7f4>)
 80093c4:	220c      	movs	r2, #12
 80093c6:	569a      	ldrsb	r2, [r3, r2]
 80093c8:	9204      	str	r2, [sp, #16]
 80093ca:	7cda      	ldrb	r2, [r3, #19]
 80093cc:	9203      	str	r2, [sp, #12]
 80093ce:	7c9a      	ldrb	r2, [r3, #18]
 80093d0:	9202      	str	r2, [sp, #8]
 80093d2:	7c5a      	ldrb	r2, [r3, #17]
 80093d4:	9201      	str	r2, [sp, #4]
 80093d6:	7c1b      	ldrb	r3, [r3, #16]
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	003b      	movs	r3, r7
 80093dc:	464a      	mov	r2, r9
 80093de:	4641      	mov	r1, r8
 80093e0:	0020      	movs	r0, r4
 80093e2:	f7ff fae1 	bl	80089a8 <BOS_CalendarConfig>
 80093e6:	0006      	movs	r6, r0
 80093e8:	e650      	b.n	800908c <setCommand+0x408>
			temp82 = FEBRUARY;
 80093ea:	2402      	movs	r4, #2
 80093ec:	e7db      	b.n	80093a6 <setCommand+0x722>
 80093ee:	2402      	movs	r4, #2
 80093f0:	e7d9      	b.n	80093a6 <setCommand+0x722>
			temp82 = MARCH;
 80093f2:	2403      	movs	r4, #3
 80093f4:	e7d7      	b.n	80093a6 <setCommand+0x722>
 80093f6:	2403      	movs	r4, #3
 80093f8:	e7d5      	b.n	80093a6 <setCommand+0x722>
			temp82 = APRIL;
 80093fa:	2404      	movs	r4, #4
 80093fc:	e7d3      	b.n	80093a6 <setCommand+0x722>
 80093fe:	2404      	movs	r4, #4
 8009400:	e7d1      	b.n	80093a6 <setCommand+0x722>
			temp82 = MAY;
 8009402:	2405      	movs	r4, #5
 8009404:	e7cf      	b.n	80093a6 <setCommand+0x722>
 8009406:	2405      	movs	r4, #5
 8009408:	e7cd      	b.n	80093a6 <setCommand+0x722>
			temp82 = JUNE;
 800940a:	2406      	movs	r4, #6
 800940c:	e7cb      	b.n	80093a6 <setCommand+0x722>
 800940e:	2406      	movs	r4, #6
 8009410:	e7c9      	b.n	80093a6 <setCommand+0x722>
			temp82 = JULY;
 8009412:	2407      	movs	r4, #7
 8009414:	e7c7      	b.n	80093a6 <setCommand+0x722>
 8009416:	2407      	movs	r4, #7
 8009418:	e7c5      	b.n	80093a6 <setCommand+0x722>
			temp82 = AUGUST;
 800941a:	2408      	movs	r4, #8
 800941c:	e7c3      	b.n	80093a6 <setCommand+0x722>
 800941e:	2408      	movs	r4, #8
 8009420:	e7c1      	b.n	80093a6 <setCommand+0x722>
			temp82 = SEPTEMBER;
 8009422:	2409      	movs	r4, #9
 8009424:	e7bf      	b.n	80093a6 <setCommand+0x722>
 8009426:	2409      	movs	r4, #9
 8009428:	e7bd      	b.n	80093a6 <setCommand+0x722>
			temp82 = OCTOBER;
 800942a:	240a      	movs	r4, #10
 800942c:	e7bb      	b.n	80093a6 <setCommand+0x722>
 800942e:	240a      	movs	r4, #10
 8009430:	e7b9      	b.n	80093a6 <setCommand+0x722>
			temp82 = NOVEMBER;
 8009432:	240b      	movs	r4, #11
 8009434:	e7b7      	b.n	80093a6 <setCommand+0x722>
 8009436:	240b      	movs	r4, #11
 8009438:	e7b5      	b.n	80093a6 <setCommand+0x722>
			temp82 = DECEMBER;
 800943a:	240c      	movs	r4, #12
 800943c:	e7b3      	b.n	80093a6 <setCommand+0x722>
			temp81 = MONDAY;
 800943e:	2701      	movs	r7, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8009440:	4b0e      	ldr	r3, [pc, #56]	; (800947c <setCommand+0x7f8>)
 8009442:	681c      	ldr	r4, [r3, #0]
 8009444:	2207      	movs	r2, #7
 8009446:	490e      	ldr	r1, [pc, #56]	; (8009480 <setCommand+0x7fc>)
 8009448:	0020      	movs	r0, r4
 800944a:	f008 ff6f 	bl	801232c <strncmp>
 800944e:	2600      	movs	r6, #0
 8009450:	2800      	cmp	r0, #0
 8009452:	d000      	beq.n	8009456 <setCommand+0x7d2>
 8009454:	e699      	b.n	800918a <setCommand+0x506>
			temp82 = JANUARY;
 8009456:	2401      	movs	r4, #1
 8009458:	e7a8      	b.n	80093ac <setCommand+0x728>
			temp81 = TUESDAY;
 800945a:	2702      	movs	r7, #2
 800945c:	e7f0      	b.n	8009440 <setCommand+0x7bc>
			temp81 = WEDNESDAY;
 800945e:	2703      	movs	r7, #3
 8009460:	e7ee      	b.n	8009440 <setCommand+0x7bc>
			temp81 = THURSDAY;
 8009462:	2704      	movs	r7, #4
 8009464:	e7ec      	b.n	8009440 <setCommand+0x7bc>
			temp81 = FRIDAY;
 8009466:	2705      	movs	r7, #5
 8009468:	e7ea      	b.n	8009440 <setCommand+0x7bc>
			temp81 = SATURDAY;
 800946a:	2706      	movs	r7, #6
 800946c:	e7e8      	b.n	8009440 <setCommand+0x7bc>
			temp81 = SUNDAY;
 800946e:	2707      	movs	r7, #7
 8009470:	e7e6      	b.n	8009440 <setCommand+0x7bc>
 8009472:	46c0      	nop			; (mov r8, r8)
 8009474:	fffff830 	.word	0xfffff830
 8009478:	20006160 	.word	0x20006160
 800947c:	20000be4 	.word	0x20000be4
 8009480:	08017740 	.word	0x08017740

08009484 <GetDateString>:
{
 8009484:	b510      	push	{r4, lr}
 8009486:	b082      	sub	sp, #8
  char *buffer = malloc(30 * sizeof(int8_t));
 8009488:	201e      	movs	r0, #30
 800948a:	f008 fdcf 	bl	801202c <malloc>
 800948e:	0004      	movs	r4, r0
  memset (buffer, 0x00, 30 * sizeof(int8_t));
 8009490:	221e      	movs	r2, #30
 8009492:	2100      	movs	r1, #0
 8009494:	f008 fe08 	bl	80120a8 <memset>
  sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday-1], BOS.date.month, BOS.date.day, BOS.date.year);
 8009498:	4908      	ldr	r1, [pc, #32]	; (80094bc <GetDateString+0x38>)
 800949a:	7d8b      	ldrb	r3, [r1, #22]
 800949c:	7d0a      	ldrb	r2, [r1, #20]
 800949e:	3a01      	subs	r2, #1
 80094a0:	0092      	lsls	r2, r2, #2
 80094a2:	4807      	ldr	r0, [pc, #28]	; (80094c0 <GetDateString+0x3c>)
 80094a4:	5812      	ldr	r2, [r2, r0]
 80094a6:	8b08      	ldrh	r0, [r1, #24]
 80094a8:	9001      	str	r0, [sp, #4]
 80094aa:	7d49      	ldrb	r1, [r1, #21]
 80094ac:	9100      	str	r1, [sp, #0]
 80094ae:	4905      	ldr	r1, [pc, #20]	; (80094c4 <GetDateString+0x40>)
 80094b0:	0020      	movs	r0, r4
 80094b2:	f008 fef7 	bl	80122a4 <siprintf>
}
 80094b6:	0020      	movs	r0, r4
 80094b8:	b002      	add	sp, #8
 80094ba:	bd10      	pop	{r4, pc}
 80094bc:	20006160 	.word	0x20006160
 80094c0:	080187d4 	.word	0x080187d4
 80094c4:	08016ce4 	.word	0x08016ce4

080094c8 <dateCommand>:
{
 80094c8:	b510      	push	{r4, lr}
 80094ca:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80094cc:	d101      	bne.n	80094d2 <dateCommand+0xa>
 80094ce:	b672      	cpsid	i
 80094d0:	e7fe      	b.n	80094d0 <dateCommand+0x8>
	GetTimeDate();
 80094d2:	f7ff fac3 	bl	8008a5c <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 80094d6:	f7ff ffd5 	bl	8009484 <GetDateString>
 80094da:	0002      	movs	r2, r0
 80094dc:	4902      	ldr	r1, [pc, #8]	; (80094e8 <dateCommand+0x20>)
 80094de:	0020      	movs	r0, r4
 80094e0:	f008 fee0 	bl	80122a4 <siprintf>
}
 80094e4:	2000      	movs	r0, #0
 80094e6:	bd10      	pop	{r4, pc}
 80094e8:	08016b78 	.word	0x08016b78

080094ec <Bridge>:
{
 80094ec:	b500      	push	{lr}
 80094ee:	b085      	sub	sp, #20
 80094f0:	000a      	movs	r2, r1
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, true);
 80094f2:	4b07      	ldr	r3, [pc, #28]	; (8009510 <Bridge+0x24>)
 80094f4:	7819      	ldrb	r1, [r3, #0]
 80094f6:	2301      	movs	r3, #1
 80094f8:	9303      	str	r3, [sp, #12]
 80094fa:	3b02      	subs	r3, #2
 80094fc:	9302      	str	r3, [sp, #8]
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	3303      	adds	r3, #3
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	000b      	movs	r3, r1
 8009506:	f7fd f8ff 	bl	8006708 <StartScastDMAStream>
}
 800950a:	b005      	add	sp, #20
 800950c:	bd00      	pop	{pc}
 800950e:	46c0      	nop			; (mov r8, r8)
 8009510:	20000b90 	.word	0x20000b90

08009514 <bridgeCommand>:
{	
 8009514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009516:	b083      	sub	sp, #12
 8009518:	0004      	movs	r4, r0
 800951a:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8009522:	2800      	cmp	r0, #0
 8009524:	d101      	bne.n	800952a <bridgeCommand+0x16>
 8009526:	b672      	cpsid	i
 8009528:	e7fe      	b.n	8009528 <bridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800952a:	aa01      	add	r2, sp, #4
 800952c:	2101      	movs	r1, #1
 800952e:	0028      	movs	r0, r5
 8009530:	f005 f828 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8009534:	2300      	movs	r3, #0
 8009536:	56c3      	ldrsb	r3, [r0, r3]
 8009538:	2b70      	cmp	r3, #112	; 0x70
 800953a:	d00e      	beq.n	800955a <bridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800953c:	466a      	mov	r2, sp
 800953e:	2102      	movs	r1, #2
 8009540:	0028      	movs	r0, r5
 8009542:	f005 f81f 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8009546:	2300      	movs	r3, #0
 8009548:	56c3      	ldrsb	r3, [r0, r3]
 800954a:	2b70      	cmp	r3, #112	; 0x70
 800954c:	d01e      	beq.n	800958c <bridgeCommand+0x78>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 800954e:	220f      	movs	r2, #15
 8009550:	491a      	ldr	r1, [pc, #104]	; (80095bc <bridgeCommand+0xa8>)
 8009552:	0020      	movs	r0, r4
 8009554:	f008 fd9f 	bl	8012096 <memcpy>
 8009558:	e015      	b.n	8009586 <bridgeCommand+0x72>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 800955a:	3001      	adds	r0, #1
 800955c:	f008 fd29 	bl	8011fb2 <atol>
 8009560:	0006      	movs	r6, r0
 8009562:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8009564:	466a      	mov	r2, sp
 8009566:	2102      	movs	r1, #2
 8009568:	0028      	movs	r0, r5
 800956a:	f005 f80b 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800956e:	2300      	movs	r3, #0
 8009570:	56c3      	ldrsb	r3, [r0, r3]
 8009572:	2b70      	cmp	r3, #112	; 0x70
 8009574:	d00e      	beq.n	8009594 <bridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 8009576:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam) 
 8009578:	2867      	cmp	r0, #103	; 0x67
 800957a:	d0e8      	beq.n	800954e <bridgeCommand+0x3a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 800957c:	2217      	movs	r2, #23
 800957e:	4910      	ldr	r1, [pc, #64]	; (80095c0 <bridgeCommand+0xac>)
 8009580:	0020      	movs	r0, r4
 8009582:	f008 fd88 	bl	8012096 <memcpy>
}
 8009586:	2000      	movs	r0, #0
 8009588:	b003      	add	sp, #12
 800958a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 800958c:	3001      	adds	r0, #1
 800958e:	f008 fd10 	bl	8011fb2 <atol>
 8009592:	e7dc      	b.n	800954e <bridgeCommand+0x3a>
 8009594:	3001      	adds	r0, #1
 8009596:	f008 fd0c 	bl	8011fb2 <atol>
 800959a:	0005      	movs	r5, r0
		result = Bridge(port1, port2);
 800959c:	b2c1      	uxtb	r1, r0
 800959e:	0038      	movs	r0, r7
 80095a0:	f7ff ffa4 	bl	80094ec <Bridge>
	if (result == BOS_OK) 
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d1e7      	bne.n	8009578 <bridgeCommand+0x64>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 80095a8:	22ff      	movs	r2, #255	; 0xff
 80095aa:	002b      	movs	r3, r5
 80095ac:	4013      	ands	r3, r2
 80095ae:	4032      	ands	r2, r6
 80095b0:	4904      	ldr	r1, [pc, #16]	; (80095c4 <bridgeCommand+0xb0>)
 80095b2:	0020      	movs	r0, r4
 80095b4:	f008 fe76 	bl	80122a4 <siprintf>
 80095b8:	e7e5      	b.n	8009586 <bridgeCommand+0x72>
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	080186b8 	.word	0x080186b8
 80095c0:	08016b50 	.word	0x08016b50
 80095c4:	08016b2c 	.word	0x08016b2c

080095c8 <Unbridge>:
{		
 80095c8:	b530      	push	{r4, r5, lr}
 80095ca:	b087      	sub	sp, #28
 80095cc:	0004      	movs	r4, r0
 80095ce:	000d      	movs	r5, r1
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 80095d0:	2300      	movs	r3, #0
 80095d2:	9304      	str	r3, [sp, #16]
 80095d4:	9303      	str	r3, [sp, #12]
 80095d6:	9302      	str	r3, [sp, #8]
 80095d8:	9301      	str	r3, [sp, #4]
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	2200      	movs	r2, #0
 80095de:	2100      	movs	r1, #0
 80095e0:	2000      	movs	r0, #0
 80095e2:	f7fa fc37 	bl	8003e54 <SaveEEstreams>
	if(streamDMA[port1-1].Instance != 0 && streamDMA[port2-1].Instance != 0) 
 80095e6:	1e62      	subs	r2, r4, #1
 80095e8:	00d3      	lsls	r3, r2, #3
 80095ea:	1a9b      	subs	r3, r3, r2
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	4a14      	ldr	r2, [pc, #80]	; (8009640 <Unbridge+0x78>)
 80095f0:	589b      	ldr	r3, [r3, r2]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d015      	beq.n	8009622 <Unbridge+0x5a>
 80095f6:	1e6a      	subs	r2, r5, #1
 80095f8:	00d3      	lsls	r3, r2, #3
 80095fa:	1a9b      	subs	r3, r3, r2
 80095fc:	00db      	lsls	r3, r3, #3
 80095fe:	4a10      	ldr	r2, [pc, #64]	; (8009640 <Unbridge+0x78>)
 8009600:	589b      	ldr	r3, [r3, r2]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d104      	bne.n	8009610 <Unbridge+0x48>
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
 8009606:	0020      	movs	r0, r4
 8009608:	f000 ff90 	bl	800a52c <SwitchStreamDMAToMsg>
 800960c:	2000      	movs	r0, #0
 800960e:	e006      	b.n	800961e <Unbridge+0x56>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
 8009610:	0020      	movs	r0, r4
 8009612:	f000 ff8b 	bl	800a52c <SwitchStreamDMAToMsg>
 8009616:	0028      	movs	r0, r5
 8009618:	f000 ff88 	bl	800a52c <SwitchStreamDMAToMsg>
 800961c:	2000      	movs	r0, #0
}
 800961e:	b007      	add	sp, #28
 8009620:	bd30      	pop	{r4, r5, pc}
	else if (streamDMA[port2-1].Instance != 0)
 8009622:	1e6a      	subs	r2, r5, #1
 8009624:	00d3      	lsls	r3, r2, #3
 8009626:	1a9b      	subs	r3, r3, r2
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	4a05      	ldr	r2, [pc, #20]	; (8009640 <Unbridge+0x78>)
 800962c:	589b      	ldr	r3, [r3, r2]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d004      	beq.n	800963c <Unbridge+0x74>
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
 8009632:	0028      	movs	r0, r5
 8009634:	f000 ff7a 	bl	800a52c <SwitchStreamDMAToMsg>
 8009638:	2000      	movs	r0, #0
 800963a:	e7f0      	b.n	800961e <Unbridge+0x56>
	else {return BOS_ERR_WrongValue;}
 800963c:	2068      	movs	r0, #104	; 0x68
 800963e:	e7ee      	b.n	800961e <Unbridge+0x56>
 8009640:	20001284 	.word	0x20001284

08009644 <unbridgeCommand>:
{	
 8009644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009646:	b083      	sub	sp, #12
 8009648:	0004      	movs	r4, r0
 800964a:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	9301      	str	r3, [sp, #4]
 8009650:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8009652:	2800      	cmp	r0, #0
 8009654:	d101      	bne.n	800965a <unbridgeCommand+0x16>
 8009656:	b672      	cpsid	i
 8009658:	e7fe      	b.n	8009658 <unbridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800965a:	aa01      	add	r2, sp, #4
 800965c:	2101      	movs	r1, #1
 800965e:	0028      	movs	r0, r5
 8009660:	f004 ff90 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8009664:	2300      	movs	r3, #0
 8009666:	56c3      	ldrsb	r3, [r0, r3]
 8009668:	2b70      	cmp	r3, #112	; 0x70
 800966a:	d00e      	beq.n	800968a <unbridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800966c:	466a      	mov	r2, sp
 800966e:	2102      	movs	r1, #2
 8009670:	0028      	movs	r0, r5
 8009672:	f004 ff87 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8009676:	2300      	movs	r3, #0
 8009678:	56c3      	ldrsb	r3, [r0, r3]
 800967a:	2b70      	cmp	r3, #112	; 0x70
 800967c:	d01e      	beq.n	80096bc <unbridgeCommand+0x78>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 800967e:	220f      	movs	r2, #15
 8009680:	491a      	ldr	r1, [pc, #104]	; (80096ec <unbridgeCommand+0xa8>)
 8009682:	0020      	movs	r0, r4
 8009684:	f008 fd07 	bl	8012096 <memcpy>
 8009688:	e015      	b.n	80096b6 <unbridgeCommand+0x72>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 800968a:	3001      	adds	r0, #1
 800968c:	f008 fc91 	bl	8011fb2 <atol>
 8009690:	0006      	movs	r6, r0
 8009692:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8009694:	466a      	mov	r2, sp
 8009696:	2102      	movs	r1, #2
 8009698:	0028      	movs	r0, r5
 800969a:	f004 ff73 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800969e:	2300      	movs	r3, #0
 80096a0:	56c3      	ldrsb	r3, [r0, r3]
 80096a2:	2b70      	cmp	r3, #112	; 0x70
 80096a4:	d00e      	beq.n	80096c4 <unbridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 80096a6:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam) 
 80096a8:	2867      	cmp	r0, #103	; 0x67
 80096aa:	d0e8      	beq.n	800967e <unbridgeCommand+0x3a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 80096ac:	2219      	movs	r2, #25
 80096ae:	4910      	ldr	r1, [pc, #64]	; (80096f0 <unbridgeCommand+0xac>)
 80096b0:	0020      	movs	r0, r4
 80096b2:	f008 fcf0 	bl	8012096 <memcpy>
}
 80096b6:	2000      	movs	r0, #0
 80096b8:	b003      	add	sp, #12
 80096ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 80096bc:	3001      	adds	r0, #1
 80096be:	f008 fc78 	bl	8011fb2 <atol>
 80096c2:	e7dc      	b.n	800967e <unbridgeCommand+0x3a>
 80096c4:	3001      	adds	r0, #1
 80096c6:	f008 fc74 	bl	8011fb2 <atol>
 80096ca:	0005      	movs	r5, r0
		result = Unbridge(port1, port2);
 80096cc:	b2c1      	uxtb	r1, r0
 80096ce:	0038      	movs	r0, r7
 80096d0:	f7ff ff7a 	bl	80095c8 <Unbridge>
	if (result == BOS_OK) 
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d1e7      	bne.n	80096a8 <unbridgeCommand+0x64>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 80096d8:	22ff      	movs	r2, #255	; 0xff
 80096da:	002b      	movs	r3, r5
 80096dc:	4013      	ands	r3, r2
 80096de:	4032      	ands	r2, r6
 80096e0:	4904      	ldr	r1, [pc, #16]	; (80096f4 <unbridgeCommand+0xb0>)
 80096e2:	0020      	movs	r0, r4
 80096e4:	f008 fdde 	bl	80122a4 <siprintf>
 80096e8:	e7e5      	b.n	80096b6 <unbridgeCommand+0x72>
 80096ea:	46c0      	nop			; (mov r8, r8)
 80096ec:	080186b8 	.word	0x080186b8
 80096f0:	08018780 	.word	0x08018780
 80096f4:	08018760 	.word	0x08018760

080096f8 <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 80096f8:	b570      	push	{r4, r5, r6, lr}
 80096fa:	0005      	movs	r5, r0
	for(int i = 0; string[i]; i++){
 80096fc:	7804      	ldrb	r4, [r0, #0]
 80096fe:	2c00      	cmp	r4, #0
 8009700:	d010      	beq.n	8009724 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 8009702:	2603      	movs	r6, #3
 8009704:	e004      	b.n	8009710 <StringToLowerCase+0x18>
 8009706:	702a      	strb	r2, [r5, #0]
 8009708:	3501      	adds	r5, #1
	for(int i = 0; string[i]; i++){
 800970a:	782c      	ldrb	r4, [r5, #0]
 800970c:	2c00      	cmp	r4, #0
 800970e:	d009      	beq.n	8009724 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 8009710:	f008 fc7e 	bl	8012010 <__locale_ctype_ptr>
 8009714:	1900      	adds	r0, r0, r4
 8009716:	7843      	ldrb	r3, [r0, #1]
 8009718:	4033      	ands	r3, r6
 800971a:	0022      	movs	r2, r4
 800971c:	2b01      	cmp	r3, #1
 800971e:	d1f2      	bne.n	8009706 <StringToLowerCase+0xe>
 8009720:	3220      	adds	r2, #32
 8009722:	e7f0      	b.n	8009706 <StringToLowerCase+0xe>
	}
}
 8009724:	bd70      	pop	{r4, r5, r6, pc}
	...

08009728 <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 8009728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800972a:	46c6      	mov	lr, r8
 800972c:	b500      	push	{lr}
 800972e:	b088      	sub	sp, #32
 8009730:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 8009732:	4bdc      	ldr	r3, [pc, #880]	; (8009aa4 <ParseSnippetCondition+0x37c>)
 8009734:	781c      	ldrb	r4, [r3, #0]
 8009736:	2c05      	cmp	r4, #5
 8009738:	d100      	bne.n	800973c <ParseSnippetCondition+0x14>
 800973a:	e210      	b.n	8009b5e <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 800973c:	49da      	ldr	r1, [pc, #872]	; (8009aa8 <ParseSnippetCondition+0x380>)
 800973e:	00a3      	lsls	r3, r4, #2
 8009740:	191a      	adds	r2, r3, r4
 8009742:	0092      	lsls	r2, r2, #2
 8009744:	2000      	movs	r0, #0
 8009746:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 8009748:	191a      	adds	r2, r3, r4
 800974a:	0092      	lsls	r2, r2, #2
 800974c:	188a      	adds	r2, r1, r2
 800974e:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 8009750:	1918      	adds	r0, r3, r4
 8009752:	0080      	lsls	r0, r0, #2
 8009754:	3002      	adds	r0, #2
 8009756:	1840      	adds	r0, r0, r1
 8009758:	2204      	movs	r2, #4
 800975a:	2100      	movs	r1, #0
 800975c:	f008 fca4 	bl	80120a8 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 8009760:	782b      	ldrb	r3, [r5, #0]
 8009762:	2b62      	cmp	r3, #98	; 0x62
 8009764:	d102      	bne.n	800976c <ParseSnippetCondition+0x44>
 8009766:	78ab      	ldrb	r3, [r5, #2]
 8009768:	2b2e      	cmp	r3, #46	; 0x2e
 800976a:	d032      	beq.n	80097d2 <ParseSnippetCondition+0xaa>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 800976c:	4ecf      	ldr	r6, [pc, #828]	; (8009aac <ParseSnippetCondition+0x384>)
 800976e:	0029      	movs	r1, r5
 8009770:	0030      	movs	r0, r6
 8009772:	f008 fdd3 	bl	801231c <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 8009776:	4cce      	ldr	r4, [pc, #824]	; (8009ab0 <ParseSnippetCondition+0x388>)
 8009778:	0021      	movs	r1, r4
 800977a:	0030      	movs	r0, r6
 800977c:	f009 fc4e 	bl	801301c <strtok>
 8009780:	0005      	movs	r5, r0
		secondPart = strtok ( NULL, " ");
 8009782:	0021      	movs	r1, r4
 8009784:	2000      	movs	r0, #0
 8009786:	f009 fc49 	bl	801301c <strtok>
 800978a:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 800978c:	0021      	movs	r1, r4
 800978e:	2000      	movs	r0, #0
 8009790:	f009 fc44 	bl	801301c <strtok>
 8009794:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 8009796:	2d00      	cmp	r5, #0
 8009798:	d100      	bne.n	800979c <ParseSnippetCondition+0x74>
 800979a:	e1e5      	b.n	8009b68 <ParseSnippetCondition+0x440>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 800979c:	0028      	movs	r0, r5
 800979e:	f7fa fdd7 	bl	8004350 <IsModuleParameter>
 80097a2:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 80097a4:	d100      	bne.n	80097a8 <ParseSnippetCondition+0x80>
 80097a6:	e18f      	b.n	8009ac8 <ParseSnippetCondition+0x3a0>
 80097a8:	2e00      	cmp	r6, #0
 80097aa:	d000      	beq.n	80097ae <ParseSnippetCondition+0x86>
 80097ac:	e18e      	b.n	8009acc <ParseSnippetCondition+0x3a4>
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;				
			} 
			else 
			{
				return BOS_ERR_WrongParam;
 80097ae:	2067      	movs	r0, #103	; 0x67
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 80097b0:	2c00      	cmp	r4, #0
 80097b2:	d000      	beq.n	80097b6 <ParseSnippetCondition+0x8e>
 80097b4:	e1d4      	b.n	8009b60 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 80097b6:	4cbb      	ldr	r4, [pc, #748]	; (8009aa4 <ParseSnippetCondition+0x37c>)
 80097b8:	7823      	ldrb	r3, [r4, #0]
 80097ba:	49bb      	ldr	r1, [pc, #748]	; (8009aa8 <ParseSnippetCondition+0x380>)
 80097bc:	009a      	lsls	r2, r3, #2
 80097be:	18d0      	adds	r0, r2, r3
 80097c0:	0080      	lsls	r0, r0, #2
 80097c2:	3602      	adds	r6, #2
 80097c4:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 80097c6:	180a      	adds	r2, r1, r0
 80097c8:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 80097ca:	3301      	adds	r3, #1
 80097cc:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 80097ce:	2000      	movs	r0, #0
 80097d0:	e1c6      	b.n	8009b60 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 80097d2:	786e      	ldrb	r6, [r5, #1]
 80097d4:	3e30      	subs	r6, #48	; 0x30
 80097d6:	b2f6      	uxtb	r6, r6
	BOS_Status status = BOS_OK;
 80097d8:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 80097da:	2e06      	cmp	r6, #6
 80097dc:	d900      	bls.n	80097e0 <ParseSnippetCondition+0xb8>
 80097de:	e1bf      	b.n	8009b60 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80097e0:	4ab1      	ldr	r2, [pc, #708]	; (8009aa8 <ParseSnippetCondition+0x380>)
 80097e2:	00a3      	lsls	r3, r4, #2
 80097e4:	1919      	adds	r1, r3, r4
 80097e6:	0089      	lsls	r1, r1, #2
 80097e8:	3001      	adds	r0, #1
 80097ea:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 80097ec:	1853      	adds	r3, r2, r1
 80097ee:	2200      	movs	r2, #0
 80097f0:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 80097f2:	709e      	strb	r6, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 80097f4:	1cef      	adds	r7, r5, #3
 80097f6:	3207      	adds	r2, #7
 80097f8:	49ae      	ldr	r1, [pc, #696]	; (8009ab4 <ParseSnippetCondition+0x38c>)
 80097fa:	0038      	movs	r0, r7
 80097fc:	f008 fd96 	bl	801232c <strncmp>
 8009800:	2800      	cmp	r0, #0
 8009802:	d121      	bne.n	8009848 <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 8009804:	00a3      	lsls	r3, r4, #2
 8009806:	191c      	adds	r4, r3, r4
 8009808:	00a4      	lsls	r4, r4, #2
 800980a:	4ba7      	ldr	r3, [pc, #668]	; (8009aa8 <ParseSnippetCondition+0x380>)
 800980c:	191c      	adds	r4, r3, r4
 800980e:	2305      	movs	r3, #5
 8009810:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8009812:	00f2      	lsls	r2, r6, #3
 8009814:	1992      	adds	r2, r2, r6
 8009816:	4ba8      	ldr	r3, [pc, #672]	; (8009ab8 <ParseSnippetCondition+0x390>)
 8009818:	189b      	adds	r3, r3, r2
 800981a:	7a1b      	ldrb	r3, [r3, #8]
 800981c:	07db      	lsls	r3, r3, #31
 800981e:	d504      	bpl.n	800982a <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8009820:	4aa0      	ldr	r2, [pc, #640]	; (8009aa4 <ParseSnippetCondition+0x37c>)
 8009822:	7813      	ldrb	r3, [r2, #0]
 8009824:	3301      	adds	r3, #1
 8009826:	7013      	strb	r3, [r2, #0]
 8009828:	e19a      	b.n	8009b60 <ParseSnippetCondition+0x438>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 800982a:	2301      	movs	r3, #1
 800982c:	9305      	str	r3, [sp, #20]
 800982e:	2300      	movs	r3, #0
 8009830:	9304      	str	r3, [sp, #16]
 8009832:	9303      	str	r3, [sp, #12]
 8009834:	9302      	str	r3, [sp, #8]
 8009836:	9301      	str	r3, [sp, #4]
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	2200      	movs	r2, #0
 800983c:	2101      	movs	r1, #1
 800983e:	0030      	movs	r0, r6
 8009840:	f7fe fed0 	bl	80085e4 <SetButtonEvents>
				status = BOS_OK;
 8009844:	2000      	movs	r0, #0
 8009846:	e7eb      	b.n	8009820 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 8009848:	220e      	movs	r2, #14
 800984a:	499c      	ldr	r1, [pc, #624]	; (8009abc <ParseSnippetCondition+0x394>)
 800984c:	0038      	movs	r0, r7
 800984e:	f008 fd6d 	bl	801232c <strncmp>
 8009852:	2800      	cmp	r0, #0
 8009854:	d11c      	bne.n	8009890 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 8009856:	00a3      	lsls	r3, r4, #2
 8009858:	191c      	adds	r4, r3, r4
 800985a:	00a4      	lsls	r4, r4, #2
 800985c:	4b92      	ldr	r3, [pc, #584]	; (8009aa8 <ParseSnippetCondition+0x380>)
 800985e:	191c      	adds	r4, r3, r4
 8009860:	2306      	movs	r3, #6
 8009862:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8009864:	00f2      	lsls	r2, r6, #3
 8009866:	1992      	adds	r2, r2, r6
 8009868:	4b93      	ldr	r3, [pc, #588]	; (8009ab8 <ParseSnippetCondition+0x390>)
 800986a:	189b      	adds	r3, r3, r2
 800986c:	7a1b      	ldrb	r3, [r3, #8]
 800986e:	079b      	lsls	r3, r3, #30
 8009870:	d4d6      	bmi.n	8009820 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8009872:	2301      	movs	r3, #1
 8009874:	9305      	str	r3, [sp, #20]
 8009876:	2300      	movs	r3, #0
 8009878:	9304      	str	r3, [sp, #16]
 800987a:	9303      	str	r3, [sp, #12]
 800987c:	9302      	str	r3, [sp, #8]
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	2201      	movs	r2, #1
 8009884:	2100      	movs	r1, #0
 8009886:	0030      	movs	r0, r6
 8009888:	f7fe feac 	bl	80085e4 <SetButtonEvents>
				status = BOS_OK;					
 800988c:	2000      	movs	r0, #0
 800988e:	e7c7      	b.n	8009820 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 8009890:	220c      	movs	r2, #12
 8009892:	498b      	ldr	r1, [pc, #556]	; (8009ac0 <ParseSnippetCondition+0x398>)
 8009894:	0038      	movs	r0, r7
 8009896:	f008 fd49 	bl	801232c <strncmp>
 800989a:	2800      	cmp	r0, #0
 800989c:	d17a      	bne.n	8009994 <ParseSnippetCondition+0x26c>
				if (!button[port].pressedX1Sec) {	
 800989e:	00f2      	lsls	r2, r6, #3
 80098a0:	1992      	adds	r2, r2, r6
 80098a2:	4b85      	ldr	r3, [pc, #532]	; (8009ab8 <ParseSnippetCondition+0x390>)
 80098a4:	189b      	adds	r3, r3, r2
 80098a6:	789b      	ldrb	r3, [r3, #2]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d030      	beq.n	800990e <ParseSnippetCondition+0x1e6>
				} else if (!button[port].pressedX2Sec) {	
 80098ac:	00f2      	lsls	r2, r6, #3
 80098ae:	1992      	adds	r2, r2, r6
 80098b0:	4b81      	ldr	r3, [pc, #516]	; (8009ab8 <ParseSnippetCondition+0x390>)
 80098b2:	189b      	adds	r3, r3, r2
 80098b4:	78db      	ldrb	r3, [r3, #3]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d04a      	beq.n	8009950 <ParseSnippetCondition+0x228>
				} else if (!button[port].pressedX3Sec) {	
 80098ba:	00f2      	lsls	r2, r6, #3
 80098bc:	1992      	adds	r2, r2, r6
 80098be:	4b7e      	ldr	r3, [pc, #504]	; (8009ab8 <ParseSnippetCondition+0x390>)
 80098c0:	189b      	adds	r3, r3, r2
 80098c2:	791b      	ldrb	r3, [r3, #4]
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 80098c4:	200c      	movs	r0, #12
				} else if (!button[port].pressedX3Sec) {	
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1aa      	bne.n	8009820 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 80098ca:	4f77      	ldr	r7, [pc, #476]	; (8009aa8 <ParseSnippetCondition+0x380>)
 80098cc:	00a3      	lsls	r3, r4, #2
 80098ce:	191b      	adds	r3, r3, r4
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	18fb      	adds	r3, r7, r3
 80098d4:	220b      	movs	r2, #11
 80098d6:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 80098d8:	0028      	movs	r0, r5
 80098da:	300f      	adds	r0, #15
 80098dc:	f008 fb63 	bl	8011fa6 <atoi>
 80098e0:	b2c0      	uxtb	r0, r0
 80098e2:	4b70      	ldr	r3, [pc, #448]	; (8009aa4 <ParseSnippetCondition+0x37c>)
 80098e4:	781a      	ldrb	r2, [r3, #0]
 80098e6:	0093      	lsls	r3, r2, #2
 80098e8:	189b      	adds	r3, r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	18ff      	adds	r7, r7, r3
 80098ee:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 80098f0:	2301      	movs	r3, #1
 80098f2:	9305      	str	r3, [sp, #20]
 80098f4:	2300      	movs	r3, #0
 80098f6:	9304      	str	r3, [sp, #16]
 80098f8:	9303      	str	r3, [sp, #12]
 80098fa:	9302      	str	r3, [sp, #8]
 80098fc:	9001      	str	r0, [sp, #4]
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	2200      	movs	r2, #0
 8009902:	2100      	movs	r1, #0
 8009904:	0030      	movs	r0, r6
 8009906:	f7fe fe6d 	bl	80085e4 <SetButtonEvents>
					status = BOS_OK;	
 800990a:	2000      	movs	r0, #0
 800990c:	e788      	b.n	8009820 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 800990e:	4f66      	ldr	r7, [pc, #408]	; (8009aa8 <ParseSnippetCondition+0x380>)
 8009910:	00a3      	lsls	r3, r4, #2
 8009912:	191b      	adds	r3, r3, r4
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	18fb      	adds	r3, r7, r3
 8009918:	2209      	movs	r2, #9
 800991a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 800991c:	0028      	movs	r0, r5
 800991e:	300f      	adds	r0, #15
 8009920:	f008 fb41 	bl	8011fa6 <atoi>
 8009924:	b2c3      	uxtb	r3, r0
 8009926:	4a5f      	ldr	r2, [pc, #380]	; (8009aa4 <ParseSnippetCondition+0x37c>)
 8009928:	7811      	ldrb	r1, [r2, #0]
 800992a:	008a      	lsls	r2, r1, #2
 800992c:	1852      	adds	r2, r2, r1
 800992e:	0092      	lsls	r2, r2, #2
 8009930:	18bf      	adds	r7, r7, r2
 8009932:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8009934:	2201      	movs	r2, #1
 8009936:	9205      	str	r2, [sp, #20]
 8009938:	2200      	movs	r2, #0
 800993a:	9204      	str	r2, [sp, #16]
 800993c:	9203      	str	r2, [sp, #12]
 800993e:	9202      	str	r2, [sp, #8]
 8009940:	9201      	str	r2, [sp, #4]
 8009942:	9200      	str	r2, [sp, #0]
 8009944:	2100      	movs	r1, #0
 8009946:	0030      	movs	r0, r6
 8009948:	f7fe fe4c 	bl	80085e4 <SetButtonEvents>
					status = BOS_OK;
 800994c:	2000      	movs	r0, #0
 800994e:	e767      	b.n	8009820 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 8009950:	4f55      	ldr	r7, [pc, #340]	; (8009aa8 <ParseSnippetCondition+0x380>)
 8009952:	00a3      	lsls	r3, r4, #2
 8009954:	191b      	adds	r3, r3, r4
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	18fb      	adds	r3, r7, r3
 800995a:	220a      	movs	r2, #10
 800995c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 800995e:	0028      	movs	r0, r5
 8009960:	300f      	adds	r0, #15
 8009962:	f008 fb20 	bl	8011fa6 <atoi>
 8009966:	b2c0      	uxtb	r0, r0
 8009968:	4b4e      	ldr	r3, [pc, #312]	; (8009aa4 <ParseSnippetCondition+0x37c>)
 800996a:	781a      	ldrb	r2, [r3, #0]
 800996c:	0093      	lsls	r3, r2, #2
 800996e:	189b      	adds	r3, r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	18ff      	adds	r7, r7, r3
 8009974:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8009976:	2301      	movs	r3, #1
 8009978:	9305      	str	r3, [sp, #20]
 800997a:	2300      	movs	r3, #0
 800997c:	9304      	str	r3, [sp, #16]
 800997e:	9303      	str	r3, [sp, #12]
 8009980:	9302      	str	r3, [sp, #8]
 8009982:	9301      	str	r3, [sp, #4]
 8009984:	9000      	str	r0, [sp, #0]
 8009986:	2200      	movs	r2, #0
 8009988:	2100      	movs	r1, #0
 800998a:	0030      	movs	r0, r6
 800998c:	f7fe fe2a 	bl	80085e4 <SetButtonEvents>
					status = BOS_OK;		
 8009990:	2000      	movs	r0, #0
 8009992:	e745      	b.n	8009820 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8009994:	220d      	movs	r2, #13
 8009996:	494b      	ldr	r1, [pc, #300]	; (8009ac4 <ParseSnippetCondition+0x39c>)
 8009998:	0038      	movs	r0, r7
 800999a:	f008 fcc7 	bl	801232c <strncmp>
 800999e:	0003      	movs	r3, r0
	BOS_Status status = BOS_OK;
 80099a0:	2000      	movs	r0, #0
			else if (!strncmp((char *)&string[3], "released for ", 13))
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d000      	beq.n	80099a8 <ParseSnippetCondition+0x280>
 80099a6:	e73b      	b.n	8009820 <ParseSnippetCondition+0xf8>
				if (!button[port].releasedY1Sec) {	
 80099a8:	00f2      	lsls	r2, r6, #3
 80099aa:	1992      	adds	r2, r2, r6
 80099ac:	4b42      	ldr	r3, [pc, #264]	; (8009ab8 <ParseSnippetCondition+0x390>)
 80099ae:	189b      	adds	r3, r3, r2
 80099b0:	795b      	ldrb	r3, [r3, #5]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d031      	beq.n	8009a1a <ParseSnippetCondition+0x2f2>
				} else if (!button[port].releasedY2Sec) {	
 80099b6:	00f2      	lsls	r2, r6, #3
 80099b8:	1992      	adds	r2, r2, r6
 80099ba:	4b3f      	ldr	r3, [pc, #252]	; (8009ab8 <ParseSnippetCondition+0x390>)
 80099bc:	189b      	adds	r3, r3, r2
 80099be:	799b      	ldrb	r3, [r3, #6]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d04c      	beq.n	8009a5e <ParseSnippetCondition+0x336>
				} else if (!button[port].releasedY3Sec) {	
 80099c4:	00f2      	lsls	r2, r6, #3
 80099c6:	1992      	adds	r2, r2, r6
 80099c8:	4b3b      	ldr	r3, [pc, #236]	; (8009ab8 <ParseSnippetCondition+0x390>)
 80099ca:	189b      	adds	r3, r3, r2
 80099cc:	79db      	ldrb	r3, [r3, #7]
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 80099ce:	200d      	movs	r0, #13
				} else if (!button[port].releasedY3Sec) {	
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d000      	beq.n	80099d6 <ParseSnippetCondition+0x2ae>
 80099d4:	e724      	b.n	8009820 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 80099d6:	4f34      	ldr	r7, [pc, #208]	; (8009aa8 <ParseSnippetCondition+0x380>)
 80099d8:	3314      	adds	r3, #20
 80099da:	4698      	mov	r8, r3
 80099dc:	435c      	muls	r4, r3
 80099de:	193c      	adds	r4, r7, r4
 80099e0:	3b06      	subs	r3, #6
 80099e2:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 80099e4:	0028      	movs	r0, r5
 80099e6:	3010      	adds	r0, #16
 80099e8:	f008 fadd 	bl	8011fa6 <atoi>
 80099ec:	b2c0      	uxtb	r0, r0
 80099ee:	4b2d      	ldr	r3, [pc, #180]	; (8009aa4 <ParseSnippetCondition+0x37c>)
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	4642      	mov	r2, r8
 80099f4:	4353      	muls	r3, r2
 80099f6:	18ff      	adds	r7, r7, r3
 80099f8:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 80099fa:	2301      	movs	r3, #1
 80099fc:	9305      	str	r3, [sp, #20]
 80099fe:	9004      	str	r0, [sp, #16]
 8009a00:	2400      	movs	r4, #0
 8009a02:	9403      	str	r4, [sp, #12]
 8009a04:	9402      	str	r4, [sp, #8]
 8009a06:	9401      	str	r4, [sp, #4]
 8009a08:	9400      	str	r4, [sp, #0]
 8009a0a:	0023      	movs	r3, r4
 8009a0c:	0022      	movs	r2, r4
 8009a0e:	0021      	movs	r1, r4
 8009a10:	0030      	movs	r0, r6
 8009a12:	f7fe fde7 	bl	80085e4 <SetButtonEvents>
					status = BOS_OK;	
 8009a16:	0020      	movs	r0, r4
 8009a18:	e702      	b.n	8009820 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 8009a1a:	4f23      	ldr	r7, [pc, #140]	; (8009aa8 <ParseSnippetCondition+0x380>)
 8009a1c:	00a3      	lsls	r3, r4, #2
 8009a1e:	191b      	adds	r3, r3, r4
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	18fb      	adds	r3, r7, r3
 8009a24:	220c      	movs	r2, #12
 8009a26:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8009a28:	0028      	movs	r0, r5
 8009a2a:	3010      	adds	r0, #16
 8009a2c:	f008 fabb 	bl	8011fa6 <atoi>
 8009a30:	b2c0      	uxtb	r0, r0
 8009a32:	4b1c      	ldr	r3, [pc, #112]	; (8009aa4 <ParseSnippetCondition+0x37c>)
 8009a34:	781a      	ldrb	r2, [r3, #0]
 8009a36:	0093      	lsls	r3, r2, #2
 8009a38:	189b      	adds	r3, r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	18ff      	adds	r7, r7, r3
 8009a3e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 8009a40:	2301      	movs	r3, #1
 8009a42:	9305      	str	r3, [sp, #20]
 8009a44:	2300      	movs	r3, #0
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	9303      	str	r3, [sp, #12]
 8009a4a:	9002      	str	r0, [sp, #8]
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	2200      	movs	r2, #0
 8009a52:	2100      	movs	r1, #0
 8009a54:	0030      	movs	r0, r6
 8009a56:	f7fe fdc5 	bl	80085e4 <SetButtonEvents>
					status = BOS_OK;
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	e6e0      	b.n	8009820 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 8009a5e:	4f12      	ldr	r7, [pc, #72]	; (8009aa8 <ParseSnippetCondition+0x380>)
 8009a60:	00a3      	lsls	r3, r4, #2
 8009a62:	191b      	adds	r3, r3, r4
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	18fb      	adds	r3, r7, r3
 8009a68:	220d      	movs	r2, #13
 8009a6a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8009a6c:	0028      	movs	r0, r5
 8009a6e:	3010      	adds	r0, #16
 8009a70:	f008 fa99 	bl	8011fa6 <atoi>
 8009a74:	b2c0      	uxtb	r0, r0
 8009a76:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <ParseSnippetCondition+0x37c>)
 8009a78:	781a      	ldrb	r2, [r3, #0]
 8009a7a:	0093      	lsls	r3, r2, #2
 8009a7c:	189b      	adds	r3, r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	18ff      	adds	r7, r7, r3
 8009a82:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 8009a84:	2301      	movs	r3, #1
 8009a86:	9305      	str	r3, [sp, #20]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	9003      	str	r0, [sp, #12]
 8009a8e:	9302      	str	r3, [sp, #8]
 8009a90:	9301      	str	r3, [sp, #4]
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	2200      	movs	r2, #0
 8009a96:	2100      	movs	r1, #0
 8009a98:	0030      	movs	r0, r6
 8009a9a:	f7fe fda3 	bl	80085e4 <SetButtonEvents>
					status = BOS_OK;		
 8009a9e:	2000      	movs	r0, #0
 8009aa0:	e6be      	b.n	8009820 <ParseSnippetCondition+0xf8>
 8009aa2:	46c0      	nop			; (mov r8, r8)
 8009aa4:	20000ddb 	.word	0x20000ddb
 8009aa8:	200061d8 	.word	0x200061d8
 8009aac:	20000d40 	.word	0x20000d40
 8009ab0:	0801678c 	.word	0x0801678c
 8009ab4:	080177c0 	.word	0x080177c0
 8009ab8:	20000664 	.word	0x20000664
 8009abc:	080189d0 	.word	0x080189d0
 8009ac0:	080189e0 	.word	0x080189e0
 8009ac4:	080189f0 	.word	0x080189f0
			else if (secondPart != NULL && thirdPart != NULL) 
 8009ac8:	2e00      	cmp	r6, #0
 8009aca:	d04f      	beq.n	8009b6c <ParseSnippetCondition+0x444>
 8009acc:	2c00      	cmp	r4, #0
 8009ace:	d04f      	beq.n	8009b70 <ParseSnippetCondition+0x448>
				modPar2 = IsModuleParameter(thirdPart);
 8009ad0:	0020      	movs	r0, r4
 8009ad2:	f7fa fc3d 	bl	8004350 <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d024      	beq.n	8009b24 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8009ada:	4b27      	ldr	r3, [pc, #156]	; (8009b78 <ParseSnippetCondition+0x450>)
 8009adc:	781c      	ldrb	r4, [r3, #0]
 8009ade:	4a27      	ldr	r2, [pc, #156]	; (8009b7c <ParseSnippetCondition+0x454>)
 8009ae0:	00a3      	lsls	r3, r4, #2
 8009ae2:	1919      	adds	r1, r3, r4
 8009ae4:	0089      	lsls	r1, r1, #2
 8009ae6:	2704      	movs	r7, #4
 8009ae8:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8009aea:	1919      	adds	r1, r3, r4
 8009aec:	0089      	lsls	r1, r1, #2
 8009aee:	1851      	adds	r1, r2, r1
 8009af0:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 8009af2:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8009af4:	4d20      	ldr	r5, [pc, #128]	; (8009b78 <ParseSnippetCondition+0x450>)
 8009af6:	782c      	ldrb	r4, [r5, #0]
 8009af8:	0030      	movs	r0, r6
 8009afa:	f7fa fc35 	bl	8004368 <IsMathOperator>
 8009afe:	491f      	ldr	r1, [pc, #124]	; (8009b7c <ParseSnippetCondition+0x454>)
 8009b00:	00a3      	lsls	r3, r4, #2
 8009b02:	191b      	adds	r3, r3, r4
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	18cb      	adds	r3, r1, r3
 8009b08:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 8009b0a:	782a      	ldrb	r2, [r5, #0]
 8009b0c:	0093      	lsls	r3, r2, #2
 8009b0e:	189b      	adds	r3, r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	18cb      	adds	r3, r1, r3
 8009b14:	785b      	ldrb	r3, [r3, #1]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d02c      	beq.n	8009b74 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8009b1a:	3201      	adds	r2, #1
 8009b1c:	4b16      	ldr	r3, [pc, #88]	; (8009b78 <ParseSnippetCondition+0x450>)
 8009b1e:	701a      	strb	r2, [r3, #0]
				return BOS_OK;				
 8009b20:	2000      	movs	r0, #0
 8009b22:	e01d      	b.n	8009b60 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8009b24:	4b14      	ldr	r3, [pc, #80]	; (8009b78 <ParseSnippetCondition+0x450>)
 8009b26:	4698      	mov	r8, r3
 8009b28:	781a      	ldrb	r2, [r3, #0]
 8009b2a:	4f14      	ldr	r7, [pc, #80]	; (8009b7c <ParseSnippetCondition+0x454>)
 8009b2c:	0093      	lsls	r3, r2, #2
 8009b2e:	1899      	adds	r1, r3, r2
 8009b30:	0089      	lsls	r1, r1, #2
 8009b32:	2003      	movs	r0, #3
 8009b34:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8009b36:	187b      	adds	r3, r7, r1
 8009b38:	70dd      	strb	r5, [r3, #3]
					float constant = atof(thirdPart);
 8009b3a:	0020      	movs	r0, r4
 8009b3c:	f008 fa2e 	bl	8011f9c <atof>
 8009b40:	f7f9 f84c 	bl	8002bdc <__aeabi_d2f>
 8009b44:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8009b46:	4643      	mov	r3, r8
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	0098      	lsls	r0, r3, #2
 8009b4c:	18c0      	adds	r0, r0, r3
 8009b4e:	0080      	lsls	r0, r0, #2
 8009b50:	3006      	adds	r0, #6
 8009b52:	19c0      	adds	r0, r0, r7
 8009b54:	2204      	movs	r2, #4
 8009b56:	a907      	add	r1, sp, #28
 8009b58:	f008 fa9d 	bl	8012096 <memcpy>
 8009b5c:	e7ca      	b.n	8009af4 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8009b5e:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8009b60:	b008      	add	sp, #32
 8009b62:	bc04      	pop	{r2}
 8009b64:	4690      	mov	r8, r2
 8009b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8009b68:	2067      	movs	r0, #103	; 0x67
 8009b6a:	e7f9      	b.n	8009b60 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8009b6c:	2067      	movs	r0, #103	; 0x67
 8009b6e:	e7f7      	b.n	8009b60 <ParseSnippetCondition+0x438>
 8009b70:	2067      	movs	r0, #103	; 0x67
 8009b72:	e7f5      	b.n	8009b60 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8009b74:	2067      	movs	r0, #103	; 0x67
 8009b76:	e7f3      	b.n	8009b60 <ParseSnippetCondition+0x438>
 8009b78:	20000ddb 	.word	0x20000ddb
 8009b7c:	200061d8 	.word	0x200061d8

08009b80 <AddSnippet>:
{
 8009b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b82:	000c      	movs	r4, r1
	switch (code)
 8009b84:	2802      	cmp	r0, #2
 8009b86:	d017      	beq.n	8009bb8 <AddSnippet+0x38>
 8009b88:	2803      	cmp	r0, #3
 8009b8a:	d003      	beq.n	8009b94 <AddSnippet+0x14>
 8009b8c:	2801      	cmp	r0, #1
 8009b8e:	d00f      	beq.n	8009bb0 <AddSnippet+0x30>
	return BOS_OK;
 8009b90:	2000      	movs	r0, #0
 8009b92:	e00c      	b.n	8009bae <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets-1].state = true;
 8009b94:	4b35      	ldr	r3, [pc, #212]	; (8009c6c <AddSnippet+0xec>)
 8009b96:	781a      	ldrb	r2, [r3, #0]
 8009b98:	3a01      	subs	r2, #1
 8009b9a:	0093      	lsls	r3, r2, #2
 8009b9c:	189b      	adds	r3, r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4a33      	ldr	r2, [pc, #204]	; (8009c70 <AddSnippet+0xf0>)
 8009ba2:	18d3      	adds	r3, r2, r3
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8009ba8:	f7f9 fd38 	bl	800361c <SaveToRO>
	return BOS_OK;
 8009bac:	2000      	movs	r0, #0
}
 8009bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8009bb0:	0008      	movs	r0, r1
 8009bb2:	f7ff fdb9 	bl	8009728 <ParseSnippetCondition>
 8009bb6:	e7fa      	b.n	8009bae <AddSnippet+0x2e>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 8009bb8:	4b2c      	ldr	r3, [pc, #176]	; (8009c6c <AddSnippet+0xec>)
 8009bba:	781d      	ldrb	r5, [r3, #0]
 8009bbc:	3d01      	subs	r5, #1
 8009bbe:	00ab      	lsls	r3, r5, #2
 8009bc0:	195b      	adds	r3, r3, r5
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4a2a      	ldr	r2, [pc, #168]	; (8009c70 <AddSnippet+0xf0>)
 8009bc6:	18d3      	adds	r3, r2, r3
 8009bc8:	68de      	ldr	r6, [r3, #12]
 8009bca:	2e00      	cmp	r6, #0
 8009bcc:	d03d      	beq.n	8009c4a <AddSnippet+0xca>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 8009bce:	0030      	movs	r0, r6
 8009bd0:	f7f6 faa2 	bl	8000118 <strlen>
 8009bd4:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 8009bd6:	0020      	movs	r0, r4
 8009bd8:	f7f6 fa9e 	bl	8000118 <strlen>
 8009bdc:	1839      	adds	r1, r7, r0
 8009bde:	3102      	adds	r1, #2
 8009be0:	0030      	movs	r0, r6
 8009be2:	f008 fb43 	bl	801226c <realloc>
 8009be6:	4e22      	ldr	r6, [pc, #136]	; (8009c70 <AddSnippet+0xf0>)
 8009be8:	00ab      	lsls	r3, r5, #2
 8009bea:	195d      	adds	r5, r3, r5
 8009bec:	00ad      	lsls	r5, r5, #2
 8009bee:	1975      	adds	r5, r6, r5
 8009bf0:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 8009bf2:	4d1e      	ldr	r5, [pc, #120]	; (8009c6c <AddSnippet+0xec>)
 8009bf4:	782a      	ldrb	r2, [r5, #0]
 8009bf6:	3a01      	subs	r2, #1
 8009bf8:	0093      	lsls	r3, r2, #2
 8009bfa:	189b      	adds	r3, r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	18f3      	adds	r3, r6, r3
 8009c00:	1c7a      	adds	r2, r7, #1
 8009c02:	68d8      	ldr	r0, [r3, #12]
 8009c04:	1880      	adds	r0, r0, r2
 8009c06:	0021      	movs	r1, r4
 8009c08:	f008 fb88 	bl	801231c <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 8009c0c:	782a      	ldrb	r2, [r5, #0]
 8009c0e:	3a01      	subs	r2, #1
 8009c10:	0093      	lsls	r3, r2, #2
 8009c12:	189b      	adds	r3, r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	18f6      	adds	r6, r6, r3
 8009c18:	68f3      	ldr	r3, [r6, #12]
 8009c1a:	2213      	movs	r2, #19
 8009c1c:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8009c1e:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <AddSnippet+0xec>)
 8009c20:	781a      	ldrb	r2, [r3, #0]
 8009c22:	3a01      	subs	r2, #1
 8009c24:	0093      	lsls	r3, r2, #2
 8009c26:	189b      	adds	r3, r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4911      	ldr	r1, [pc, #68]	; (8009c70 <AddSnippet+0xf0>)
 8009c2c:	18cb      	adds	r3, r1, r3
 8009c2e:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8009c30:	2000      	movs	r0, #0
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1bb      	bne.n	8009bae <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 8009c36:	0090      	lsls	r0, r2, #2
 8009c38:	1880      	adds	r0, r0, r2
 8009c3a:	0080      	lsls	r0, r0, #2
 8009c3c:	1840      	adds	r0, r0, r1
 8009c3e:	2214      	movs	r2, #20
 8009c40:	2100      	movs	r1, #0
 8009c42:	f008 fa31 	bl	80120a8 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8009c46:	200e      	movs	r0, #14
 8009c48:	e7b1      	b.n	8009bae <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 8009c4a:	0008      	movs	r0, r1
 8009c4c:	f7f6 fa64 	bl	8000118 <strlen>
 8009c50:	3001      	adds	r0, #1
 8009c52:	f008 f9eb 	bl	801202c <malloc>
 8009c56:	00ab      	lsls	r3, r5, #2
 8009c58:	195d      	adds	r5, r3, r5
 8009c5a:	00ad      	lsls	r5, r5, #2
 8009c5c:	4b04      	ldr	r3, [pc, #16]	; (8009c70 <AddSnippet+0xf0>)
 8009c5e:	195d      	adds	r5, r3, r5
 8009c60:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 8009c62:	0021      	movs	r1, r4
 8009c64:	f008 fb5a 	bl	801231c <strcpy>
 8009c68:	e7d9      	b.n	8009c1e <AddSnippet+0x9e>
 8009c6a:	46c0      	nop			; (mov r8, r8)
 8009c6c:	20000ddb 	.word	0x20000ddb
 8009c70:	200061d8 	.word	0x200061d8

08009c74 <CLI_CommandParser>:
{
 8009c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c76:	46de      	mov	lr, fp
 8009c78:	4657      	mov	r7, sl
 8009c7a:	464e      	mov	r6, r9
 8009c7c:	4645      	mov	r5, r8
 8009c7e:	b5e0      	push	{r5, r6, r7, lr}
 8009c80:	b08b      	sub	sp, #44	; 0x2c
 8009c82:	9004      	str	r0, [sp, #16]
 8009c84:	4688      	mov	r8, r1
 8009c86:	9203      	str	r2, [sp, #12]
 8009c88:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 8009c8a:	2209      	movs	r2, #9
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	a807      	add	r0, sp, #28
 8009c90:	f008 fa0a 	bl	80120a8 <memset>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8009c94:	4fd5      	ldr	r7, [pc, #852]	; (8009fec <CLI_CommandParser+0x378>)
				if (id == myID) {
 8009c96:	002e      	movs	r6, r5
 8009c98:	e034      	b.n	8009d04 <CLI_CommandParser+0x90>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8009c9a:	2252      	movs	r2, #82	; 0x52
 8009c9c:	49d4      	ldr	r1, [pc, #848]	; (8009ff0 <CLI_CommandParser+0x37c>)
 8009c9e:	0020      	movs	r0, r4
 8009ca0:	f008 f9f9 	bl	8012096 <memcpy>
				recordSnippet = 0;
 8009ca4:	4bd1      	ldr	r3, [pc, #836]	; (8009fec <CLI_CommandParser+0x378>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	701a      	strb	r2, [r3, #0]
 8009caa:	e044      	b.n	8009d36 <CLI_CommandParser+0xc2>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 8009cac:	2206      	movs	r2, #6
 8009cae:	49d1      	ldr	r1, [pc, #836]	; (8009ff4 <CLI_CommandParser+0x380>)
 8009cb0:	9803      	ldr	r0, [sp, #12]
 8009cb2:	f008 fb3b 	bl	801232c <strncmp>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d053      	beq.n	8009d62 <CLI_CommandParser+0xee>
		else if (recordSnippet == SNIPPET_COMMANDS)
 8009cba:	2d02      	cmp	r5, #2
 8009cbc:	d05e      	beq.n	8009d7c <CLI_CommandParser+0x108>
			loc = strchr( ( char * ) cInputString, '.');
 8009cbe:	212e      	movs	r1, #46	; 0x2e
 8009cc0:	9803      	ldr	r0, [sp, #12]
 8009cc2:	f008 fb1d 	bl	8012300 <strchr>
 8009cc6:	1e05      	subs	r5, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 8009cc8:	d006      	beq.n	8009cd8 <CLI_CommandParser+0x64>
 8009cca:	3803      	subs	r0, #3
 8009ccc:	2203      	movs	r2, #3
 8009cce:	49ca      	ldr	r1, [pc, #808]	; (8009ff8 <CLI_CommandParser+0x384>)
 8009cd0:	f008 fb2c 	bl	801232c <strncmp>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d160      	bne.n	8009d9a <CLI_CommandParser+0x126>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8009cd8:	2299      	movs	r2, #153	; 0x99
 8009cda:	0092      	lsls	r2, r2, #2
 8009cdc:	0021      	movs	r1, r4
 8009cde:	9803      	ldr	r0, [sp, #12]
 8009ce0:	f004 fbce 	bl	800e480 <FreeRTOS_CLIProcessCommand>
 8009ce4:	0006      	movs	r6, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8009ce6:	7823      	ldrb	r3, [r4, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d000      	beq.n	8009cee <CLI_CommandParser+0x7a>
 8009cec:	e16f      	b.n	8009fce <CLI_CommandParser+0x35a>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8009cee:	0020      	movs	r0, r4
 8009cf0:	f7f6 fa12 	bl	8000118 <strlen>
 8009cf4:	0002      	movs	r2, r0
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	0020      	movs	r0, r4
 8009cfa:	f008 f9d5 	bl	80120a8 <memset>
	} while( xReturned != pdFALSE );
 8009cfe:	2e00      	cmp	r6, #0
 8009d00:	d100      	bne.n	8009d04 <CLI_CommandParser+0x90>
 8009d02:	e1ab      	b.n	800a05c <CLI_CommandParser+0x3e8>
		StringToLowerCase(( char * )cInputString);
 8009d04:	9803      	ldr	r0, [sp, #12]
 8009d06:	f7ff fcf7 	bl	80096f8 <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8009d0a:	783d      	ldrb	r5, [r7, #0]
 8009d0c:	2d00      	cmp	r5, #0
 8009d0e:	d1cd      	bne.n	8009cac <CLI_CommandParser+0x38>
 8009d10:	2203      	movs	r2, #3
 8009d12:	49ba      	ldr	r1, [pc, #744]	; (8009ffc <CLI_CommandParser+0x388>)
 8009d14:	9803      	ldr	r0, [sp, #12]
 8009d16:	f008 fb09 	bl	801232c <strncmp>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d1cf      	bne.n	8009cbe <CLI_CommandParser+0x4a>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 8009d1e:	9b03      	ldr	r3, [sp, #12]
 8009d20:	1cd9      	adds	r1, r3, #3
 8009d22:	3001      	adds	r0, #1
 8009d24:	f7ff ff2c 	bl	8009b80 <AddSnippet>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d1b6      	bne.n	8009c9a <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8009d2c:	4baf      	ldr	r3, [pc, #700]	; (8009fec <CLI_CommandParser+0x378>)
 8009d2e:	2202      	movs	r2, #2
 8009d30:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 8009d32:	230d      	movs	r3, #13
 8009d34:	7023      	strb	r3, [r4, #0]
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8009d36:	7823      	ldrb	r3, [r4, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d100      	bne.n	8009d3e <CLI_CommandParser+0xca>
 8009d3c:	e186      	b.n	800a04c <CLI_CommandParser+0x3d8>
 8009d3e:	4643      	mov	r3, r8
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d100      	bne.n	8009d46 <CLI_CommandParser+0xd2>
 8009d44:	e19d      	b.n	800a082 <CLI_CommandParser+0x40e>
 8009d46:	2600      	movs	r6, #0
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 8009d48:	0020      	movs	r0, r4
 8009d4a:	f7f6 f9e5 	bl	8000118 <strlen>
 8009d4e:	b282      	uxth	r2, r0
 8009d50:	2301      	movs	r3, #1
 8009d52:	425b      	negs	r3, r3
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	3333      	adds	r3, #51	; 0x33
 8009d58:	0021      	movs	r1, r4
 8009d5a:	9804      	ldr	r0, [sp, #16]
 8009d5c:	f004 fa22 	bl	800e1a4 <writePxMutex>
 8009d60:	e7c5      	b.n	8009cee <CLI_CommandParser+0x7a>
			recordSnippet = 0;
 8009d62:	4ba2      	ldr	r3, [pc, #648]	; (8009fec <CLI_CommandParser+0x378>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 8009d68:	49a5      	ldr	r1, [pc, #660]	; (800a000 <CLI_CommandParser+0x38c>)
 8009d6a:	3003      	adds	r0, #3
 8009d6c:	f7ff ff08 	bl	8009b80 <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 8009d70:	2241      	movs	r2, #65	; 0x41
 8009d72:	49a4      	ldr	r1, [pc, #656]	; (800a004 <CLI_CommandParser+0x390>)
 8009d74:	0020      	movs	r0, r4
 8009d76:	f008 f98e 	bl	8012096 <memcpy>
			xReturned = pdFALSE;
 8009d7a:	e7dc      	b.n	8009d36 <CLI_CommandParser+0xc2>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 8009d7c:	9903      	ldr	r1, [sp, #12]
 8009d7e:	2002      	movs	r0, #2
 8009d80:	f7ff fefe 	bl	8009b80 <AddSnippet>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d102      	bne.n	8009d8e <CLI_CommandParser+0x11a>
				pcOutputString[0] = '\r';
 8009d88:	230d      	movs	r3, #13
 8009d8a:	7023      	strb	r3, [r4, #0]
 8009d8c:	e7d3      	b.n	8009d36 <CLI_CommandParser+0xc2>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8009d8e:	2252      	movs	r2, #82	; 0x52
 8009d90:	4997      	ldr	r1, [pc, #604]	; (8009ff0 <CLI_CommandParser+0x37c>)
 8009d92:	0020      	movs	r0, r4
 8009d94:	f008 f97f 	bl	8012096 <memcpy>
 8009d98:	e7cd      	b.n	8009d36 <CLI_CommandParser+0xc2>
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 8009d9a:	f008 f939 	bl	8012010 <__locale_ctype_ptr>
 8009d9e:	786b      	ldrb	r3, [r5, #1]
 8009da0:	18c0      	adds	r0, r0, r3
 8009da2:	7843      	ldrb	r3, [r0, #1]
 8009da4:	075b      	lsls	r3, r3, #29
 8009da6:	d497      	bmi.n	8009cd8 <CLI_CommandParser+0x64>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 8009da8:	9903      	ldr	r1, [sp, #12]
 8009daa:	1a6a      	subs	r2, r5, r1
 8009dac:	a807      	add	r0, sp, #28
 8009dae:	f008 face 	bl	801234e <strncpy>
				id = GetID(idString);
 8009db2:	a807      	add	r0, sp, #28
 8009db4:	f7fc f946 	bl	8006044 <GetID>
 8009db8:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 8009dba:	4a93      	ldr	r2, [pc, #588]	; (800a008 <CLI_CommandParser+0x394>)
 8009dbc:	7812      	ldrb	r2, [r2, #0]
 8009dbe:	4693      	mov	fp, r2
 8009dc0:	4290      	cmp	r0, r2
 8009dc2:	d03d      	beq.n	8009e40 <CLI_CommandParser+0x1cc>
				}	else if (id == BOS_ERR_WrongName) {		
 8009dc4:	2864      	cmp	r0, #100	; 0x64
 8009dc6:	d043      	beq.n	8009e50 <CLI_CommandParser+0x1dc>
				}	else if (id == BOS_ERR_WrongID) {
 8009dc8:	2866      	cmp	r0, #102	; 0x66
 8009dca:	d047      	beq.n	8009e5c <CLI_CommandParser+0x1e8>
				}	else if (id == BOS_BROADCAST) {
 8009dcc:	28ff      	cmp	r0, #255	; 0xff
 8009dce:	d04b      	beq.n	8009e68 <CLI_CommandParser+0x1f4>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 8009dd0:	466b      	mov	r3, sp
 8009dd2:	7d1b      	ldrb	r3, [r3, #20]
 8009dd4:	469a      	mov	sl, r3
 8009dd6:	2bfe      	cmp	r3, #254	; 0xfe
 8009dd8:	d078      	beq.n	8009ecc <CLI_CommandParser+0x258>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 8009dda:	3501      	adds	r5, #1
 8009ddc:	2206      	movs	r2, #6
 8009dde:	498b      	ldr	r1, [pc, #556]	; (800a00c <CLI_CommandParser+0x398>)
 8009de0:	0028      	movs	r0, r5
 8009de2:	f008 faa3 	bl	801232c <strncmp>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d000      	beq.n	8009dec <CLI_CommandParser+0x178>
 8009dea:	e0b4      	b.n	8009f56 <CLI_CommandParser+0x2e2>
						BOS.response = BOS_RESPONSE_NONE;				
 8009dec:	4b88      	ldr	r3, [pc, #544]	; (800a010 <CLI_CommandParser+0x39c>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 8009df2:	2119      	movs	r1, #25
 8009df4:	4650      	mov	r0, sl
 8009df6:	f7fb fdf3 	bl	80059e0 <SendMessageToModule>
						osDelay(100);
 8009dfa:	2064      	movs	r0, #100	; 0x64
 8009dfc:	f004 faa9 	bl	800e352 <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 8009e00:	4b84      	ldr	r3, [pc, #528]	; (800a014 <CLI_CommandParser+0x3a0>)
 8009e02:	781a      	ldrb	r2, [r3, #0]
 8009e04:	4b80      	ldr	r3, [pc, #512]	; (800a008 <CLI_CommandParser+0x394>)
 8009e06:	7818      	ldrb	r0, [r3, #0]
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4651      	mov	r1, sl
 8009e0c:	f7fc fd4a 	bl	80068a4 <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 8009e10:	4b7f      	ldr	r3, [pc, #508]	; (800a010 <CLI_CommandParser+0x39c>)
 8009e12:	799b      	ldrb	r3, [r3, #6]
 8009e14:	2b60      	cmp	r3, #96	; 0x60
 8009e16:	d18e      	bne.n	8009d36 <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 8009e18:	21fa      	movs	r1, #250	; 0xfa
 8009e1a:	0089      	lsls	r1, r1, #2
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	f004 fd63 	bl	800e8e8 <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 8009e22:	4b7d      	ldr	r3, [pc, #500]	; (800a018 <CLI_CommandParser+0x3a4>)
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d085      	beq.n	8009d36 <CLI_CommandParser+0xc2>
									++timedoutMsg;
 8009e2a:	4a7c      	ldr	r2, [pc, #496]	; (800a01c <CLI_CommandParser+0x3a8>)
 8009e2c:	8813      	ldrh	r3, [r2, #0]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 8009e32:	9b05      	ldr	r3, [sp, #20]
 8009e34:	0022      	movs	r2, r4
 8009e36:	497a      	ldr	r1, [pc, #488]	; (800a020 <CLI_CommandParser+0x3ac>)
 8009e38:	0020      	movs	r0, r4
 8009e3a:	f008 fa33 	bl	80122a4 <siprintf>
 8009e3e:	e77a      	b.n	8009d36 <CLI_CommandParser+0xc2>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8009e40:	2299      	movs	r2, #153	; 0x99
 8009e42:	1c68      	adds	r0, r5, #1
 8009e44:	0092      	lsls	r2, r2, #2
 8009e46:	0021      	movs	r1, r4
 8009e48:	f004 fb1a 	bl	800e480 <FreeRTOS_CLIProcessCommand>
 8009e4c:	0006      	movs	r6, r0
 8009e4e:	e74a      	b.n	8009ce6 <CLI_CommandParser+0x72>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 8009e50:	2227      	movs	r2, #39	; 0x27
 8009e52:	4974      	ldr	r1, [pc, #464]	; (800a024 <CLI_CommandParser+0x3b0>)
 8009e54:	0020      	movs	r0, r4
 8009e56:	f008 f91e 	bl	8012096 <memcpy>
 8009e5a:	e76c      	b.n	8009d36 <CLI_CommandParser+0xc2>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 8009e5c:	2225      	movs	r2, #37	; 0x25
 8009e5e:	4972      	ldr	r1, [pc, #456]	; (800a028 <CLI_CommandParser+0x3b4>)
 8009e60:	0020      	movs	r0, r4
 8009e62:	f008 f918 	bl	8012096 <memcpy>
 8009e66:	e766      	b.n	8009d36 <CLI_CommandParser+0xc2>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8009e68:	2219      	movs	r2, #25
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	486f      	ldr	r0, [pc, #444]	; (800a02c <CLI_CommandParser+0x3b8>)
 8009e6e:	f008 f91b 	bl	80120a8 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8009e72:	3501      	adds	r5, #1
 8009e74:	9803      	ldr	r0, [sp, #12]
 8009e76:	f7f6 f94f 	bl	8000118 <strlen>
 8009e7a:	0006      	movs	r6, r0
 8009e7c:	ab07      	add	r3, sp, #28
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f7f6 f94a 	bl	8000118 <strlen>
 8009e84:	1e72      	subs	r2, r6, #1
 8009e86:	1a12      	subs	r2, r2, r0
 8009e88:	0029      	movs	r1, r5
 8009e8a:	4869      	ldr	r0, [pc, #420]	; (800a030 <CLI_CommandParser+0x3bc>)
 8009e8c:	f008 fa5f 	bl	801234e <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8009e90:	9803      	ldr	r0, [sp, #12]
 8009e92:	f7f6 f941 	bl	8000118 <strlen>
 8009e96:	0006      	movs	r6, r0
 8009e98:	a807      	add	r0, sp, #28
 8009e9a:	f7f6 f93d 	bl	8000118 <strlen>
 8009e9e:	1a33      	subs	r3, r6, r0
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	2217      	movs	r2, #23
 8009ea4:	21ff      	movs	r1, #255	; 0xff
 8009ea6:	4658      	mov	r0, fp
 8009ea8:	f7fb f912 	bl	80050d0 <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8009eac:	2299      	movs	r2, #153	; 0x99
 8009eae:	0092      	lsls	r2, r2, #2
 8009eb0:	0021      	movs	r1, r4
 8009eb2:	0028      	movs	r0, r5
 8009eb4:	f004 fae4 	bl	800e480 <FreeRTOS_CLIProcessCommand>
 8009eb8:	0006      	movs	r6, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 8009eba:	0020      	movs	r0, r4
 8009ebc:	f7f6 f92c 	bl	8000118 <strlen>
 8009ec0:	1820      	adds	r0, r4, r0
 8009ec2:	221d      	movs	r2, #29
 8009ec4:	495b      	ldr	r1, [pc, #364]	; (800a034 <CLI_CommandParser+0x3c0>)
 8009ec6:	f008 f8e6 	bl	8012096 <memcpy>
 8009eca:	e70c      	b.n	8009ce6 <CLI_CommandParser+0x72>
					group = id >> 8;
 8009ecc:	9b05      	ldr	r3, [sp, #20]
 8009ece:	121b      	asrs	r3, r3, #8
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	469a      	mov	sl, r3
 8009ed4:	4b58      	ldr	r3, [pc, #352]	; (800a038 <CLI_CommandParser+0x3c4>)
 8009ed6:	4699      	mov	r9, r3
 8009ed8:	4652      	mov	r2, sl
 8009eda:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8009edc:	2219      	movs	r2, #25
 8009ede:	2100      	movs	r1, #0
 8009ee0:	4852      	ldr	r0, [pc, #328]	; (800a02c <CLI_CommandParser+0x3b8>)
 8009ee2:	f008 f8e1 	bl	80120a8 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8009ee6:	1c6b      	adds	r3, r5, #1
 8009ee8:	9305      	str	r3, [sp, #20]
 8009eea:	9803      	ldr	r0, [sp, #12]
 8009eec:	f7f6 f914 	bl	8000118 <strlen>
 8009ef0:	0005      	movs	r5, r0
 8009ef2:	aa07      	add	r2, sp, #28
 8009ef4:	0010      	movs	r0, r2
 8009ef6:	f7f6 f90f 	bl	8000118 <strlen>
 8009efa:	3d01      	subs	r5, #1
 8009efc:	1a2a      	subs	r2, r5, r0
 8009efe:	9905      	ldr	r1, [sp, #20]
 8009f00:	484b      	ldr	r0, [pc, #300]	; (800a030 <CLI_CommandParser+0x3bc>)
 8009f02:	f008 fa24 	bl	801234e <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8009f06:	9803      	ldr	r0, [sp, #12]
 8009f08:	f7f6 f906 	bl	8000118 <strlen>
 8009f0c:	0005      	movs	r5, r0
 8009f0e:	a807      	add	r0, sp, #28
 8009f10:	f7f6 f902 	bl	8000118 <strlen>
 8009f14:	1a2b      	subs	r3, r5, r0
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	2217      	movs	r2, #23
 8009f1a:	4651      	mov	r1, sl
 8009f1c:	4658      	mov	r0, fp
 8009f1e:	f7fb f8d7 	bl	80050d0 <BroadcastMessage>
					if (InGroup(myID, group))
 8009f22:	4b39      	ldr	r3, [pc, #228]	; (800a008 <CLI_CommandParser+0x394>)
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	4a44      	ldr	r2, [pc, #272]	; (800a03c <CLI_CommandParser+0x3c8>)
 8009f2c:	5a9b      	ldrh	r3, [r3, r2]
 8009f2e:	464a      	mov	r2, r9
 8009f30:	7812      	ldrb	r2, [r2, #0]
 8009f32:	4113      	asrs	r3, r2
 8009f34:	07db      	lsls	r3, r3, #31
 8009f36:	d406      	bmi.n	8009f46 <CLI_CommandParser+0x2d2>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 8009f38:	ab07      	add	r3, sp, #28
 8009f3a:	0022      	movs	r2, r4
 8009f3c:	4940      	ldr	r1, [pc, #256]	; (800a040 <CLI_CommandParser+0x3cc>)
 8009f3e:	0020      	movs	r0, r4
 8009f40:	f008 f9b0 	bl	80122a4 <siprintf>
 8009f44:	e6cf      	b.n	8009ce6 <CLI_CommandParser+0x72>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8009f46:	2299      	movs	r2, #153	; 0x99
 8009f48:	0092      	lsls	r2, r2, #2
 8009f4a:	0021      	movs	r1, r4
 8009f4c:	9805      	ldr	r0, [sp, #20]
 8009f4e:	f004 fa97 	bl	800e480 <FreeRTOS_CLIProcessCommand>
 8009f52:	0006      	movs	r6, r0
 8009f54:	e7f0      	b.n	8009f38 <CLI_CommandParser+0x2c4>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 8009f56:	9803      	ldr	r0, [sp, #12]
 8009f58:	f7f6 f8de 	bl	8000118 <strlen>
 8009f5c:	0006      	movs	r6, r0
 8009f5e:	ab07      	add	r3, sp, #28
 8009f60:	0018      	movs	r0, r3
 8009f62:	f7f6 f8d9 	bl	8000118 <strlen>
 8009f66:	1e72      	subs	r2, r6, #1
 8009f68:	1a12      	subs	r2, r2, r0
 8009f6a:	0029      	movs	r1, r5
 8009f6c:	4830      	ldr	r0, [pc, #192]	; (800a030 <CLI_CommandParser+0x3bc>)
 8009f6e:	f008 f9ee 	bl	801234e <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 8009f72:	9803      	ldr	r0, [sp, #12]
 8009f74:	f7f6 f8d0 	bl	8000118 <strlen>
 8009f78:	0005      	movs	r5, r0
 8009f7a:	a807      	add	r0, sp, #28
 8009f7c:	f7f6 f8cc 	bl	8000118 <strlen>
 8009f80:	3d01      	subs	r5, #1
 8009f82:	1a2a      	subs	r2, r5, r0
 8009f84:	b292      	uxth	r2, r2
 8009f86:	2117      	movs	r1, #23
 8009f88:	4650      	mov	r0, sl
 8009f8a:	f7fb fd29 	bl	80059e0 <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 8009f8e:	9a05      	ldr	r2, [sp, #20]
 8009f90:	492c      	ldr	r1, [pc, #176]	; (800a044 <CLI_CommandParser+0x3d0>)
 8009f92:	0020      	movs	r0, r4
 8009f94:	f008 f986 	bl	80122a4 <siprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 8009f98:	7823      	ldrb	r3, [r4, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d002      	beq.n	8009fa4 <CLI_CommandParser+0x330>
 8009f9e:	4643      	mov	r3, r8
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d108      	bne.n	8009fb6 <CLI_CommandParser+0x342>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8009fa4:	0020      	movs	r0, r4
 8009fa6:	f7f6 f8b7 	bl	8000118 <strlen>
 8009faa:	0002      	movs	r2, r0
 8009fac:	2100      	movs	r1, #0
 8009fae:	0020      	movs	r0, r4
 8009fb0:	f008 f87a 	bl	80120a8 <memset>
 8009fb4:	e72c      	b.n	8009e10 <CLI_CommandParser+0x19c>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 8009fb6:	0020      	movs	r0, r4
 8009fb8:	f7f6 f8ae 	bl	8000118 <strlen>
 8009fbc:	b282      	uxth	r2, r0
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	3331      	adds	r3, #49	; 0x31
 8009fc4:	0021      	movs	r1, r4
 8009fc6:	9804      	ldr	r0, [sp, #16]
 8009fc8:	f004 f8ec 	bl	800e1a4 <writePxMutex>
 8009fcc:	e7ea      	b.n	8009fa4 <CLI_CommandParser+0x330>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8009fce:	4643      	mov	r3, r8
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d100      	bne.n	8009fd6 <CLI_CommandParser+0x362>
 8009fd4:	e68b      	b.n	8009cee <CLI_CommandParser+0x7a>
 8009fd6:	e6b7      	b.n	8009d48 <CLI_CommandParser+0xd4>
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 8009fd8:	2301      	movs	r3, #1
 8009fda:	425b      	negs	r3, r3
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	3333      	adds	r3, #51	; 0x33
 8009fe0:	2238      	movs	r2, #56	; 0x38
 8009fe2:	4919      	ldr	r1, [pc, #100]	; (800a048 <CLI_CommandParser+0x3d4>)
 8009fe4:	9804      	ldr	r0, [sp, #16]
 8009fe6:	f004 f8dd 	bl	800e1a4 <writePxMutex>
}
 8009fea:	e043      	b.n	800a074 <CLI_CommandParser+0x400>
 8009fec:	20000e08 	.word	0x20000e08
 8009ff0:	08018810 	.word	0x08018810
 8009ff4:	08018864 	.word	0x08018864
 8009ff8:	080188b0 	.word	0x080188b0
 8009ffc:	0801880c 	.word	0x0801880c
 800a000:	080168f4 	.word	0x080168f4
 800a004:	0801886c 	.word	0x0801886c
 800a008:	20000b90 	.word	0x20000b90
 800a00c:	08018158 	.word	0x08018158
 800a010:	20006160 	.word	0x20006160
 800a014:	200003b7 	.word	0x200003b7
 800a018:	20000c98 	.word	0x20000c98
 800a01c:	2000104a 	.word	0x2000104a
 800a020:	08018974 	.word	0x08018974
 800a024:	080188b4 	.word	0x080188b4
 800a028:	080188dc 	.word	0x080188dc
 800a02c:	20000648 	.word	0x20000648
 800a030:	20000a5c 	.word	0x20000a5c
 800a034:	08018904 	.word	0x08018904
 800a038:	20000dda 	.word	0x20000dda
 800a03c:	200008d0 	.word	0x200008d0
 800a040:	08018924 	.word	0x08018924
 800a044:	08018950 	.word	0x08018950
 800a048:	08018994 	.word	0x08018994
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800a04c:	0020      	movs	r0, r4
 800a04e:	f7f6 f863 	bl	8000118 <strlen>
 800a052:	0002      	movs	r2, r0
 800a054:	2100      	movs	r1, #0
 800a056:	0020      	movs	r0, r4
 800a058:	f008 f826 	bl	80120a8 <memset>
	memset( idString, 0x00, MaxLengthOfAlias );
 800a05c:	2209      	movs	r2, #9
 800a05e:	2100      	movs	r1, #0
 800a060:	a807      	add	r0, sp, #28
 800a062:	f008 f821 	bl	80120a8 <memset>
	if(!recordSnippet && enableOutput)
 800a066:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <CLI_CommandParser+0x420>)
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d102      	bne.n	800a074 <CLI_CommandParser+0x400>
 800a06e:	4643      	mov	r3, r8
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1b1      	bne.n	8009fd8 <CLI_CommandParser+0x364>
}
 800a074:	b00b      	add	sp, #44	; 0x2c
 800a076:	bc3c      	pop	{r2, r3, r4, r5}
 800a078:	4690      	mov	r8, r2
 800a07a:	4699      	mov	r9, r3
 800a07c:	46a2      	mov	sl, r4
 800a07e:	46ab      	mov	fp, r5
 800a080:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800a082:	0020      	movs	r0, r4
 800a084:	f7f6 f848 	bl	8000118 <strlen>
 800a088:	0002      	movs	r2, r0
 800a08a:	2100      	movs	r1, #0
 800a08c:	0020      	movs	r0, r4
 800a08e:	f008 f80b 	bl	80120a8 <memset>
 800a092:	e7e3      	b.n	800a05c <CLI_CommandParser+0x3e8>
 800a094:	20000e08 	.word	0x20000e08

0800a098 <prvCLITask>:
{
 800a098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a09a:	46de      	mov	lr, fp
 800a09c:	4657      	mov	r7, sl
 800a09e:	464e      	mov	r6, r9
 800a0a0:	b5c0      	push	{r6, r7, lr}
 800a0a2:	b086      	sub	sp, #24
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	4249      	negs	r1, r1
 800a0a8:	2001      	movs	r0, #1
 800a0aa:	f004 fc1d 	bl	800e8e8 <ulTaskNotifyTake>
	cRxedChar = '\0';
 800a0ae:	230f      	movs	r3, #15
 800a0b0:	aa02      	add	r2, sp, #8
 800a0b2:	4694      	mov	ip, r2
 800a0b4:	4463      	add	r3, ip
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a0ba:	f004 fa5f 	bl	800e57c <FreeRTOS_CLIGetOutputBuffer>
 800a0be:	9003      	str	r0, [sp, #12]
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 800a0c0:	23e1      	movs	r3, #225	; 0xe1
 800a0c2:	031b      	lsls	r3, r3, #12
 800a0c4:	4a5f      	ldr	r2, [pc, #380]	; (800a244 <prvCLITask+0x1ac>)
 800a0c6:	6892      	ldr	r2, [r2, #8]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d009      	beq.n	800a0e0 <prvCLITask+0x48>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 800a0cc:	2401      	movs	r4, #1
			if (port != PcPort)
 800a0ce:	4e5e      	ldr	r6, [pc, #376]	; (800a248 <prvCLITask+0x1b0>)
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 800a0d0:	001d      	movs	r5, r3
			if (port != PcPort)
 800a0d2:	7833      	ldrb	r3, [r6, #0]
 800a0d4:	42a3      	cmp	r3, r4
 800a0d6:	d12c      	bne.n	800a132 <prvCLITask+0x9a>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 800a0d8:	3401      	adds	r4, #1
 800a0da:	b2e4      	uxtb	r4, r4
 800a0dc:	2c07      	cmp	r4, #7
 800a0de:	d1f8      	bne.n	800a0d2 <prvCLITask+0x3a>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 800a0e0:	4b5a      	ldr	r3, [pc, #360]	; (800a24c <prvCLITask+0x1b4>)
 800a0e2:	881a      	ldrh	r2, [r3, #0]
 800a0e4:	0053      	lsls	r3, r2, #1
 800a0e6:	189b      	adds	r3, r3, r2
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	4a59      	ldr	r2, [pc, #356]	; (800a250 <prvCLITask+0x1b8>)
 800a0ec:	189b      	adds	r3, r3, r2
 800a0ee:	4a59      	ldr	r2, [pc, #356]	; (800a254 <prvCLITask+0x1bc>)
 800a0f0:	7812      	ldrb	r2, [r2, #0]
 800a0f2:	4c59      	ldr	r4, [pc, #356]	; (800a258 <prvCLITask+0x1c0>)
 800a0f4:	4d54      	ldr	r5, [pc, #336]	; (800a248 <prvCLITask+0x1b0>)
 800a0f6:	7829      	ldrb	r1, [r5, #0]
 800a0f8:	9100      	str	r1, [sp, #0]
 800a0fa:	4958      	ldr	r1, [pc, #352]	; (800a25c <prvCLITask+0x1c4>)
 800a0fc:	0020      	movs	r0, r4
 800a0fe:	f008 f8d1 	bl	80122a4 <siprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 800a102:	7828      	ldrb	r0, [r5, #0]
 800a104:	230a      	movs	r3, #10
 800a106:	4a56      	ldr	r2, [pc, #344]	; (800a260 <prvCLITask+0x1c8>)
 800a108:	4956      	ldr	r1, [pc, #344]	; (800a264 <prvCLITask+0x1cc>)
 800a10a:	f004 f875 	bl	800e1f8 <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 800a10e:	0020      	movs	r0, r4
 800a110:	f7f6 f802 	bl	8000118 <strlen>
 800a114:	b282      	uxth	r2, r0
 800a116:	7828      	ldrb	r0, [r5, #0]
 800a118:	230a      	movs	r3, #10
 800a11a:	0021      	movs	r1, r4
 800a11c:	f004 f86c 	bl	800e1f8 <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 800a120:	2300      	movs	r3, #0
 800a122:	469b      	mov	fp, r3
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800a124:	4b48      	ldr	r3, [pc, #288]	; (800a248 <prvCLITask+0x1b0>)
 800a126:	469a      	mov	sl, r3
 800a128:	4b4f      	ldr	r3, [pc, #316]	; (800a268 <prvCLITask+0x1d0>)
 800a12a:	4699      	mov	r9, r3
				chr = UARTRxBufIndex[PcPort-1] = 0;
 800a12c:	001f      	movs	r7, r3
			if (UARTRxBuf[PcPort-1][chr]) {
 800a12e:	4656      	mov	r6, sl
 800a130:	e066      	b.n	800a200 <prvCLITask+0x168>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 800a132:	0029      	movs	r1, r5
 800a134:	0020      	movs	r0, r4
 800a136:	f004 f8a3 	bl	800e280 <UpdateBaudrate>
 800a13a:	e7cd      	b.n	800a0d8 <prvCLITask+0x40>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 800a13c:	200f      	movs	r0, #15
 800a13e:	ad02      	add	r5, sp, #8
 800a140:	46ac      	mov	ip, r5
 800a142:	4460      	add	r0, ip
 800a144:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 800a146:	0198      	lsls	r0, r3, #6
 800a148:	4a48      	ldr	r2, [pc, #288]	; (800a26c <prvCLITask+0x1d4>)
 800a14a:	1812      	adds	r2, r2, r0
 800a14c:	2000      	movs	r0, #0
 800a14e:	5450      	strb	r0, [r2, r1]
				UARTRxBufIndex[PcPort-1] = chr;
 800a150:	4a45      	ldr	r2, [pc, #276]	; (800a268 <prvCLITask+0x1d0>)
 800a152:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 800a154:	240f      	movs	r4, #15
 800a156:	ab02      	add	r3, sp, #8
 800a158:	469c      	mov	ip, r3
 800a15a:	4464      	add	r4, ip
 800a15c:	4b3a      	ldr	r3, [pc, #232]	; (800a248 <prvCLITask+0x1b0>)
 800a15e:	7818      	ldrb	r0, [r3, #0]
 800a160:	230a      	movs	r3, #10
 800a162:	2201      	movs	r2, #1
 800a164:	0021      	movs	r1, r4
 800a166:	f004 f847 	bl	800e1f8 <writePxITMutex>
		if( cRxedChar == '\r' )
 800a16a:	7823      	ldrb	r3, [r4, #0]
 800a16c:	2b0d      	cmp	r3, #13
 800a16e:	d028      	beq.n	800a1c2 <prvCLITask+0x12a>
			if( cRxedChar == '\n' )
 800a170:	2b0a      	cmp	r3, #10
 800a172:	d043      	beq.n	800a1fc <prvCLITask+0x164>
			else if( cRxedChar == '\b' )
 800a174:	2b08      	cmp	r3, #8
 800a176:	d059      	beq.n	800a22c <prvCLITask+0x194>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 800a178:	001a      	movs	r2, r3
 800a17a:	3a20      	subs	r2, #32
 800a17c:	2a5e      	cmp	r2, #94	; 0x5e
 800a17e:	d83d      	bhi.n	800a1fc <prvCLITask+0x164>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 800a180:	465a      	mov	r2, fp
 800a182:	2a31      	cmp	r2, #49	; 0x31
 800a184:	dc3a      	bgt.n	800a1fc <prvCLITask+0x164>
						cInputString[ cInputIndex ] = cRxedChar;
 800a186:	4a3a      	ldr	r2, [pc, #232]	; (800a270 <prvCLITask+0x1d8>)
 800a188:	4659      	mov	r1, fp
 800a18a:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 800a18c:	465b      	mov	r3, fp
 800a18e:	3301      	adds	r3, #1
 800a190:	b25b      	sxtb	r3, r3
 800a192:	469b      	mov	fp, r3
 800a194:	e032      	b.n	800a1fc <prvCLITask+0x164>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 800a196:	2200      	movs	r2, #0
 800a198:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 800a19a:	f004 fc63 	bl	800ea64 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800a19e:	3c3e      	subs	r4, #62	; 0x3e
			if (UARTRxBuf[PcPort-1][chr]) {
 800a1a0:	7833      	ldrb	r3, [r6, #0]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	0021      	movs	r1, r4
 800a1a6:	019a      	lsls	r2, r3, #6
 800a1a8:	18aa      	adds	r2, r5, r2
 800a1aa:	5d12      	ldrb	r2, [r2, r4]
 800a1ac:	2a00      	cmp	r2, #0
 800a1ae:	d1c5      	bne.n	800a13c <prvCLITask+0xa4>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 800a1b0:	2c3f      	cmp	r4, #63	; 0x3f
 800a1b2:	d0f0      	beq.n	800a196 <prvCLITask+0xfe>
			taskYIELD();
 800a1b4:	f004 fc56 	bl	800ea64 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800a1b8:	3401      	adds	r4, #1
 800a1ba:	b2a4      	uxth	r4, r4
 800a1bc:	2c3f      	cmp	r4, #63	; 0x3f
 800a1be:	d9ef      	bls.n	800a1a0 <prvCLITask+0x108>
 800a1c0:	e7c8      	b.n	800a154 <prvCLITask+0xbc>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 800a1c2:	4b21      	ldr	r3, [pc, #132]	; (800a248 <prvCLITask+0x1b0>)
 800a1c4:	7818      	ldrb	r0, [r3, #0]
 800a1c6:	230a      	movs	r3, #10
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	492a      	ldr	r1, [pc, #168]	; (800a274 <prvCLITask+0x1dc>)
 800a1cc:	f004 f814 	bl	800e1f8 <writePxITMutex>
			if( cInputIndex == 0 )
 800a1d0:	465b      	mov	r3, fp
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d025      	beq.n	800a222 <prvCLITask+0x18a>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 800a1d6:	4c26      	ldr	r4, [pc, #152]	; (800a270 <prvCLITask+0x1d8>)
 800a1d8:	4b1b      	ldr	r3, [pc, #108]	; (800a248 <prvCLITask+0x1b0>)
 800a1da:	7818      	ldrb	r0, [r3, #0]
 800a1dc:	9b03      	ldr	r3, [sp, #12]
 800a1de:	0022      	movs	r2, r4
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	f7ff fd47 	bl	8009c74 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 800a1e6:	0021      	movs	r1, r4
 800a1e8:	4823      	ldr	r0, [pc, #140]	; (800a278 <prvCLITask+0x1e0>)
 800a1ea:	f008 f897 	bl	801231c <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 800a1ee:	2232      	movs	r2, #50	; 0x32
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	0020      	movs	r0, r4
 800a1f4:	f007 ff58 	bl	80120a8 <memset>
			cInputIndex = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	469b      	mov	fp, r3
		taskYIELD();
 800a1fc:	f004 fc32 	bl	800ea64 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800a200:	4653      	mov	r3, sl
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	3b01      	subs	r3, #1
 800a206:	464a      	mov	r2, r9
 800a208:	5cd2      	ldrb	r2, [r2, r3]
 800a20a:	b294      	uxth	r4, r2
 800a20c:	2c3f      	cmp	r4, #63	; 0x3f
 800a20e:	d8a1      	bhi.n	800a154 <prvCLITask+0xbc>
			if (UARTRxBuf[PcPort-1][chr]) {
 800a210:	0011      	movs	r1, r2
 800a212:	019d      	lsls	r5, r3, #6
 800a214:	4815      	ldr	r0, [pc, #84]	; (800a26c <prvCLITask+0x1d4>)
 800a216:	1940      	adds	r0, r0, r5
 800a218:	5c82      	ldrb	r2, [r0, r2]
 800a21a:	2a00      	cmp	r2, #0
 800a21c:	d18e      	bne.n	800a13c <prvCLITask+0xa4>
 800a21e:	4d13      	ldr	r5, [pc, #76]	; (800a26c <prvCLITask+0x1d4>)
 800a220:	e7c6      	b.n	800a1b0 <prvCLITask+0x118>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 800a222:	4915      	ldr	r1, [pc, #84]	; (800a278 <prvCLITask+0x1e0>)
 800a224:	4812      	ldr	r0, [pc, #72]	; (800a270 <prvCLITask+0x1d8>)
 800a226:	f008 f879 	bl	801231c <strcpy>
 800a22a:	e7d4      	b.n	800a1d6 <prvCLITask+0x13e>
				if( cInputIndex > 0 )
 800a22c:	465b      	mov	r3, fp
 800a22e:	2b00      	cmp	r3, #0
 800a230:	dde4      	ble.n	800a1fc <prvCLITask+0x164>
					cInputIndex--;
 800a232:	3b01      	subs	r3, #1
 800a234:	b25b      	sxtb	r3, r3
 800a236:	469b      	mov	fp, r3
					cInputString[ cInputIndex ] = '\0';
 800a238:	4b0d      	ldr	r3, [pc, #52]	; (800a270 <prvCLITask+0x1d8>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	4659      	mov	r1, fp
 800a23e:	545a      	strb	r2, [r3, r1]
 800a240:	e7dc      	b.n	800a1fc <prvCLITask+0x164>
 800a242:	46c0      	nop			; (mov r8, r8)
 800a244:	20006160 	.word	0x20006160
 800a248:	200003b7 	.word	0x200003b7
 800a24c:	2000001e 	.word	0x2000001e
 800a250:	08016fbc 	.word	0x08016fbc
 800a254:	20000b90 	.word	0x20000b90
 800a258:	20000ddc 	.word	0x20000ddc
 800a25c:	08018a00 	.word	0x08018a00
 800a260:	00000293 	.word	0x00000293
 800a264:	08018a2c 	.word	0x08018a2c
 800a268:	20000f94 	.word	0x20000f94
 800a26c:	20000e14 	.word	0x20000e14
 800a270:	20000d0c 	.word	0x20000d0c
 800a274:	0801964c 	.word	0x0801964c
 800a278:	20000da8 	.word	0x20000da8

0800a27c <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 800a27c:	b570      	push	{r4, r5, r6, lr}
 800a27e:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 800a280:	4b1c      	ldr	r3, [pc, #112]	; (800a2f4 <ParseSnippetCommand+0x78>)
 800a282:	781a      	ldrb	r2, [r3, #0]
 800a284:	3a01      	subs	r2, #1
 800a286:	0093      	lsls	r3, r2, #2
 800a288:	189b      	adds	r3, r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4a1a      	ldr	r2, [pc, #104]	; (800a2f8 <ParseSnippetCommand+0x7c>)
 800a28e:	18d3      	adds	r3, r2, r3
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d02c      	beq.n	800a2f0 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800a296:	4b19      	ldr	r3, [pc, #100]	; (800a2fc <ParseSnippetCommand+0x80>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d014      	beq.n	800a2c8 <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 800a29e:	4b17      	ldr	r3, [pc, #92]	; (800a2fc <ParseSnippetCommand+0x80>)
 800a2a0:	681d      	ldr	r5, [r3, #0]
 800a2a2:	782b      	ldrb	r3, [r5, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d012      	beq.n	800a2ce <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 800a2a8:	2113      	movs	r1, #19
 800a2aa:	0028      	movs	r0, r5
 800a2ac:	f008 f828 	bl	8012300 <strchr>
 800a2b0:	1e06      	subs	r6, r0, #0
	if (ptrEnd != NULL)
 800a2b2:	d011      	beq.n	800a2d8 <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 800a2b4:	1b42      	subs	r2, r0, r5
 800a2b6:	0029      	movs	r1, r5
 800a2b8:	0020      	movs	r0, r4
 800a2ba:	f008 f848 	bl	801234e <strncpy>
		ptrStart = ptrEnd+1;
 800a2be:	3601      	adds	r6, #1
 800a2c0:	4b0e      	ldr	r3, [pc, #56]	; (800a2fc <ParseSnippetCommand+0x80>)
 800a2c2:	601e      	str	r6, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 800a2c4:	2001      	movs	r0, #1
 800a2c6:	e006      	b.n	800a2d6 <ParseSnippetCommand+0x5a>
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800a2c8:	4b0c      	ldr	r3, [pc, #48]	; (800a2fc <ParseSnippetCommand+0x80>)
 800a2ca:	6018      	str	r0, [r3, #0]
 800a2cc:	e7e7      	b.n	800a29e <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 800a2ce:	4b0b      	ldr	r3, [pc, #44]	; (800a2fc <ParseSnippetCommand+0x80>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	601a      	str	r2, [r3, #0]
		return false;
 800a2d4:	2000      	movs	r0, #0
}
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char *)cliBuffer, ptrStart);
 800a2d8:	0029      	movs	r1, r5
 800a2da:	0020      	movs	r0, r4
 800a2dc:	f008 f81e 	bl	801231c <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 800a2e0:	0020      	movs	r0, r4
 800a2e2:	f7f5 ff19 	bl	8000118 <strlen>
 800a2e6:	182d      	adds	r5, r5, r0
 800a2e8:	4b04      	ldr	r3, [pc, #16]	; (800a2fc <ParseSnippetCommand+0x80>)
 800a2ea:	601d      	str	r5, [r3, #0]
	return true;
 800a2ec:	2001      	movs	r0, #1
 800a2ee:	e7f2      	b.n	800a2d6 <ParseSnippetCommand+0x5a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	e7f0      	b.n	800a2d6 <ParseSnippetCommand+0x5a>
 800a2f4:	20000ddb 	.word	0x20000ddb
 800a2f8:	200061d8 	.word	0x200061d8
 800a2fc:	20000e04 	.word	0x20000e04

0800a300 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 800a300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a302:	b083      	sub	sp, #12
 800a304:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 800a306:	0083      	lsls	r3, r0, #2
 800a308:	181b      	adds	r3, r3, r0
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4a3f      	ldr	r2, [pc, #252]	; (800a40c <CheckSnippetCondition+0x10c>)
 800a30e:	5c9b      	ldrb	r3, [r3, r2]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d003      	beq.n	800a31c <CheckSnippetCondition+0x1c>
 800a314:	2b03      	cmp	r3, #3
 800a316:	d015      	beq.n	800a344 <CheckSnippetCondition+0x44>
					
  	default:
  		break;
  }
	
	return false;
 800a318:	2000      	movs	r0, #0
 800a31a:	e011      	b.n	800a340 <CheckSnippetCondition+0x40>
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 800a31c:	493b      	ldr	r1, [pc, #236]	; (800a40c <CheckSnippetCondition+0x10c>)
 800a31e:	0083      	lsls	r3, r0, #2
 800a320:	181a      	adds	r2, r3, r0
 800a322:	0092      	lsls	r2, r2, #2
 800a324:	188a      	adds	r2, r1, r2
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 800a326:	7890      	ldrb	r0, [r2, #2]
 800a328:	00c2      	lsls	r2, r0, #3
 800a32a:	1812      	adds	r2, r2, r0
 800a32c:	191b      	adds	r3, r3, r4
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	18cb      	adds	r3, r1, r3
 800a332:	4937      	ldr	r1, [pc, #220]	; (800a410 <CheckSnippetCondition+0x110>)
 800a334:	5c50      	ldrb	r0, [r2, r1]
 800a336:	78db      	ldrb	r3, [r3, #3]
 800a338:	1ac0      	subs	r0, r0, r3
 800a33a:	4243      	negs	r3, r0
 800a33c:	4158      	adcs	r0, r3
 800a33e:	b2c0      	uxtb	r0, r0
}
 800a340:	b003      	add	sp, #12
 800a342:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 800a344:	4e31      	ldr	r6, [pc, #196]	; (800a40c <CheckSnippetCondition+0x10c>)
 800a346:	0085      	lsls	r5, r0, #2
 800a348:	182b      	adds	r3, r5, r0
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	18f3      	adds	r3, r6, r3
 800a34e:	78da      	ldrb	r2, [r3, #3]
 800a350:	3a01      	subs	r2, #1
 800a352:	0053      	lsls	r3, r2, #1
 800a354:	189b      	adds	r3, r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4a2e      	ldr	r2, [pc, #184]	; (800a414 <CheckSnippetCondition+0x114>)
 800a35a:	589b      	ldr	r3, [r3, r2]
 800a35c:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800a35e:	1829      	adds	r1, r5, r0
 800a360:	0089      	lsls	r1, r1, #2
 800a362:	3106      	adds	r1, #6
 800a364:	1989      	adds	r1, r1, r6
 800a366:	2204      	movs	r2, #4
 800a368:	a801      	add	r0, sp, #4
 800a36a:	f007 fe94 	bl	8012096 <memcpy>
			switch (snippets[index].cond.mathOperator)
 800a36e:	192d      	adds	r5, r5, r4
 800a370:	00ad      	lsls	r5, r5, #2
 800a372:	1975      	adds	r5, r6, r5
 800a374:	786b      	ldrb	r3, [r5, #1]
 800a376:	2b06      	cmp	r3, #6
 800a378:	d83f      	bhi.n	800a3fa <CheckSnippetCondition+0xfa>
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4a26      	ldr	r2, [pc, #152]	; (800a418 <CheckSnippetCondition+0x118>)
 800a37e:	58d3      	ldr	r3, [r2, r3]
 800a380:	469f      	mov	pc, r3
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 800a382:	1c39      	adds	r1, r7, #0
 800a384:	9801      	ldr	r0, [sp, #4]
 800a386:	f7f6 f899 	bl	80004bc <__aeabi_fcmpeq>
 800a38a:	1e43      	subs	r3, r0, #1
 800a38c:	4198      	sbcs	r0, r3
 800a38e:	e7d7      	b.n	800a340 <CheckSnippetCondition+0x40>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 800a390:	1c39      	adds	r1, r7, #0
 800a392:	9801      	ldr	r0, [sp, #4]
 800a394:	f7f6 f898 	bl	80004c8 <__aeabi_fcmplt>
 800a398:	1e43      	subs	r3, r0, #1
 800a39a:	4198      	sbcs	r0, r3
 800a39c:	e7d0      	b.n	800a340 <CheckSnippetCondition+0x40>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 800a39e:	1c39      	adds	r1, r7, #0
 800a3a0:	9801      	ldr	r0, [sp, #4]
 800a3a2:	f7f6 f8a5 	bl	80004f0 <__aeabi_fcmpgt>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d029      	beq.n	800a3fe <CheckSnippetCondition+0xfe>
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	1c38      	adds	r0, r7, #0
 800a3ae:	f7f6 f885 	bl	80004bc <__aeabi_fcmpeq>
 800a3b2:	4243      	negs	r3, r0
 800a3b4:	4158      	adcs	r0, r3
 800a3b6:	e7c3      	b.n	800a340 <CheckSnippetCondition+0x40>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 800a3b8:	1c39      	adds	r1, r7, #0
 800a3ba:	9801      	ldr	r0, [sp, #4]
 800a3bc:	f7f6 f88e 	bl	80004dc <__aeabi_fcmple>
 800a3c0:	1e43      	subs	r3, r0, #1
 800a3c2:	4198      	sbcs	r0, r3
 800a3c4:	e7bc      	b.n	800a340 <CheckSnippetCondition+0x40>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 800a3c6:	1c39      	adds	r1, r7, #0
 800a3c8:	9801      	ldr	r0, [sp, #4]
 800a3ca:	f7f6 f89b 	bl	8000504 <__aeabi_fcmpge>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d017      	beq.n	800a402 <CheckSnippetCondition+0x102>
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	1c38      	adds	r0, r7, #0
 800a3d6:	f7f6 f871 	bl	80004bc <__aeabi_fcmpeq>
 800a3da:	4243      	negs	r3, r0
 800a3dc:	4158      	adcs	r0, r3
 800a3de:	e7af      	b.n	800a340 <CheckSnippetCondition+0x40>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 800a3e0:	1c39      	adds	r1, r7, #0
 800a3e2:	9801      	ldr	r0, [sp, #4]
 800a3e4:	f7f6 f86a 	bl	80004bc <__aeabi_fcmpeq>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d10c      	bne.n	800a406 <CheckSnippetCondition+0x106>
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	1c38      	adds	r0, r7, #0
 800a3f0:	f7f6 f864 	bl	80004bc <__aeabi_fcmpeq>
 800a3f4:	4243      	negs	r3, r0
 800a3f6:	4158      	adcs	r0, r3
 800a3f8:	e7a2      	b.n	800a340 <CheckSnippetCondition+0x40>
	return false;
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	e7a0      	b.n	800a340 <CheckSnippetCondition+0x40>
 800a3fe:	2000      	movs	r0, #0
 800a400:	e79e      	b.n	800a340 <CheckSnippetCondition+0x40>
 800a402:	2000      	movs	r0, #0
 800a404:	e79c      	b.n	800a340 <CheckSnippetCondition+0x40>
 800a406:	2000      	movs	r0, #0
 800a408:	e79a      	b.n	800a340 <CheckSnippetCondition+0x40>
 800a40a:	46c0      	nop			; (mov r8, r8)
 800a40c:	200061d8 	.word	0x200061d8
 800a410:	20000664 	.word	0x20000664
 800a414:	20000040 	.word	0x20000040
 800a418:	080187f0 	.word	0x080187f0

0800a41c <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 800a41e:	f004 f8ad 	bl	800e57c <FreeRTOS_CLIGetOutputBuffer>
 800a422:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 800a424:	4b1c      	ldr	r3, [pc, #112]	; (800a498 <ExecuteSnippet+0x7c>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d032      	beq.n	800a492 <ExecuteSnippet+0x76>
 800a42c:	2400      	movs	r4, #0
  {
		if (snippets[s].state)								// Check for activated Snippets
 800a42e:	4f1b      	ldr	r7, [pc, #108]	; (800a49c <ExecuteSnippet+0x80>)
 800a430:	e01a      	b.n	800a468 <ExecuteSnippet+0x4c>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 800a432:	4b1b      	ldr	r3, [pc, #108]	; (800a4a0 <ExecuteSnippet+0x84>)
 800a434:	7818      	ldrb	r0, [r3, #0]
 800a436:	002b      	movs	r3, r5
 800a438:	4a1a      	ldr	r2, [pc, #104]	; (800a4a4 <ExecuteSnippet+0x88>)
 800a43a:	2100      	movs	r1, #0
 800a43c:	f7ff fc1a 	bl	8009c74 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 800a440:	0028      	movs	r0, r5
 800a442:	f7f5 fe69 	bl	8000118 <strlen>
 800a446:	0002      	movs	r2, r0
 800a448:	2100      	movs	r1, #0
 800a44a:	0028      	movs	r0, r5
 800a44c:	f007 fe2c 	bl	80120a8 <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 800a450:	4914      	ldr	r1, [pc, #80]	; (800a4a4 <ExecuteSnippet+0x88>)
 800a452:	68f0      	ldr	r0, [r6, #12]
 800a454:	f7ff ff12 	bl	800a27c <ParseSnippetCommand>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d1ea      	bne.n	800a432 <ExecuteSnippet+0x16>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 800a45c:	3401      	adds	r4, #1
 800a45e:	b2a4      	uxth	r4, r4
 800a460:	4b0d      	ldr	r3, [pc, #52]	; (800a498 <ExecuteSnippet+0x7c>)
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	42a3      	cmp	r3, r4
 800a466:	d914      	bls.n	800a492 <ExecuteSnippet+0x76>
		if (snippets[s].state)								// Check for activated Snippets
 800a468:	00a3      	lsls	r3, r4, #2
 800a46a:	191b      	adds	r3, r3, r4
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	18fb      	adds	r3, r7, r3
 800a470:	7c1b      	ldrb	r3, [r3, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0f2      	beq.n	800a45c <ExecuteSnippet+0x40>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 800a476:	b2e0      	uxtb	r0, r4
 800a478:	f7ff ff42 	bl	800a300 <CheckSnippetCondition>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d0ed      	beq.n	800a45c <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 800a480:	4b09      	ldr	r3, [pc, #36]	; (800a4a8 <ExecuteSnippet+0x8c>)
 800a482:	2220      	movs	r2, #32
 800a484:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 800a486:	00a3      	lsls	r3, r4, #2
 800a488:	191e      	adds	r6, r3, r4
 800a48a:	00b6      	lsls	r6, r6, #2
 800a48c:	4b03      	ldr	r3, [pc, #12]	; (800a49c <ExecuteSnippet+0x80>)
 800a48e:	199e      	adds	r6, r3, r6
 800a490:	e7de      	b.n	800a450 <ExecuteSnippet+0x34>
			}
		}
  }
	
	return result;
}
 800a492:	2000      	movs	r0, #0
 800a494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a496:	46c0      	nop			; (mov r8, r8)
 800a498:	20000ddb 	.word	0x20000ddb
 800a49c:	200061d8 	.word	0x200061d8
 800a4a0:	200003b7 	.word	0x200003b7
 800a4a4:	20000d74 	.word	0x20000d74
 800a4a8:	20006160 	.word	0x20006160

0800a4ac <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 800a4ac:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 800a4ae:	1e45      	subs	r5, r0, #1
 800a4b0:	00ec      	lsls	r4, r5, #3
 800a4b2:	1b60      	subs	r0, r4, r5
 800a4b4:	00c0      	lsls	r0, r0, #3
 800a4b6:	4e05      	ldr	r6, [pc, #20]	; (800a4cc <StopMsgDMA+0x20>)
 800a4b8:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800a4ba:	f004 fdaa 	bl	800f012 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a4be:	1b64      	subs	r4, r4, r5
 800a4c0:	00e4      	lsls	r4, r4, #3
 800a4c2:	59a3      	ldr	r3, [r4, r6]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	605a      	str	r2, [r3, #4]
}
 800a4c8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ca:	46c0      	nop			; (mov r8, r8)
 800a4cc:	2000108c 	.word	0x2000108c

0800a4d0 <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 800a4d0:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 800a4d2:	1e44      	subs	r4, r0, #1
 800a4d4:	00e5      	lsls	r5, r4, #3
 800a4d6:	1b28      	subs	r0, r5, r4
 800a4d8:	00c0      	lsls	r0, r0, #3
 800a4da:	4e07      	ldr	r6, [pc, #28]	; (800a4f8 <StopStreamDMA+0x28>)
 800a4dc:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800a4de:	f004 fd98 	bl	800f012 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a4e2:	1b2d      	subs	r5, r5, r4
 800a4e4:	00ed      	lsls	r5, r5, #3
 800a4e6:	59aa      	ldr	r2, [r5, r6]
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 800a4ec:	00a4      	lsls	r4, r4, #2
 800a4ee:	4a03      	ldr	r2, [pc, #12]	; (800a4fc <StopStreamDMA+0x2c>)
 800a4f0:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 800a4f2:	4a03      	ldr	r2, [pc, #12]	; (800a500 <StopStreamDMA+0x30>)
 800a4f4:	50a3      	str	r3, [r4, r2]

}
 800a4f6:	bd70      	pop	{r4, r5, r6, pc}
 800a4f8:	20001284 	.word	0x20001284
 800a4fc:	20000fd4 	.word	0x20000fd4
 800a500:	20001004 	.word	0x20001004

0800a504 <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 800a504:	b510      	push	{r4, lr}
 800a506:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 800a508:	f7ff ffd0 	bl	800a4ac <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 800a50c:	3c01      	subs	r4, #1
 800a50e:	00e0      	lsls	r0, r4, #3
 800a510:	1b02      	subs	r2, r0, r4
 800a512:	00d2      	lsls	r2, r2, #3
 800a514:	4903      	ldr	r1, [pc, #12]	; (800a524 <SwitchMsgDMAToStream+0x20>)
 800a516:	5851      	ldr	r1, [r2, r1]
 800a518:	4b03      	ldr	r3, [pc, #12]	; (800a528 <SwitchMsgDMAToStream+0x24>)
 800a51a:	18d0      	adds	r0, r2, r3
 800a51c:	f002 fb3e 	bl	800cb9c <DMA_STREAM_CH_Init>
}
 800a520:	bd10      	pop	{r4, pc}
 800a522:	46c0      	nop			; (mov r8, r8)
 800a524:	2000108c 	.word	0x2000108c
 800a528:	20001284 	.word	0x20001284

0800a52c <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 800a52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a52e:	b083      	sub	sp, #12
 800a530:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 800a532:	f7ff ffcd 	bl	800a4d0 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 800a536:	9401      	str	r4, [sp, #4]
 800a538:	3c01      	subs	r4, #1
 800a53a:	00e7      	lsls	r7, r4, #3
 800a53c:	1b3d      	subs	r5, r7, r4
 800a53e:	00ed      	lsls	r5, r5, #3
 800a540:	4b0f      	ldr	r3, [pc, #60]	; (800a580 <SwitchStreamDMAToMsg+0x54>)
 800a542:	18ed      	adds	r5, r5, r3
 800a544:	4e0f      	ldr	r6, [pc, #60]	; (800a584 <SwitchStreamDMAToMsg+0x58>)
 800a546:	1b3b      	subs	r3, r7, r4
 800a548:	00db      	lsls	r3, r3, #3
 800a54a:	5999      	ldr	r1, [r3, r6]
 800a54c:	0028      	movs	r0, r5
 800a54e:	f002 faa7 	bl	800caa0 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 800a552:	1b3b      	subs	r3, r7, r4
 800a554:	00db      	lsls	r3, r3, #3
 800a556:	18f3      	adds	r3, r6, r3
 800a558:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a55a:	f001 f935 	bl	800b7c8 <GetPort>
 800a55e:	2300      	movs	r3, #0
 800a560:	4a09      	ldr	r2, [pc, #36]	; (800a588 <SwitchStreamDMAToMsg+0x5c>)
 800a562:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 800a564:	1b3f      	subs	r7, r7, r4
 800a566:	00ff      	lsls	r7, r7, #3
 800a568:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port-1] = 0;
 800a56a:	00a4      	lsls	r4, r4, #2
 800a56c:	4a07      	ldr	r2, [pc, #28]	; (800a58c <SwitchStreamDMAToMsg+0x60>)
 800a56e:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 800a570:	9801      	ldr	r0, [sp, #4]
 800a572:	f7fa f833 	bl	80045dc <GetUart>
 800a576:	0029      	movs	r1, r5
 800a578:	f002 ff04 	bl	800d384 <DMA_MSG_RX_Setup>
		
}
 800a57c:	b003      	add	sp, #12
 800a57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a580:	2000108c 	.word	0x2000108c
 800a584:	20001284 	.word	0x20001284
 800a588:	20000c40 	.word	0x20000c40
 800a58c:	20000fec 	.word	0x20000fec

0800a590 <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 800a590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a592:	0005      	movs	r5, r0
 800a594:	000e      	movs	r6, r1
 800a596:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 800a598:	f001 f916 	bl	800b7c8 <GetPort>
 800a59c:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800a59e:	4b0d      	ldr	r3, [pc, #52]	; (800a5d4 <StartDMAstream+0x44>)
 800a5a0:	5c1b      	ldrb	r3, [r3, r0]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d902      	bls.n	800a5ac <StartDMAstream+0x1c>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 800a5a6:	2017      	movs	r0, #23
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800a5a8:	2b03      	cmp	r3, #3
 800a5aa:	d112      	bne.n	800a5d2 <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 800a5ac:	0020      	movs	r0, r4
 800a5ae:	f7ff ffa9 	bl	800a504 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 800a5b2:	1e63      	subs	r3, r4, #1
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4a08      	ldr	r2, [pc, #32]	; (800a5d8 <StartDMAstream+0x48>)
 800a5b8:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 800a5ba:	4a06      	ldr	r2, [pc, #24]	; (800a5d4 <StartDMAstream+0x44>)
 800a5bc:	2102      	movs	r1, #2
 800a5be:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 800a5c0:	4a06      	ldr	r2, [pc, #24]	; (800a5dc <StartDMAstream+0x4c>)
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 800a5c6:	003a      	movs	r2, r7
 800a5c8:	0031      	movs	r1, r6
 800a5ca:	0028      	movs	r0, r5
 800a5cc:	f002 ff44 	bl	800d458 <DMA_STREAM_Setup>
	
	return BOS_OK;
 800a5d0:	2000      	movs	r0, #0
}
 800a5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5d4:	20000c40 	.word	0x20000c40
 800a5d8:	20000fec 	.word	0x20000fec
 800a5dc:	20000fd4 	.word	0x20000fd4

0800a5e0 <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 800a5e0:	b570      	push	{r4, r5, r6, lr}
 800a5e2:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 800a5e4:	4b12      	ldr	r3, [pc, #72]	; (800a630 <DMA_IRQHandler+0x50>)
 800a5e6:	5c1b      	ldrb	r3, [r3, r0]
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d008      	beq.n	800a5fe <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 800a5ec:	3c01      	subs	r4, #1
 800a5ee:	00e0      	lsls	r0, r4, #3
 800a5f0:	1b00      	subs	r0, r0, r4
 800a5f2:	00c0      	lsls	r0, r0, #3
 800a5f4:	4c0f      	ldr	r4, [pc, #60]	; (800a634 <DMA_IRQHandler+0x54>)
 800a5f6:	1900      	adds	r0, r0, r4
 800a5f8:	f004 fd34 	bl	800f064 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 800a5fc:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 800a5fe:	1e45      	subs	r5, r0, #1
 800a600:	00e8      	lsls	r0, r5, #3
 800a602:	1b40      	subs	r0, r0, r5
 800a604:	00c0      	lsls	r0, r0, #3
 800a606:	4b0c      	ldr	r3, [pc, #48]	; (800a638 <DMA_IRQHandler+0x58>)
 800a608:	18c0      	adds	r0, r0, r3
 800a60a:	f004 fd2b 	bl	800f064 <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 800a60e:	00aa      	lsls	r2, r5, #2
 800a610:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <DMA_IRQHandler+0x5c>)
 800a612:	58d2      	ldr	r2, [r2, r3]
 800a614:	2a00      	cmp	r2, #0
 800a616:	d006      	beq.n	800a626 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port-1];
 800a618:	4909      	ldr	r1, [pc, #36]	; (800a640 <DMA_IRQHandler+0x60>)
 800a61a:	00ad      	lsls	r5, r5, #2
 800a61c:	586b      	ldr	r3, [r5, r1]
 800a61e:	3301      	adds	r3, #1
 800a620:	506b      	str	r3, [r5, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 800a622:	429a      	cmp	r2, r3
 800a624:	d8ea      	bhi.n	800a5fc <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 800a626:	0020      	movs	r0, r4
 800a628:	f7ff ff52 	bl	800a4d0 <StopStreamDMA>
}
 800a62c:	e7e6      	b.n	800a5fc <DMA_IRQHandler+0x1c>
 800a62e:	46c0      	nop			; (mov r8, r8)
 800a630:	20000c40 	.word	0x20000c40
 800a634:	2000108c 	.word	0x2000108c
 800a638:	20001284 	.word	0x20001284
 800a63c:	20001004 	.word	0x20001004
 800a640:	20000fd4 	.word	0x20000fd4

0800a644 <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 800a644:	4b09      	ldr	r3, [pc, #36]	; (800a66c <ResetUartORE+0x28>)
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	2308      	movs	r3, #8
 800a64a:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800a64c:	4a08      	ldr	r2, [pc, #32]	; (800a670 <ResetUartORE+0x2c>)
 800a64e:	6812      	ldr	r2, [r2, #0]
 800a650:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800a652:	4a08      	ldr	r2, [pc, #32]	; (800a674 <ResetUartORE+0x30>)
 800a654:	6812      	ldr	r2, [r2, #0]
 800a656:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 800a658:	4a07      	ldr	r2, [pc, #28]	; (800a678 <ResetUartORE+0x34>)
 800a65a:	6812      	ldr	r2, [r2, #0]
 800a65c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 800a65e:	4a07      	ldr	r2, [pc, #28]	; (800a67c <ResetUartORE+0x38>)
 800a660:	6812      	ldr	r2, [r2, #0]
 800a662:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800a664:	4a06      	ldr	r2, [pc, #24]	; (800a680 <ResetUartORE+0x3c>)
 800a666:	6812      	ldr	r2, [r2, #0]
 800a668:	6213      	str	r3, [r2, #32]
#endif
}
 800a66a:	4770      	bx	lr
 800a66c:	20006394 	.word	0x20006394
 800a670:	200064e4 	.word	0x200064e4
 800a674:	20006278 	.word	0x20006278
 800a678:	20006474 	.word	0x20006474
 800a67c:	20006324 	.word	0x20006324
 800a680:	20006404 	.word	0x20006404

0800a684 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800a684:	b570      	push	{r4, r5, r6, lr}
 800a686:	0006      	movs	r6, r0
 800a688:	000d      	movs	r5, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 800a68a:	f005 f95b 	bl	800f944 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800a68e:	4b2b      	ldr	r3, [pc, #172]	; (800a73c <EE_VerifyPageFullWriteVariable+0xb8>)
 800a690:	881a      	ldrh	r2, [r3, #0]
 800a692:	b292      	uxth	r2, r2
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800a694:	4b2a      	ldr	r3, [pc, #168]	; (800a740 <EE_VerifyPageFullWriteVariable+0xbc>)
 800a696:	881b      	ldrh	r3, [r3, #0]
 800a698:	b29b      	uxth	r3, r3
      if (PageStatusB == VALID_PAGE)
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d104      	bne.n	800a6a8 <EE_VerifyPageFullWriteVariable+0x24>
        if (PageStatusA == RECEIVE_DATA)
 800a69e:	4929      	ldr	r1, [pc, #164]	; (800a744 <EE_VerifyPageFullWriteVariable+0xc0>)
 800a6a0:	428a      	cmp	r2, r1
 800a6a2:	d007      	beq.n	800a6b4 <EE_VerifyPageFullWriteVariable+0x30>
          return PAGEB;         /* PageB valid */
 800a6a4:	3302      	adds	r3, #2
 800a6a6:	e005      	b.n	800a6b4 <EE_VerifyPageFullWriteVariable+0x30>
      else if (PageStatusA == VALID_PAGE)
 800a6a8:	2a00      	cmp	r2, #0
 800a6aa:	d143      	bne.n	800a734 <EE_VerifyPageFullWriteVariable+0xb0>
        if (PageStatusB == RECEIVE_DATA)
 800a6ac:	4925      	ldr	r1, [pc, #148]	; (800a744 <EE_VerifyPageFullWriteVariable+0xc0>)
 800a6ae:	428b      	cmp	r3, r1
 800a6b0:	d042      	beq.n	800a738 <EE_VerifyPageFullWriteVariable+0xb4>
          return PAGEA;         /* PageA valid */
 800a6b2:	0013      	movs	r3, r2
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800a6b4:	4a24      	ldr	r2, [pc, #144]	; (800a748 <EE_VerifyPageFullWriteVariable+0xc4>)
 800a6b6:	189c      	adds	r4, r3, r2
 800a6b8:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 800a6ba:	02db      	lsls	r3, r3, #11
 800a6bc:	4a23      	ldr	r2, [pc, #140]	; (800a74c <EE_VerifyPageFullWriteVariable+0xc8>)
 800a6be:	4694      	mov	ip, r2
 800a6c0:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800a6c2:	6822      	ldr	r2, [r4, #0]
 800a6c4:	3201      	adds	r2, #1
 800a6c6:	d005      	beq.n	800a6d4 <EE_VerifyPageFullWriteVariable+0x50>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800a6c8:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 800a6ca:	429c      	cmp	r4, r3
 800a6cc:	d22e      	bcs.n	800a72c <EE_VerifyPageFullWriteVariable+0xa8>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800a6ce:	6822      	ldr	r2, [r4, #0]
 800a6d0:	3201      	adds	r2, #1
 800a6d2:	d1f9      	bne.n	800a6c8 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 800a6d4:	002a      	movs	r2, r5
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	0021      	movs	r1, r4
 800a6da:	2001      	movs	r0, #1
 800a6dc:	f005 f97c 	bl	800f9d8 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a6e0:	481b      	ldr	r0, [pc, #108]	; (800a750 <EE_VerifyPageFullWriteVariable+0xcc>)
 800a6e2:	f005 f94b 	bl	800f97c <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d003      	beq.n	800a6f2 <EE_VerifyPageFullWriteVariable+0x6e>
        return pFlash.ErrorCode;
 800a6ea:	4b1a      	ldr	r3, [pc, #104]	; (800a754 <EE_VerifyPageFullWriteVariable+0xd0>)
 800a6ec:	69d8      	ldr	r0, [r3, #28]
 800a6ee:	b280      	uxth	r0, r0
 800a6f0:	e01f      	b.n	800a732 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a6f2:	4a19      	ldr	r2, [pc, #100]	; (800a758 <EE_VerifyPageFullWriteVariable+0xd4>)
 800a6f4:	6913      	ldr	r3, [r2, #16]
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	438b      	bics	r3, r1
 800a6fa:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 800a6fc:	1ca1      	adds	r1, r4, #2
 800a6fe:	0032      	movs	r2, r6
 800a700:	2300      	movs	r3, #0
 800a702:	2001      	movs	r0, #1
 800a704:	f005 f968 	bl	800f9d8 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a708:	4811      	ldr	r0, [pc, #68]	; (800a750 <EE_VerifyPageFullWriteVariable+0xcc>)
 800a70a:	f005 f937 	bl	800f97c <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 800a70e:	2800      	cmp	r0, #0
 800a710:	d003      	beq.n	800a71a <EE_VerifyPageFullWriteVariable+0x96>
        return pFlash.ErrorCode;
 800a712:	4b10      	ldr	r3, [pc, #64]	; (800a754 <EE_VerifyPageFullWriteVariable+0xd0>)
 800a714:	69d8      	ldr	r0, [r3, #28]
 800a716:	b280      	uxth	r0, r0
 800a718:	e00b      	b.n	800a732 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a71a:	4a0f      	ldr	r2, [pc, #60]	; (800a758 <EE_VerifyPageFullWriteVariable+0xd4>)
 800a71c:	6913      	ldr	r3, [r2, #16]
 800a71e:	2101      	movs	r1, #1
 800a720:	438b      	bics	r3, r1
 800a722:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 800a724:	4b0b      	ldr	r3, [pc, #44]	; (800a754 <EE_VerifyPageFullWriteVariable+0xd0>)
 800a726:	69d8      	ldr	r0, [r3, #28]
 800a728:	b280      	uxth	r0, r0
 800a72a:	e002      	b.n	800a732 <EE_VerifyPageFullWriteVariable+0xae>
    }
  }
	
	HAL_FLASH_Lock();
 800a72c:	f005 f91c 	bl	800f968 <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800a730:	2080      	movs	r0, #128	; 0x80
}
 800a732:	bd70      	pop	{r4, r5, r6, pc}
    return  NO_VALID_PAGE;
 800a734:	20ab      	movs	r0, #171	; 0xab
 800a736:	e7fc      	b.n	800a732 <EE_VerifyPageFullWriteVariable+0xae>
          return PAGEB;         /* PageB valid */
 800a738:	2302      	movs	r3, #2
 800a73a:	e7bb      	b.n	800a6b4 <EE_VerifyPageFullWriteVariable+0x30>
 800a73c:	0801e000 	.word	0x0801e000
 800a740:	0801f000 	.word	0x0801f000
 800a744:	0000eeee 	.word	0x0000eeee
 800a748:	0001003c 	.word	0x0001003c
 800a74c:	0801effe 	.word	0x0801effe
 800a750:	0000c350 	.word	0x0000c350
 800a754:	200065f8 	.word	0x200065f8
 800a758:	40022000 	.word	0x40022000

0800a75c <EE_ReadVariable>:
{
 800a75c:	b510      	push	{r4, lr}
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800a75e:	4b13      	ldr	r3, [pc, #76]	; (800a7ac <EE_ReadVariable+0x50>)
 800a760:	881c      	ldrh	r4, [r3, #0]
 800a762:	b2a4      	uxth	r4, r4
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800a764:	4b12      	ldr	r3, [pc, #72]	; (800a7b0 <EE_ReadVariable+0x54>)
 800a766:	881b      	ldrh	r3, [r3, #0]
 800a768:	b29b      	uxth	r3, r3
      if (PageStatusA == VALID_PAGE)
 800a76a:	2c00      	cmp	r4, #0
 800a76c:	d006      	beq.n	800a77c <EE_ReadVariable+0x20>
      else if (PageStatusB == VALID_PAGE)
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d003      	beq.n	800a77a <EE_ReadVariable+0x1e>
    return  NO_VALID_PAGE;
 800a772:	20ab      	movs	r0, #171	; 0xab
 800a774:	e019      	b.n	800a7aa <EE_ReadVariable+0x4e>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800a776:	2001      	movs	r0, #1
 800a778:	e017      	b.n	800a7aa <EE_ReadVariable+0x4e>
        return PAGEB;           /* PageB valid */
 800a77a:	2402      	movs	r4, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 800a77c:	02e3      	lsls	r3, r4, #11
 800a77e:	4a0d      	ldr	r2, [pc, #52]	; (800a7b4 <EE_ReadVariable+0x58>)
 800a780:	4694      	mov	ip, r2
 800a782:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800a784:	02e4      	lsls	r4, r4, #11
  while (Address > (PageStartAddress + 2))
 800a786:	4a0c      	ldr	r2, [pc, #48]	; (800a7b8 <EE_ReadVariable+0x5c>)
 800a788:	4694      	mov	ip, r2
 800a78a:	4464      	add	r4, ip
    AddressValue = (*(__IO uint16_t*)Address);
 800a78c:	881a      	ldrh	r2, [r3, #0]
 800a78e:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 800a790:	4290      	cmp	r0, r2
 800a792:	d006      	beq.n	800a7a2 <EE_ReadVariable+0x46>
      Address = Address - 4;
 800a794:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 800a796:	42a3      	cmp	r3, r4
 800a798:	d9ed      	bls.n	800a776 <EE_ReadVariable+0x1a>
    AddressValue = (*(__IO uint16_t*)Address);
 800a79a:	881a      	ldrh	r2, [r3, #0]
 800a79c:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 800a79e:	4282      	cmp	r2, r0
 800a7a0:	d1f8      	bne.n	800a794 <EE_ReadVariable+0x38>
      *Data = (*(__IO uint16_t*)(Address - 2));
 800a7a2:	3b02      	subs	r3, #2
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 800a7a8:	2000      	movs	r0, #0
}
 800a7aa:	bd10      	pop	{r4, pc}
 800a7ac:	0801e000 	.word	0x0801e000
 800a7b0:	0801f000 	.word	0x0801f000
 800a7b4:	0801effe 	.word	0x0801effe
 800a7b8:	0801e002 	.word	0x0801e002

0800a7bc <EE_WriteVariable>:
{
 800a7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7be:	46de      	mov	lr, fp
 800a7c0:	4647      	mov	r7, r8
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	0005      	movs	r5, r0
 800a7c8:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 800a7ca:	f005 f8bb 	bl	800f944 <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800a7ce:	0031      	movs	r1, r6
 800a7d0:	0028      	movs	r0, r5
 800a7d2:	f7ff ff57 	bl	800a684 <EE_VerifyPageFullWriteVariable>
 800a7d6:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 800a7d8:	2880      	cmp	r0, #128	; 0x80
 800a7da:	d007      	beq.n	800a7ec <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800a7dc:	f005 f8c4 	bl	800f968 <HAL_FLASH_Lock>
}
 800a7e0:	0020      	movs	r0, r4
 800a7e2:	b003      	add	sp, #12
 800a7e4:	bc0c      	pop	{r2, r3}
 800a7e6:	4690      	mov	r8, r2
 800a7e8:	469b      	mov	fp, r3
 800a7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 800a7ec:	f005 f8aa 	bl	800f944 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800a7f0:	4b3e      	ldr	r3, [pc, #248]	; (800a8ec <EE_WriteVariable+0x130>)
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800a7f6:	4a3e      	ldr	r2, [pc, #248]	; (800a8f0 <EE_WriteVariable+0x134>)
 800a7f8:	8812      	ldrh	r2, [r2, #0]
 800a7fa:	b292      	uxth	r2, r2
      if (PageStatusA == VALID_PAGE)
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d007      	beq.n	800a810 <EE_WriteVariable+0x54>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800a800:	342b      	adds	r4, #43	; 0x2b
      else if (PageStatusB == VALID_PAGE)
 800a802:	2a00      	cmp	r2, #0
 800a804:	d1ea      	bne.n	800a7dc <EE_WriteVariable+0x20>
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 800a806:	4b3a      	ldr	r3, [pc, #232]	; (800a8f0 <EE_WriteVariable+0x134>)
 800a808:	469b      	mov	fp, r3
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 800a80a:	4b38      	ldr	r3, [pc, #224]	; (800a8ec <EE_WriteVariable+0x130>)
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	e003      	b.n	800a818 <EE_WriteVariable+0x5c>
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 800a810:	4b36      	ldr	r3, [pc, #216]	; (800a8ec <EE_WriteVariable+0x130>)
 800a812:	469b      	mov	fp, r3
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 800a814:	4b36      	ldr	r3, [pc, #216]	; (800a8f0 <EE_WriteVariable+0x134>)
 800a816:	9301      	str	r3, [sp, #4]
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 800a818:	4a36      	ldr	r2, [pc, #216]	; (800a8f4 <EE_WriteVariable+0x138>)
 800a81a:	2300      	movs	r3, #0
 800a81c:	9901      	ldr	r1, [sp, #4]
 800a81e:	2001      	movs	r0, #1
 800a820:	f005 f8da 	bl	800f9d8 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a824:	4834      	ldr	r0, [pc, #208]	; (800a8f8 <EE_WriteVariable+0x13c>)
 800a826:	f005 f8a9 	bl	800f97c <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d003      	beq.n	800a836 <EE_WriteVariable+0x7a>
  {
    return pFlash.ErrorCode;
 800a82e:	4b33      	ldr	r3, [pc, #204]	; (800a8fc <EE_WriteVariable+0x140>)
 800a830:	69dc      	ldr	r4, [r3, #28]
 800a832:	b2a4      	uxth	r4, r4
 800a834:	e7d2      	b.n	800a7dc <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a836:	4a32      	ldr	r2, [pc, #200]	; (800a900 <EE_WriteVariable+0x144>)
 800a838:	6913      	ldr	r3, [r2, #16]
 800a83a:	2101      	movs	r1, #1
 800a83c:	438b      	bics	r3, r1
 800a83e:	6113      	str	r3, [r2, #16]
	}
			
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800a840:	0031      	movs	r1, r6
 800a842:	0028      	movs	r0, r5
 800a844:	f7ff ff1e 	bl	800a684 <EE_VerifyPageFullWriteVariable>
 800a848:	1e04      	subs	r4, r0, #0
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800a84a:	d1c7      	bne.n	800a7dc <EE_WriteVariable+0x20>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800a84c:	2701      	movs	r7, #1
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800a84e:	4b2d      	ldr	r3, [pc, #180]	; (800a904 <EE_WriteVariable+0x148>)
 800a850:	4698      	mov	r8, r3
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800a852:	4e2d      	ldr	r6, [pc, #180]	; (800a908 <EE_WriteVariable+0x14c>)
 800a854:	e003      	b.n	800a85e <EE_WriteVariable+0xa2>
 800a856:	3701      	adds	r7, #1
 800a858:	b2bf      	uxth	r7, r7
 800a85a:	42b7      	cmp	r7, r6
 800a85c:	d00f      	beq.n	800a87e <EE_WriteVariable+0xc2>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 800a85e:	42bd      	cmp	r5, r7
 800a860:	d0f9      	beq.n	800a856 <EE_WriteVariable+0x9a>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800a862:	4928      	ldr	r1, [pc, #160]	; (800a904 <EE_WriteVariable+0x148>)
 800a864:	0038      	movs	r0, r7
 800a866:	f7ff ff79 	bl	800a75c <EE_ReadVariable>
      if (ReadStatus != 0x1)
 800a86a:	2801      	cmp	r0, #1
 800a86c:	d0f3      	beq.n	800a856 <EE_WriteVariable+0x9a>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800a86e:	4643      	mov	r3, r8
 800a870:	8819      	ldrh	r1, [r3, #0]
 800a872:	0038      	movs	r0, r7
 800a874:	f7ff ff06 	bl	800a684 <EE_VerifyPageFullWriteVariable>
 800a878:	1e04      	subs	r4, r0, #0
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800a87a:	d0ec      	beq.n	800a856 <EE_WriteVariable+0x9a>
 800a87c:	e7ae      	b.n	800a7dc <EE_WriteVariable+0x20>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_PageErase(OldPageAddress);
 800a87e:	4658      	mov	r0, fp
 800a880:	f005 f922 	bl	800fac8 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a884:	481c      	ldr	r0, [pc, #112]	; (800a8f8 <EE_WriteVariable+0x13c>)
 800a886:	f005 f879 	bl	800f97c <FLASH_WaitForLastOperation>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d003      	beq.n	800a896 <EE_WriteVariable+0xda>
  {
    return pFlash.ErrorCode;
 800a88e:	4b1b      	ldr	r3, [pc, #108]	; (800a8fc <EE_WriteVariable+0x140>)
 800a890:	69dc      	ldr	r4, [r3, #28]
 800a892:	b2a4      	uxth	r4, r4
 800a894:	e7a2      	b.n	800a7dc <EE_WriteVariable+0x20>
  }
	else
	{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800a896:	2080      	movs	r0, #128	; 0x80
 800a898:	0100      	lsls	r0, r0, #4
 800a89a:	4458      	add	r0, fp
 800a89c:	f005 f914 	bl	800fac8 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a8a0:	4815      	ldr	r0, [pc, #84]	; (800a8f8 <EE_WriteVariable+0x13c>)
 800a8a2:	f005 f86b 	bl	800f97c <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d003      	beq.n	800a8b2 <EE_WriteVariable+0xf6>
		{
			return pFlash.ErrorCode;
 800a8aa:	4b14      	ldr	r3, [pc, #80]	; (800a8fc <EE_WriteVariable+0x140>)
 800a8ac:	69dc      	ldr	r4, [r3, #28]
 800a8ae:	b2a4      	uxth	r4, r4
 800a8b0:	e794      	b.n	800a7dc <EE_WriteVariable+0x20>
		}
		else
		{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a8b2:	4a13      	ldr	r2, [pc, #76]	; (800a900 <EE_WriteVariable+0x144>)
 800a8b4:	6913      	ldr	r3, [r2, #16]
 800a8b6:	2102      	movs	r1, #2
 800a8b8:	438b      	bics	r3, r1
 800a8ba:	6113      	str	r3, [r2, #16]
		}
	}
	
  /* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 800a8bc:	2200      	movs	r2, #0
 800a8be:	2300      	movs	r3, #0
 800a8c0:	9901      	ldr	r1, [sp, #4]
 800a8c2:	2001      	movs	r0, #1
 800a8c4:	f005 f888 	bl	800f9d8 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a8c8:	480b      	ldr	r0, [pc, #44]	; (800a8f8 <EE_WriteVariable+0x13c>)
 800a8ca:	f005 f857 	bl	800f97c <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d003      	beq.n	800a8da <EE_WriteVariable+0x11e>
  {
    return pFlash.ErrorCode;
 800a8d2:	4b0a      	ldr	r3, [pc, #40]	; (800a8fc <EE_WriteVariable+0x140>)
 800a8d4:	69dc      	ldr	r4, [r3, #28]
 800a8d6:	b2a4      	uxth	r4, r4
 800a8d8:	e780      	b.n	800a7dc <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a8da:	4a09      	ldr	r2, [pc, #36]	; (800a900 <EE_WriteVariable+0x144>)
 800a8dc:	6913      	ldr	r3, [r2, #16]
 800a8de:	2101      	movs	r1, #1
 800a8e0:	438b      	bics	r3, r1
 800a8e2:	6113      	str	r3, [r2, #16]
	}
			
	HAL_FLASH_Lock();
 800a8e4:	f005 f840 	bl	800f968 <HAL_FLASH_Lock>
	
  /* Return last operation flash status */
  return FlashStatus;
 800a8e8:	2400      	movs	r4, #0
 800a8ea:	e777      	b.n	800a7dc <EE_WriteVariable+0x20>
 800a8ec:	0801e000 	.word	0x0801e000
 800a8f0:	0801f000 	.word	0x0801f000
 800a8f4:	0000eeee 	.word	0x0000eeee
 800a8f8:	0000c350 	.word	0x0000c350
 800a8fc:	200065f8 	.word	0x200065f8
 800a900:	40022000 	.word	0x40022000
 800a904:	2000101c 	.word	0x2000101c
 800a908:	00000401 	.word	0x00000401

0800a90c <EE_Format>:
{
 800a90c:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800a90e:	f005 f819 	bl	800f944 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 800a912:	4829      	ldr	r0, [pc, #164]	; (800a9b8 <EE_Format+0xac>)
 800a914:	f005 f8d8 	bl	800fac8 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a918:	4828      	ldr	r0, [pc, #160]	; (800a9bc <EE_Format+0xb0>)
 800a91a:	f005 f82f 	bl	800f97c <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800a91e:	2800      	cmp	r0, #0
 800a920:	d003      	beq.n	800a92a <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800a922:	4b27      	ldr	r3, [pc, #156]	; (800a9c0 <EE_Format+0xb4>)
 800a924:	69d8      	ldr	r0, [r3, #28]
 800a926:	b280      	uxth	r0, r0
}
 800a928:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800a92a:	4826      	ldr	r0, [pc, #152]	; (800a9c4 <EE_Format+0xb8>)
 800a92c:	f005 f8cc 	bl	800fac8 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a930:	4822      	ldr	r0, [pc, #136]	; (800a9bc <EE_Format+0xb0>)
 800a932:	f005 f823 	bl	800f97c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 800a936:	2800      	cmp	r0, #0
 800a938:	d003      	beq.n	800a942 <EE_Format+0x36>
			return pFlash.ErrorCode;
 800a93a:	4b21      	ldr	r3, [pc, #132]	; (800a9c0 <EE_Format+0xb4>)
 800a93c:	69d8      	ldr	r0, [r3, #28]
 800a93e:	b280      	uxth	r0, r0
 800a940:	e7f2      	b.n	800a928 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a942:	4a21      	ldr	r2, [pc, #132]	; (800a9c8 <EE_Format+0xbc>)
 800a944:	6913      	ldr	r3, [r2, #16]
 800a946:	2102      	movs	r1, #2
 800a948:	438b      	bics	r3, r1
 800a94a:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800a94c:	2200      	movs	r2, #0
 800a94e:	2300      	movs	r3, #0
 800a950:	4919      	ldr	r1, [pc, #100]	; (800a9b8 <EE_Format+0xac>)
 800a952:	2001      	movs	r0, #1
 800a954:	f005 f840 	bl	800f9d8 <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a958:	4818      	ldr	r0, [pc, #96]	; (800a9bc <EE_Format+0xb0>)
 800a95a:	f005 f80f 	bl	800f97c <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800a95e:	2800      	cmp	r0, #0
 800a960:	d003      	beq.n	800a96a <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800a962:	4b17      	ldr	r3, [pc, #92]	; (800a9c0 <EE_Format+0xb4>)
 800a964:	69d8      	ldr	r0, [r3, #28]
 800a966:	b280      	uxth	r0, r0
 800a968:	e7de      	b.n	800a928 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a96a:	4a17      	ldr	r2, [pc, #92]	; (800a9c8 <EE_Format+0xbc>)
 800a96c:	6913      	ldr	r3, [r2, #16]
 800a96e:	2101      	movs	r1, #1
 800a970:	438b      	bics	r3, r1
 800a972:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800a974:	4815      	ldr	r0, [pc, #84]	; (800a9cc <EE_Format+0xc0>)
 800a976:	f005 f8a7 	bl	800fac8 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a97a:	4810      	ldr	r0, [pc, #64]	; (800a9bc <EE_Format+0xb0>)
 800a97c:	f004 fffe 	bl	800f97c <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800a980:	2800      	cmp	r0, #0
 800a982:	d003      	beq.n	800a98c <EE_Format+0x80>
		return pFlash.ErrorCode;
 800a984:	4b0e      	ldr	r3, [pc, #56]	; (800a9c0 <EE_Format+0xb4>)
 800a986:	69d8      	ldr	r0, [r3, #28]
 800a988:	b280      	uxth	r0, r0
 800a98a:	e7cd      	b.n	800a928 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800a98c:	4810      	ldr	r0, [pc, #64]	; (800a9d0 <EE_Format+0xc4>)
 800a98e:	f005 f89b 	bl	800fac8 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a992:	480a      	ldr	r0, [pc, #40]	; (800a9bc <EE_Format+0xb0>)
 800a994:	f004 fff2 	bl	800f97c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 800a998:	2800      	cmp	r0, #0
 800a99a:	d003      	beq.n	800a9a4 <EE_Format+0x98>
			return pFlash.ErrorCode;
 800a99c:	4b08      	ldr	r3, [pc, #32]	; (800a9c0 <EE_Format+0xb4>)
 800a99e:	69d8      	ldr	r0, [r3, #28]
 800a9a0:	b280      	uxth	r0, r0
 800a9a2:	e7c1      	b.n	800a928 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a9a4:	4a08      	ldr	r2, [pc, #32]	; (800a9c8 <EE_Format+0xbc>)
 800a9a6:	6913      	ldr	r3, [r2, #16]
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	438b      	bics	r3, r1
 800a9ac:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800a9ae:	f004 ffdb 	bl	800f968 <HAL_FLASH_Lock>
  return FlashStatus;
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	e7b8      	b.n	800a928 <EE_Format+0x1c>
 800a9b6:	46c0      	nop			; (mov r8, r8)
 800a9b8:	0801e000 	.word	0x0801e000
 800a9bc:	0000c350 	.word	0x0000c350
 800a9c0:	200065f8 	.word	0x200065f8
 800a9c4:	0801e800 	.word	0x0801e800
 800a9c8:	40022000 	.word	0x40022000
 800a9cc:	0801f000 	.word	0x0801f000
 800a9d0:	0801f800 	.word	0x0801f800

0800a9d4 <EE_Init>:
{
 800a9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9d6:	46c6      	mov	lr, r8
 800a9d8:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 800a9da:	f004 ffb3 	bl	800f944 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800a9de:	4bbe      	ldr	r3, [pc, #760]	; (800acd8 <EE_Init+0x304>)
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800a9e4:	4abd      	ldr	r2, [pc, #756]	; (800acdc <EE_Init+0x308>)
 800a9e6:	8812      	ldrh	r2, [r2, #0]
 800a9e8:	b292      	uxth	r2, r2
  switch (PageStatusA)
 800a9ea:	49bd      	ldr	r1, [pc, #756]	; (800ace0 <EE_Init+0x30c>)
 800a9ec:	428b      	cmp	r3, r1
 800a9ee:	d100      	bne.n	800a9f2 <EE_Init+0x1e>
 800a9f0:	e074      	b.n	800aadc <EE_Init+0x108>
 800a9f2:	49bc      	ldr	r1, [pc, #752]	; (800ace4 <EE_Init+0x310>)
 800a9f4:	428b      	cmp	r3, r1
 800a9f6:	d011      	beq.n	800aa1c <EE_Init+0x48>
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d100      	bne.n	800a9fe <EE_Init+0x2a>
 800a9fc:	e109      	b.n	800ac12 <EE_Init+0x23e>
      FlashStatus = EE_Format();
 800a9fe:	f7ff ff85 	bl	800a90c <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aa02:	48b9      	ldr	r0, [pc, #740]	; (800ace8 <EE_Init+0x314>)
 800aa04:	f004 ffba 	bl	800f97c <FLASH_WaitForLastOperation>
 800aa08:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 800aa0a:	2e00      	cmp	r6, #0
 800aa0c:	d102      	bne.n	800aa14 <EE_Init+0x40>
	HAL_FLASH_Lock();
 800aa0e:	f004 ffab 	bl	800f968 <HAL_FLASH_Lock>
  return HAL_OK;
 800aa12:	2600      	movs	r6, #0
}
 800aa14:	0030      	movs	r0, r6
 800aa16:	bc04      	pop	{r2}
 800aa18:	4690      	mov	r8, r2
 800aa1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800aa1c:	2a00      	cmp	r2, #0
 800aa1e:	d00d      	beq.n	800aa3c <EE_Init+0x68>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800aa20:	4baf      	ldr	r3, [pc, #700]	; (800ace0 <EE_Init+0x30c>)
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d028      	beq.n	800aa78 <EE_Init+0xa4>
        FlashStatus = EE_Format();
 800aa26:	f7ff ff71 	bl	800a90c <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aa2a:	48af      	ldr	r0, [pc, #700]	; (800ace8 <EE_Init+0x314>)
 800aa2c:	f004 ffa6 	bl	800f97c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d0ec      	beq.n	800aa0e <EE_Init+0x3a>
          return pFlash.ErrorCode;
 800aa34:	4bad      	ldr	r3, [pc, #692]	; (800acec <EE_Init+0x318>)
 800aa36:	69de      	ldr	r6, [r3, #28]
 800aa38:	b2b6      	uxth	r6, r6
 800aa3a:	e7eb      	b.n	800aa14 <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 800aa3c:	48a6      	ldr	r0, [pc, #664]	; (800acd8 <EE_Init+0x304>)
 800aa3e:	f005 f843 	bl	800fac8 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aa42:	48a9      	ldr	r0, [pc, #676]	; (800ace8 <EE_Init+0x314>)
 800aa44:	f004 ff9a 	bl	800f97c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d003      	beq.n	800aa54 <EE_Init+0x80>
          return pFlash.ErrorCode;
 800aa4c:	4ba7      	ldr	r3, [pc, #668]	; (800acec <EE_Init+0x318>)
 800aa4e:	69de      	ldr	r6, [r3, #28]
 800aa50:	b2b6      	uxth	r6, r6
 800aa52:	e7df      	b.n	800aa14 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800aa54:	48a6      	ldr	r0, [pc, #664]	; (800acf0 <EE_Init+0x31c>)
 800aa56:	f005 f837 	bl	800fac8 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aa5a:	48a3      	ldr	r0, [pc, #652]	; (800ace8 <EE_Init+0x314>)
 800aa5c:	f004 ff8e 	bl	800f97c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d105      	bne.n	800aa70 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800aa64:	4aa3      	ldr	r2, [pc, #652]	; (800acf4 <EE_Init+0x320>)
 800aa66:	6913      	ldr	r3, [r2, #16]
 800aa68:	2102      	movs	r1, #2
 800aa6a:	438b      	bics	r3, r1
 800aa6c:	6113      	str	r3, [r2, #16]
 800aa6e:	e7ce      	b.n	800aa0e <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800aa70:	4b9e      	ldr	r3, [pc, #632]	; (800acec <EE_Init+0x318>)
 800aa72:	69de      	ldr	r6, [r3, #28]
 800aa74:	b2b6      	uxth	r6, r6
 800aa76:	e7cd      	b.n	800aa14 <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800aa78:	4897      	ldr	r0, [pc, #604]	; (800acd8 <EE_Init+0x304>)
 800aa7a:	f005 f825 	bl	800fac8 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aa7e:	489a      	ldr	r0, [pc, #616]	; (800ace8 <EE_Init+0x314>)
 800aa80:	f004 ff7c 	bl	800f97c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d003      	beq.n	800aa90 <EE_Init+0xbc>
          return pFlash.ErrorCode;
 800aa88:	4b98      	ldr	r3, [pc, #608]	; (800acec <EE_Init+0x318>)
 800aa8a:	69de      	ldr	r6, [r3, #28]
 800aa8c:	b2b6      	uxth	r6, r6
 800aa8e:	e7c1      	b.n	800aa14 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800aa90:	4897      	ldr	r0, [pc, #604]	; (800acf0 <EE_Init+0x31c>)
 800aa92:	f005 f819 	bl	800fac8 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aa96:	4894      	ldr	r0, [pc, #592]	; (800ace8 <EE_Init+0x314>)
 800aa98:	f004 ff70 	bl	800f97c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d003      	beq.n	800aaa8 <EE_Init+0xd4>
						return pFlash.ErrorCode;
 800aaa0:	4b92      	ldr	r3, [pc, #584]	; (800acec <EE_Init+0x318>)
 800aaa2:	69de      	ldr	r6, [r3, #28]
 800aaa4:	b2b6      	uxth	r6, r6
 800aaa6:	e7b5      	b.n	800aa14 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800aaa8:	4a92      	ldr	r2, [pc, #584]	; (800acf4 <EE_Init+0x320>)
 800aaaa:	6913      	ldr	r3, [r2, #16]
 800aaac:	2102      	movs	r1, #2
 800aaae:	438b      	bics	r3, r1
 800aab0:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 800aab2:	2200      	movs	r2, #0
 800aab4:	2300      	movs	r3, #0
 800aab6:	4989      	ldr	r1, [pc, #548]	; (800acdc <EE_Init+0x308>)
 800aab8:	2001      	movs	r0, #1
 800aaba:	f004 ff8d 	bl	800f9d8 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aabe:	488a      	ldr	r0, [pc, #552]	; (800ace8 <EE_Init+0x314>)
 800aac0:	f004 ff5c 	bl	800f97c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d105      	bne.n	800aad4 <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800aac8:	4a8a      	ldr	r2, [pc, #552]	; (800acf4 <EE_Init+0x320>)
 800aaca:	6913      	ldr	r3, [r2, #16]
 800aacc:	2101      	movs	r1, #1
 800aace:	438b      	bics	r3, r1
 800aad0:	6113      	str	r3, [r2, #16]
 800aad2:	e79c      	b.n	800aa0e <EE_Init+0x3a>
          return pFlash.ErrorCode;
 800aad4:	4b85      	ldr	r3, [pc, #532]	; (800acec <EE_Init+0x318>)
 800aad6:	69de      	ldr	r6, [r3, #28]
 800aad8:	b2b6      	uxth	r6, r6
 800aada:	e79b      	b.n	800aa14 <EE_Init+0x40>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800aadc:	2a00      	cmp	r2, #0
 800aade:	d157      	bne.n	800ab90 <EE_Init+0x1bc>
 800aae0:	2401      	movs	r4, #1
  int16_t x = -1;
 800aae2:	2701      	movs	r7, #1
 800aae4:	427f      	negs	r7, r7
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 800aae6:	4d84      	ldr	r5, [pc, #528]	; (800acf8 <EE_Init+0x324>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800aae8:	4b84      	ldr	r3, [pc, #528]	; (800acfc <EE_Init+0x328>)
 800aaea:	4698      	mov	r8, r3
 800aaec:	e005      	b.n	800aafa <EE_Init+0x126>
            x = VarIdx;
 800aaee:	b227      	sxth	r7, r4
 800aaf0:	e008      	b.n	800ab04 <EE_Init+0x130>
 800aaf2:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800aaf4:	4b82      	ldr	r3, [pc, #520]	; (800ad00 <EE_Init+0x32c>)
 800aaf6:	429c      	cmp	r4, r3
 800aaf8:	d018      	beq.n	800ab2c <EE_Init+0x158>
 800aafa:	b2a6      	uxth	r6, r4
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 800aafc:	882b      	ldrh	r3, [r5, #0]
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	42b3      	cmp	r3, r6
 800ab02:	d0f4      	beq.n	800aaee <EE_Init+0x11a>
          if (VarIdx != x)
 800ab04:	42bc      	cmp	r4, r7
 800ab06:	d0f4      	beq.n	800aaf2 <EE_Init+0x11e>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800ab08:	497c      	ldr	r1, [pc, #496]	; (800acfc <EE_Init+0x328>)
 800ab0a:	0030      	movs	r0, r6
 800ab0c:	f7ff fe26 	bl	800a75c <EE_ReadVariable>
            if (ReadStatus != 0x1)
 800ab10:	2801      	cmp	r0, #1
 800ab12:	d0ee      	beq.n	800aaf2 <EE_Init+0x11e>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800ab14:	4643      	mov	r3, r8
 800ab16:	8819      	ldrh	r1, [r3, #0]
 800ab18:	0030      	movs	r0, r6
 800ab1a:	f7ff fdb3 	bl	800a684 <EE_VerifyPageFullWriteVariable>
 800ab1e:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ab20:	4871      	ldr	r0, [pc, #452]	; (800ace8 <EE_Init+0x314>)
 800ab22:	f004 ff2b 	bl	800f97c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d0e3      	beq.n	800aaf2 <EE_Init+0x11e>
 800ab2a:	e773      	b.n	800aa14 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	2300      	movs	r3, #0
 800ab30:	4969      	ldr	r1, [pc, #420]	; (800acd8 <EE_Init+0x304>)
 800ab32:	2001      	movs	r0, #1
 800ab34:	f004 ff50 	bl	800f9d8 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ab38:	486b      	ldr	r0, [pc, #428]	; (800ace8 <EE_Init+0x314>)
 800ab3a:	f004 ff1f 	bl	800f97c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d003      	beq.n	800ab4a <EE_Init+0x176>
          return pFlash.ErrorCode;
 800ab42:	4b6a      	ldr	r3, [pc, #424]	; (800acec <EE_Init+0x318>)
 800ab44:	69de      	ldr	r6, [r3, #28]
 800ab46:	b2b6      	uxth	r6, r6
 800ab48:	e764      	b.n	800aa14 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ab4a:	4a6a      	ldr	r2, [pc, #424]	; (800acf4 <EE_Init+0x320>)
 800ab4c:	6913      	ldr	r3, [r2, #16]
 800ab4e:	2101      	movs	r1, #1
 800ab50:	438b      	bics	r3, r1
 800ab52:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ab54:	4861      	ldr	r0, [pc, #388]	; (800acdc <EE_Init+0x308>)
 800ab56:	f004 ffb7 	bl	800fac8 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ab5a:	4863      	ldr	r0, [pc, #396]	; (800ace8 <EE_Init+0x314>)
 800ab5c:	f004 ff0e 	bl	800f97c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d003      	beq.n	800ab6c <EE_Init+0x198>
          return pFlash.ErrorCode;
 800ab64:	4b61      	ldr	r3, [pc, #388]	; (800acec <EE_Init+0x318>)
 800ab66:	69de      	ldr	r6, [r3, #28]
 800ab68:	b2b6      	uxth	r6, r6
 800ab6a:	e753      	b.n	800aa14 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ab6c:	4865      	ldr	r0, [pc, #404]	; (800ad04 <EE_Init+0x330>)
 800ab6e:	f004 ffab 	bl	800fac8 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ab72:	485d      	ldr	r0, [pc, #372]	; (800ace8 <EE_Init+0x314>)
 800ab74:	f004 ff02 	bl	800f97c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	d105      	bne.n	800ab88 <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ab7c:	4a5d      	ldr	r2, [pc, #372]	; (800acf4 <EE_Init+0x320>)
 800ab7e:	6913      	ldr	r3, [r2, #16]
 800ab80:	2102      	movs	r1, #2
 800ab82:	438b      	bics	r3, r1
 800ab84:	6113      	str	r3, [r2, #16]
 800ab86:	e742      	b.n	800aa0e <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800ab88:	4b58      	ldr	r3, [pc, #352]	; (800acec <EE_Init+0x318>)
 800ab8a:	69de      	ldr	r6, [r3, #28]
 800ab8c:	b2b6      	uxth	r6, r6
 800ab8e:	e741      	b.n	800aa14 <EE_Init+0x40>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 800ab90:	4b54      	ldr	r3, [pc, #336]	; (800ace4 <EE_Init+0x310>)
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d00b      	beq.n	800abae <EE_Init+0x1da>
        FlashStatus = EE_Format();
 800ab96:	f7ff feb9 	bl	800a90c <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ab9a:	4853      	ldr	r0, [pc, #332]	; (800ace8 <EE_Init+0x314>)
 800ab9c:	f004 feee 	bl	800f97c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d100      	bne.n	800aba6 <EE_Init+0x1d2>
 800aba4:	e733      	b.n	800aa0e <EE_Init+0x3a>
          return pFlash.ErrorCode;
 800aba6:	4b51      	ldr	r3, [pc, #324]	; (800acec <EE_Init+0x318>)
 800aba8:	69de      	ldr	r6, [r3, #28]
 800abaa:	b2b6      	uxth	r6, r6
 800abac:	e732      	b.n	800aa14 <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800abae:	484b      	ldr	r0, [pc, #300]	; (800acdc <EE_Init+0x308>)
 800abb0:	f004 ff8a 	bl	800fac8 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800abb4:	484c      	ldr	r0, [pc, #304]	; (800ace8 <EE_Init+0x314>)
 800abb6:	f004 fee1 	bl	800f97c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800abba:	2800      	cmp	r0, #0
 800abbc:	d003      	beq.n	800abc6 <EE_Init+0x1f2>
          return pFlash.ErrorCode;
 800abbe:	4b4b      	ldr	r3, [pc, #300]	; (800acec <EE_Init+0x318>)
 800abc0:	69de      	ldr	r6, [r3, #28]
 800abc2:	b2b6      	uxth	r6, r6
 800abc4:	e726      	b.n	800aa14 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800abc6:	484f      	ldr	r0, [pc, #316]	; (800ad04 <EE_Init+0x330>)
 800abc8:	f004 ff7e 	bl	800fac8 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800abcc:	4846      	ldr	r0, [pc, #280]	; (800ace8 <EE_Init+0x314>)
 800abce:	f004 fed5 	bl	800f97c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d003      	beq.n	800abde <EE_Init+0x20a>
						return pFlash.ErrorCode;
 800abd6:	4b45      	ldr	r3, [pc, #276]	; (800acec <EE_Init+0x318>)
 800abd8:	69de      	ldr	r6, [r3, #28]
 800abda:	b2b6      	uxth	r6, r6
 800abdc:	e71a      	b.n	800aa14 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800abde:	4a45      	ldr	r2, [pc, #276]	; (800acf4 <EE_Init+0x320>)
 800abe0:	6913      	ldr	r3, [r2, #16]
 800abe2:	2102      	movs	r1, #2
 800abe4:	438b      	bics	r3, r1
 800abe6:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800abe8:	2200      	movs	r2, #0
 800abea:	2300      	movs	r3, #0
 800abec:	493a      	ldr	r1, [pc, #232]	; (800acd8 <EE_Init+0x304>)
 800abee:	2001      	movs	r0, #1
 800abf0:	f004 fef2 	bl	800f9d8 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800abf4:	483c      	ldr	r0, [pc, #240]	; (800ace8 <EE_Init+0x314>)
 800abf6:	f004 fec1 	bl	800f97c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d003      	beq.n	800ac06 <EE_Init+0x232>
          return pFlash.ErrorCode;
 800abfe:	4b3b      	ldr	r3, [pc, #236]	; (800acec <EE_Init+0x318>)
 800ac00:	69de      	ldr	r6, [r3, #28]
 800ac02:	b2b6      	uxth	r6, r6
 800ac04:	e706      	b.n	800aa14 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ac06:	4a3b      	ldr	r2, [pc, #236]	; (800acf4 <EE_Init+0x320>)
 800ac08:	6913      	ldr	r3, [r2, #16]
 800ac0a:	2101      	movs	r1, #1
 800ac0c:	438b      	bics	r3, r1
 800ac0e:	6113      	str	r3, [r2, #16]
 800ac10:	e6fd      	b.n	800aa0e <EE_Init+0x3a>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800ac12:	2a00      	cmp	r2, #0
 800ac14:	d009      	beq.n	800ac2a <EE_Init+0x256>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 800ac16:	4b33      	ldr	r3, [pc, #204]	; (800ace4 <EE_Init+0x310>)
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d010      	beq.n	800ac3e <EE_Init+0x26a>
 800ac1c:	2401      	movs	r4, #1
  int16_t x = -1;
 800ac1e:	2701      	movs	r7, #1
 800ac20:	427f      	negs	r7, r7
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 800ac22:	4d39      	ldr	r5, [pc, #228]	; (800ad08 <EE_Init+0x334>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800ac24:	4b35      	ldr	r3, [pc, #212]	; (800acfc <EE_Init+0x328>)
 800ac26:	4698      	mov	r8, r3
 800ac28:	e02d      	b.n	800ac86 <EE_Init+0x2b2>
        FlashStatus = EE_Format();
 800ac2a:	f7ff fe6f 	bl	800a90c <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ac2e:	482e      	ldr	r0, [pc, #184]	; (800ace8 <EE_Init+0x314>)
 800ac30:	f004 fea4 	bl	800f97c <FLASH_WaitForLastOperation>
 800ac34:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 800ac36:	2e00      	cmp	r6, #0
 800ac38:	d100      	bne.n	800ac3c <EE_Init+0x268>
 800ac3a:	e6e8      	b.n	800aa0e <EE_Init+0x3a>
 800ac3c:	e6ea      	b.n	800aa14 <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ac3e:	4827      	ldr	r0, [pc, #156]	; (800acdc <EE_Init+0x308>)
 800ac40:	f004 ff42 	bl	800fac8 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ac44:	4828      	ldr	r0, [pc, #160]	; (800ace8 <EE_Init+0x314>)
 800ac46:	f004 fe99 	bl	800f97c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d003      	beq.n	800ac56 <EE_Init+0x282>
          return pFlash.ErrorCode;
 800ac4e:	4b27      	ldr	r3, [pc, #156]	; (800acec <EE_Init+0x318>)
 800ac50:	69de      	ldr	r6, [r3, #28]
 800ac52:	b2b6      	uxth	r6, r6
 800ac54:	e6de      	b.n	800aa14 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ac56:	482b      	ldr	r0, [pc, #172]	; (800ad04 <EE_Init+0x330>)
 800ac58:	f004 ff36 	bl	800fac8 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ac5c:	4822      	ldr	r0, [pc, #136]	; (800ace8 <EE_Init+0x314>)
 800ac5e:	f004 fe8d 	bl	800f97c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d105      	bne.n	800ac72 <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ac66:	4a23      	ldr	r2, [pc, #140]	; (800acf4 <EE_Init+0x320>)
 800ac68:	6913      	ldr	r3, [r2, #16]
 800ac6a:	2102      	movs	r1, #2
 800ac6c:	438b      	bics	r3, r1
 800ac6e:	6113      	str	r3, [r2, #16]
 800ac70:	e6cd      	b.n	800aa0e <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800ac72:	4b1e      	ldr	r3, [pc, #120]	; (800acec <EE_Init+0x318>)
 800ac74:	69de      	ldr	r6, [r3, #28]
 800ac76:	b2b6      	uxth	r6, r6
 800ac78:	e6cc      	b.n	800aa14 <EE_Init+0x40>
            x = VarIdx;
 800ac7a:	b227      	sxth	r7, r4
 800ac7c:	e008      	b.n	800ac90 <EE_Init+0x2bc>
 800ac7e:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800ac80:	4b1f      	ldr	r3, [pc, #124]	; (800ad00 <EE_Init+0x32c>)
 800ac82:	429c      	cmp	r4, r3
 800ac84:	d018      	beq.n	800acb8 <EE_Init+0x2e4>
 800ac86:	b2a6      	uxth	r6, r4
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 800ac88:	882b      	ldrh	r3, [r5, #0]
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	42b3      	cmp	r3, r6
 800ac8e:	d0f4      	beq.n	800ac7a <EE_Init+0x2a6>
          if (VarIdx != x)
 800ac90:	42bc      	cmp	r4, r7
 800ac92:	d0f4      	beq.n	800ac7e <EE_Init+0x2aa>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800ac94:	4919      	ldr	r1, [pc, #100]	; (800acfc <EE_Init+0x328>)
 800ac96:	0030      	movs	r0, r6
 800ac98:	f7ff fd60 	bl	800a75c <EE_ReadVariable>
            if (ReadStatus != 0x1)
 800ac9c:	2801      	cmp	r0, #1
 800ac9e:	d0ee      	beq.n	800ac7e <EE_Init+0x2aa>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800aca0:	4643      	mov	r3, r8
 800aca2:	8819      	ldrh	r1, [r3, #0]
 800aca4:	0030      	movs	r0, r6
 800aca6:	f7ff fced 	bl	800a684 <EE_VerifyPageFullWriteVariable>
 800acaa:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800acac:	480e      	ldr	r0, [pc, #56]	; (800ace8 <EE_Init+0x314>)
 800acae:	f004 fe65 	bl	800f97c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d0e3      	beq.n	800ac7e <EE_Init+0x2aa>
 800acb6:	e6ad      	b.n	800aa14 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 800acb8:	2200      	movs	r2, #0
 800acba:	2300      	movs	r3, #0
 800acbc:	4907      	ldr	r1, [pc, #28]	; (800acdc <EE_Init+0x308>)
 800acbe:	2001      	movs	r0, #1
 800acc0:	f004 fe8a 	bl	800f9d8 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800acc4:	4808      	ldr	r0, [pc, #32]	; (800ace8 <EE_Init+0x314>)
 800acc6:	f004 fe59 	bl	800f97c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800acca:	2800      	cmp	r0, #0
 800accc:	d01e      	beq.n	800ad0c <EE_Init+0x338>
          return pFlash.ErrorCode;
 800acce:	4b07      	ldr	r3, [pc, #28]	; (800acec <EE_Init+0x318>)
 800acd0:	69de      	ldr	r6, [r3, #28]
 800acd2:	b2b6      	uxth	r6, r6
 800acd4:	e69e      	b.n	800aa14 <EE_Init+0x40>
 800acd6:	46c0      	nop			; (mov r8, r8)
 800acd8:	0801e000 	.word	0x0801e000
 800acdc:	0801f000 	.word	0x0801f000
 800ace0:	0000eeee 	.word	0x0000eeee
 800ace4:	0000ffff 	.word	0x0000ffff
 800ace8:	0000c350 	.word	0x0000c350
 800acec:	200065f8 	.word	0x200065f8
 800acf0:	0801e800 	.word	0x0801e800
 800acf4:	40022000 	.word	0x40022000
 800acf8:	0801e006 	.word	0x0801e006
 800acfc:	2000101c 	.word	0x2000101c
 800ad00:	00000401 	.word	0x00000401
 800ad04:	0801f800 	.word	0x0801f800
 800ad08:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ad0c:	4a11      	ldr	r2, [pc, #68]	; (800ad54 <EE_Init+0x380>)
 800ad0e:	6913      	ldr	r3, [r2, #16]
 800ad10:	2101      	movs	r1, #1
 800ad12:	438b      	bics	r3, r1
 800ad14:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800ad16:	4810      	ldr	r0, [pc, #64]	; (800ad58 <EE_Init+0x384>)
 800ad18:	f004 fed6 	bl	800fac8 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ad1c:	480f      	ldr	r0, [pc, #60]	; (800ad5c <EE_Init+0x388>)
 800ad1e:	f004 fe2d 	bl	800f97c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d003      	beq.n	800ad2e <EE_Init+0x35a>
          return pFlash.ErrorCode;
 800ad26:	4b0e      	ldr	r3, [pc, #56]	; (800ad60 <EE_Init+0x38c>)
 800ad28:	69de      	ldr	r6, [r3, #28]
 800ad2a:	b2b6      	uxth	r6, r6
 800ad2c:	e672      	b.n	800aa14 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ad2e:	480d      	ldr	r0, [pc, #52]	; (800ad64 <EE_Init+0x390>)
 800ad30:	f004 feca 	bl	800fac8 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ad34:	4809      	ldr	r0, [pc, #36]	; (800ad5c <EE_Init+0x388>)
 800ad36:	f004 fe21 	bl	800f97c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d105      	bne.n	800ad4a <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ad3e:	4a05      	ldr	r2, [pc, #20]	; (800ad54 <EE_Init+0x380>)
 800ad40:	6913      	ldr	r3, [r2, #16]
 800ad42:	2102      	movs	r1, #2
 800ad44:	438b      	bics	r3, r1
 800ad46:	6113      	str	r3, [r2, #16]
 800ad48:	e661      	b.n	800aa0e <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800ad4a:	4b05      	ldr	r3, [pc, #20]	; (800ad60 <EE_Init+0x38c>)
 800ad4c:	69de      	ldr	r6, [r3, #28]
 800ad4e:	b2b6      	uxth	r6, r6
 800ad50:	e660      	b.n	800aa14 <EE_Init+0x40>
 800ad52:	46c0      	nop			; (mov r8, r8)
 800ad54:	40022000 	.word	0x40022000
 800ad58:	0801e000 	.word	0x0801e000
 800ad5c:	0000c350 	.word	0x0000c350
 800ad60:	200065f8 	.word	0x200065f8
 800ad64:	0801e800 	.word	0x0801e800

0800ad68 <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 800ad68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad6a:	46c6      	mov	lr, r8
 800ad6c:	b500      	push	{lr}
	
  /* Infinite loop */
  for(;;)
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
 800ad6e:	4c2b      	ldr	r4, [pc, #172]	; (800ae1c <StartDefaultTask+0xb4>)
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
				indMode = IND_OFF;
 800ad70:	46a0      	mov	r8, r4
				break;
			
			case IND_SHORT_BLINK :
				RTOS_IND_blink(30);
				indMode = IND_OFF;
 800ad72:	0027      	movs	r7, r4
 800ad74:	e020      	b.n	800adb8 <StartDefaultTask+0x50>
				RTOS_IND_blink(200);
 800ad76:	2680      	movs	r6, #128	; 0x80
 800ad78:	0136      	lsls	r6, r6, #4
 800ad7a:	2590      	movs	r5, #144	; 0x90
 800ad7c:	05ed      	lsls	r5, r5, #23
 800ad7e:	2201      	movs	r2, #1
 800ad80:	0031      	movs	r1, r6
 800ad82:	0028      	movs	r0, r5
 800ad84:	f004 fff8 	bl	800fd78 <HAL_GPIO_WritePin>
 800ad88:	20c8      	movs	r0, #200	; 0xc8
 800ad8a:	f003 fae2 	bl	800e352 <osDelay>
 800ad8e:	2200      	movs	r2, #0
 800ad90:	0031      	movs	r1, r6
 800ad92:	0028      	movs	r0, r5
 800ad94:	f004 fff0 	bl	800fd78 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800ad98:	4b20      	ldr	r3, [pc, #128]	; (800ae1c <StartDefaultTask+0xb4>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	701a      	strb	r2, [r3, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 800ad9e:	f7fa f9fb 	bl	8005198 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 800ada2:	f7ff fb3b 	bl	800a41c <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 800ada6:	4b1e      	ldr	r3, [pc, #120]	; (800ae20 <StartDefaultTask+0xb8>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d102      	bne.n	800adb4 <StartDefaultTask+0x4c>
 800adae:	4b1d      	ldr	r3, [pc, #116]	; (800ae24 <StartDefaultTask+0xbc>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 800adb4:	f003 fe56 	bl	800ea64 <vPortYield>
		switch (indMode)
 800adb8:	7823      	ldrb	r3, [r4, #0]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d004      	beq.n	800adc8 <StartDefaultTask+0x60>
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	d017      	beq.n	800adf2 <StartDefaultTask+0x8a>
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d1eb      	bne.n	800ad9e <StartDefaultTask+0x36>
 800adc6:	e7d6      	b.n	800ad76 <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 800adc8:	2680      	movs	r6, #128	; 0x80
 800adca:	0136      	lsls	r6, r6, #4
 800adcc:	2590      	movs	r5, #144	; 0x90
 800adce:	05ed      	lsls	r5, r5, #23
 800add0:	2201      	movs	r2, #1
 800add2:	0031      	movs	r1, r6
 800add4:	0028      	movs	r0, r5
 800add6:	f004 ffcf 	bl	800fd78 <HAL_GPIO_WritePin>
 800adda:	2064      	movs	r0, #100	; 0x64
 800addc:	f003 fab9 	bl	800e352 <osDelay>
 800ade0:	2200      	movs	r2, #0
 800ade2:	0031      	movs	r1, r6
 800ade4:	0028      	movs	r0, r5
 800ade6:	f004 ffc7 	bl	800fd78 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800adea:	2300      	movs	r3, #0
 800adec:	4642      	mov	r2, r8
 800adee:	7013      	strb	r3, [r2, #0]
				break;
 800adf0:	e7d5      	b.n	800ad9e <StartDefaultTask+0x36>
				RTOS_IND_blink(30);
 800adf2:	2680      	movs	r6, #128	; 0x80
 800adf4:	0136      	lsls	r6, r6, #4
 800adf6:	2590      	movs	r5, #144	; 0x90
 800adf8:	05ed      	lsls	r5, r5, #23
 800adfa:	2201      	movs	r2, #1
 800adfc:	0031      	movs	r1, r6
 800adfe:	0028      	movs	r0, r5
 800ae00:	f004 ffba 	bl	800fd78 <HAL_GPIO_WritePin>
 800ae04:	201e      	movs	r0, #30
 800ae06:	f003 faa4 	bl	800e352 <osDelay>
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	0031      	movs	r1, r6
 800ae0e:	0028      	movs	r0, r5
 800ae10:	f004 ffb2 	bl	800fd78 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800ae14:	2300      	movs	r3, #0
 800ae16:	703b      	strb	r3, [r7, #0]
				break;
 800ae18:	e7c1      	b.n	800ad9e <StartDefaultTask+0x36>
 800ae1a:	46c0      	nop			; (mov r8, r8)
 800ae1c:	20000902 	.word	0x20000902
 800ae20:	20000b91 	.word	0x20000b91
 800ae24:	20000867 	.word	0x20000867

0800ae28 <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 800ae28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae2a:	46de      	mov	lr, fp
 800ae2c:	4657      	mov	r7, sl
 800ae2e:	464e      	mov	r6, r9
 800ae30:	4645      	mov	r5, r8
 800ae32:	b5e0      	push	{r5, r6, r7, lr}
 800ae34:	b089      	sub	sp, #36	; 0x24
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	469b      	mov	fp, r3

						/* A.5.1. Copy the packet to message buffer */	
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
						} else {				// Message wraps around
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 800ae3a:	4bd6      	ldr	r3, [pc, #856]	; (800b194 <BackEndTask+0x36c>)
 800ae3c:	3b70      	subs	r3, #112	; 0x70
 800ae3e:	9306      	str	r3, [sp, #24]
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 800ae40:	4bd4      	ldr	r3, [pc, #848]	; (800b194 <BackEndTask+0x36c>)
 800ae42:	3b70      	subs	r3, #112	; 0x70
 800ae44:	9307      	str	r3, [sp, #28]
 800ae46:	46d9      	mov	r9, fp
 800ae48:	e1c4      	b.n	800b1d4 <BackEndTask+0x3ac>
 800ae4a:	1ebb      	subs	r3, r7, #2
 800ae4c:	001a      	movs	r2, r3
 800ae4e:	9303      	str	r3, [sp, #12]
 800ae50:	4bd1      	ldr	r3, [pc, #836]	; (800b198 <BackEndTask+0x370>)
 800ae52:	4692      	mov	sl, r2
 800ae54:	449a      	add	sl, r3
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 800ae56:	4653      	mov	r3, sl
 800ae58:	781a      	ldrb	r2, [r3, #0]
 800ae5a:	2a3f      	cmp	r2, #63	; 0x3f
 800ae5c:	dc17      	bgt.n	800ae8e <BackEndTask+0x66>
							if (BOS.disableCLI == false)
 800ae5e:	4bcf      	ldr	r3, [pc, #828]	; (800b19c <BackEndTask+0x374>)
 800ae60:	7edb      	ldrb	r3, [r3, #27]
 800ae62:	469c      	mov	ip, r3
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 800ae64:	0013      	movs	r3, r2
							if (BOS.disableCLI == false)
 800ae66:	2100      	movs	r1, #0
 800ae68:	e004      	b.n	800ae74 <BackEndTask+0x4c>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800ae6a:	2b3f      	cmp	r3, #63	; 0x3f
 800ae6c:	d023      	beq.n	800aeb6 <BackEndTask+0x8e>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 800ae6e:	3301      	adds	r3, #1
 800ae70:	2b40      	cmp	r3, #64	; 0x40
 800ae72:	d009      	beq.n	800ae88 <BackEndTask+0x60>
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 800ae74:	2b3e      	cmp	r3, #62	; 0x3e
 800ae76:	dcf8      	bgt.n	800ae6a <BackEndTask+0x42>
 800ae78:	5cf0      	ldrb	r0, [r6, r3]
 800ae7a:	2848      	cmp	r0, #72	; 0x48
 800ae7c:	d1f5      	bne.n	800ae6a <BackEndTask+0x42>
 800ae7e:	18f0      	adds	r0, r6, r3
 800ae80:	7840      	ldrb	r0, [r0, #1]
 800ae82:	285a      	cmp	r0, #90	; 0x5a
 800ae84:	d1f1      	bne.n	800ae6a <BackEndTask+0x42>
 800ae86:	4699      	mov	r9, r3
				if (emptyBuffer) {	
 800ae88:	2900      	cmp	r1, #0
 800ae8a:	d000      	beq.n	800ae8e <BackEndTask+0x66>
 800ae8c:	e167      	b.n	800b15e <BackEndTask+0x336>
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 800ae8e:	464b      	mov	r3, r9
 800ae90:	2b3d      	cmp	r3, #61	; 0x3d
 800ae92:	d051      	beq.n	800af38 <BackEndTask+0x110>
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 800ae94:	2b3e      	cmp	r3, #62	; 0x3e
 800ae96:	d100      	bne.n	800ae9a <BackEndTask+0x72>
 800ae98:	e0aa      	b.n	800aff0 <BackEndTask+0x1c8>
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 800ae9a:	2b3f      	cmp	r3, #63	; 0x3f
 800ae9c:	d100      	bne.n	800aea0 <BackEndTask+0x78>
 800ae9e:	e0ac      	b.n	800affa <BackEndTask+0x1d2>
					packetLength = UARTRxBuf[port-1][packetStart+2];
 800aea0:	9b03      	ldr	r3, [sp, #12]
 800aea2:	019a      	lsls	r2, r3, #6
 800aea4:	4bbe      	ldr	r3, [pc, #760]	; (800b1a0 <BackEndTask+0x378>)
 800aea6:	189b      	adds	r3, r3, r2
 800aea8:	444b      	add	r3, r9
 800aeaa:	789b      	ldrb	r3, [r3, #2]
 800aeac:	9301      	str	r3, [sp, #4]
					parseStart = packetStart+3;
 800aeae:	464b      	mov	r3, r9
 800aeb0:	3303      	adds	r3, #3
 800aeb2:	9304      	str	r3, [sp, #16]
 800aeb4:	e046      	b.n	800af44 <BackEndTask+0x11c>
 800aeb6:	9601      	str	r6, [sp, #4]
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800aeb8:	203f      	movs	r0, #63	; 0x3f
 800aeba:	4680      	mov	r8, r0
 800aebc:	44b0      	add	r8, r6
 800aebe:	4640      	mov	r0, r8
 800aec0:	7800      	ldrb	r0, [r0, #0]
 800aec2:	2848      	cmp	r0, #72	; 0x48
 800aec4:	d005      	beq.n	800aed2 <BackEndTask+0xaa>
							if (BOS.disableCLI == false)
 800aec6:	4663      	mov	r3, ip
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d000      	beq.n	800aece <BackEndTask+0xa6>
 800aecc:	e147      	b.n	800b15e <BackEndTask+0x336>
 800aece:	9801      	ldr	r0, [sp, #4]
 800aed0:	e00d      	b.n	800aeee <BackEndTask+0xc6>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800aed2:	7830      	ldrb	r0, [r6, #0]
 800aed4:	285a      	cmp	r0, #90	; 0x5a
 800aed6:	d1f6      	bne.n	800aec6 <BackEndTask+0x9e>
				if (emptyBuffer) {	
 800aed8:	2900      	cmp	r1, #0
 800aeda:	d100      	bne.n	800aede <BackEndTask+0xb6>
 800aedc:	e08d      	b.n	800affa <BackEndTask+0x1d2>
						packetStart = MSG_RX_BUF_SIZE-1;	
 800aede:	4699      	mov	r9, r3
 800aee0:	e13d      	b.n	800b15e <BackEndTask+0x336>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800aee2:	2a3f      	cmp	r2, #63	; 0x3f
 800aee4:	d023      	beq.n	800af2e <BackEndTask+0x106>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 800aee6:	3201      	adds	r2, #1
 800aee8:	2a40      	cmp	r2, #64	; 0x40
 800aeea:	d100      	bne.n	800aeee <BackEndTask+0xc6>
 800aeec:	e137      	b.n	800b15e <BackEndTask+0x336>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800aeee:	5c83      	ldrb	r3, [r0, r2]
 800aef0:	2b0d      	cmp	r3, #13
 800aef2:	d1f8      	bne.n	800aee6 <BackEndTask+0xbe>
 800aef4:	2a3e      	cmp	r2, #62	; 0x3e
 800aef6:	dcf4      	bgt.n	800aee2 <BackEndTask+0xba>
 800aef8:	1881      	adds	r1, r0, r2
 800aefa:	784b      	ldrb	r3, [r1, #1]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1f0      	bne.n	800aee2 <BackEndTask+0xba>
										UARTRxBuf[port-1][j] = 0;
 800af00:	9b03      	ldr	r3, [sp, #12]
 800af02:	0199      	lsls	r1, r3, #6
 800af04:	4ba6      	ldr	r3, [pc, #664]	; (800b1a0 <BackEndTask+0x378>)
 800af06:	185b      	adds	r3, r3, r1
 800af08:	2100      	movs	r1, #0
 800af0a:	5499      	strb	r1, [r3, r2]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 800af0c:	3201      	adds	r2, #1
 800af0e:	4653      	mov	r3, sl
 800af10:	701a      	strb	r2, [r3, #0]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 800af12:	4ba4      	ldr	r3, [pc, #656]	; (800b1a4 <BackEndTask+0x37c>)
 800af14:	781a      	ldrb	r2, [r3, #0]
 800af16:	48a4      	ldr	r0, [pc, #656]	; (800b1a8 <BackEndTask+0x380>)
 800af18:	5481      	strb	r1, [r0, r2]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 800af1a:	2203      	movs	r2, #3
 800af1c:	7022      	strb	r2, [r4, #0]
										PcPort = port;
 800af1e:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 800af20:	4ba2      	ldr	r3, [pc, #648]	; (800b1ac <BackEndTask+0x384>)
 800af22:	6818      	ldr	r0, [r3, #0]
 800af24:	2300      	movs	r3, #0
 800af26:	3a01      	subs	r2, #1
 800af28:	f003 fd26 	bl	800e978 <xTaskGenericNotify>
										break;
 800af2c:	e117      	b.n	800b15e <BackEndTask+0x336>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800af2e:	7803      	ldrb	r3, [r0, #0]
							emptyBuffer = true;
 800af30:	2101      	movs	r1, #1
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1a8      	bne.n	800ae88 <BackEndTask+0x60>
 800af36:	e7e3      	b.n	800af00 <BackEndTask+0xd8>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 800af38:	0033      	movs	r3, r6
 800af3a:	333f      	adds	r3, #63	; 0x3f
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	9301      	str	r3, [sp, #4]
					parseStart = 0;				
 800af40:	2300      	movs	r3, #0
 800af42:	9304      	str	r3, [sp, #16]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 800af44:	9b01      	ldr	r3, [sp, #4]
 800af46:	3303      	adds	r3, #3
 800af48:	9302      	str	r3, [sp, #8]
 800af4a:	444b      	add	r3, r9
 800af4c:	4698      	mov	r8, r3
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 800af4e:	2b3f      	cmp	r3, #63	; 0x3f
 800af50:	dd03      	ble.n	800af5a <BackEndTask+0x132>
					packetEnd -= MSG_RX_BUF_SIZE;
 800af52:	2340      	movs	r3, #64	; 0x40
 800af54:	425b      	negs	r3, r3
 800af56:	469c      	mov	ip, r3
 800af58:	44e0      	add	r8, ip
				if (packetStart != packetEnd)										// Non-empty packet
 800af5a:	45c1      	cmp	r9, r8
 800af5c:	d100      	bne.n	800af60 <BackEndTask+0x138>
 800af5e:	e0e1      	b.n	800b124 <BackEndTask+0x2fc>
					Delay_ms(1);
 800af60:	2001      	movs	r0, #1
 800af62:	f003 fe3d 	bl	800ebe0 <HAL_Delay>
					if (packetStart < packetEnd) {
 800af66:	45c1      	cmp	r9, r8
 800af68:	da4e      	bge.n	800b008 <BackEndTask+0x1e0>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 800af6a:	4b91      	ldr	r3, [pc, #580]	; (800b1b0 <BackEndTask+0x388>)
 800af6c:	18f9      	adds	r1, r7, r3
 800af6e:	0189      	lsls	r1, r1, #6
 800af70:	4449      	add	r1, r9
 800af72:	4b8b      	ldr	r3, [pc, #556]	; (800b1a0 <BackEndTask+0x378>)
 800af74:	18c9      	adds	r1, r1, r3
 800af76:	9a02      	ldr	r2, [sp, #8]
 800af78:	488e      	ldr	r0, [pc, #568]	; (800b1b4 <BackEndTask+0x38c>)
 800af7a:	f007 f88c 	bl	8012096 <memcpy>
					crc8 = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (packetLength + 3)/4);
 800af7e:	9b02      	ldr	r3, [sp, #8]
 800af80:	17d9      	asrs	r1, r3, #31
 800af82:	2203      	movs	r2, #3
 800af84:	4011      	ands	r1, r2
 800af86:	469c      	mov	ip, r3
 800af88:	4461      	add	r1, ip
 800af8a:	1088      	asrs	r0, r1, #2
 800af8c:	9005      	str	r0, [sp, #20]
 800af8e:	0002      	movs	r2, r0
 800af90:	4988      	ldr	r1, [pc, #544]	; (800b1b4 <BackEndTask+0x38c>)
 800af92:	4889      	ldr	r0, [pc, #548]	; (800b1b8 <BackEndTask+0x390>)
 800af94:	f003 ff67 	bl	800ee66 <HAL_CRC_Calculate>
 800af98:	4b88      	ldr	r3, [pc, #544]	; (800b1bc <BackEndTask+0x394>)
 800af9a:	7018      	strb	r0, [r3, #0]
					if ((packetLength + 3)%4 !=0)		// Non-word-aligned packet
 800af9c:	2103      	movs	r1, #3
 800af9e:	9b02      	ldr	r3, [sp, #8]
 800afa0:	4219      	tst	r1, r3
 800afa2:	d149      	bne.n	800b038 <BackEndTask+0x210>
					memset(crcBuffer, 0, sizeof(crcBuffer));
 800afa4:	2238      	movs	r2, #56	; 0x38
 800afa6:	2100      	movs	r1, #0
 800afa8:	4882      	ldr	r0, [pc, #520]	; (800b1b4 <BackEndTask+0x38c>)
 800afaa:	f007 f87d 	bl	80120a8 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 800afae:	9b03      	ldr	r3, [sp, #12]
 800afb0:	019a      	lsls	r2, r3, #6
 800afb2:	4b7b      	ldr	r3, [pc, #492]	; (800b1a0 <BackEndTask+0x378>)
 800afb4:	189b      	adds	r3, r3, r2
 800afb6:	4642      	mov	r2, r8
 800afb8:	5c9a      	ldrb	r2, [r3, r2]
 800afba:	4b80      	ldr	r3, [pc, #512]	; (800b1bc <BackEndTask+0x394>)
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d045      	beq.n	800b04e <BackEndTask+0x226>
				}
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */                
				if (packetStart < packetEnd) {
 800afc2:	45c1      	cmp	r9, r8
 800afc4:	db00      	blt.n	800afc8 <BackEndTask+0x1a0>
 800afc6:	e0ad      	b.n	800b124 <BackEndTask+0x2fc>
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 800afc8:	9a01      	ldr	r2, [sp, #4]
 800afca:	3204      	adds	r2, #4
 800afcc:	4b78      	ldr	r3, [pc, #480]	; (800b1b0 <BackEndTask+0x388>)
 800afce:	18f8      	adds	r0, r7, r3
 800afd0:	0180      	lsls	r0, r0, #6
 800afd2:	4448      	add	r0, r9
 800afd4:	4b72      	ldr	r3, [pc, #456]	; (800b1a0 <BackEndTask+0x378>)
 800afd6:	18c0      	adds	r0, r0, r3
 800afd8:	2100      	movs	r1, #0
 800afda:	f007 f865 	bl	80120a8 <memset>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
				}    
				
				/* A.6.2 Advance buffer index */				
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 800afde:	4643      	mov	r3, r8
 800afe0:	3301      	adds	r3, #1
 800afe2:	4652      	mov	r2, sl
 800afe4:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;							
 800afe6:	4a76      	ldr	r2, [pc, #472]	; (800b1c0 <BackEndTask+0x398>)
 800afe8:	8813      	ldrh	r3, [r2, #0]
 800afea:	3301      	adds	r3, #1
 800afec:	8013      	strh	r3, [r2, #0]
 800afee:	e0c2      	b.n	800b176 <BackEndTask+0x34e>
					packetLength = UARTRxBuf[port-1][0];
 800aff0:	7833      	ldrb	r3, [r6, #0]
 800aff2:	9301      	str	r3, [sp, #4]
					parseStart = 1;
 800aff4:	2301      	movs	r3, #1
 800aff6:	9304      	str	r3, [sp, #16]
 800aff8:	e7a4      	b.n	800af44 <BackEndTask+0x11c>
					packetLength = UARTRxBuf[port-1][1];
 800affa:	7873      	ldrb	r3, [r6, #1]
 800affc:	9301      	str	r3, [sp, #4]
 800affe:	233f      	movs	r3, #63	; 0x3f
 800b000:	4699      	mov	r9, r3
					parseStart = 2;
 800b002:	3b3d      	subs	r3, #61	; 0x3d
 800b004:	9304      	str	r3, [sp, #16]
 800b006:	e79d      	b.n	800af44 <BackEndTask+0x11c>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 800b008:	2240      	movs	r2, #64	; 0x40
 800b00a:	464b      	mov	r3, r9
 800b00c:	1ad2      	subs	r2, r2, r3
 800b00e:	4b68      	ldr	r3, [pc, #416]	; (800b1b0 <BackEndTask+0x388>)
 800b010:	18f9      	adds	r1, r7, r3
 800b012:	0189      	lsls	r1, r1, #6
 800b014:	4449      	add	r1, r9
 800b016:	4b62      	ldr	r3, [pc, #392]	; (800b1a0 <BackEndTask+0x378>)
 800b018:	18c9      	adds	r1, r1, r3
 800b01a:	9205      	str	r2, [sp, #20]
 800b01c:	4865      	ldr	r0, [pc, #404]	; (800b1b4 <BackEndTask+0x38c>)
 800b01e:	f007 f83a 	bl	8012096 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 800b022:	4964      	ldr	r1, [pc, #400]	; (800b1b4 <BackEndTask+0x38c>)
 800b024:	9b05      	ldr	r3, [sp, #20]
 800b026:	469c      	mov	ip, r3
 800b028:	4461      	add	r1, ip
 800b02a:	0008      	movs	r0, r1
 800b02c:	9a02      	ldr	r2, [sp, #8]
 800b02e:	1ad2      	subs	r2, r2, r3
 800b030:	0031      	movs	r1, r6
 800b032:	f007 f830 	bl	8012096 <memcpy>
 800b036:	e7a2      	b.n	800af7e <BackEndTask+0x156>
					crc8 = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((packetLength + 3)/4)*4], 1);
 800b038:	9b05      	ldr	r3, [sp, #20]
 800b03a:	0099      	lsls	r1, r3, #2
 800b03c:	4b5d      	ldr	r3, [pc, #372]	; (800b1b4 <BackEndTask+0x38c>)
 800b03e:	18c9      	adds	r1, r1, r3
 800b040:	2201      	movs	r2, #1
 800b042:	485d      	ldr	r0, [pc, #372]	; (800b1b8 <BackEndTask+0x390>)
 800b044:	f003 fee3 	bl	800ee0e <HAL_CRC_Accumulate>
 800b048:	4b5c      	ldr	r3, [pc, #368]	; (800b1bc <BackEndTask+0x394>)
 800b04a:	7018      	strb	r0, [r3, #0]
 800b04c:	e7aa      	b.n	800afa4 <BackEndTask+0x17c>
						portStatus[port] = MSG;
 800b04e:	2301      	movs	r3, #1
 800b050:	7023      	strb	r3, [r4, #0]
						messageLength[port-1] = packetLength;	
 800b052:	1ebb      	subs	r3, r7, #2
 800b054:	4a5b      	ldr	r2, [pc, #364]	; (800b1c4 <BackEndTask+0x39c>)
 800b056:	9901      	ldr	r1, [sp, #4]
 800b058:	54d1      	strb	r1, [r2, r3]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 800b05a:	233f      	movs	r3, #63	; 0x3f
 800b05c:	9c04      	ldr	r4, [sp, #16]
 800b05e:	1b1b      	subs	r3, r3, r4
 800b060:	000a      	movs	r2, r1
 800b062:	428b      	cmp	r3, r1
 800b064:	db27      	blt.n	800b0b6 <BackEndTask+0x28e>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 800b066:	00f8      	lsls	r0, r7, #3
 800b068:	1bc0      	subs	r0, r0, r7
 800b06a:	00c0      	lsls	r0, r0, #3
 800b06c:	9b07      	ldr	r3, [sp, #28]
 800b06e:	469c      	mov	ip, r3
 800b070:	4460      	add	r0, ip
 800b072:	4b4f      	ldr	r3, [pc, #316]	; (800b1b0 <BackEndTask+0x388>)
 800b074:	18f9      	adds	r1, r7, r3
 800b076:	0189      	lsls	r1, r1, #6
 800b078:	46a4      	mov	ip, r4
 800b07a:	4461      	add	r1, ip
 800b07c:	4b48      	ldr	r3, [pc, #288]	; (800b1a0 <BackEndTask+0x378>)
 800b07e:	18c9      	adds	r1, r1, r3
 800b080:	f007 f809 	bl	8012096 <memcpy>
						if (packetStart < packetEnd) {
 800b084:	45c1      	cmp	r9, r8
 800b086:	da38      	bge.n	800b0fa <BackEndTask+0x2d2>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 800b088:	9a01      	ldr	r2, [sp, #4]
 800b08a:	3204      	adds	r2, #4
 800b08c:	4b48      	ldr	r3, [pc, #288]	; (800b1b0 <BackEndTask+0x388>)
 800b08e:	18f8      	adds	r0, r7, r3
 800b090:	0180      	lsls	r0, r0, #6
 800b092:	4448      	add	r0, r9
 800b094:	4b42      	ldr	r3, [pc, #264]	; (800b1a0 <BackEndTask+0x378>)
 800b096:	18c0      	adds	r0, r0, r3
 800b098:	2100      	movs	r1, #0
 800b09a:	f007 f805 	bl	80120a8 <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 800b09e:	4643      	mov	r3, r8
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	4652      	mov	r2, sl
 800b0a4:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 800b0a6:	4a48      	ldr	r2, [pc, #288]	; (800b1c8 <BackEndTask+0x3a0>)
 800b0a8:	8813      	ldrh	r3, [r2, #0]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 800b0ae:	0028      	movs	r0, r5
 800b0b0:	f7f8 fa6e 	bl	8003590 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 800b0b4:	e053      	b.n	800b15e <BackEndTask+0x336>
 800b0b6:	00fb      	lsls	r3, r7, #3
 800b0b8:	1bdb      	subs	r3, r3, r7
 800b0ba:	00db      	lsls	r3, r3, #3
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 800b0bc:	2440      	movs	r4, #64	; 0x40
 800b0be:	9a04      	ldr	r2, [sp, #16]
 800b0c0:	1aa4      	subs	r4, r4, r2
 800b0c2:	9906      	ldr	r1, [sp, #24]
 800b0c4:	9302      	str	r3, [sp, #8]
 800b0c6:	469c      	mov	ip, r3
 800b0c8:	4461      	add	r1, ip
 800b0ca:	0008      	movs	r0, r1
 800b0cc:	4938      	ldr	r1, [pc, #224]	; (800b1b0 <BackEndTask+0x388>)
 800b0ce:	1879      	adds	r1, r7, r1
 800b0d0:	0189      	lsls	r1, r1, #6
 800b0d2:	9a04      	ldr	r2, [sp, #16]
 800b0d4:	4694      	mov	ip, r2
 800b0d6:	4461      	add	r1, ip
 800b0d8:	4b31      	ldr	r3, [pc, #196]	; (800b1a0 <BackEndTask+0x378>)
 800b0da:	18c9      	adds	r1, r1, r3
 800b0dc:	0022      	movs	r2, r4
 800b0de:	f006 ffda 	bl	8012096 <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 800b0e2:	9802      	ldr	r0, [sp, #8]
 800b0e4:	3870      	subs	r0, #112	; 0x70
 800b0e6:	1900      	adds	r0, r0, r4
 800b0e8:	4b2a      	ldr	r3, [pc, #168]	; (800b194 <BackEndTask+0x36c>)
 800b0ea:	469c      	mov	ip, r3
 800b0ec:	4460      	add	r0, ip
 800b0ee:	9b01      	ldr	r3, [sp, #4]
 800b0f0:	1b1a      	subs	r2, r3, r4
 800b0f2:	0031      	movs	r1, r6
 800b0f4:	f006 ffcf 	bl	8012096 <memcpy>
 800b0f8:	e7c4      	b.n	800b084 <BackEndTask+0x25c>
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 800b0fa:	2440      	movs	r4, #64	; 0x40
 800b0fc:	464b      	mov	r3, r9
 800b0fe:	1ae4      	subs	r4, r4, r3
 800b100:	4b2b      	ldr	r3, [pc, #172]	; (800b1b0 <BackEndTask+0x388>)
 800b102:	18f8      	adds	r0, r7, r3
 800b104:	0180      	lsls	r0, r0, #6
 800b106:	4448      	add	r0, r9
 800b108:	4b25      	ldr	r3, [pc, #148]	; (800b1a0 <BackEndTask+0x378>)
 800b10a:	18c0      	adds	r0, r0, r3
 800b10c:	0022      	movs	r2, r4
 800b10e:	2100      	movs	r1, #0
 800b110:	f006 ffca 	bl	80120a8 <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 800b114:	9a01      	ldr	r2, [sp, #4]
 800b116:	3204      	adds	r2, #4
 800b118:	1b12      	subs	r2, r2, r4
 800b11a:	2100      	movs	r1, #0
 800b11c:	0030      	movs	r0, r6
 800b11e:	f006 ffc3 	bl	80120a8 <memset>
 800b122:	e7bc      	b.n	800b09e <BackEndTask+0x276>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 800b124:	2240      	movs	r2, #64	; 0x40
 800b126:	464b      	mov	r3, r9
 800b128:	1ad2      	subs	r2, r2, r3
 800b12a:	4b21      	ldr	r3, [pc, #132]	; (800b1b0 <BackEndTask+0x388>)
 800b12c:	18f8      	adds	r0, r7, r3
 800b12e:	0180      	lsls	r0, r0, #6
 800b130:	4448      	add	r0, r9
 800b132:	4b1b      	ldr	r3, [pc, #108]	; (800b1a0 <BackEndTask+0x378>)
 800b134:	18c0      	adds	r0, r0, r3
 800b136:	9202      	str	r2, [sp, #8]
 800b138:	2100      	movs	r1, #0
 800b13a:	f006 ffb5 	bl	80120a8 <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 800b13e:	9a01      	ldr	r2, [sp, #4]
 800b140:	3204      	adds	r2, #4
 800b142:	9b02      	ldr	r3, [sp, #8]
 800b144:	1ad2      	subs	r2, r2, r3
 800b146:	2100      	movs	r1, #0
 800b148:	0030      	movs	r0, r6
 800b14a:	f006 ffad 	bl	80120a8 <memset>
 800b14e:	e746      	b.n	800afde <BackEndTask+0x1b6>
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
				MsgDMAStopped[port-1] = false;
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 800b150:	0028      	movs	r0, r5
 800b152:	f7f9 fa43 	bl	80045dc <GetUart>
 800b156:	2240      	movs	r2, #64	; 0x40
 800b158:	0031      	movs	r1, r6
 800b15a:	f006 fa7d 	bl	8011658 <HAL_UART_Receive_DMA>
		for (port=1 ; port <= NumOfPorts; port++)
 800b15e:	3501      	adds	r5, #1
 800b160:	b2ed      	uxtb	r5, r5
 800b162:	3701      	adds	r7, #1
 800b164:	3640      	adds	r6, #64	; 0x40
 800b166:	2d07      	cmp	r5, #7
 800b168:	d032      	beq.n	800b1d0 <BackEndTask+0x3a8>
 800b16a:	1e7c      	subs	r4, r7, #1
 800b16c:	445c      	add	r4, fp
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 800b16e:	7823      	ldrb	r3, [r4, #0]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d800      	bhi.n	800b176 <BackEndTask+0x34e>
 800b174:	e669      	b.n	800ae4a <BackEndTask+0x22>
 800b176:	1ebb      	subs	r3, r7, #2
 800b178:	4a14      	ldr	r2, [pc, #80]	; (800b1cc <BackEndTask+0x3a4>)
 800b17a:	4694      	mov	ip, r2
 800b17c:	4463      	add	r3, ip
			if (MsgDMAStopped[port-1] == true) {
 800b17e:	781a      	ldrb	r2, [r3, #0]
 800b180:	2a00      	cmp	r2, #0
 800b182:	d0ec      	beq.n	800b15e <BackEndTask+0x336>
				MsgDMAStopped[port-1] = false;
 800b184:	2200      	movs	r2, #0
 800b186:	701a      	strb	r2, [r3, #0]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 800b188:	7823      	ldrb	r3, [r4, #0]
 800b18a:	2b05      	cmp	r3, #5
 800b18c:	d1e0      	bne.n	800b150 <BackEndTask+0x328>
 800b18e:	2300      	movs	r3, #0
 800b190:	7023      	strb	r3, [r4, #0]
 800b192:	e7dd      	b.n	800b150 <BackEndTask+0x328>
 800b194:	200006d8 	.word	0x200006d8
 800b198:	20000f94 	.word	0x20000f94
 800b19c:	20006160 	.word	0x20006160
 800b1a0:	20000e14 	.word	0x20000e14
 800b1a4:	200003b7 	.word	0x200003b7
 800b1a8:	20000c40 	.word	0x20000c40
 800b1ac:	20001050 	.word	0x20001050
 800b1b0:	03fffffe 	.word	0x03fffffe
 800b1b4:	20000f9c 	.word	0x20000f9c
 800b1b8:	20006590 	.word	0x20006590
 800b1bc:	20001042 	.word	0x20001042
 800b1c0:	20001048 	.word	0x20001048
 800b1c4:	20000a54 	.word	0x20000a54
 800b1c8:	20001040 	.word	0x20001040
 800b1cc:	20000e0c 	.word	0x20000e0c
			}				
		}
		
		taskYIELD();
 800b1d0:	f003 fc48 	bl	800ea64 <vPortYield>
 800b1d4:	4e02      	ldr	r6, [pc, #8]	; (800b1e0 <BackEndTask+0x3b8>)
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 800b1d6:	2702      	movs	r7, #2
		for (port=1 ; port <= NumOfPorts; port++)
 800b1d8:	2501      	movs	r5, #1
 800b1da:	4b02      	ldr	r3, [pc, #8]	; (800b1e4 <BackEndTask+0x3bc>)
 800b1dc:	469b      	mov	fp, r3
 800b1de:	e7c4      	b.n	800b16a <BackEndTask+0x342>
 800b1e0:	20000e14 	.word	0x20000e14
 800b1e4:	20000c40 	.word	0x20000c40

0800b1e8 <MX_FREERTOS_Init>:
{
 800b1e8:	b570      	push	{r4, r5, r6, lr}
 800b1ea:	b090      	sub	sp, #64	; 0x40
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 800b1ec:	25a0      	movs	r5, #160	; 0xa0
 800b1ee:	006d      	lsls	r5, r5, #1
 800b1f0:	2400      	movs	r4, #0
 800b1f2:	9403      	str	r4, [sp, #12]
 800b1f4:	9402      	str	r4, [sp, #8]
 800b1f6:	4b5e      	ldr	r3, [pc, #376]	; (800b370 <MX_FREERTOS_Init+0x188>)
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	2603      	movs	r6, #3
 800b1fc:	9600      	str	r6, [sp, #0]
 800b1fe:	2300      	movs	r3, #0
 800b200:	002a      	movs	r2, r5
 800b202:	495c      	ldr	r1, [pc, #368]	; (800b374 <MX_FREERTOS_Init+0x18c>)
 800b204:	485c      	ldr	r0, [pc, #368]	; (800b378 <MX_FREERTOS_Init+0x190>)
 800b206:	f00a fbc5 	bl	8015994 <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 800b20a:	9403      	str	r4, [sp, #12]
 800b20c:	9402      	str	r4, [sp, #8]
 800b20e:	4b5b      	ldr	r3, [pc, #364]	; (800b37c <MX_FREERTOS_Init+0x194>)
 800b210:	9301      	str	r3, [sp, #4]
 800b212:	9600      	str	r6, [sp, #0]
 800b214:	2300      	movs	r3, #0
 800b216:	002a      	movs	r2, r5
 800b218:	4959      	ldr	r1, [pc, #356]	; (800b380 <MX_FREERTOS_Init+0x198>)
 800b21a:	485a      	ldr	r0, [pc, #360]	; (800b384 <MX_FREERTOS_Init+0x19c>)
 800b21c:	f00a fbba 	bl	8015994 <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 800b220:	9403      	str	r4, [sp, #12]
 800b222:	9402      	str	r4, [sp, #8]
 800b224:	4b58      	ldr	r3, [pc, #352]	; (800b388 <MX_FREERTOS_Init+0x1a0>)
 800b226:	9301      	str	r3, [sp, #4]
 800b228:	9600      	str	r6, [sp, #0]
 800b22a:	2300      	movs	r3, #0
 800b22c:	002a      	movs	r2, r5
 800b22e:	4957      	ldr	r1, [pc, #348]	; (800b38c <MX_FREERTOS_Init+0x1a4>)
 800b230:	4857      	ldr	r0, [pc, #348]	; (800b390 <MX_FREERTOS_Init+0x1a8>)
 800b232:	f00a fbaf 	bl	8015994 <xTaskGenericCreate>
	vRegisterCLICommands();
 800b236:	f7f9 f935 	bl	80044a4 <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 800b23a:	9403      	str	r4, [sp, #12]
 800b23c:	9402      	str	r4, [sp, #8]
 800b23e:	4b55      	ldr	r3, [pc, #340]	; (800b394 <MX_FREERTOS_Init+0x1ac>)
 800b240:	9301      	str	r3, [sp, #4]
 800b242:	9600      	str	r6, [sp, #0]
 800b244:	2300      	movs	r3, #0
 800b246:	002a      	movs	r2, r5
 800b248:	4953      	ldr	r1, [pc, #332]	; (800b398 <MX_FREERTOS_Init+0x1b0>)
 800b24a:	4854      	ldr	r0, [pc, #336]	; (800b39c <MX_FREERTOS_Init+0x1b4>)
 800b24c:	f00a fba2 	bl	8015994 <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 800b250:	4d53      	ldr	r5, [pc, #332]	; (800b3a0 <MX_FREERTOS_Init+0x1b8>)
 800b252:	9403      	str	r4, [sp, #12]
 800b254:	9402      	str	r4, [sp, #8]
 800b256:	4b53      	ldr	r3, [pc, #332]	; (800b3a4 <MX_FREERTOS_Init+0x1bc>)
 800b258:	9301      	str	r3, [sp, #4]
 800b25a:	3601      	adds	r6, #1
 800b25c:	9600      	str	r6, [sp, #0]
 800b25e:	2301      	movs	r3, #1
 800b260:	22a0      	movs	r2, #160	; 0xa0
 800b262:	4951      	ldr	r1, [pc, #324]	; (800b3a8 <MX_FREERTOS_Init+0x1c0>)
 800b264:	0028      	movs	r0, r5
 800b266:	f00a fb95 	bl	8015994 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 800b26a:	9403      	str	r4, [sp, #12]
 800b26c:	9402      	str	r4, [sp, #8]
 800b26e:	4b4f      	ldr	r3, [pc, #316]	; (800b3ac <MX_FREERTOS_Init+0x1c4>)
 800b270:	9301      	str	r3, [sp, #4]
 800b272:	9600      	str	r6, [sp, #0]
 800b274:	2302      	movs	r3, #2
 800b276:	22a0      	movs	r2, #160	; 0xa0
 800b278:	494d      	ldr	r1, [pc, #308]	; (800b3b0 <MX_FREERTOS_Init+0x1c8>)
 800b27a:	0028      	movs	r0, r5
 800b27c:	f00a fb8a 	bl	8015994 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 800b280:	9403      	str	r4, [sp, #12]
 800b282:	9402      	str	r4, [sp, #8]
 800b284:	4b4b      	ldr	r3, [pc, #300]	; (800b3b4 <MX_FREERTOS_Init+0x1cc>)
 800b286:	9301      	str	r3, [sp, #4]
 800b288:	9600      	str	r6, [sp, #0]
 800b28a:	2303      	movs	r3, #3
 800b28c:	22a0      	movs	r2, #160	; 0xa0
 800b28e:	494a      	ldr	r1, [pc, #296]	; (800b3b8 <MX_FREERTOS_Init+0x1d0>)
 800b290:	0028      	movs	r0, r5
 800b292:	f00a fb7f 	bl	8015994 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 800b296:	9403      	str	r4, [sp, #12]
 800b298:	9402      	str	r4, [sp, #8]
 800b29a:	4b48      	ldr	r3, [pc, #288]	; (800b3bc <MX_FREERTOS_Init+0x1d4>)
 800b29c:	9301      	str	r3, [sp, #4]
 800b29e:	9600      	str	r6, [sp, #0]
 800b2a0:	2304      	movs	r3, #4
 800b2a2:	22a0      	movs	r2, #160	; 0xa0
 800b2a4:	4946      	ldr	r1, [pc, #280]	; (800b3c0 <MX_FREERTOS_Init+0x1d8>)
 800b2a6:	0028      	movs	r0, r5
 800b2a8:	f00a fb74 	bl	8015994 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 800b2ac:	9403      	str	r4, [sp, #12]
 800b2ae:	9402      	str	r4, [sp, #8]
 800b2b0:	4b44      	ldr	r3, [pc, #272]	; (800b3c4 <MX_FREERTOS_Init+0x1dc>)
 800b2b2:	9301      	str	r3, [sp, #4]
 800b2b4:	9600      	str	r6, [sp, #0]
 800b2b6:	2305      	movs	r3, #5
 800b2b8:	22a0      	movs	r2, #160	; 0xa0
 800b2ba:	4943      	ldr	r1, [pc, #268]	; (800b3c8 <MX_FREERTOS_Init+0x1e0>)
 800b2bc:	0028      	movs	r0, r5
 800b2be:	f00a fb69 	bl	8015994 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P6MsgTask", configMINIMAL_STACK_SIZE, (void *) P6, osPriorityAboveNormal-osPriorityIdle, &P6MsgTaskHandle);
 800b2c2:	9403      	str	r4, [sp, #12]
 800b2c4:	9402      	str	r4, [sp, #8]
 800b2c6:	4b41      	ldr	r3, [pc, #260]	; (800b3cc <MX_FREERTOS_Init+0x1e4>)
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	9600      	str	r6, [sp, #0]
 800b2cc:	2306      	movs	r3, #6
 800b2ce:	22a0      	movs	r2, #160	; 0xa0
 800b2d0:	493f      	ldr	r1, [pc, #252]	; (800b3d0 <MX_FREERTOS_Init+0x1e8>)
 800b2d2:	0028      	movs	r0, r5
 800b2d4:	f00a fb5e 	bl	8015994 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 800b2d8:	940f      	str	r4, [sp, #60]	; 0x3c
 800b2da:	2101      	movs	r1, #1
 800b2dc:	a80f      	add	r0, sp, #60	; 0x3c
 800b2de:	f003 f840 	bl	800e362 <osSemaphoreCreate>
 800b2e2:	4e3c      	ldr	r6, [pc, #240]	; (800b3d4 <MX_FREERTOS_Init+0x1ec>)
 800b2e4:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 800b2e6:	940e      	str	r4, [sp, #56]	; 0x38
 800b2e8:	2101      	movs	r1, #1
 800b2ea:	a80e      	add	r0, sp, #56	; 0x38
 800b2ec:	f003 f839 	bl	800e362 <osSemaphoreCreate>
 800b2f0:	4d39      	ldr	r5, [pc, #228]	; (800b3d8 <MX_FREERTOS_Init+0x1f0>)
 800b2f2:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 800b2f4:	940d      	str	r4, [sp, #52]	; 0x34
 800b2f6:	2101      	movs	r1, #1
 800b2f8:	a80d      	add	r0, sp, #52	; 0x34
 800b2fa:	f003 f832 	bl	800e362 <osSemaphoreCreate>
 800b2fe:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 800b300:	940c      	str	r4, [sp, #48]	; 0x30
 800b302:	2101      	movs	r1, #1
 800b304:	a80c      	add	r0, sp, #48	; 0x30
 800b306:	f003 f82c 	bl	800e362 <osSemaphoreCreate>
 800b30a:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 800b30c:	940b      	str	r4, [sp, #44]	; 0x2c
 800b30e:	2101      	movs	r1, #1
 800b310:	a80b      	add	r0, sp, #44	; 0x2c
 800b312:	f003 f826 	bl	800e362 <osSemaphoreCreate>
 800b316:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 800b318:	940a      	str	r4, [sp, #40]	; 0x28
 800b31a:	2101      	movs	r1, #1
 800b31c:	a80a      	add	r0, sp, #40	; 0x28
 800b31e:	f003 f820 	bl	800e362 <osSemaphoreCreate>
 800b322:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 800b324:	9409      	str	r4, [sp, #36]	; 0x24
 800b326:	2101      	movs	r1, #1
 800b328:	a809      	add	r0, sp, #36	; 0x24
 800b32a:	f003 f81a 	bl	800e362 <osSemaphoreCreate>
 800b32e:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 800b330:	9408      	str	r4, [sp, #32]
 800b332:	2101      	movs	r1, #1
 800b334:	a808      	add	r0, sp, #32
 800b336:	f003 f814 	bl	800e362 <osSemaphoreCreate>
 800b33a:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 800b33c:	9407      	str	r4, [sp, #28]
 800b33e:	2101      	movs	r1, #1
 800b340:	a807      	add	r0, sp, #28
 800b342:	f003 f80e 	bl	800e362 <osSemaphoreCreate>
 800b346:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 800b348:	9406      	str	r4, [sp, #24]
 800b34a:	2101      	movs	r1, #1
 800b34c:	a806      	add	r0, sp, #24
 800b34e:	f003 f808 	bl	800e362 <osSemaphoreCreate>
 800b352:	6168      	str	r0, [r5, #20]
	osSemaphoreDef(SemaphoreP11); PxRxSemaphoreHandle[P6] = osSemaphoreCreate(osSemaphore(SemaphoreP11), 1);
 800b354:	9405      	str	r4, [sp, #20]
 800b356:	2101      	movs	r1, #1
 800b358:	a805      	add	r0, sp, #20
 800b35a:	f003 f802 	bl	800e362 <osSemaphoreCreate>
 800b35e:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12); PxTxSemaphoreHandle[P6] = osSemaphoreCreate(osSemaphore(SemaphoreP12), 1);
 800b360:	9404      	str	r4, [sp, #16]
 800b362:	2101      	movs	r1, #1
 800b364:	a804      	add	r0, sp, #16
 800b366:	f002 fffc 	bl	800e362 <osSemaphoreCreate>
 800b36a:	61a8      	str	r0, [r5, #24]
}
 800b36c:	b010      	add	sp, #64	; 0x40
 800b36e:	bd70      	pop	{r4, r5, r6, pc}
 800b370:	20001044 	.word	0x20001044
 800b374:	08018cc0 	.word	0x08018cc0
 800b378:	0800ad69 	.word	0x0800ad69
 800b37c:	20001020 	.word	0x20001020
 800b380:	08018ccc 	.word	0x08018ccc
 800b384:	0800ae29 	.word	0x0800ae29
 800b388:	2000103c 	.word	0x2000103c
 800b38c:	08018cd8 	.word	0x08018cd8
 800b390:	08011f9b 	.word	0x08011f9b
 800b394:	20001050 	.word	0x20001050
 800b398:	08018ce4 	.word	0x08018ce4
 800b39c:	0800a099 	.word	0x0800a099
 800b3a0:	08006b15 	.word	0x08006b15
 800b3a4:	20001024 	.word	0x20001024
 800b3a8:	08018cec 	.word	0x08018cec
 800b3ac:	20001028 	.word	0x20001028
 800b3b0:	08018cf8 	.word	0x08018cf8
 800b3b4:	2000102c 	.word	0x2000102c
 800b3b8:	08018d04 	.word	0x08018d04
 800b3bc:	20001030 	.word	0x20001030
 800b3c0:	08018d10 	.word	0x08018d10
 800b3c4:	20001034 	.word	0x20001034
 800b3c8:	08018d1c 	.word	0x08018d1c
 800b3cc:	20001038 	.word	0x20001038
 800b3d0:	08018d28 	.word	0x08018d28
 800b3d4:	2000625c 	.word	0x2000625c
 800b3d8:	20006240 	.word	0x20006240

0800b3dc <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 800b3dc:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800b3de:	4b04      	ldr	r3, [pc, #16]	; (800b3f0 <vMainConfigureTimerForRunTimeStats+0x14>)
 800b3e0:	6818      	ldr	r0, [r3, #0]
 800b3e2:	4904      	ldr	r1, [pc, #16]	; (800b3f4 <vMainConfigureTimerForRunTimeStats+0x18>)
 800b3e4:	f7f4 feaa 	bl	800013c <__udivsi3>
 800b3e8:	4b03      	ldr	r3, [pc, #12]	; (800b3f8 <vMainConfigureTimerForRunTimeStats+0x1c>)
 800b3ea:	6018      	str	r0, [r3, #0]
}
 800b3ec:	bd10      	pop	{r4, pc}
 800b3ee:	46c0      	nop			; (mov r8, r8)
 800b3f0:	2000004c 	.word	0x2000004c
 800b3f4:	00002710 	.word	0x00002710
 800b3f8:	2000104c 	.word	0x2000104c

0800b3fc <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 800b3fc:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b3fe:	4b0f      	ldr	r3, [pc, #60]	; (800b43c <ulMainGetRunTimeCounterValue+0x40>)
 800b400:	6818      	ldr	r0, [r3, #0]
 800b402:	21fa      	movs	r1, #250	; 0xfa
 800b404:	0089      	lsls	r1, r1, #2
 800b406:	f7f4 fe99 	bl	800013c <__udivsi3>
 800b40a:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800b40c:	4b0c      	ldr	r3, [pc, #48]	; (800b440 <ulMainGetRunTimeCounterValue+0x44>)
 800b40e:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 800b410:	f009 ff42 	bl	8015298 <xTaskGetTickCountFromISR>

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 800b414:	4b0b      	ldr	r3, [pc, #44]	; (800b444 <ulMainGetRunTimeCounterValue+0x48>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	015b      	lsls	r3, r3, #5
 800b41a:	d50d      	bpl.n	800b438 <ulMainGetRunTimeCounterValue+0x3c>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 800b41c:	3001      	adds	r0, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800b41e:	4b08      	ldr	r3, [pc, #32]	; (800b440 <ulMainGetRunTimeCounterValue+0x44>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	1aed      	subs	r5, r5, r3
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 800b424:	0084      	lsls	r4, r0, #2
 800b426:	1824      	adds	r4, r4, r0
 800b428:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 800b42a:	4b07      	ldr	r3, [pc, #28]	; (800b448 <ulMainGetRunTimeCounterValue+0x4c>)
 800b42c:	6819      	ldr	r1, [r3, #0]
 800b42e:	0028      	movs	r0, r5
 800b430:	f7f4 fe84 	bl	800013c <__udivsi3>
 800b434:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 800b436:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800b438:	1b2d      	subs	r5, r5, r4
 800b43a:	e7f3      	b.n	800b424 <ulMainGetRunTimeCounterValue+0x28>
 800b43c:	2000004c 	.word	0x2000004c
 800b440:	e000e018 	.word	0xe000e018
 800b444:	e000ed04 	.word	0xe000ed04
 800b448:	2000104c 	.word	0x2000104c

0800b44c <pulseColorCommand>:
}

/*-----------------------------------------------------------*/

portBASE_TYPE pulseColorCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b44e:	b08d      	sub	sp, #52	; 0x34
 800b450:	0004      	movs	r4, r0
 800b452:	9003      	str	r0, [sp, #12]
 800b454:	0016      	movs	r6, r2
	Module_Status result = H01R0_OK;
	uint8_t color = 0; uint32_t period = 0, dc = 0; int32_t repeat = 0; char par[15] = {0};
 800b456:	220f      	movs	r2, #15
 800b458:	2100      	movs	r1, #0
 800b45a:	a808      	add	r0, sp, #32
 800b45c:	f006 fe24 	bl	80120a8 <memset>
	static int8_t *pcParameterString1, *pcParameterString2, *pcParameterString3, *pcParameterString4; 
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 800b460:	2300      	movs	r3, #0
 800b462:	9307      	str	r3, [sp, #28]
 800b464:	9306      	str	r3, [sp, #24]
	portBASE_TYPE xParameterStringLength3 = 0, xParameterStringLength4 = 0;
 800b466:	9305      	str	r3, [sp, #20]
 800b468:	9304      	str	r3, [sp, #16]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800b46a:	2c00      	cmp	r4, #0
 800b46c:	d101      	bne.n	800b472 <pulseColorCommand+0x26>
 800b46e:	b672      	cpsid	i
 800b470:	e7fe      	b.n	800b470 <pulseColorCommand+0x24>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800b472:	aa07      	add	r2, sp, #28
 800b474:	2101      	movs	r1, #1
 800b476:	0030      	movs	r0, r6
 800b478:	f003 f884 	bl	800e584 <FreeRTOS_CLIGetParameter>
 800b47c:	0004      	movs	r4, r0
 800b47e:	4b4d      	ldr	r3, [pc, #308]	; (800b5b4 <pulseColorCommand+0x168>)
 800b480:	6018      	str	r0, [r3, #0]
	/* Read the color value. */
	if (!strncmp((const char *)pcParameterString1, "black", xParameterStringLength1))
 800b482:	9d07      	ldr	r5, [sp, #28]
 800b484:	002a      	movs	r2, r5
 800b486:	494c      	ldr	r1, [pc, #304]	; (800b5b8 <pulseColorCommand+0x16c>)
 800b488:	f006 ff50 	bl	801232c <strncmp>
		color = BLACK;
 800b48c:	2701      	movs	r7, #1
	if (!strncmp((const char *)pcParameterString1, "black", xParameterStringLength1))
 800b48e:	2800      	cmp	r0, #0
 800b490:	d037      	beq.n	800b502 <pulseColorCommand+0xb6>
	else if (!strncmp(( const char *)pcParameterString1, "white", xParameterStringLength1))
 800b492:	002a      	movs	r2, r5
 800b494:	4949      	ldr	r1, [pc, #292]	; (800b5bc <pulseColorCommand+0x170>)
 800b496:	0020      	movs	r0, r4
 800b498:	f006 ff48 	bl	801232c <strncmp>
		color = WHITE;
 800b49c:	3701      	adds	r7, #1
	else if (!strncmp(( const char *)pcParameterString1, "white", xParameterStringLength1))
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d02f      	beq.n	800b502 <pulseColorCommand+0xb6>
	else if (!strncmp((const char *)pcParameterString1, "red", xParameterStringLength1))
 800b4a2:	002a      	movs	r2, r5
 800b4a4:	4946      	ldr	r1, [pc, #280]	; (800b5c0 <pulseColorCommand+0x174>)
 800b4a6:	0020      	movs	r0, r4
 800b4a8:	f006 ff40 	bl	801232c <strncmp>
		color = RED;
 800b4ac:	3701      	adds	r7, #1
	else if (!strncmp((const char *)pcParameterString1, "red", xParameterStringLength1))
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d027      	beq.n	800b502 <pulseColorCommand+0xb6>
	else if (!strncmp((const char *) pcParameterString1, "blue", xParameterStringLength1))
 800b4b2:	002a      	movs	r2, r5
 800b4b4:	4943      	ldr	r1, [pc, #268]	; (800b5c4 <pulseColorCommand+0x178>)
 800b4b6:	0020      	movs	r0, r4
 800b4b8:	f006 ff38 	bl	801232c <strncmp>
		color = BLUE;
 800b4bc:	3701      	adds	r7, #1
	else if (!strncmp((const char *) pcParameterString1, "blue", xParameterStringLength1))
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d01f      	beq.n	800b502 <pulseColorCommand+0xb6>
	else if (!strncmp((const char *) pcParameterString1, "yellow", xParameterStringLength1))
 800b4c2:	002a      	movs	r2, r5
 800b4c4:	4940      	ldr	r1, [pc, #256]	; (800b5c8 <pulseColorCommand+0x17c>)
 800b4c6:	0020      	movs	r0, r4
 800b4c8:	f006 ff30 	bl	801232c <strncmp>
		color = YELLOW;
 800b4cc:	3701      	adds	r7, #1
	else if (!strncmp((const char *) pcParameterString1, "yellow", xParameterStringLength1))
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d017      	beq.n	800b502 <pulseColorCommand+0xb6>
	else if (!strncmp((const char *) pcParameterString1, "cyan", xParameterStringLength1))
 800b4d2:	002a      	movs	r2, r5
 800b4d4:	493d      	ldr	r1, [pc, #244]	; (800b5cc <pulseColorCommand+0x180>)
 800b4d6:	0020      	movs	r0, r4
 800b4d8:	f006 ff28 	bl	801232c <strncmp>
		color = CYAN;
 800b4dc:	3701      	adds	r7, #1
	else if (!strncmp((const char *) pcParameterString1, "cyan", xParameterStringLength1))
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	d00f      	beq.n	800b502 <pulseColorCommand+0xb6>
	else if (!strncmp((const char *) pcParameterString1, "magenta", xParameterStringLength1))
 800b4e2:	002a      	movs	r2, r5
 800b4e4:	493a      	ldr	r1, [pc, #232]	; (800b5d0 <pulseColorCommand+0x184>)
 800b4e6:	0020      	movs	r0, r4
 800b4e8:	f006 ff20 	bl	801232c <strncmp>
		color = MAGENTA;
 800b4ec:	3701      	adds	r7, #1
	else if (!strncmp((const char *) pcParameterString1, "magenta", xParameterStringLength1))
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d007      	beq.n	800b502 <pulseColorCommand+0xb6>
	else if (!strncmp((const char *) pcParameterString1, "green", xParameterStringLength1))
 800b4f2:	002a      	movs	r2, r5
 800b4f4:	4937      	ldr	r1, [pc, #220]	; (800b5d4 <pulseColorCommand+0x188>)
 800b4f6:	0020      	movs	r0, r4
 800b4f8:	f006 ff18 	bl	801232c <strncmp>
		color = GREEN;
 800b4fc:	4243      	negs	r3, r0
 800b4fe:	4158      	adcs	r0, r3
 800b500:	00c7      	lsls	r7, r0, #3
	
	/* Obtain the 2nd parameter string. */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800b502:	aa06      	add	r2, sp, #24
 800b504:	2102      	movs	r1, #2
 800b506:	0035      	movs	r5, r6
 800b508:	0030      	movs	r0, r6
 800b50a:	f003 f83b 	bl	800e584 <FreeRTOS_CLIGetParameter>
	period = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 800b50e:	f006 fd50 	bl	8011fb2 <atol>
 800b512:	0004      	movs	r4, r0
	
	/* Obtain the 3rd parameter string. */
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800b514:	aa05      	add	r2, sp, #20
 800b516:	2103      	movs	r1, #3
 800b518:	0030      	movs	r0, r6
 800b51a:	f003 f833 	bl	800e584 <FreeRTOS_CLIGetParameter>
	dc = ( uint32_t ) atol( ( char * ) pcParameterString3 );
 800b51e:	f006 fd48 	bl	8011fb2 <atol>
 800b522:	0006      	movs	r6, r0
	
	/* Obtain the 4th parameter string. */
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800b524:	aa04      	add	r2, sp, #16
 800b526:	2104      	movs	r1, #4
 800b528:	0028      	movs	r0, r5
 800b52a:	f003 f82b 	bl	800e584 <FreeRTOS_CLIGetParameter>
 800b52e:	0005      	movs	r5, r0
	if (!strcmp( ( char * ) pcParameterString4, "inf"))
 800b530:	4929      	ldr	r1, [pc, #164]	; (800b5d8 <pulseColorCommand+0x18c>)
 800b532:	f7f4 fde7 	bl	8000104 <strcmp>
 800b536:	2800      	cmp	r0, #0
 800b538:	d11c      	bne.n	800b574 <pulseColorCommand+0x128>
	rgbColor = color;
 800b53a:	4b28      	ldr	r3, [pc, #160]	; (800b5dc <pulseColorCommand+0x190>)
 800b53c:	701f      	strb	r7, [r3, #0]
	rgbPeriod = period; rgbDC = dc; rgbCount = repeat;
 800b53e:	4b28      	ldr	r3, [pc, #160]	; (800b5e0 <pulseColorCommand+0x194>)
 800b540:	601c      	str	r4, [r3, #0]
 800b542:	4b28      	ldr	r3, [pc, #160]	; (800b5e4 <pulseColorCommand+0x198>)
 800b544:	601e      	str	r6, [r3, #0]
 800b546:	4b28      	ldr	r3, [pc, #160]	; (800b5e8 <pulseColorCommand+0x19c>)
 800b548:	2201      	movs	r2, #1
 800b54a:	4252      	negs	r2, r2
 800b54c:	801a      	strh	r2, [r3, #0]
	rgbLedMode = RGB_PULSE_COLOR;
 800b54e:	4b27      	ldr	r3, [pc, #156]	; (800b5ec <pulseColorCommand+0x1a0>)
 800b550:	3203      	adds	r2, #3
 800b552:	701a      	strb	r2, [r3, #0]
	
	/* Respond to the command */
	if (result == H01R0_OK) 
	{
		/* Isolate first parameter string */
		strncpy(par, ( char * ) pcParameterString1, xParameterStringLength1);
 800b554:	4b17      	ldr	r3, [pc, #92]	; (800b5b4 <pulseColorCommand+0x168>)
 800b556:	6819      	ldr	r1, [r3, #0]
 800b558:	9a07      	ldr	r2, [sp, #28]
 800b55a:	a808      	add	r0, sp, #32
 800b55c:	f006 fef7 	bl	801234e <strncpy>
		if (repeat == -1)
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageInf, par, period, dc);
 800b560:	9600      	str	r6, [sp, #0]
 800b562:	0023      	movs	r3, r4
 800b564:	aa08      	add	r2, sp, #32
 800b566:	4922      	ldr	r1, [pc, #136]	; (800b5f0 <pulseColorCommand+0x1a4>)
 800b568:	9803      	ldr	r0, [sp, #12]
 800b56a:	f006 fe9b 	bl	80122a4 <siprintf>
	}

	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 800b56e:	2000      	movs	r0, #0
 800b570:	b00d      	add	sp, #52	; 0x34
 800b572:	bdf0      	pop	{r4, r5, r6, r7, pc}
		repeat = ( int32_t ) atol( ( char * ) pcParameterString4 );
 800b574:	0028      	movs	r0, r5
 800b576:	f006 fd1c 	bl	8011fb2 <atol>
 800b57a:	0005      	movs	r5, r0
	rgbColor = color;
 800b57c:	4b17      	ldr	r3, [pc, #92]	; (800b5dc <pulseColorCommand+0x190>)
 800b57e:	701f      	strb	r7, [r3, #0]
	rgbPeriod = period; rgbDC = dc; rgbCount = repeat;
 800b580:	4b17      	ldr	r3, [pc, #92]	; (800b5e0 <pulseColorCommand+0x194>)
 800b582:	601c      	str	r4, [r3, #0]
 800b584:	4b17      	ldr	r3, [pc, #92]	; (800b5e4 <pulseColorCommand+0x198>)
 800b586:	601e      	str	r6, [r3, #0]
 800b588:	4b17      	ldr	r3, [pc, #92]	; (800b5e8 <pulseColorCommand+0x19c>)
 800b58a:	8018      	strh	r0, [r3, #0]
	rgbLedMode = RGB_PULSE_COLOR;
 800b58c:	4b17      	ldr	r3, [pc, #92]	; (800b5ec <pulseColorCommand+0x1a0>)
 800b58e:	2202      	movs	r2, #2
 800b590:	701a      	strb	r2, [r3, #0]
		strncpy(par, ( char * ) pcParameterString1, xParameterStringLength1);
 800b592:	9a07      	ldr	r2, [sp, #28]
 800b594:	4b07      	ldr	r3, [pc, #28]	; (800b5b4 <pulseColorCommand+0x168>)
 800b596:	6819      	ldr	r1, [r3, #0]
 800b598:	a808      	add	r0, sp, #32
 800b59a:	f006 fed8 	bl	801234e <strncpy>
		if (repeat == -1)
 800b59e:	1c6b      	adds	r3, r5, #1
 800b5a0:	d0de      	beq.n	800b560 <pulseColorCommand+0x114>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par, period, dc, repeat);
 800b5a2:	9501      	str	r5, [sp, #4]
 800b5a4:	9600      	str	r6, [sp, #0]
 800b5a6:	0023      	movs	r3, r4
 800b5a8:	aa08      	add	r2, sp, #32
 800b5aa:	4912      	ldr	r1, [pc, #72]	; (800b5f4 <pulseColorCommand+0x1a8>)
 800b5ac:	9803      	ldr	r0, [sp, #12]
 800b5ae:	f006 fe79 	bl	80122a4 <siprintf>
	return pdFALSE;
 800b5b2:	e7dc      	b.n	800b56e <pulseColorCommand+0x122>
 800b5b4:	20001060 	.word	0x20001060
 800b5b8:	08019054 	.word	0x08019054
 800b5bc:	0801905c 	.word	0x0801905c
 800b5c0:	08019064 	.word	0x08019064
 800b5c4:	08019068 	.word	0x08019068
 800b5c8:	08019070 	.word	0x08019070
 800b5cc:	08019078 	.word	0x08019078
 800b5d0:	08019080 	.word	0x08019080
 800b5d4:	08019088 	.word	0x08019088
 800b5d8:	08019090 	.word	0x08019090
 800b5dc:	20001071 	.word	0x20001071
 800b5e0:	2000107c 	.word	0x2000107c
 800b5e4:	20001074 	.word	0x20001074
 800b5e8:	20001072 	.word	0x20001072
 800b5ec:	20001079 	.word	0x20001079
 800b5f0:	08019094 	.word	0x08019094
 800b5f4:	080190e4 	.word	0x080190e4

0800b5f8 <pulseRGBCommand>:

/*-----------------------------------------------------------*/

portBASE_TYPE pulseRGBCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5fa:	46de      	mov	lr, fp
 800b5fc:	4657      	mov	r7, sl
 800b5fe:	464e      	mov	r6, r9
 800b600:	4645      	mov	r5, r8
 800b602:	b5e0      	push	{r5, r6, r7, lr}
 800b604:	b08d      	sub	sp, #52	; 0x34
 800b606:	9005      	str	r0, [sp, #20]
 800b608:	9204      	str	r2, [sp, #16]
	Module_Status result = H01R0_OK;
	uint8_t red = 0; uint8_t green = 0; uint8_t blue = 0; uint32_t period = 0, dc = 0; int32_t repeat = 0;
	static int8_t *pcParameterString1, *pcParameterString2, *pcParameterString3, *pcParameterString4; 
	static int8_t *pcParameterString5, *pcParameterString6;
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 800b60a:	2300      	movs	r3, #0
 800b60c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b60e:	930a      	str	r3, [sp, #40]	; 0x28
 800b610:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 800b612:	9308      	str	r3, [sp, #32]
 800b614:	9307      	str	r3, [sp, #28]
 800b616:	9306      	str	r3, [sp, #24]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800b618:	2800      	cmp	r0, #0
 800b61a:	d101      	bne.n	800b620 <pulseRGBCommand+0x28>
 800b61c:	b672      	cpsid	i
 800b61e:	e7fe      	b.n	800b61e <pulseRGBCommand+0x26>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800b620:	aa0b      	add	r2, sp, #44	; 0x2c
 800b622:	2101      	movs	r1, #1
 800b624:	9e04      	ldr	r6, [sp, #16]
 800b626:	0030      	movs	r0, r6
 800b628:	f002 ffac 	bl	800e584 <FreeRTOS_CLIGetParameter>
	red = ( uint8_t ) atol( ( char * ) pcParameterString1 );
 800b62c:	f006 fcc1 	bl	8011fb2 <atol>
 800b630:	0004      	movs	r4, r0
 800b632:	b2c3      	uxtb	r3, r0
 800b634:	469b      	mov	fp, r3
	
	/* Obtain the 2nd parameter string. */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800b636:	aa0a      	add	r2, sp, #40	; 0x28
 800b638:	2102      	movs	r1, #2
 800b63a:	0030      	movs	r0, r6
 800b63c:	f002 ffa2 	bl	800e584 <FreeRTOS_CLIGetParameter>
	green = ( uint8_t ) atol( ( char * ) pcParameterString2 );
 800b640:	f006 fcb7 	bl	8011fb2 <atol>
 800b644:	0005      	movs	r5, r0
 800b646:	b2c3      	uxtb	r3, r0
 800b648:	469a      	mov	sl, r3
	
	/* Obtain the 3rd parameter string. */
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800b64a:	aa09      	add	r2, sp, #36	; 0x24
 800b64c:	2103      	movs	r1, #3
 800b64e:	0030      	movs	r0, r6
 800b650:	f002 ff98 	bl	800e584 <FreeRTOS_CLIGetParameter>
	blue = ( uint8_t ) atol( ( char * ) pcParameterString3 );
 800b654:	f006 fcad 	bl	8011fb2 <atol>
 800b658:	4680      	mov	r8, r0
 800b65a:	b2c3      	uxtb	r3, r0
 800b65c:	4699      	mov	r9, r3
	
	/* Obtain the 4th parameter string. */
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800b65e:	aa08      	add	r2, sp, #32
 800b660:	2104      	movs	r1, #4
 800b662:	0030      	movs	r0, r6
 800b664:	f002 ff8e 	bl	800e584 <FreeRTOS_CLIGetParameter>
	period = ( uint32_t ) atol( ( char * ) pcParameterString4 );
 800b668:	f006 fca3 	bl	8011fb2 <atol>
 800b66c:	0007      	movs	r7, r0
	
	/* Obtain the 5th parameter string. */
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 800b66e:	aa07      	add	r2, sp, #28
 800b670:	2105      	movs	r1, #5
 800b672:	9604      	str	r6, [sp, #16]
 800b674:	0030      	movs	r0, r6
 800b676:	f002 ff85 	bl	800e584 <FreeRTOS_CLIGetParameter>
	dc = ( uint32_t ) atol( ( char * ) pcParameterString5 );
 800b67a:	f006 fc9a 	bl	8011fb2 <atol>
 800b67e:	0006      	movs	r6, r0
	
	/* Obtain the 6th parameter string. */
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 800b680:	aa06      	add	r2, sp, #24
 800b682:	2106      	movs	r1, #6
 800b684:	9804      	ldr	r0, [sp, #16]
 800b686:	f002 ff7d 	bl	800e584 <FreeRTOS_CLIGetParameter>
 800b68a:	9004      	str	r0, [sp, #16]
	if (!strcmp( ( char * ) pcParameterString6, "inf"))
 800b68c:	492a      	ldr	r1, [pc, #168]	; (800b738 <pulseRGBCommand+0x140>)
 800b68e:	f7f4 fd39 	bl	8000104 <strcmp>
 800b692:	2800      	cmp	r0, #0
 800b694:	d129      	bne.n	800b6ea <pulseRGBCommand+0xf2>
	rgbRed = red; rgbGreen = green; rgbBlue = blue;
 800b696:	4b29      	ldr	r3, [pc, #164]	; (800b73c <pulseRGBCommand+0x144>)
 800b698:	465a      	mov	r2, fp
 800b69a:	701a      	strb	r2, [r3, #0]
 800b69c:	4b28      	ldr	r3, [pc, #160]	; (800b740 <pulseRGBCommand+0x148>)
 800b69e:	4652      	mov	r2, sl
 800b6a0:	701a      	strb	r2, [r3, #0]
 800b6a2:	4b28      	ldr	r3, [pc, #160]	; (800b744 <pulseRGBCommand+0x14c>)
 800b6a4:	464a      	mov	r2, r9
 800b6a6:	701a      	strb	r2, [r3, #0]
	rgbPeriod = period; rgbDC = dc; rgbCount = repeat;
 800b6a8:	4b27      	ldr	r3, [pc, #156]	; (800b748 <pulseRGBCommand+0x150>)
 800b6aa:	601f      	str	r7, [r3, #0]
 800b6ac:	4b27      	ldr	r3, [pc, #156]	; (800b74c <pulseRGBCommand+0x154>)
 800b6ae:	601e      	str	r6, [r3, #0]
 800b6b0:	4b27      	ldr	r3, [pc, #156]	; (800b750 <pulseRGBCommand+0x158>)
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	4252      	negs	r2, r2
 800b6b6:	801a      	strh	r2, [r3, #0]
	rgbLedMode = RGB_PULSE_RGB;
 800b6b8:	4b26      	ldr	r3, [pc, #152]	; (800b754 <pulseRGBCommand+0x15c>)
 800b6ba:	3202      	adds	r2, #2
 800b6bc:	701a      	strb	r2, [r3, #0]
	
	/* Respond to the command */
	if (result == H01R0_OK) 
	{
		if (repeat == -1)
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageInf, red, green, blue, period, dc);
 800b6be:	21ff      	movs	r1, #255	; 0xff
 800b6c0:	002b      	movs	r3, r5
 800b6c2:	400b      	ands	r3, r1
 800b6c4:	0022      	movs	r2, r4
 800b6c6:	400a      	ands	r2, r1
 800b6c8:	9602      	str	r6, [sp, #8]
 800b6ca:	9701      	str	r7, [sp, #4]
 800b6cc:	4640      	mov	r0, r8
 800b6ce:	4008      	ands	r0, r1
 800b6d0:	9000      	str	r0, [sp, #0]
 800b6d2:	4921      	ldr	r1, [pc, #132]	; (800b758 <pulseRGBCommand+0x160>)
 800b6d4:	9805      	ldr	r0, [sp, #20]
 800b6d6:	f006 fde5 	bl	80122a4 <siprintf>
	}

	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 800b6da:	2000      	movs	r0, #0
 800b6dc:	b00d      	add	sp, #52	; 0x34
 800b6de:	bc3c      	pop	{r2, r3, r4, r5}
 800b6e0:	4690      	mov	r8, r2
 800b6e2:	4699      	mov	r9, r3
 800b6e4:	46a2      	mov	sl, r4
 800b6e6:	46ab      	mov	fp, r5
 800b6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		repeat = ( int32_t ) atol( ( char * ) pcParameterString6 );
 800b6ea:	9804      	ldr	r0, [sp, #16]
 800b6ec:	f006 fc61 	bl	8011fb2 <atol>
	rgbRed = red; rgbGreen = green; rgbBlue = blue;
 800b6f0:	4b12      	ldr	r3, [pc, #72]	; (800b73c <pulseRGBCommand+0x144>)
 800b6f2:	465a      	mov	r2, fp
 800b6f4:	701a      	strb	r2, [r3, #0]
 800b6f6:	4b12      	ldr	r3, [pc, #72]	; (800b740 <pulseRGBCommand+0x148>)
 800b6f8:	4652      	mov	r2, sl
 800b6fa:	701a      	strb	r2, [r3, #0]
 800b6fc:	4b11      	ldr	r3, [pc, #68]	; (800b744 <pulseRGBCommand+0x14c>)
 800b6fe:	464a      	mov	r2, r9
 800b700:	701a      	strb	r2, [r3, #0]
	rgbPeriod = period; rgbDC = dc; rgbCount = repeat;
 800b702:	4b11      	ldr	r3, [pc, #68]	; (800b748 <pulseRGBCommand+0x150>)
 800b704:	601f      	str	r7, [r3, #0]
 800b706:	4b11      	ldr	r3, [pc, #68]	; (800b74c <pulseRGBCommand+0x154>)
 800b708:	601e      	str	r6, [r3, #0]
 800b70a:	4b11      	ldr	r3, [pc, #68]	; (800b750 <pulseRGBCommand+0x158>)
 800b70c:	8018      	strh	r0, [r3, #0]
	rgbLedMode = RGB_PULSE_RGB;
 800b70e:	4b11      	ldr	r3, [pc, #68]	; (800b754 <pulseRGBCommand+0x15c>)
 800b710:	2201      	movs	r2, #1
 800b712:	701a      	strb	r2, [r3, #0]
		if (repeat == -1)
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	d0d2      	beq.n	800b6be <pulseRGBCommand+0xc6>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, red, green, blue, period, dc, repeat);
 800b718:	21ff      	movs	r1, #255	; 0xff
 800b71a:	002b      	movs	r3, r5
 800b71c:	400b      	ands	r3, r1
 800b71e:	0022      	movs	r2, r4
 800b720:	400a      	ands	r2, r1
 800b722:	9003      	str	r0, [sp, #12]
 800b724:	9602      	str	r6, [sp, #8]
 800b726:	9701      	str	r7, [sp, #4]
 800b728:	4640      	mov	r0, r8
 800b72a:	4008      	ands	r0, r1
 800b72c:	9000      	str	r0, [sp, #0]
 800b72e:	490b      	ldr	r1, [pc, #44]	; (800b75c <pulseRGBCommand+0x164>)
 800b730:	9805      	ldr	r0, [sp, #20]
 800b732:	f006 fdb7 	bl	80122a4 <siprintf>
	return pdFALSE;
 800b736:	e7d0      	b.n	800b6da <pulseRGBCommand+0xe2>
 800b738:	08019090 	.word	0x08019090
 800b73c:	20001080 	.word	0x20001080
 800b740:	20001078 	.word	0x20001078
 800b744:	20001070 	.word	0x20001070
 800b748:	2000107c 	.word	0x2000107c
 800b74c:	20001074 	.word	0x20001074
 800b750:	20001072 	.word	0x20001072
 800b754:	20001079 	.word	0x20001079
 800b758:	08019140 	.word	0x08019140
 800b75c:	0801919c 	.word	0x0801919c

0800b760 <RegisterModuleCLICommands>:
{
 800b760:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &demoCommandDefinition );
 800b762:	480f      	ldr	r0, [pc, #60]	; (800b7a0 <RegisterModuleCLICommands+0x40>)
 800b764:	f002 fe70 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &onCommandDefinition );
 800b768:	480e      	ldr	r0, [pc, #56]	; (800b7a4 <RegisterModuleCLICommands+0x44>)
 800b76a:	f002 fe6d 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &offCommandDefinition );
 800b76e:	480e      	ldr	r0, [pc, #56]	; (800b7a8 <RegisterModuleCLICommands+0x48>)
 800b770:	f002 fe6a 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &colorCommandDefinition );
 800b774:	480d      	ldr	r0, [pc, #52]	; (800b7ac <RegisterModuleCLICommands+0x4c>)
 800b776:	f002 fe67 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &RGBCommandDefinition );
 800b77a:	480d      	ldr	r0, [pc, #52]	; (800b7b0 <RegisterModuleCLICommands+0x50>)
 800b77c:	f002 fe64 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &toggleCommandDefinition );
 800b780:	480c      	ldr	r0, [pc, #48]	; (800b7b4 <RegisterModuleCLICommands+0x54>)
 800b782:	f002 fe61 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pulseColorCommandDefinition );
 800b786:	480c      	ldr	r0, [pc, #48]	; (800b7b8 <RegisterModuleCLICommands+0x58>)
 800b788:	f002 fe5e 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pulseRGBCommandDefinition );
 800b78c:	480b      	ldr	r0, [pc, #44]	; (800b7bc <RegisterModuleCLICommands+0x5c>)
 800b78e:	f002 fe5b 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &sweepCommandDefinition );
 800b792:	480b      	ldr	r0, [pc, #44]	; (800b7c0 <RegisterModuleCLICommands+0x60>)
 800b794:	f002 fe58 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dimCommandDefinition );
 800b798:	480a      	ldr	r0, [pc, #40]	; (800b7c4 <RegisterModuleCLICommands+0x64>)
 800b79a:	f002 fe55 	bl	800e448 <FreeRTOS_CLIRegisterCommand>
}
 800b79e:	bd10      	pop	{r4, pc}
 800b7a0:	08018e88 	.word	0x08018e88
 800b7a4:	08019044 	.word	0x08019044
 800b7a8:	08018ffc 	.word	0x08018ffc
 800b7ac:	08018e44 	.word	0x08018e44
 800b7b0:	08018df8 	.word	0x08018df8
 800b7b4:	08019924 	.word	0x08019924
 800b7b8:	08019130 	.word	0x08019130
 800b7bc:	080191f4 	.word	0x080191f4
 800b7c0:	08019914 	.word	0x08019914
 800b7c4:	08018fd8 	.word	0x08018fd8

0800b7c8 <GetPort>:
	if (huart->Instance == USART4)
 800b7c8:	6800      	ldr	r0, [r0, #0]
 800b7ca:	4b11      	ldr	r3, [pc, #68]	; (800b810 <GetPort+0x48>)
 800b7cc:	4298      	cmp	r0, r3
 800b7ce:	d014      	beq.n	800b7fa <GetPort+0x32>
	else if (huart->Instance == USART2)
 800b7d0:	4b10      	ldr	r3, [pc, #64]	; (800b814 <GetPort+0x4c>)
 800b7d2:	4298      	cmp	r0, r3
 800b7d4:	d013      	beq.n	800b7fe <GetPort+0x36>
	else if (huart->Instance == USART6)
 800b7d6:	4b10      	ldr	r3, [pc, #64]	; (800b818 <GetPort+0x50>)
 800b7d8:	4298      	cmp	r0, r3
 800b7da:	d012      	beq.n	800b802 <GetPort+0x3a>
	else if (huart->Instance == USART3)
 800b7dc:	4b0f      	ldr	r3, [pc, #60]	; (800b81c <GetPort+0x54>)
 800b7de:	4298      	cmp	r0, r3
 800b7e0:	d011      	beq.n	800b806 <GetPort+0x3e>
	else if (huart->Instance == USART1)
 800b7e2:	4b0f      	ldr	r3, [pc, #60]	; (800b820 <GetPort+0x58>)
 800b7e4:	4298      	cmp	r0, r3
 800b7e6:	d010      	beq.n	800b80a <GetPort+0x42>
	return 0;
 800b7e8:	4b0e      	ldr	r3, [pc, #56]	; (800b824 <GetPort+0x5c>)
 800b7ea:	469c      	mov	ip, r3
 800b7ec:	4460      	add	r0, ip
 800b7ee:	4243      	negs	r3, r0
 800b7f0:	4158      	adcs	r0, r3
 800b7f2:	4240      	negs	r0, r0
 800b7f4:	2306      	movs	r3, #6
 800b7f6:	4018      	ands	r0, r3
}
 800b7f8:	4770      	bx	lr
		return P1;
 800b7fa:	2001      	movs	r0, #1
 800b7fc:	e7fc      	b.n	800b7f8 <GetPort+0x30>
		return P2;
 800b7fe:	2002      	movs	r0, #2
 800b800:	e7fa      	b.n	800b7f8 <GetPort+0x30>
		return P3;
 800b802:	2003      	movs	r0, #3
 800b804:	e7f8      	b.n	800b7f8 <GetPort+0x30>
		return P4;
 800b806:	2004      	movs	r0, #4
 800b808:	e7f6      	b.n	800b7f8 <GetPort+0x30>
		return P5;
 800b80a:	2005      	movs	r0, #5
 800b80c:	e7f4      	b.n	800b7f8 <GetPort+0x30>
 800b80e:	46c0      	nop			; (mov r8, r8)
 800b810:	40004c00 	.word	0x40004c00
 800b814:	40004400 	.word	0x40004400
 800b818:	40011400 	.word	0x40011400
 800b81c:	40004800 	.word	0x40004800
 800b820:	40013800 	.word	0x40013800
 800b824:	bfffb000 	.word	0xbfffb000

0800b828 <TIM3_Init>:
{
 800b828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b82a:	b095      	sub	sp, #84	; 0x54
  __TIM3_CLK_ENABLE();
 800b82c:	4b30      	ldr	r3, [pc, #192]	; (800b8f0 <TIM3_Init+0xc8>)
 800b82e:	69da      	ldr	r2, [r3, #28]
 800b830:	2602      	movs	r6, #2
 800b832:	4332      	orrs	r2, r6
 800b834:	61da      	str	r2, [r3, #28]
 800b836:	69db      	ldr	r3, [r3, #28]
 800b838:	4033      	ands	r3, r6
 800b83a:	9301      	str	r3, [sp, #4]
 800b83c:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b83e:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b840:	2500      	movs	r5, #0
 800b842:	9511      	str	r5, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b844:	2303      	movs	r3, #3
 800b846:	9312      	str	r3, [sp, #72]	; 0x48
	GPIO_InitStruct.Pin = _RGB_RED_PIN;
 800b848:	337d      	adds	r3, #125	; 0x7d
 800b84a:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800b84c:	2401      	movs	r4, #1
 800b84e:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_GPIO_Init(_RGB_RED_PORT, &GPIO_InitStruct);
 800b850:	2090      	movs	r0, #144	; 0x90
 800b852:	a90f      	add	r1, sp, #60	; 0x3c
 800b854:	05c0      	lsls	r0, r0, #23
 800b856:	f004 f9a9 	bl	800fbac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = _RGB_GREEN_PIN;
 800b85a:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800b85c:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_GPIO_Init(_RGB_GREEN_PORT, &GPIO_InitStruct);
 800b85e:	4f25      	ldr	r7, [pc, #148]	; (800b8f4 <TIM3_Init+0xcc>)
 800b860:	a90f      	add	r1, sp, #60	; 0x3c
 800b862:	0038      	movs	r0, r7
 800b864:	f004 f9a2 	bl	800fbac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = _RGB_BLUE_PIN;
 800b868:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800b86a:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_GPIO_Init(_RGB_BLUE_PORT, &GPIO_InitStruct);
 800b86c:	a90f      	add	r1, sp, #60	; 0x3c
 800b86e:	0038      	movs	r0, r7
 800b870:	f004 f99c 	bl	800fbac <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b874:	2200      	movs	r2, #0
 800b876:	2100      	movs	r1, #0
 800b878:	2010      	movs	r0, #16
 800b87a:	f003 f9cd 	bl	800ec18 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b87e:	2010      	movs	r0, #16
 800b880:	f003 f9fe 	bl	800ec80 <HAL_NVIC_EnableIRQ>
  htim3.Instance = TIM3;
 800b884:	4c1c      	ldr	r4, [pc, #112]	; (800b8f8 <TIM3_Init+0xd0>)
 800b886:	4b1d      	ldr	r3, [pc, #116]	; (800b8fc <TIM3_Init+0xd4>)
 800b888:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = (uint32_t)(HAL_RCC_GetSysClockFreq()/PWM_TIMER_CLOCK) - 1;
 800b88a:	f004 fe87 	bl	801059c <HAL_RCC_GetSysClockFreq>
 800b88e:	491c      	ldr	r1, [pc, #112]	; (800b900 <TIM3_Init+0xd8>)
 800b890:	f7f4 fc54 	bl	800013c <__udivsi3>
 800b894:	3801      	subs	r0, #1
 800b896:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b898:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0;
 800b89a:	60e5      	str	r5, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b89c:	6125      	str	r5, [r4, #16]
  HAL_TIM_Base_Init(&htim3);
 800b89e:	0020      	movs	r0, r4
 800b8a0:	f005 fc7a 	bl	8011198 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b8a4:	2380      	movs	r3, #128	; 0x80
 800b8a6:	015b      	lsls	r3, r3, #5
 800b8a8:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800b8aa:	a90b      	add	r1, sp, #44	; 0x2c
 800b8ac:	0020      	movs	r0, r4
 800b8ae:	f005 fa6b 	bl	8010d88 <HAL_TIM_ConfigClockSource>
  HAL_TIM_PWM_Init(&htim3);
 800b8b2:	0020      	movs	r0, r4
 800b8b4:	f005 fc8a 	bl	80111cc <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b8b8:	9509      	str	r5, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b8ba:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800b8bc:	a909      	add	r1, sp, #36	; 0x24
 800b8be:	0020      	movs	r0, r4
 800b8c0:	f005 fd88 	bl	80113d4 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b8c4:	2360      	movs	r3, #96	; 0x60
 800b8c6:	9302      	str	r3, [sp, #8]
  sConfigOC.Pulse = 0;
 800b8c8:	9503      	str	r5, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b8ca:	9504      	str	r5, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b8cc:	9506      	str	r5, [sp, #24]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _RGB_RED_TIM_CH);
 800b8ce:	2204      	movs	r2, #4
 800b8d0:	a902      	add	r1, sp, #8
 800b8d2:	0020      	movs	r0, r4
 800b8d4:	f005 fcd4 	bl	8011280 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _RGB_GREEN_TIM_CH);
 800b8d8:	2208      	movs	r2, #8
 800b8da:	a902      	add	r1, sp, #8
 800b8dc:	0020      	movs	r0, r4
 800b8de:	f005 fccf 	bl	8011280 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _RGB_BLUE_TIM_CH);
 800b8e2:	220c      	movs	r2, #12
 800b8e4:	a902      	add	r1, sp, #8
 800b8e6:	0020      	movs	r0, r4
 800b8e8:	f005 fcca 	bl	8011280 <HAL_TIM_PWM_ConfigChannel>
}
 800b8ec:	b015      	add	sp, #84	; 0x54
 800b8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8f0:	40021000 	.word	0x40021000
 800b8f4:	48000400 	.word	0x48000400
 800b8f8:	200062e8 	.word	0x200062e8
 800b8fc:	40000400 	.word	0x40000400
 800b900:	00f42400 	.word	0x00f42400

0800b904 <Module_Init>:
{
 800b904:	b500      	push	{lr}
 800b906:	b089      	sub	sp, #36	; 0x24
	_RGB_RED_GPIO_CLK();
 800b908:	4b1d      	ldr	r3, [pc, #116]	; (800b980 <Module_Init+0x7c>)
 800b90a:	6959      	ldr	r1, [r3, #20]
 800b90c:	2080      	movs	r0, #128	; 0x80
 800b90e:	0280      	lsls	r0, r0, #10
 800b910:	4301      	orrs	r1, r0
 800b912:	6159      	str	r1, [r3, #20]
 800b914:	695a      	ldr	r2, [r3, #20]
 800b916:	4002      	ands	r2, r0
 800b918:	9205      	str	r2, [sp, #20]
 800b91a:	9a05      	ldr	r2, [sp, #20]
	_RGB_GREEN_GPIO_CLK();
 800b91c:	6959      	ldr	r1, [r3, #20]
 800b91e:	2280      	movs	r2, #128	; 0x80
 800b920:	02d2      	lsls	r2, r2, #11
 800b922:	4311      	orrs	r1, r2
 800b924:	6159      	str	r1, [r3, #20]
 800b926:	6959      	ldr	r1, [r3, #20]
 800b928:	4011      	ands	r1, r2
 800b92a:	9106      	str	r1, [sp, #24]
 800b92c:	9906      	ldr	r1, [sp, #24]
	_RGB_BLUE_GPIO_CLK();
 800b92e:	6959      	ldr	r1, [r3, #20]
 800b930:	4311      	orrs	r1, r2
 800b932:	6159      	str	r1, [r3, #20]
 800b934:	695b      	ldr	r3, [r3, #20]
 800b936:	401a      	ands	r2, r3
 800b938:	9207      	str	r2, [sp, #28]
 800b93a:	9b07      	ldr	r3, [sp, #28]
  MX_USART1_UART_Init();
 800b93c:	f002 fa6a 	bl	800de14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b940:	f002 fa80 	bl	800de44 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800b944:	f002 fa96 	bl	800de74 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800b948:	f002 faac 	bl	800dea4 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800b94c:	f002 fac2 	bl	800ded4 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800b950:	f002 fad8 	bl	800df04 <MX_USART6_UART_Init>
	TIM3_Init();
 800b954:	f7ff ff68 	bl	800b828 <TIM3_Init>
	if (RGBledTaskHandle == NULL)
 800b958:	4b0a      	ldr	r3, [pc, #40]	; (800b984 <Module_Init+0x80>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d001      	beq.n	800b964 <Module_Init+0x60>
}
 800b960:	b009      	add	sp, #36	; 0x24
 800b962:	bd00      	pop	{pc}
		xTaskCreate(RGBledTask, (const char *) "RGBledTask", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal-osPriorityIdle, &RGBledTaskHandle);
 800b964:	9303      	str	r3, [sp, #12]
 800b966:	9302      	str	r3, [sp, #8]
 800b968:	4b06      	ldr	r3, [pc, #24]	; (800b984 <Module_Init+0x80>)
 800b96a:	9301      	str	r3, [sp, #4]
 800b96c:	2303      	movs	r3, #3
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	2300      	movs	r3, #0
 800b972:	22a0      	movs	r2, #160	; 0xa0
 800b974:	4904      	ldr	r1, [pc, #16]	; (800b988 <Module_Init+0x84>)
 800b976:	4805      	ldr	r0, [pc, #20]	; (800b98c <Module_Init+0x88>)
 800b978:	f00a f80c 	bl	8015994 <xTaskGenericCreate>
}
 800b97c:	e7f0      	b.n	800b960 <Module_Init+0x5c>
 800b97e:	46c0      	nop			; (mov r8, r8)
 800b980:	40021000 	.word	0x40021000
 800b984:	20001058 	.word	0x20001058
 800b988:	08018da8 	.word	0x08018da8
 800b98c:	0800c1d5 	.word	0x0800c1d5

0800b990 <startPWM>:
{
 800b990:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b992:	b083      	sub	sp, #12
 800b994:	0007      	movs	r7, r0
 800b996:	9100      	str	r1, [sp, #0]
 800b998:	9201      	str	r2, [sp, #4]
	htim3.Instance->ARR = period - 1;
 800b99a:	4d28      	ldr	r5, [pc, #160]	; (800ba3c <startPWM+0xac>)
 800b99c:	682e      	ldr	r6, [r5, #0]
 800b99e:	4a28      	ldr	r2, [pc, #160]	; (800ba40 <startPWM+0xb0>)
 800b9a0:	62f2      	str	r2, [r6, #44]	; 0x2c
	htim3.Instance->CCR2 = ((float)intensity/100.0f) * ((float)red/255.0f) * period;
 800b9a2:	0018      	movs	r0, r3
 800b9a4:	f7f5 fb06 	bl	8000fb4 <__aeabi_ui2f>
 800b9a8:	4926      	ldr	r1, [pc, #152]	; (800ba44 <startPWM+0xb4>)
 800b9aa:	f7f4 fe15 	bl	80005d8 <__aeabi_fdiv>
 800b9ae:	1c04      	adds	r4, r0, #0
 800b9b0:	0038      	movs	r0, r7
 800b9b2:	f7f5 faff 	bl	8000fb4 <__aeabi_ui2f>
 800b9b6:	4924      	ldr	r1, [pc, #144]	; (800ba48 <startPWM+0xb8>)
 800b9b8:	f7f4 fe0e 	bl	80005d8 <__aeabi_fdiv>
 800b9bc:	1c21      	adds	r1, r4, #0
 800b9be:	f7f4 ffe3 	bl	8000988 <__aeabi_fmul>
 800b9c2:	4922      	ldr	r1, [pc, #136]	; (800ba4c <startPWM+0xbc>)
 800b9c4:	f7f4 ffe0 	bl	8000988 <__aeabi_fmul>
 800b9c8:	f7f4 fdd0 	bl	800056c <__aeabi_f2uiz>
 800b9cc:	63b0      	str	r0, [r6, #56]	; 0x38
	htim3.Instance->CCR3 = ((float)intensity/100.0f) * ((float)green/255.0f) * period;
 800b9ce:	9800      	ldr	r0, [sp, #0]
 800b9d0:	f7f5 faf0 	bl	8000fb4 <__aeabi_ui2f>
 800b9d4:	491c      	ldr	r1, [pc, #112]	; (800ba48 <startPWM+0xb8>)
 800b9d6:	f7f4 fdff 	bl	80005d8 <__aeabi_fdiv>
 800b9da:	1c21      	adds	r1, r4, #0
 800b9dc:	f7f4 ffd4 	bl	8000988 <__aeabi_fmul>
 800b9e0:	491a      	ldr	r1, [pc, #104]	; (800ba4c <startPWM+0xbc>)
 800b9e2:	f7f4 ffd1 	bl	8000988 <__aeabi_fmul>
 800b9e6:	f7f4 fdc1 	bl	800056c <__aeabi_f2uiz>
 800b9ea:	63f0      	str	r0, [r6, #60]	; 0x3c
	htim3.Instance->CCR4 = ((float)intensity/100.0f) * ((float)blue/255.0f) * period;
 800b9ec:	9801      	ldr	r0, [sp, #4]
 800b9ee:	f7f5 fae1 	bl	8000fb4 <__aeabi_ui2f>
 800b9f2:	4915      	ldr	r1, [pc, #84]	; (800ba48 <startPWM+0xb8>)
 800b9f4:	f7f4 fdf0 	bl	80005d8 <__aeabi_fdiv>
 800b9f8:	1c21      	adds	r1, r4, #0
 800b9fa:	f7f4 ffc5 	bl	8000988 <__aeabi_fmul>
 800b9fe:	4913      	ldr	r1, [pc, #76]	; (800ba4c <startPWM+0xbc>)
 800ba00:	f7f4 ffc2 	bl	8000988 <__aeabi_fmul>
 800ba04:	f7f4 fdb2 	bl	800056c <__aeabi_f2uiz>
 800ba08:	6430      	str	r0, [r6, #64]	; 0x40
	if (HAL_TIM_PWM_Start(&htim3, _RGB_RED_TIM_CH) != HAL_OK)	
 800ba0a:	2104      	movs	r1, #4
 800ba0c:	0028      	movs	r0, r5
 800ba0e:	f005 fcb9 	bl	8011384 <HAL_TIM_PWM_Start>
		return	H01R0_ERROR;
 800ba12:	23ff      	movs	r3, #255	; 0xff
	if (HAL_TIM_PWM_Start(&htim3, _RGB_RED_TIM_CH) != HAL_OK)	
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d10e      	bne.n	800ba36 <startPWM+0xa6>
	if (HAL_TIM_PWM_Start(&htim3, _RGB_GREEN_TIM_CH) != HAL_OK)	
 800ba18:	2108      	movs	r1, #8
 800ba1a:	4808      	ldr	r0, [pc, #32]	; (800ba3c <startPWM+0xac>)
 800ba1c:	f005 fcb2 	bl	8011384 <HAL_TIM_PWM_Start>
		return	H01R0_ERROR;
 800ba20:	23ff      	movs	r3, #255	; 0xff
	if (HAL_TIM_PWM_Start(&htim3, _RGB_GREEN_TIM_CH) != HAL_OK)	
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d107      	bne.n	800ba36 <startPWM+0xa6>
	if (HAL_TIM_PWM_Start(&htim3, _RGB_BLUE_TIM_CH) != HAL_OK)	
 800ba26:	210c      	movs	r1, #12
 800ba28:	4804      	ldr	r0, [pc, #16]	; (800ba3c <startPWM+0xac>)
 800ba2a:	f005 fcab 	bl	8011384 <HAL_TIM_PWM_Start>
 800ba2e:	1e43      	subs	r3, r0, #1
 800ba30:	4198      	sbcs	r0, r3
 800ba32:	4243      	negs	r3, r0
 800ba34:	b2db      	uxtb	r3, r3
}
 800ba36:	0018      	movs	r0, r3
 800ba38:	b003      	add	sp, #12
 800ba3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba3c:	200062e8 	.word	0x200062e8
 800ba40:	00000299 	.word	0x00000299
 800ba44:	42c80000 	.word	0x42c80000
 800ba48:	437f0000 	.word	0x437f0000
 800ba4c:	44268000 	.word	0x44268000

0800ba50 <RGB_LED_on>:
{
 800ba50:	b510      	push	{r4, lr}
	if (intensity == 0) 
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d00e      	beq.n	800ba74 <RGB_LED_on+0x24>
		return H01R0_ERR_WrongIntensity;
 800ba56:	2203      	movs	r2, #3
	else if (intensity <= 100)
 800ba58:	2864      	cmp	r0, #100	; 0x64
 800ba5a:	d814      	bhi.n	800ba86 <RGB_LED_on+0x36>
		result = startPWM(255, 255, 255, intensity);
 800ba5c:	0003      	movs	r3, r0
 800ba5e:	32fc      	adds	r2, #252	; 0xfc
 800ba60:	21ff      	movs	r1, #255	; 0xff
 800ba62:	20ff      	movs	r0, #255	; 0xff
 800ba64:	f7ff ff94 	bl	800b990 <startPWM>
 800ba68:	1e02      	subs	r2, r0, #0
		if (result == H01R0_OK)	RGB_LED_State = 1;
 800ba6a:	d10c      	bne.n	800ba86 <RGB_LED_on+0x36>
 800ba6c:	4b07      	ldr	r3, [pc, #28]	; (800ba8c <RGB_LED_on+0x3c>)
 800ba6e:	2101      	movs	r1, #1
 800ba70:	7019      	strb	r1, [r3, #0]
 800ba72:	e008      	b.n	800ba86 <RGB_LED_on+0x36>
		htim3.Instance->CCR2 = 0;
 800ba74:	4b06      	ldr	r3, [pc, #24]	; (800ba90 <RGB_LED_on+0x40>)
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	2300      	movs	r3, #0
 800ba7a:	6393      	str	r3, [r2, #56]	; 0x38
		htim3.Instance->CCR3 = 0;
 800ba7c:	63d3      	str	r3, [r2, #60]	; 0x3c
		htim3.Instance->CCR4 = 0;	
 800ba7e:	6413      	str	r3, [r2, #64]	; 0x40
		RGB_LED_State = 0;
 800ba80:	4a02      	ldr	r2, [pc, #8]	; (800ba8c <RGB_LED_on+0x3c>)
 800ba82:	7013      	strb	r3, [r2, #0]
		return H01R0_OK;		
 800ba84:	2200      	movs	r2, #0
}
 800ba86:	0010      	movs	r0, r2
 800ba88:	bd10      	pop	{r4, pc}
 800ba8a:	46c0      	nop			; (mov r8, r8)
 800ba8c:	20001054 	.word	0x20001054
 800ba90:	200062e8 	.word	0x200062e8

0800ba94 <onCommand>:
{
 800ba94:	b530      	push	{r4, r5, lr}
 800ba96:	b083      	sub	sp, #12
 800ba98:	0005      	movs	r5, r0
 800ba9a:	0010      	movs	r0, r2
	int8_t *pcParameterString1; portBASE_TYPE xParameterStringLength1 = 0; 
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 800baa0:	2d00      	cmp	r5, #0
 800baa2:	d101      	bne.n	800baa8 <onCommand+0x14>
 800baa4:	b672      	cpsid	i
 800baa6:	e7fe      	b.n	800baa6 <onCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter
 800baa8:	aa01      	add	r2, sp, #4
 800baaa:	2101      	movs	r1, #1
 800baac:	f002 fd6a 	bl	800e584 <FreeRTOS_CLIGetParameter>
	intensity = ( uint8_t ) atol( ( char * ) pcParameterString1 );
 800bab0:	f006 fa7f 	bl	8011fb2 <atol>
 800bab4:	0004      	movs	r4, r0
	result = RGB_LED_on(intensity);	
 800bab6:	b2c0      	uxtb	r0, r0
 800bab8:	f7ff ffca 	bl	800ba50 <RGB_LED_on>
	if (result == H01R0_OK)
 800babc:	2800      	cmp	r0, #0
 800babe:	d004      	beq.n	800baca <onCommand+0x36>
	else if (result == H01R0_ERR_WrongIntensity)
 800bac0:	2803      	cmp	r0, #3
 800bac2:	d008      	beq.n	800bad6 <onCommand+0x42>
}
 800bac4:	2000      	movs	r0, #0
 800bac6:	b003      	add	sp, #12
 800bac8:	bd30      	pop	{r4, r5, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOKMessage, intensity);
 800baca:	b2e2      	uxtb	r2, r4
 800bacc:	4905      	ldr	r1, [pc, #20]	; (800bae4 <onCommand+0x50>)
 800bace:	0028      	movs	r0, r5
 800bad0:	f006 fbe8 	bl	80122a4 <siprintf>
 800bad4:	e7f6      	b.n	800bac4 <onCommand+0x30>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcWrongIntensityMessage);
 800bad6:	2213      	movs	r2, #19
 800bad8:	4903      	ldr	r1, [pc, #12]	; (800bae8 <onCommand+0x54>)
 800bada:	0028      	movs	r0, r5
 800badc:	f006 fadb 	bl	8012096 <memcpy>
 800bae0:	e7f0      	b.n	800bac4 <onCommand+0x30>
 800bae2:	46c0      	nop			; (mov r8, r8)
 800bae4:	0801900c 	.word	0x0801900c
 800bae8:	08019030 	.word	0x08019030

0800baec <RGB_LED_off>:
{
 800baec:	b510      	push	{r4, lr}
	if (HAL_TIM_Base_Stop(&htim3) != HAL_OK)	
 800baee:	4809      	ldr	r0, [pc, #36]	; (800bb14 <RGB_LED_off+0x28>)
 800baf0:	f005 f92e 	bl	8010d50 <HAL_TIM_Base_Stop>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d10a      	bne.n	800bb0e <RGB_LED_off+0x22>
	htim3.Instance->CCR2 = 0;
 800baf8:	4b06      	ldr	r3, [pc, #24]	; (800bb14 <RGB_LED_off+0x28>)
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	2300      	movs	r3, #0
 800bafe:	6393      	str	r3, [r2, #56]	; 0x38
	htim3.Instance->CCR3 = 0;
 800bb00:	63d3      	str	r3, [r2, #60]	; 0x3c
	htim3.Instance->CCR4 = 0;	
 800bb02:	6413      	str	r3, [r2, #64]	; 0x40
	RGB_LED_State = 0;
 800bb04:	4a04      	ldr	r2, [pc, #16]	; (800bb18 <RGB_LED_off+0x2c>)
 800bb06:	7013      	strb	r3, [r2, #0]
	rgbLedMode = 0;
 800bb08:	4a04      	ldr	r2, [pc, #16]	; (800bb1c <RGB_LED_off+0x30>)
 800bb0a:	7013      	strb	r3, [r2, #0]
}
 800bb0c:	bd10      	pop	{r4, pc}
		return H01R0_ERROR;
 800bb0e:	20ff      	movs	r0, #255	; 0xff
 800bb10:	e7fc      	b.n	800bb0c <RGB_LED_off+0x20>
 800bb12:	46c0      	nop			; (mov r8, r8)
 800bb14:	200062e8 	.word	0x200062e8
 800bb18:	20001054 	.word	0x20001054
 800bb1c:	20001079 	.word	0x20001079

0800bb20 <offCommand>:
{
 800bb20:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 800bb22:	2800      	cmp	r0, #0
 800bb24:	d101      	bne.n	800bb2a <offCommand+0xa>
 800bb26:	b672      	cpsid	i
 800bb28:	e7fe      	b.n	800bb28 <offCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800bb2a:	2211      	movs	r2, #17
 800bb2c:	4903      	ldr	r1, [pc, #12]	; (800bb3c <offCommand+0x1c>)
 800bb2e:	f006 fab2 	bl	8012096 <memcpy>
	RGB_LED_off();	
 800bb32:	f7ff ffdb 	bl	800baec <RGB_LED_off>
}
 800bb36:	2000      	movs	r0, #0
 800bb38:	bd10      	pop	{r4, pc}
 800bb3a:	46c0      	nop			; (mov r8, r8)
 800bb3c:	08018fe8 	.word	0x08018fe8

0800bb40 <RGB_LED_toggle>:
{
 800bb40:	b510      	push	{r4, lr}
	if (RGB_LED_State)
 800bb42:	4b05      	ldr	r3, [pc, #20]	; (800bb58 <RGB_LED_toggle+0x18>)
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d102      	bne.n	800bb50 <RGB_LED_toggle+0x10>
		result = RGB_LED_on(intensity);
 800bb4a:	f7ff ff81 	bl	800ba50 <RGB_LED_on>
}
 800bb4e:	bd10      	pop	{r4, pc}
		result = RGB_LED_off();
 800bb50:	f7ff ffcc 	bl	800baec <RGB_LED_off>
 800bb54:	e7fb      	b.n	800bb4e <RGB_LED_toggle+0xe>
 800bb56:	46c0      	nop			; (mov r8, r8)
 800bb58:	20001054 	.word	0x20001054

0800bb5c <toggleCommand>:
{
 800bb5c:	b530      	push	{r4, r5, lr}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	0005      	movs	r5, r0
 800bb62:	0010      	movs	r0, r2
	int8_t *pcParameterString1; portBASE_TYPE xParameterStringLength1 = 0; 
 800bb64:	2300      	movs	r3, #0
 800bb66:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 800bb68:	2d00      	cmp	r5, #0
 800bb6a:	d101      	bne.n	800bb70 <toggleCommand+0x14>
 800bb6c:	b672      	cpsid	i
 800bb6e:	e7fe      	b.n	800bb6e <toggleCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter
 800bb70:	aa01      	add	r2, sp, #4
 800bb72:	2101      	movs	r1, #1
 800bb74:	f002 fd06 	bl	800e584 <FreeRTOS_CLIGetParameter>
	intensity = ( uint8_t ) atol( ( char * ) pcParameterString1 );
 800bb78:	f006 fa1b 	bl	8011fb2 <atol>
 800bb7c:	0004      	movs	r4, r0
	result = RGB_LED_toggle(intensity);	
 800bb7e:	b2c0      	uxtb	r0, r0
 800bb80:	f7ff ffde 	bl	800bb40 <RGB_LED_toggle>
	if ( (result == H01R0_OK) && RGB_LED_State)
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d10f      	bne.n	800bba8 <toggleCommand+0x4c>
 800bb88:	4b0d      	ldr	r3, [pc, #52]	; (800bbc0 <toggleCommand+0x64>)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d105      	bne.n	800bb9c <toggleCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOK0Message, intensity);
 800bb90:	b2e2      	uxtb	r2, r4
 800bb92:	490c      	ldr	r1, [pc, #48]	; (800bbc4 <toggleCommand+0x68>)
 800bb94:	0028      	movs	r0, r5
 800bb96:	f006 fb85 	bl	80122a4 <siprintf>
 800bb9a:	e007      	b.n	800bbac <toggleCommand+0x50>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOK1Message, intensity);
 800bb9c:	b2e2      	uxtb	r2, r4
 800bb9e:	490a      	ldr	r1, [pc, #40]	; (800bbc8 <toggleCommand+0x6c>)
 800bba0:	0028      	movs	r0, r5
 800bba2:	f006 fb7f 	bl	80122a4 <siprintf>
 800bba6:	e001      	b.n	800bbac <toggleCommand+0x50>
	else if (result == H01R0_ERR_WrongIntensity)
 800bba8:	2803      	cmp	r0, #3
 800bbaa:	d002      	beq.n	800bbb2 <toggleCommand+0x56>
}
 800bbac:	2000      	movs	r0, #0
 800bbae:	b003      	add	sp, #12
 800bbb0:	bd30      	pop	{r4, r5, pc}
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcWrongIntensityMessage);
 800bbb2:	2213      	movs	r2, #19
 800bbb4:	4905      	ldr	r1, [pc, #20]	; (800bbcc <toggleCommand+0x70>)
 800bbb6:	0028      	movs	r0, r5
 800bbb8:	f006 fa6d 	bl	8012096 <memcpy>
 800bbbc:	e7f6      	b.n	800bbac <toggleCommand+0x50>
 800bbbe:	46c0      	nop			; (mov r8, r8)
 800bbc0:	20001054 	.word	0x20001054
 800bbc4:	08018fe8 	.word	0x08018fe8
 800bbc8:	0801900c 	.word	0x0801900c
 800bbcc:	08019030 	.word	0x08019030

0800bbd0 <RGB_LED_setRGB>:
{
 800bbd0:	b510      	push	{r4, lr}
	if (intensity == 0) 	
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d007      	beq.n	800bbe6 <RGB_LED_setRGB+0x16>
		return H01R0_ERR_WrongIntensity;
 800bbd6:	2403      	movs	r4, #3
	else if (intensity > 100) 
 800bbd8:	2b64      	cmp	r3, #100	; 0x64
 800bbda:	d802      	bhi.n	800bbe2 <RGB_LED_setRGB+0x12>
		return startPWM(red, green, blue, intensity);
 800bbdc:	f7ff fed8 	bl	800b990 <startPWM>
 800bbe0:	0004      	movs	r4, r0
}
 800bbe2:	0020      	movs	r0, r4
 800bbe4:	bd10      	pop	{r4, pc}
		return RGB_LED_on(0);
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	f7ff ff32 	bl	800ba50 <RGB_LED_on>
 800bbec:	0004      	movs	r4, r0
 800bbee:	e7f8      	b.n	800bbe2 <RGB_LED_setRGB+0x12>

0800bbf0 <RGBsweepFine>:
{
 800bbf0:	b570      	push	{r4, r5, r6, lr}
	temp = rgbPeriod/6;
 800bbf2:	4b41      	ldr	r3, [pc, #260]	; (800bcf8 <RGBsweepFine+0x108>)
 800bbf4:	6818      	ldr	r0, [r3, #0]
 800bbf6:	2106      	movs	r1, #6
 800bbf8:	f7f4 faa0 	bl	800013c <__udivsi3>
 800bbfc:	4b3f      	ldr	r3, [pc, #252]	; (800bcfc <RGBsweepFine+0x10c>)
 800bbfe:	6018      	str	r0, [r3, #0]
	if (rgbCount > 0 || rgbCount == -1) 
 800bc00:	4b3f      	ldr	r3, [pc, #252]	; (800bd00 <RGBsweepFine+0x110>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	5e9b      	ldrsh	r3, [r3, r2]
 800bc06:	2400      	movs	r4, #0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	dc00      	bgt.n	800bc0e <RGBsweepFine+0x1e>
 800bc0c:	e06e      	b.n	800bcec <RGBsweepFine+0xfc>
			osDelay(ceil(temp/255));
 800bc0e:	4d3b      	ldr	r5, [pc, #236]	; (800bcfc <RGBsweepFine+0x10c>)
			RGB_LED_setRGB(255, i, 0, 100);	
 800bc10:	2364      	movs	r3, #100	; 0x64
 800bc12:	2200      	movs	r2, #0
 800bc14:	0021      	movs	r1, r4
 800bc16:	20ff      	movs	r0, #255	; 0xff
 800bc18:	f7ff ffda 	bl	800bbd0 <RGB_LED_setRGB>
			osDelay(ceil(temp/255));
 800bc1c:	21ff      	movs	r1, #255	; 0xff
 800bc1e:	6828      	ldr	r0, [r5, #0]
 800bc20:	f7f4 fa8c 	bl	800013c <__udivsi3>
 800bc24:	f002 fb95 	bl	800e352 <osDelay>
		for(uint8_t i=0 ; i<255 ; i++)
 800bc28:	3401      	adds	r4, #1
 800bc2a:	b2e4      	uxtb	r4, r4
 800bc2c:	2cff      	cmp	r4, #255	; 0xff
 800bc2e:	d1ef      	bne.n	800bc10 <RGBsweepFine+0x20>
			osDelay(ceil(temp/255));
 800bc30:	4d32      	ldr	r5, [pc, #200]	; (800bcfc <RGBsweepFine+0x10c>)
			RGB_LED_setRGB(i, 255, 0, 100);
 800bc32:	2364      	movs	r3, #100	; 0x64
 800bc34:	2200      	movs	r2, #0
 800bc36:	21ff      	movs	r1, #255	; 0xff
 800bc38:	0020      	movs	r0, r4
 800bc3a:	f7ff ffc9 	bl	800bbd0 <RGB_LED_setRGB>
			osDelay(ceil(temp/255));
 800bc3e:	21ff      	movs	r1, #255	; 0xff
 800bc40:	6828      	ldr	r0, [r5, #0]
 800bc42:	f7f4 fa7b 	bl	800013c <__udivsi3>
 800bc46:	f002 fb84 	bl	800e352 <osDelay>
		for(uint8_t i=255 ; i>0 ; i--)
 800bc4a:	3c01      	subs	r4, #1
 800bc4c:	b2e4      	uxtb	r4, r4
 800bc4e:	2c00      	cmp	r4, #0
 800bc50:	d1ef      	bne.n	800bc32 <RGBsweepFine+0x42>
			osDelay(ceil(temp/255));
 800bc52:	4d2a      	ldr	r5, [pc, #168]	; (800bcfc <RGBsweepFine+0x10c>)
			RGB_LED_setRGB(0, 255, i, 100);
 800bc54:	2364      	movs	r3, #100	; 0x64
 800bc56:	0022      	movs	r2, r4
 800bc58:	21ff      	movs	r1, #255	; 0xff
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	f7ff ffb8 	bl	800bbd0 <RGB_LED_setRGB>
			osDelay(ceil(temp/255));
 800bc60:	21ff      	movs	r1, #255	; 0xff
 800bc62:	6828      	ldr	r0, [r5, #0]
 800bc64:	f7f4 fa6a 	bl	800013c <__udivsi3>
 800bc68:	f002 fb73 	bl	800e352 <osDelay>
		for(uint8_t i=0 ; i<255 ; i++)
 800bc6c:	3401      	adds	r4, #1
 800bc6e:	b2e4      	uxtb	r4, r4
 800bc70:	2cff      	cmp	r4, #255	; 0xff
 800bc72:	d1ef      	bne.n	800bc54 <RGBsweepFine+0x64>
			osDelay(ceil(temp/255));
 800bc74:	4d21      	ldr	r5, [pc, #132]	; (800bcfc <RGBsweepFine+0x10c>)
			RGB_LED_setRGB(0, i, 255, 100);
 800bc76:	2364      	movs	r3, #100	; 0x64
 800bc78:	22ff      	movs	r2, #255	; 0xff
 800bc7a:	0021      	movs	r1, r4
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	f7ff ffa7 	bl	800bbd0 <RGB_LED_setRGB>
			osDelay(ceil(temp/255));
 800bc82:	21ff      	movs	r1, #255	; 0xff
 800bc84:	6828      	ldr	r0, [r5, #0]
 800bc86:	f7f4 fa59 	bl	800013c <__udivsi3>
 800bc8a:	f002 fb62 	bl	800e352 <osDelay>
		for(uint8_t i=255 ; i>0 ; i--)
 800bc8e:	3c01      	subs	r4, #1
 800bc90:	b2e4      	uxtb	r4, r4
 800bc92:	2c00      	cmp	r4, #0
 800bc94:	d1ef      	bne.n	800bc76 <RGBsweepFine+0x86>
			osDelay(ceil(temp/255));
 800bc96:	4d19      	ldr	r5, [pc, #100]	; (800bcfc <RGBsweepFine+0x10c>)
			RGB_LED_setRGB(i, 0, 255, 100);
 800bc98:	2364      	movs	r3, #100	; 0x64
 800bc9a:	22ff      	movs	r2, #255	; 0xff
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	0020      	movs	r0, r4
 800bca0:	f7ff ff96 	bl	800bbd0 <RGB_LED_setRGB>
			osDelay(ceil(temp/255));
 800bca4:	21ff      	movs	r1, #255	; 0xff
 800bca6:	6828      	ldr	r0, [r5, #0]
 800bca8:	f7f4 fa48 	bl	800013c <__udivsi3>
 800bcac:	f002 fb51 	bl	800e352 <osDelay>
		for(uint8_t i=0 ; i<255 ; i++)
 800bcb0:	3401      	adds	r4, #1
 800bcb2:	b2e4      	uxtb	r4, r4
 800bcb4:	2cff      	cmp	r4, #255	; 0xff
 800bcb6:	d1ef      	bne.n	800bc98 <RGBsweepFine+0xa8>
			osDelay(ceil(temp/255));
 800bcb8:	4d10      	ldr	r5, [pc, #64]	; (800bcfc <RGBsweepFine+0x10c>)
			RGB_LED_setRGB(255, 0, i, 100);
 800bcba:	2364      	movs	r3, #100	; 0x64
 800bcbc:	0022      	movs	r2, r4
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	20ff      	movs	r0, #255	; 0xff
 800bcc2:	f7ff ff85 	bl	800bbd0 <RGB_LED_setRGB>
			osDelay(ceil(temp/255));
 800bcc6:	21ff      	movs	r1, #255	; 0xff
 800bcc8:	6828      	ldr	r0, [r5, #0]
 800bcca:	f7f4 fa37 	bl	800013c <__udivsi3>
 800bcce:	f002 fb40 	bl	800e352 <osDelay>
		for(uint8_t i=255 ; i>0 ; i--)
 800bcd2:	3c01      	subs	r4, #1
 800bcd4:	b2e4      	uxtb	r4, r4
 800bcd6:	2c00      	cmp	r4, #0
 800bcd8:	d1ef      	bne.n	800bcba <RGBsweepFine+0xca>
		if (rgbCount > 0)
 800bcda:	4b09      	ldr	r3, [pc, #36]	; (800bd00 <RGBsweepFine+0x110>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	5e9b      	ldrsh	r3, [r3, r2]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	dd02      	ble.n	800bcea <RGBsweepFine+0xfa>
			rgbCount--;
 800bce4:	3b01      	subs	r3, #1
 800bce6:	4a06      	ldr	r2, [pc, #24]	; (800bd00 <RGBsweepFine+0x110>)
 800bce8:	8013      	strh	r3, [r2, #0]
}
 800bcea:	bd70      	pop	{r4, r5, r6, pc}
	if (rgbCount > 0 || rgbCount == -1) 
 800bcec:	3301      	adds	r3, #1
 800bcee:	d100      	bne.n	800bcf2 <RGBsweepFine+0x102>
 800bcf0:	e78d      	b.n	800bc0e <RGBsweepFine+0x1e>
		RGB_LED_off();
 800bcf2:	f7ff fefb 	bl	800baec <RGB_LED_off>
}
 800bcf6:	e7f8      	b.n	800bcea <RGBsweepFine+0xfa>
 800bcf8:	2000107c 	.word	0x2000107c
 800bcfc:	20001088 	.word	0x20001088
 800bd00:	20001072 	.word	0x20001072

0800bd04 <RGBCommand>:
{
 800bd04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd06:	b089      	sub	sp, #36	; 0x24
 800bd08:	0004      	movs	r4, r0
 800bd0a:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	9307      	str	r3, [sp, #28]
 800bd10:	9306      	str	r3, [sp, #24]
	portBASE_TYPE xParameterStringLength3 = 0, xParameterStringLength4 = 0;
 800bd12:	9305      	str	r3, [sp, #20]
 800bd14:	9304      	str	r3, [sp, #16]
	configASSERT( pcWriteBuffer );
 800bd16:	2800      	cmp	r0, #0
 800bd18:	d101      	bne.n	800bd1e <RGBCommand+0x1a>
 800bd1a:	b672      	cpsid	i
 800bd1c:	e7fe      	b.n	800bd1c <RGBCommand+0x18>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800bd1e:	aa07      	add	r2, sp, #28
 800bd20:	2101      	movs	r1, #1
 800bd22:	0038      	movs	r0, r7
 800bd24:	f002 fc2e 	bl	800e584 <FreeRTOS_CLIGetParameter>
	red = ( uint8_t ) atol( ( char * ) pcParameterString1 );
 800bd28:	f006 f943 	bl	8011fb2 <atol>
 800bd2c:	0005      	movs	r5, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800bd2e:	aa06      	add	r2, sp, #24
 800bd30:	2102      	movs	r1, #2
 800bd32:	0038      	movs	r0, r7
 800bd34:	f002 fc26 	bl	800e584 <FreeRTOS_CLIGetParameter>
	green = ( uint8_t ) atol( ( char * ) pcParameterString2 );
 800bd38:	f006 f93b 	bl	8011fb2 <atol>
 800bd3c:	0006      	movs	r6, r0
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800bd3e:	aa05      	add	r2, sp, #20
 800bd40:	2103      	movs	r1, #3
 800bd42:	0038      	movs	r0, r7
 800bd44:	f002 fc1e 	bl	800e584 <FreeRTOS_CLIGetParameter>
	blue = ( uint8_t ) atol( ( char * ) pcParameterString3 );
 800bd48:	f006 f933 	bl	8011fb2 <atol>
 800bd4c:	9003      	str	r0, [sp, #12]
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800bd4e:	aa04      	add	r2, sp, #16
 800bd50:	2104      	movs	r1, #4
 800bd52:	0038      	movs	r0, r7
 800bd54:	f002 fc16 	bl	800e584 <FreeRTOS_CLIGetParameter>
	intensity = ( uint8_t ) atol( ( char * ) pcParameterString4 );
 800bd58:	f006 f92b 	bl	8011fb2 <atol>
 800bd5c:	0007      	movs	r7, r0
	result = RGB_LED_setRGB(red, green, blue, intensity);
 800bd5e:	b2c3      	uxtb	r3, r0
 800bd60:	466a      	mov	r2, sp
 800bd62:	7b12      	ldrb	r2, [r2, #12]
 800bd64:	b2f1      	uxtb	r1, r6
 800bd66:	b2e8      	uxtb	r0, r5
 800bd68:	f7ff ff32 	bl	800bbd0 <RGB_LED_setRGB>
	if (result == H01R0_OK) 
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d006      	beq.n	800bd7e <RGBCommand+0x7a>
	else if (result == H01R0_ERR_WrongColor)
 800bd70:	2802      	cmp	r0, #2
 800bd72:	d013      	beq.n	800bd9c <RGBCommand+0x98>
	else if (result == H01R0_ERR_WrongIntensity)
 800bd74:	2803      	cmp	r0, #3
 800bd76:	d017      	beq.n	800bda8 <RGBCommand+0xa4>
}
 800bd78:	2000      	movs	r0, #0
 800bd7a:	b009      	add	sp, #36	; 0x24
 800bd7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOKMessage, red, green, blue, intensity);
 800bd7e:	21ff      	movs	r1, #255	; 0xff
 800bd80:	0033      	movs	r3, r6
 800bd82:	400b      	ands	r3, r1
 800bd84:	002a      	movs	r2, r5
 800bd86:	400a      	ands	r2, r1
 800bd88:	400f      	ands	r7, r1
 800bd8a:	9701      	str	r7, [sp, #4]
 800bd8c:	9803      	ldr	r0, [sp, #12]
 800bd8e:	4008      	ands	r0, r1
 800bd90:	9000      	str	r0, [sp, #0]
 800bd92:	4908      	ldr	r1, [pc, #32]	; (800bdb4 <RGBCommand+0xb0>)
 800bd94:	0020      	movs	r0, r4
 800bd96:	f006 fa85 	bl	80122a4 <siprintf>
 800bd9a:	e7ed      	b.n	800bd78 <RGBCommand+0x74>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcWrongColorMessage);
 800bd9c:	2215      	movs	r2, #21
 800bd9e:	4906      	ldr	r1, [pc, #24]	; (800bdb8 <RGBCommand+0xb4>)
 800bda0:	0020      	movs	r0, r4
 800bda2:	f006 f978 	bl	8012096 <memcpy>
 800bda6:	e7e7      	b.n	800bd78 <RGBCommand+0x74>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcWrongIntensityMessage);
 800bda8:	2213      	movs	r2, #19
 800bdaa:	4904      	ldr	r1, [pc, #16]	; (800bdbc <RGBCommand+0xb8>)
 800bdac:	0020      	movs	r0, r4
 800bdae:	f006 f972 	bl	8012096 <memcpy>
 800bdb2:	e7e1      	b.n	800bd78 <RGBCommand+0x74>
 800bdb4:	08018db4 	.word	0x08018db4
 800bdb8:	08018de0 	.word	0x08018de0
 800bdbc:	08019030 	.word	0x08019030

0800bdc0 <RGB_LED_setColor>:
{
 800bdc0:	b510      	push	{r4, lr}
	if (!intensity) 
 800bdc2:	2900      	cmp	r1, #0
 800bdc4:	d007      	beq.n	800bdd6 <RGB_LED_setColor+0x16>
	else if (intensity > 100) 
 800bdc6:	2964      	cmp	r1, #100	; 0x64
 800bdc8:	d83a      	bhi.n	800be40 <RGB_LED_setColor+0x80>
		switch (color)
 800bdca:	2808      	cmp	r0, #8
 800bdcc:	d83a      	bhi.n	800be44 <RGB_LED_setColor+0x84>
 800bdce:	0080      	lsls	r0, r0, #2
 800bdd0:	4b1d      	ldr	r3, [pc, #116]	; (800be48 <RGB_LED_setColor+0x88>)
 800bdd2:	581b      	ldr	r3, [r3, r0]
 800bdd4:	469f      	mov	pc, r3
		return RGB_LED_on(0);
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	f7ff fe3a 	bl	800ba50 <RGB_LED_on>
}
 800bddc:	bd10      	pop	{r4, pc}
			case BLACK 		: result = RGB_LED_off();
 800bdde:	f7ff fe85 	bl	800baec <RGB_LED_off>
				break;
 800bde2:	e7fb      	b.n	800bddc <RGB_LED_setColor+0x1c>
			case WHITE 		: result = RGB_LED_on(intensity);
 800bde4:	0008      	movs	r0, r1
 800bde6:	f7ff fe33 	bl	800ba50 <RGB_LED_on>
				break;
 800bdea:	e7f7      	b.n	800bddc <RGB_LED_setColor+0x1c>
			case RED 			: result = RGB_LED_setRGB(255,0,0,intensity);
 800bdec:	000b      	movs	r3, r1
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	20ff      	movs	r0, #255	; 0xff
 800bdf4:	f7ff feec 	bl	800bbd0 <RGB_LED_setRGB>
				break;
 800bdf8:	e7f0      	b.n	800bddc <RGB_LED_setColor+0x1c>
			case BLUE 		: result = RGB_LED_setRGB(0,0,255,intensity);
 800bdfa:	000b      	movs	r3, r1
 800bdfc:	22ff      	movs	r2, #255	; 0xff
 800bdfe:	2100      	movs	r1, #0
 800be00:	2000      	movs	r0, #0
 800be02:	f7ff fee5 	bl	800bbd0 <RGB_LED_setRGB>
				break;
 800be06:	e7e9      	b.n	800bddc <RGB_LED_setColor+0x1c>
			case YELLOW 	: result = RGB_LED_setRGB(255,255,0,intensity);
 800be08:	000b      	movs	r3, r1
 800be0a:	2200      	movs	r2, #0
 800be0c:	21ff      	movs	r1, #255	; 0xff
 800be0e:	20ff      	movs	r0, #255	; 0xff
 800be10:	f7ff fede 	bl	800bbd0 <RGB_LED_setRGB>
				break;
 800be14:	e7e2      	b.n	800bddc <RGB_LED_setColor+0x1c>
			case CYAN 		: result = RGB_LED_setRGB(0,255,255,intensity);
 800be16:	000b      	movs	r3, r1
 800be18:	22ff      	movs	r2, #255	; 0xff
 800be1a:	21ff      	movs	r1, #255	; 0xff
 800be1c:	2000      	movs	r0, #0
 800be1e:	f7ff fed7 	bl	800bbd0 <RGB_LED_setRGB>
				break;
 800be22:	e7db      	b.n	800bddc <RGB_LED_setColor+0x1c>
			case MAGENTA 	: result = RGB_LED_setRGB(255,0,255,intensity);
 800be24:	000b      	movs	r3, r1
 800be26:	22ff      	movs	r2, #255	; 0xff
 800be28:	2100      	movs	r1, #0
 800be2a:	20ff      	movs	r0, #255	; 0xff
 800be2c:	f7ff fed0 	bl	800bbd0 <RGB_LED_setRGB>
				break;
 800be30:	e7d4      	b.n	800bddc <RGB_LED_setColor+0x1c>
			case GREEN 		: result = RGB_LED_setRGB(0,255,0,intensity);
 800be32:	000b      	movs	r3, r1
 800be34:	2200      	movs	r2, #0
 800be36:	21ff      	movs	r1, #255	; 0xff
 800be38:	2000      	movs	r0, #0
 800be3a:	f7ff fec9 	bl	800bbd0 <RGB_LED_setRGB>
				break;
 800be3e:	e7cd      	b.n	800bddc <RGB_LED_setColor+0x1c>
		return H01R0_ERR_WrongIntensity;
 800be40:	2003      	movs	r0, #3
 800be42:	e7cb      	b.n	800bddc <RGB_LED_setColor+0x1c>
			default				:	result = H01R0_ERR_WrongColor;
 800be44:	2002      	movs	r0, #2
 800be46:	e7c9      	b.n	800bddc <RGB_LED_setColor+0x1c>
 800be48:	08018d34 	.word	0x08018d34

0800be4c <RGBpulse>:
{
 800be4c:	b570      	push	{r4, r5, r6, lr}
	if (rgbCount > 0 || rgbCount == -1) 
 800be4e:	4b1b      	ldr	r3, [pc, #108]	; (800bebc <RGBpulse+0x70>)
 800be50:	2200      	movs	r2, #0
 800be52:	5e9b      	ldrsh	r3, [r3, r2]
 800be54:	2b00      	cmp	r3, #0
 800be56:	dd1b      	ble.n	800be90 <RGBpulse+0x44>
		if (mode == RGB_PULSE_RGB)
 800be58:	2801      	cmp	r0, #1
 800be5a:	d01f      	beq.n	800be9c <RGBpulse+0x50>
		else if (mode == RGB_PULSE_COLOR)
 800be5c:	2802      	cmp	r0, #2
 800be5e:	d027      	beq.n	800beb0 <RGBpulse+0x64>
		osDelay(rgbDC);
 800be60:	4c17      	ldr	r4, [pc, #92]	; (800bec0 <RGBpulse+0x74>)
 800be62:	6820      	ldr	r0, [r4, #0]
 800be64:	f002 fa75 	bl	800e352 <osDelay>
		temp = rgbLedMode;			/* Backup rgbLedMode so that it's not reset */
 800be68:	4d16      	ldr	r5, [pc, #88]	; (800bec4 <RGBpulse+0x78>)
 800be6a:	782e      	ldrb	r6, [r5, #0]
		RGB_LED_off();
 800be6c:	f7ff fe3e 	bl	800baec <RGB_LED_off>
		rgbLedMode = temp;
 800be70:	702e      	strb	r6, [r5, #0]
		osDelay(rgbPeriod-rgbDC);
 800be72:	4b15      	ldr	r3, [pc, #84]	; (800bec8 <RGBpulse+0x7c>)
 800be74:	6818      	ldr	r0, [r3, #0]
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	1ac0      	subs	r0, r0, r3
 800be7a:	f002 fa6a 	bl	800e352 <osDelay>
		if (rgbCount > 0)
 800be7e:	4b0f      	ldr	r3, [pc, #60]	; (800bebc <RGBpulse+0x70>)
 800be80:	2200      	movs	r2, #0
 800be82:	5e9b      	ldrsh	r3, [r3, r2]
 800be84:	2b00      	cmp	r3, #0
 800be86:	dd02      	ble.n	800be8e <RGBpulse+0x42>
			rgbCount--;
 800be88:	3b01      	subs	r3, #1
 800be8a:	4a0c      	ldr	r2, [pc, #48]	; (800bebc <RGBpulse+0x70>)
 800be8c:	8013      	strh	r3, [r2, #0]
}
 800be8e:	bd70      	pop	{r4, r5, r6, pc}
	if (rgbCount > 0 || rgbCount == -1) 
 800be90:	3301      	adds	r3, #1
 800be92:	d0e1      	beq.n	800be58 <RGBpulse+0xc>
		rgbLedMode = 0;
 800be94:	4b0b      	ldr	r3, [pc, #44]	; (800bec4 <RGBpulse+0x78>)
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
}
 800be9a:	e7f8      	b.n	800be8e <RGBpulse+0x42>
			RGB_LED_setRGB(rgbRed, rgbGreen, rgbBlue, 100);
 800be9c:	4b0b      	ldr	r3, [pc, #44]	; (800becc <RGBpulse+0x80>)
 800be9e:	781a      	ldrb	r2, [r3, #0]
 800bea0:	4b0b      	ldr	r3, [pc, #44]	; (800bed0 <RGBpulse+0x84>)
 800bea2:	7819      	ldrb	r1, [r3, #0]
 800bea4:	4b0b      	ldr	r3, [pc, #44]	; (800bed4 <RGBpulse+0x88>)
 800bea6:	7818      	ldrb	r0, [r3, #0]
 800bea8:	2364      	movs	r3, #100	; 0x64
 800beaa:	f7ff fe91 	bl	800bbd0 <RGB_LED_setRGB>
 800beae:	e7d7      	b.n	800be60 <RGBpulse+0x14>
			RGB_LED_setColor(rgbColor, 100);	
 800beb0:	4b09      	ldr	r3, [pc, #36]	; (800bed8 <RGBpulse+0x8c>)
 800beb2:	7818      	ldrb	r0, [r3, #0]
 800beb4:	2164      	movs	r1, #100	; 0x64
 800beb6:	f7ff ff83 	bl	800bdc0 <RGB_LED_setColor>
 800beba:	e7d1      	b.n	800be60 <RGBpulse+0x14>
 800bebc:	20001072 	.word	0x20001072
 800bec0:	20001074 	.word	0x20001074
 800bec4:	20001079 	.word	0x20001079
 800bec8:	2000107c 	.word	0x2000107c
 800becc:	20001070 	.word	0x20001070
 800bed0:	20001078 	.word	0x20001078
 800bed4:	20001080 	.word	0x20001080
 800bed8:	20001071 	.word	0x20001071

0800bedc <RGBsweepBasic>:
{
 800bedc:	b510      	push	{r4, lr}
	temp = rgbPeriod/6;
 800bede:	4b22      	ldr	r3, [pc, #136]	; (800bf68 <RGBsweepBasic+0x8c>)
 800bee0:	6818      	ldr	r0, [r3, #0]
 800bee2:	2106      	movs	r1, #6
 800bee4:	f7f4 f92a 	bl	800013c <__udivsi3>
 800bee8:	4b20      	ldr	r3, [pc, #128]	; (800bf6c <RGBsweepBasic+0x90>)
 800beea:	6018      	str	r0, [r3, #0]
	if (rgbCount > 0 || rgbCount == -1) 
 800beec:	4b20      	ldr	r3, [pc, #128]	; (800bf70 <RGBsweepBasic+0x94>)
 800beee:	2200      	movs	r2, #0
 800bef0:	5e9b      	ldrsh	r3, [r3, r2]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	dc01      	bgt.n	800befa <RGBsweepBasic+0x1e>
 800bef6:	3301      	adds	r3, #1
 800bef8:	d133      	bne.n	800bf62 <RGBsweepBasic+0x86>
		RGB_LED_setColor(RED, 100);
 800befa:	2164      	movs	r1, #100	; 0x64
 800befc:	2003      	movs	r0, #3
 800befe:	f7ff ff5f 	bl	800bdc0 <RGB_LED_setColor>
		osDelay(temp);
 800bf02:	4c1a      	ldr	r4, [pc, #104]	; (800bf6c <RGBsweepBasic+0x90>)
 800bf04:	6820      	ldr	r0, [r4, #0]
 800bf06:	f002 fa24 	bl	800e352 <osDelay>
		RGB_LED_setColor(YELLOW, 100);
 800bf0a:	2164      	movs	r1, #100	; 0x64
 800bf0c:	2005      	movs	r0, #5
 800bf0e:	f7ff ff57 	bl	800bdc0 <RGB_LED_setColor>
		osDelay(temp);
 800bf12:	6820      	ldr	r0, [r4, #0]
 800bf14:	f002 fa1d 	bl	800e352 <osDelay>
		RGB_LED_setColor(GREEN, 100);
 800bf18:	2164      	movs	r1, #100	; 0x64
 800bf1a:	2008      	movs	r0, #8
 800bf1c:	f7ff ff50 	bl	800bdc0 <RGB_LED_setColor>
		osDelay(temp);
 800bf20:	6820      	ldr	r0, [r4, #0]
 800bf22:	f002 fa16 	bl	800e352 <osDelay>
		RGB_LED_setColor(CYAN, 100);
 800bf26:	2164      	movs	r1, #100	; 0x64
 800bf28:	2006      	movs	r0, #6
 800bf2a:	f7ff ff49 	bl	800bdc0 <RGB_LED_setColor>
		osDelay(temp);
 800bf2e:	6820      	ldr	r0, [r4, #0]
 800bf30:	f002 fa0f 	bl	800e352 <osDelay>
		RGB_LED_setColor(BLUE, 100);
 800bf34:	2164      	movs	r1, #100	; 0x64
 800bf36:	2004      	movs	r0, #4
 800bf38:	f7ff ff42 	bl	800bdc0 <RGB_LED_setColor>
		osDelay(temp);
 800bf3c:	6820      	ldr	r0, [r4, #0]
 800bf3e:	f002 fa08 	bl	800e352 <osDelay>
		RGB_LED_setColor(MAGENTA, 100);
 800bf42:	2164      	movs	r1, #100	; 0x64
 800bf44:	2007      	movs	r0, #7
 800bf46:	f7ff ff3b 	bl	800bdc0 <RGB_LED_setColor>
		osDelay(temp);
 800bf4a:	6820      	ldr	r0, [r4, #0]
 800bf4c:	f002 fa01 	bl	800e352 <osDelay>
		if (rgbCount > 0)
 800bf50:	4b07      	ldr	r3, [pc, #28]	; (800bf70 <RGBsweepBasic+0x94>)
 800bf52:	2200      	movs	r2, #0
 800bf54:	5e9b      	ldrsh	r3, [r3, r2]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	dd02      	ble.n	800bf60 <RGBsweepBasic+0x84>
			rgbCount--;
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	4a04      	ldr	r2, [pc, #16]	; (800bf70 <RGBsweepBasic+0x94>)
 800bf5e:	8013      	strh	r3, [r2, #0]
}
 800bf60:	bd10      	pop	{r4, pc}
		RGB_LED_off();
 800bf62:	f7ff fdc3 	bl	800baec <RGB_LED_off>
}
 800bf66:	e7fb      	b.n	800bf60 <RGBsweepBasic+0x84>
 800bf68:	2000107c 	.word	0x2000107c
 800bf6c:	20001084 	.word	0x20001084
 800bf70:	20001072 	.word	0x20001072

0800bf74 <RGBdim>:
{
 800bf74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf76:	46c6      	mov	lr, r8
 800bf78:	b500      	push	{lr}
	if (rgbCount > 0 || rgbCount == -1) 
 800bf7a:	4b91      	ldr	r3, [pc, #580]	; (800c1c0 <RGBdim+0x24c>)
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	5e9b      	ldrsh	r3, [r3, r2]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	dd46      	ble.n	800c012 <RGBdim+0x9e>
		if (mode == RGB_DIM_UP) {
 800bf84:	2805      	cmp	r0, #5
 800bf86:	d04a      	beq.n	800c01e <RGBdim+0xaa>
		} else if (mode == RGB_DIM_UP_WAIT) {
 800bf88:	2806      	cmp	r0, #6
 800bf8a:	d064      	beq.n	800c056 <RGBdim+0xe2>
		} else if (mode == RGB_DIM_DOWN) {
 800bf8c:	2807      	cmp	r0, #7
 800bf8e:	d100      	bne.n	800bf92 <RGBdim+0x1e>
 800bf90:	e07a      	b.n	800c088 <RGBdim+0x114>
		} else if (mode == RGB_DIM_DOWN_WAIT) {
 800bf92:	2808      	cmp	r0, #8
 800bf94:	d100      	bne.n	800bf98 <RGBdim+0x24>
 800bf96:	e089      	b.n	800c0ac <RGBdim+0x138>
		} else if (mode == RGB_DIM_UP_DOWN) {
 800bf98:	2809      	cmp	r0, #9
 800bf9a:	d100      	bne.n	800bf9e <RGBdim+0x2a>
 800bf9c:	e09f      	b.n	800c0de <RGBdim+0x16a>
		} else if (mode == RGB_DIM_DOWN_UP) {
 800bf9e:	280a      	cmp	r0, #10
 800bfa0:	d100      	bne.n	800bfa4 <RGBdim+0x30>
 800bfa2:	e0be      	b.n	800c122 <RGBdim+0x1ae>
		} else if (mode == RGB_DIM_UP_DOWN_WAIT) {
 800bfa4:	280b      	cmp	r0, #11
 800bfa6:	d100      	bne.n	800bfaa <RGBdim+0x36>
 800bfa8:	e0dd      	b.n	800c166 <RGBdim+0x1f2>
		} else if (mode == RGB_DIM_DOWN_UP_WAIT) {
 800bfaa:	280c      	cmp	r0, #12
 800bfac:	d148      	bne.n	800c040 <RGBdim+0xcc>
		temp = rgbLedMode;			/* Store mode so that it's not reset */
 800bfae:	4b85      	ldr	r3, [pc, #532]	; (800c1c4 <RGBdim+0x250>)
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	4698      	mov	r8, r3
			for(uint8_t i=101 ; i>0 ; i--)
 800bfb4:	2465      	movs	r4, #101	; 0x65
				RGB_LED_setColor(rgbColor, i-1);	
 800bfb6:	4d84      	ldr	r5, [pc, #528]	; (800c1c8 <RGBdim+0x254>)
				osDelay((rgbPeriod-rgbDC)/200);
 800bfb8:	4f84      	ldr	r7, [pc, #528]	; (800c1cc <RGBdim+0x258>)
 800bfba:	4e85      	ldr	r6, [pc, #532]	; (800c1d0 <RGBdim+0x25c>)
				RGB_LED_setColor(rgbColor, i-1);	
 800bfbc:	3c01      	subs	r4, #1
 800bfbe:	b2e4      	uxtb	r4, r4
 800bfc0:	7828      	ldrb	r0, [r5, #0]
 800bfc2:	0021      	movs	r1, r4
 800bfc4:	f7ff fefc 	bl	800bdc0 <RGB_LED_setColor>
				osDelay((rgbPeriod-rgbDC)/200);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	6832      	ldr	r2, [r6, #0]
 800bfcc:	1a98      	subs	r0, r3, r2
 800bfce:	21c8      	movs	r1, #200	; 0xc8
 800bfd0:	f7f4 f8b4 	bl	800013c <__udivsi3>
 800bfd4:	f002 f9bd 	bl	800e352 <osDelay>
			for(uint8_t i=101 ; i>0 ; i--)
 800bfd8:	2c00      	cmp	r4, #0
 800bfda:	d1ef      	bne.n	800bfbc <RGBdim+0x48>
				RGB_LED_setColor(rgbColor, i);	
 800bfdc:	4d7a      	ldr	r5, [pc, #488]	; (800c1c8 <RGBdim+0x254>)
				osDelay((rgbPeriod-rgbDC)/200);
 800bfde:	4f7b      	ldr	r7, [pc, #492]	; (800c1cc <RGBdim+0x258>)
 800bfe0:	4e7b      	ldr	r6, [pc, #492]	; (800c1d0 <RGBdim+0x25c>)
				RGB_LED_setColor(rgbColor, i);	
 800bfe2:	7828      	ldrb	r0, [r5, #0]
 800bfe4:	0021      	movs	r1, r4
 800bfe6:	f7ff feeb 	bl	800bdc0 <RGB_LED_setColor>
				osDelay((rgbPeriod-rgbDC)/200);
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	6832      	ldr	r2, [r6, #0]
 800bfee:	1a98      	subs	r0, r3, r2
 800bff0:	21c8      	movs	r1, #200	; 0xc8
 800bff2:	f7f4 f8a3 	bl	800013c <__udivsi3>
 800bff6:	f002 f9ac 	bl	800e352 <osDelay>
			for(uint8_t i=0 ; i<=100 ; i++)
 800bffa:	3401      	adds	r4, #1
 800bffc:	b2e4      	uxtb	r4, r4
 800bffe:	2c65      	cmp	r4, #101	; 0x65
 800c000:	d1ef      	bne.n	800bfe2 <RGBdim+0x6e>
			osDelay(rgbDC);
 800c002:	4b73      	ldr	r3, [pc, #460]	; (800c1d0 <RGBdim+0x25c>)
 800c004:	6818      	ldr	r0, [r3, #0]
 800c006:	f002 f9a4 	bl	800e352 <osDelay>
			rgbLedMode = temp;
 800c00a:	4b6e      	ldr	r3, [pc, #440]	; (800c1c4 <RGBdim+0x250>)
 800c00c:	4642      	mov	r2, r8
 800c00e:	701a      	strb	r2, [r3, #0]
 800c010:	e016      	b.n	800c040 <RGBdim+0xcc>
	if (rgbCount > 0 || rgbCount == -1) 
 800c012:	3301      	adds	r3, #1
 800c014:	d0b6      	beq.n	800bf84 <RGBdim+0x10>
		rgbLedMode = 0;
 800c016:	4b6b      	ldr	r3, [pc, #428]	; (800c1c4 <RGBdim+0x250>)
 800c018:	2200      	movs	r2, #0
 800c01a:	701a      	strb	r2, [r3, #0]
}
 800c01c:	e018      	b.n	800c050 <RGBdim+0xdc>
			for(uint8_t i=0 ; i<=100 ; i++)
 800c01e:	2400      	movs	r4, #0
				RGB_LED_setColor(rgbColor, i);	
 800c020:	4e69      	ldr	r6, [pc, #420]	; (800c1c8 <RGBdim+0x254>)
				osDelay(rgbPeriod/100);
 800c022:	4d6a      	ldr	r5, [pc, #424]	; (800c1cc <RGBdim+0x258>)
				RGB_LED_setColor(rgbColor, i);	
 800c024:	7830      	ldrb	r0, [r6, #0]
 800c026:	0021      	movs	r1, r4
 800c028:	f7ff feca 	bl	800bdc0 <RGB_LED_setColor>
				osDelay(rgbPeriod/100);
 800c02c:	2164      	movs	r1, #100	; 0x64
 800c02e:	6828      	ldr	r0, [r5, #0]
 800c030:	f7f4 f884 	bl	800013c <__udivsi3>
 800c034:	f002 f98d 	bl	800e352 <osDelay>
			for(uint8_t i=0 ; i<=100 ; i++)
 800c038:	3401      	adds	r4, #1
 800c03a:	b2e4      	uxtb	r4, r4
 800c03c:	2c65      	cmp	r4, #101	; 0x65
 800c03e:	d1f1      	bne.n	800c024 <RGBdim+0xb0>
		if (rgbCount > 0)
 800c040:	4b5f      	ldr	r3, [pc, #380]	; (800c1c0 <RGBdim+0x24c>)
 800c042:	2200      	movs	r2, #0
 800c044:	5e9b      	ldrsh	r3, [r3, r2]
 800c046:	2b00      	cmp	r3, #0
 800c048:	dd02      	ble.n	800c050 <RGBdim+0xdc>
			rgbCount--;
 800c04a:	3b01      	subs	r3, #1
 800c04c:	4a5c      	ldr	r2, [pc, #368]	; (800c1c0 <RGBdim+0x24c>)
 800c04e:	8013      	strh	r3, [r2, #0]
}
 800c050:	bc04      	pop	{r2}
 800c052:	4690      	mov	r8, r2
 800c054:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for(uint8_t i=0 ; i<=100 ; i++)
 800c056:	2400      	movs	r4, #0
				RGB_LED_setColor(rgbColor, i);	
 800c058:	4f5b      	ldr	r7, [pc, #364]	; (800c1c8 <RGBdim+0x254>)
				osDelay((rgbPeriod-rgbDC)/100);
 800c05a:	4e5c      	ldr	r6, [pc, #368]	; (800c1cc <RGBdim+0x258>)
 800c05c:	4d5c      	ldr	r5, [pc, #368]	; (800c1d0 <RGBdim+0x25c>)
				RGB_LED_setColor(rgbColor, i);	
 800c05e:	7838      	ldrb	r0, [r7, #0]
 800c060:	0021      	movs	r1, r4
 800c062:	f7ff fead 	bl	800bdc0 <RGB_LED_setColor>
				osDelay((rgbPeriod-rgbDC)/100);
 800c066:	6833      	ldr	r3, [r6, #0]
 800c068:	682a      	ldr	r2, [r5, #0]
 800c06a:	1a98      	subs	r0, r3, r2
 800c06c:	2164      	movs	r1, #100	; 0x64
 800c06e:	f7f4 f865 	bl	800013c <__udivsi3>
 800c072:	f002 f96e 	bl	800e352 <osDelay>
			for(uint8_t i=0 ; i<=100 ; i++)
 800c076:	3401      	adds	r4, #1
 800c078:	b2e4      	uxtb	r4, r4
 800c07a:	2c65      	cmp	r4, #101	; 0x65
 800c07c:	d1ef      	bne.n	800c05e <RGBdim+0xea>
			osDelay(rgbDC);		
 800c07e:	4b54      	ldr	r3, [pc, #336]	; (800c1d0 <RGBdim+0x25c>)
 800c080:	6818      	ldr	r0, [r3, #0]
 800c082:	f002 f966 	bl	800e352 <osDelay>
 800c086:	e7db      	b.n	800c040 <RGBdim+0xcc>
			for(uint8_t i=101 ; i>0 ; i--)
 800c088:	2465      	movs	r4, #101	; 0x65
				RGB_LED_setColor(rgbColor, i-1);	
 800c08a:	4e4f      	ldr	r6, [pc, #316]	; (800c1c8 <RGBdim+0x254>)
				osDelay(rgbPeriod/100);
 800c08c:	4d4f      	ldr	r5, [pc, #316]	; (800c1cc <RGBdim+0x258>)
				RGB_LED_setColor(rgbColor, i-1);	
 800c08e:	3c01      	subs	r4, #1
 800c090:	b2e4      	uxtb	r4, r4
 800c092:	7830      	ldrb	r0, [r6, #0]
 800c094:	0021      	movs	r1, r4
 800c096:	f7ff fe93 	bl	800bdc0 <RGB_LED_setColor>
				osDelay(rgbPeriod/100);
 800c09a:	2164      	movs	r1, #100	; 0x64
 800c09c:	6828      	ldr	r0, [r5, #0]
 800c09e:	f7f4 f84d 	bl	800013c <__udivsi3>
 800c0a2:	f002 f956 	bl	800e352 <osDelay>
			for(uint8_t i=101 ; i>0 ; i--)
 800c0a6:	2c00      	cmp	r4, #0
 800c0a8:	d1f1      	bne.n	800c08e <RGBdim+0x11a>
 800c0aa:	e7c9      	b.n	800c040 <RGBdim+0xcc>
			for(uint8_t i=101 ; i>0 ; i--)
 800c0ac:	2465      	movs	r4, #101	; 0x65
				RGB_LED_setColor(rgbColor, i-1);	
 800c0ae:	4f46      	ldr	r7, [pc, #280]	; (800c1c8 <RGBdim+0x254>)
				osDelay((rgbPeriod-rgbDC)/100);
 800c0b0:	4e46      	ldr	r6, [pc, #280]	; (800c1cc <RGBdim+0x258>)
 800c0b2:	4d47      	ldr	r5, [pc, #284]	; (800c1d0 <RGBdim+0x25c>)
				RGB_LED_setColor(rgbColor, i-1);	
 800c0b4:	3c01      	subs	r4, #1
 800c0b6:	b2e4      	uxtb	r4, r4
 800c0b8:	7838      	ldrb	r0, [r7, #0]
 800c0ba:	0021      	movs	r1, r4
 800c0bc:	f7ff fe80 	bl	800bdc0 <RGB_LED_setColor>
				osDelay((rgbPeriod-rgbDC)/100);
 800c0c0:	6833      	ldr	r3, [r6, #0]
 800c0c2:	682a      	ldr	r2, [r5, #0]
 800c0c4:	1a98      	subs	r0, r3, r2
 800c0c6:	2164      	movs	r1, #100	; 0x64
 800c0c8:	f7f4 f838 	bl	800013c <__udivsi3>
 800c0cc:	f002 f941 	bl	800e352 <osDelay>
			for(uint8_t i=101 ; i>0 ; i--)
 800c0d0:	2c00      	cmp	r4, #0
 800c0d2:	d1ef      	bne.n	800c0b4 <RGBdim+0x140>
			osDelay(rgbDC);
 800c0d4:	4b3e      	ldr	r3, [pc, #248]	; (800c1d0 <RGBdim+0x25c>)
 800c0d6:	6818      	ldr	r0, [r3, #0]
 800c0d8:	f002 f93b 	bl	800e352 <osDelay>
 800c0dc:	e7b0      	b.n	800c040 <RGBdim+0xcc>
			for(uint8_t i=0 ; i<=100 ; i++)
 800c0de:	2400      	movs	r4, #0
				RGB_LED_setColor(rgbColor, i);	
 800c0e0:	4e39      	ldr	r6, [pc, #228]	; (800c1c8 <RGBdim+0x254>)
				osDelay(rgbPeriod/200);
 800c0e2:	4d3a      	ldr	r5, [pc, #232]	; (800c1cc <RGBdim+0x258>)
				RGB_LED_setColor(rgbColor, i);	
 800c0e4:	7830      	ldrb	r0, [r6, #0]
 800c0e6:	0021      	movs	r1, r4
 800c0e8:	f7ff fe6a 	bl	800bdc0 <RGB_LED_setColor>
				osDelay(rgbPeriod/200);
 800c0ec:	21c8      	movs	r1, #200	; 0xc8
 800c0ee:	6828      	ldr	r0, [r5, #0]
 800c0f0:	f7f4 f824 	bl	800013c <__udivsi3>
 800c0f4:	f002 f92d 	bl	800e352 <osDelay>
			for(uint8_t i=0 ; i<=100 ; i++)
 800c0f8:	3401      	adds	r4, #1
 800c0fa:	b2e4      	uxtb	r4, r4
 800c0fc:	2c65      	cmp	r4, #101	; 0x65
 800c0fe:	d1f1      	bne.n	800c0e4 <RGBdim+0x170>
				RGB_LED_setColor(rgbColor, i-1);	
 800c100:	4e31      	ldr	r6, [pc, #196]	; (800c1c8 <RGBdim+0x254>)
				osDelay(rgbPeriod/200);
 800c102:	4d32      	ldr	r5, [pc, #200]	; (800c1cc <RGBdim+0x258>)
				RGB_LED_setColor(rgbColor, i-1);	
 800c104:	3c01      	subs	r4, #1
 800c106:	b2e4      	uxtb	r4, r4
 800c108:	7830      	ldrb	r0, [r6, #0]
 800c10a:	0021      	movs	r1, r4
 800c10c:	f7ff fe58 	bl	800bdc0 <RGB_LED_setColor>
				osDelay(rgbPeriod/200);
 800c110:	21c8      	movs	r1, #200	; 0xc8
 800c112:	6828      	ldr	r0, [r5, #0]
 800c114:	f7f4 f812 	bl	800013c <__udivsi3>
 800c118:	f002 f91b 	bl	800e352 <osDelay>
			for(uint8_t i=101 ; i>0 ; i--)
 800c11c:	2c00      	cmp	r4, #0
 800c11e:	d1f1      	bne.n	800c104 <RGBdim+0x190>
 800c120:	e78e      	b.n	800c040 <RGBdim+0xcc>
			for(uint8_t i=101 ; i>0 ; i--)
 800c122:	2465      	movs	r4, #101	; 0x65
				RGB_LED_setColor(rgbColor, i-1);	
 800c124:	4e28      	ldr	r6, [pc, #160]	; (800c1c8 <RGBdim+0x254>)
				osDelay(rgbPeriod/200);
 800c126:	4d29      	ldr	r5, [pc, #164]	; (800c1cc <RGBdim+0x258>)
				RGB_LED_setColor(rgbColor, i-1);	
 800c128:	3c01      	subs	r4, #1
 800c12a:	b2e4      	uxtb	r4, r4
 800c12c:	7830      	ldrb	r0, [r6, #0]
 800c12e:	0021      	movs	r1, r4
 800c130:	f7ff fe46 	bl	800bdc0 <RGB_LED_setColor>
				osDelay(rgbPeriod/200);
 800c134:	21c8      	movs	r1, #200	; 0xc8
 800c136:	6828      	ldr	r0, [r5, #0]
 800c138:	f7f4 f800 	bl	800013c <__udivsi3>
 800c13c:	f002 f909 	bl	800e352 <osDelay>
			for(uint8_t i=101 ; i>0 ; i--)
 800c140:	2c00      	cmp	r4, #0
 800c142:	d1f1      	bne.n	800c128 <RGBdim+0x1b4>
				RGB_LED_setColor(rgbColor, i);	
 800c144:	4e20      	ldr	r6, [pc, #128]	; (800c1c8 <RGBdim+0x254>)
				osDelay(rgbPeriod/200);
 800c146:	4d21      	ldr	r5, [pc, #132]	; (800c1cc <RGBdim+0x258>)
				RGB_LED_setColor(rgbColor, i);	
 800c148:	7830      	ldrb	r0, [r6, #0]
 800c14a:	0021      	movs	r1, r4
 800c14c:	f7ff fe38 	bl	800bdc0 <RGB_LED_setColor>
				osDelay(rgbPeriod/200);
 800c150:	21c8      	movs	r1, #200	; 0xc8
 800c152:	6828      	ldr	r0, [r5, #0]
 800c154:	f7f3 fff2 	bl	800013c <__udivsi3>
 800c158:	f002 f8fb 	bl	800e352 <osDelay>
			for(uint8_t i=0 ; i<=100 ; i++)
 800c15c:	3401      	adds	r4, #1
 800c15e:	b2e4      	uxtb	r4, r4
 800c160:	2c65      	cmp	r4, #101	; 0x65
 800c162:	d1f1      	bne.n	800c148 <RGBdim+0x1d4>
 800c164:	e76c      	b.n	800c040 <RGBdim+0xcc>
			for(uint8_t i=0 ; i<=100 ; i++)
 800c166:	2400      	movs	r4, #0
				RGB_LED_setColor(rgbColor, i);	
 800c168:	4f17      	ldr	r7, [pc, #92]	; (800c1c8 <RGBdim+0x254>)
				osDelay((rgbPeriod-rgbDC)/200);
 800c16a:	4e18      	ldr	r6, [pc, #96]	; (800c1cc <RGBdim+0x258>)
 800c16c:	4d18      	ldr	r5, [pc, #96]	; (800c1d0 <RGBdim+0x25c>)
				RGB_LED_setColor(rgbColor, i);	
 800c16e:	7838      	ldrb	r0, [r7, #0]
 800c170:	0021      	movs	r1, r4
 800c172:	f7ff fe25 	bl	800bdc0 <RGB_LED_setColor>
				osDelay((rgbPeriod-rgbDC)/200);
 800c176:	6833      	ldr	r3, [r6, #0]
 800c178:	682a      	ldr	r2, [r5, #0]
 800c17a:	1a98      	subs	r0, r3, r2
 800c17c:	21c8      	movs	r1, #200	; 0xc8
 800c17e:	f7f3 ffdd 	bl	800013c <__udivsi3>
 800c182:	f002 f8e6 	bl	800e352 <osDelay>
			for(uint8_t i=0 ; i<=100 ; i++)
 800c186:	3401      	adds	r4, #1
 800c188:	b2e4      	uxtb	r4, r4
 800c18a:	2c65      	cmp	r4, #101	; 0x65
 800c18c:	d1ef      	bne.n	800c16e <RGBdim+0x1fa>
				RGB_LED_setColor(rgbColor, i-1);	
 800c18e:	4f0e      	ldr	r7, [pc, #56]	; (800c1c8 <RGBdim+0x254>)
				osDelay((rgbPeriod-rgbDC)/200);
 800c190:	4e0e      	ldr	r6, [pc, #56]	; (800c1cc <RGBdim+0x258>)
 800c192:	4d0f      	ldr	r5, [pc, #60]	; (800c1d0 <RGBdim+0x25c>)
				RGB_LED_setColor(rgbColor, i-1);	
 800c194:	3c01      	subs	r4, #1
 800c196:	b2e4      	uxtb	r4, r4
 800c198:	7838      	ldrb	r0, [r7, #0]
 800c19a:	0021      	movs	r1, r4
 800c19c:	f7ff fe10 	bl	800bdc0 <RGB_LED_setColor>
				osDelay((rgbPeriod-rgbDC)/200);
 800c1a0:	6833      	ldr	r3, [r6, #0]
 800c1a2:	682a      	ldr	r2, [r5, #0]
 800c1a4:	1a98      	subs	r0, r3, r2
 800c1a6:	21c8      	movs	r1, #200	; 0xc8
 800c1a8:	f7f3 ffc8 	bl	800013c <__udivsi3>
 800c1ac:	f002 f8d1 	bl	800e352 <osDelay>
			for(uint8_t i=101 ; i>0 ; i--)
 800c1b0:	2c00      	cmp	r4, #0
 800c1b2:	d1ef      	bne.n	800c194 <RGBdim+0x220>
			osDelay(rgbDC);
 800c1b4:	4b06      	ldr	r3, [pc, #24]	; (800c1d0 <RGBdim+0x25c>)
 800c1b6:	6818      	ldr	r0, [r3, #0]
 800c1b8:	f002 f8cb 	bl	800e352 <osDelay>
 800c1bc:	e740      	b.n	800c040 <RGBdim+0xcc>
 800c1be:	46c0      	nop			; (mov r8, r8)
 800c1c0:	20001072 	.word	0x20001072
 800c1c4:	20001079 	.word	0x20001079
 800c1c8:	20001071 	.word	0x20001071
 800c1cc:	2000107c 	.word	0x2000107c
 800c1d0:	20001074 	.word	0x20001074

0800c1d4 <RGBledTask>:
{
 800c1d4:	b570      	push	{r4, r5, r6, lr}
		switch (rgbLedMode)
 800c1d6:	4c1e      	ldr	r4, [pc, #120]	; (800c250 <RGBledTask+0x7c>)
 800c1d8:	4d1e      	ldr	r5, [pc, #120]	; (800c254 <RGBledTask+0x80>)
 800c1da:	e004      	b.n	800c1e6 <RGBledTask+0x12>
				RGBpulse(rgbLedMode);
 800c1dc:	2001      	movs	r0, #1
 800c1de:	f7ff fe35 	bl	800be4c <RGBpulse>
		taskYIELD();
 800c1e2:	f002 fc3f 	bl	800ea64 <vPortYield>
		switch (rgbLedMode)
 800c1e6:	7823      	ldrb	r3, [r4, #0]
 800c1e8:	2b0c      	cmp	r3, #12
 800c1ea:	d82c      	bhi.n	800c246 <RGBledTask+0x72>
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	58eb      	ldr	r3, [r5, r3]
 800c1f0:	469f      	mov	pc, r3
				RGBpulse(rgbLedMode);
 800c1f2:	2002      	movs	r0, #2
 800c1f4:	f7ff fe2a 	bl	800be4c <RGBpulse>
				break;
 800c1f8:	e7f3      	b.n	800c1e2 <RGBledTask+0xe>
				RGBsweepBasic();
 800c1fa:	f7ff fe6f 	bl	800bedc <RGBsweepBasic>
				break;
 800c1fe:	e7f0      	b.n	800c1e2 <RGBledTask+0xe>
				RGBsweepFine();
 800c200:	f7ff fcf6 	bl	800bbf0 <RGBsweepFine>
				break;
 800c204:	e7ed      	b.n	800c1e2 <RGBledTask+0xe>
				RGBdim(rgbLedMode);
 800c206:	2005      	movs	r0, #5
 800c208:	f7ff feb4 	bl	800bf74 <RGBdim>
				break;
 800c20c:	e7e9      	b.n	800c1e2 <RGBledTask+0xe>
				RGBdim(rgbLedMode);
 800c20e:	2006      	movs	r0, #6
 800c210:	f7ff feb0 	bl	800bf74 <RGBdim>
				break;
 800c214:	e7e5      	b.n	800c1e2 <RGBledTask+0xe>
				RGBdim(rgbLedMode);
 800c216:	2007      	movs	r0, #7
 800c218:	f7ff feac 	bl	800bf74 <RGBdim>
				break;
 800c21c:	e7e1      	b.n	800c1e2 <RGBledTask+0xe>
				RGBdim(rgbLedMode);
 800c21e:	2008      	movs	r0, #8
 800c220:	f7ff fea8 	bl	800bf74 <RGBdim>
				break;
 800c224:	e7dd      	b.n	800c1e2 <RGBledTask+0xe>
				RGBdim(rgbLedMode);
 800c226:	2009      	movs	r0, #9
 800c228:	f7ff fea4 	bl	800bf74 <RGBdim>
				break;
 800c22c:	e7d9      	b.n	800c1e2 <RGBledTask+0xe>
				RGBdim(rgbLedMode);
 800c22e:	200a      	movs	r0, #10
 800c230:	f7ff fea0 	bl	800bf74 <RGBdim>
				break;
 800c234:	e7d5      	b.n	800c1e2 <RGBledTask+0xe>
				RGBdim(rgbLedMode);
 800c236:	200b      	movs	r0, #11
 800c238:	f7ff fe9c 	bl	800bf74 <RGBdim>
				break;
 800c23c:	e7d1      	b.n	800c1e2 <RGBledTask+0xe>
				RGBdim(rgbLedMode);
 800c23e:	200c      	movs	r0, #12
 800c240:	f7ff fe98 	bl	800bf74 <RGBdim>
				break;
 800c244:	e7cd      	b.n	800c1e2 <RGBledTask+0xe>
				osDelay(10);
 800c246:	200a      	movs	r0, #10
 800c248:	f002 f883 	bl	800e352 <osDelay>
				break;
 800c24c:	e7c9      	b.n	800c1e2 <RGBledTask+0xe>
 800c24e:	46c0      	nop			; (mov r8, r8)
 800c250:	20001079 	.word	0x20001079
 800c254:	08018d58 	.word	0x08018d58

0800c258 <demoCommand>:
{
 800c258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c25a:	b083      	sub	sp, #12
 800c25c:	1e07      	subs	r7, r0, #0
	configASSERT( pcWriteBuffer );
 800c25e:	d101      	bne.n	800c264 <demoCommand+0xc>
 800c260:	b672      	cpsid	i
 800c262:	e7fe      	b.n	800c262 <demoCommand+0xa>
	RGB_LED_off(); RGB_LED_setColor(RED, 50);
 800c264:	f7ff fc42 	bl	800baec <RGB_LED_off>
 800c268:	2132      	movs	r1, #50	; 0x32
 800c26a:	2003      	movs	r0, #3
 800c26c:	f7ff fda8 	bl	800bdc0 <RGB_LED_setColor>
	writePxMutex(PcPort, ( char * ) pcRedMessage, strlen(( char * ) pcRedMessage), 10, 10);
 800c270:	4e1b      	ldr	r6, [pc, #108]	; (800c2e0 <demoCommand+0x88>)
 800c272:	7830      	ldrb	r0, [r6, #0]
 800c274:	250a      	movs	r5, #10
 800c276:	9500      	str	r5, [sp, #0]
 800c278:	230a      	movs	r3, #10
 800c27a:	220f      	movs	r2, #15
 800c27c:	4919      	ldr	r1, [pc, #100]	; (800c2e4 <demoCommand+0x8c>)
 800c27e:	f001 ff91 	bl	800e1a4 <writePxMutex>
	Delay_ms(1000);
 800c282:	24fa      	movs	r4, #250	; 0xfa
 800c284:	00a4      	lsls	r4, r4, #2
 800c286:	0020      	movs	r0, r4
 800c288:	f002 fcaa 	bl	800ebe0 <HAL_Delay>
	RGB_LED_off(); RGB_LED_setColor(GREEN, 50);
 800c28c:	f7ff fc2e 	bl	800baec <RGB_LED_off>
 800c290:	2132      	movs	r1, #50	; 0x32
 800c292:	2008      	movs	r0, #8
 800c294:	f7ff fd94 	bl	800bdc0 <RGB_LED_setColor>
	writePxMutex(PcPort, ( char * ) pcGreenMessage, strlen(( char * ) pcGreenMessage), 10, 10);
 800c298:	7830      	ldrb	r0, [r6, #0]
 800c29a:	9500      	str	r5, [sp, #0]
 800c29c:	230a      	movs	r3, #10
 800c29e:	2211      	movs	r2, #17
 800c2a0:	4911      	ldr	r1, [pc, #68]	; (800c2e8 <demoCommand+0x90>)
 800c2a2:	f001 ff7f 	bl	800e1a4 <writePxMutex>
	Delay_ms(1000);	
 800c2a6:	0020      	movs	r0, r4
 800c2a8:	f002 fc9a 	bl	800ebe0 <HAL_Delay>
	RGB_LED_off(); RGB_LED_setColor(BLUE, 50);
 800c2ac:	f7ff fc1e 	bl	800baec <RGB_LED_off>
 800c2b0:	2132      	movs	r1, #50	; 0x32
 800c2b2:	2004      	movs	r0, #4
 800c2b4:	f7ff fd84 	bl	800bdc0 <RGB_LED_setColor>
	writePxMutex(PcPort, ( char * ) pcBlueMessage, strlen(( char * ) pcBlueMessage), 10, 10);
 800c2b8:	7830      	ldrb	r0, [r6, #0]
 800c2ba:	9500      	str	r5, [sp, #0]
 800c2bc:	230a      	movs	r3, #10
 800c2be:	220e      	movs	r2, #14
 800c2c0:	490a      	ldr	r1, [pc, #40]	; (800c2ec <demoCommand+0x94>)
 800c2c2:	f001 ff6f 	bl	800e1a4 <writePxMutex>
	Delay_ms(1000);	
 800c2c6:	0020      	movs	r0, r4
 800c2c8:	f002 fc8a 	bl	800ebe0 <HAL_Delay>
	RGB_LED_off();
 800c2cc:	f7ff fc0e 	bl	800baec <RGB_LED_off>
	strcpy( ( char * ) pcWriteBuffer, "\r\n");
 800c2d0:	2203      	movs	r2, #3
 800c2d2:	4907      	ldr	r1, [pc, #28]	; (800c2f0 <demoCommand+0x98>)
 800c2d4:	0038      	movs	r0, r7
 800c2d6:	f005 fede 	bl	8012096 <memcpy>
}
 800c2da:	2000      	movs	r0, #0
 800c2dc:	b003      	add	sp, #12
 800c2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2e0:	200003b7 	.word	0x200003b7
 800c2e4:	08018e54 	.word	0x08018e54
 800c2e8:	08018e64 	.word	0x08018e64
 800c2ec:	08018e78 	.word	0x08018e78
 800c2f0:	0801964c 	.word	0x0801964c

0800c2f4 <colorCommand>:
{
 800c2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2f6:	b089      	sub	sp, #36	; 0x24
 800c2f8:	0006      	movs	r6, r0
 800c2fa:	9201      	str	r2, [sp, #4]
	uint8_t color = 0; uint8_t intensity = 0; char par[15] = {0};
 800c2fc:	220f      	movs	r2, #15
 800c2fe:	2100      	movs	r1, #0
 800c300:	a804      	add	r0, sp, #16
 800c302:	f005 fed1 	bl	80120a8 <memset>
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 800c306:	2300      	movs	r3, #0
 800c308:	9303      	str	r3, [sp, #12]
 800c30a:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 800c30c:	2e00      	cmp	r6, #0
 800c30e:	d101      	bne.n	800c314 <colorCommand+0x20>
 800c310:	b672      	cpsid	i
 800c312:	e7fe      	b.n	800c312 <colorCommand+0x1e>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter
 800c314:	aa03      	add	r2, sp, #12
 800c316:	2101      	movs	r1, #1
 800c318:	9801      	ldr	r0, [sp, #4]
 800c31a:	f002 f933 	bl	800e584 <FreeRTOS_CLIGetParameter>
 800c31e:	0004      	movs	r4, r0
 800c320:	4b37      	ldr	r3, [pc, #220]	; (800c400 <colorCommand+0x10c>)
 800c322:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "black", xParameterStringLength1))
 800c324:	9d03      	ldr	r5, [sp, #12]
 800c326:	002a      	movs	r2, r5
 800c328:	4936      	ldr	r1, [pc, #216]	; (800c404 <colorCommand+0x110>)
 800c32a:	f005 ffff 	bl	801232c <strncmp>
		color = BLACK;
 800c32e:	2701      	movs	r7, #1
	if (!strncmp((const char *)pcParameterString1, "black", xParameterStringLength1))
 800c330:	2800      	cmp	r0, #0
 800c332:	d037      	beq.n	800c3a4 <colorCommand+0xb0>
	else if (!strncmp(( const char *)pcParameterString1, "white", xParameterStringLength1))
 800c334:	002a      	movs	r2, r5
 800c336:	4934      	ldr	r1, [pc, #208]	; (800c408 <colorCommand+0x114>)
 800c338:	0020      	movs	r0, r4
 800c33a:	f005 fff7 	bl	801232c <strncmp>
		color = WHITE;
 800c33e:	3701      	adds	r7, #1
	else if (!strncmp(( const char *)pcParameterString1, "white", xParameterStringLength1))
 800c340:	2800      	cmp	r0, #0
 800c342:	d02f      	beq.n	800c3a4 <colorCommand+0xb0>
	else if (!strncmp((const char *)pcParameterString1, "red", xParameterStringLength1))
 800c344:	002a      	movs	r2, r5
 800c346:	4931      	ldr	r1, [pc, #196]	; (800c40c <colorCommand+0x118>)
 800c348:	0020      	movs	r0, r4
 800c34a:	f005 ffef 	bl	801232c <strncmp>
		color = RED;
 800c34e:	3701      	adds	r7, #1
	else if (!strncmp((const char *)pcParameterString1, "red", xParameterStringLength1))
 800c350:	2800      	cmp	r0, #0
 800c352:	d027      	beq.n	800c3a4 <colorCommand+0xb0>
	else if (!strncmp((const char *) pcParameterString1, "blue", xParameterStringLength1))
 800c354:	002a      	movs	r2, r5
 800c356:	492e      	ldr	r1, [pc, #184]	; (800c410 <colorCommand+0x11c>)
 800c358:	0020      	movs	r0, r4
 800c35a:	f005 ffe7 	bl	801232c <strncmp>
		color = BLUE;
 800c35e:	3701      	adds	r7, #1
	else if (!strncmp((const char *) pcParameterString1, "blue", xParameterStringLength1))
 800c360:	2800      	cmp	r0, #0
 800c362:	d01f      	beq.n	800c3a4 <colorCommand+0xb0>
	else if (!strncmp((const char *) pcParameterString1, "yellow", xParameterStringLength1))
 800c364:	002a      	movs	r2, r5
 800c366:	492b      	ldr	r1, [pc, #172]	; (800c414 <colorCommand+0x120>)
 800c368:	0020      	movs	r0, r4
 800c36a:	f005 ffdf 	bl	801232c <strncmp>
		color = YELLOW;
 800c36e:	3701      	adds	r7, #1
	else if (!strncmp((const char *) pcParameterString1, "yellow", xParameterStringLength1))
 800c370:	2800      	cmp	r0, #0
 800c372:	d017      	beq.n	800c3a4 <colorCommand+0xb0>
	else if (!strncmp((const char *) pcParameterString1, "cyan", xParameterStringLength1))
 800c374:	002a      	movs	r2, r5
 800c376:	4928      	ldr	r1, [pc, #160]	; (800c418 <colorCommand+0x124>)
 800c378:	0020      	movs	r0, r4
 800c37a:	f005 ffd7 	bl	801232c <strncmp>
		color = CYAN;
 800c37e:	3701      	adds	r7, #1
	else if (!strncmp((const char *) pcParameterString1, "cyan", xParameterStringLength1))
 800c380:	2800      	cmp	r0, #0
 800c382:	d00f      	beq.n	800c3a4 <colorCommand+0xb0>
	else if (!strncmp((const char *) pcParameterString1, "magenta", xParameterStringLength1))
 800c384:	002a      	movs	r2, r5
 800c386:	4925      	ldr	r1, [pc, #148]	; (800c41c <colorCommand+0x128>)
 800c388:	0020      	movs	r0, r4
 800c38a:	f005 ffcf 	bl	801232c <strncmp>
		color = MAGENTA;
 800c38e:	3701      	adds	r7, #1
	else if (!strncmp((const char *) pcParameterString1, "magenta", xParameterStringLength1))
 800c390:	2800      	cmp	r0, #0
 800c392:	d007      	beq.n	800c3a4 <colorCommand+0xb0>
	else if (!strncmp((const char *) pcParameterString1, "green", xParameterStringLength1))
 800c394:	002a      	movs	r2, r5
 800c396:	4922      	ldr	r1, [pc, #136]	; (800c420 <colorCommand+0x12c>)
 800c398:	0020      	movs	r0, r4
 800c39a:	f005 ffc7 	bl	801232c <strncmp>
		color = GREEN;
 800c39e:	4243      	negs	r3, r0
 800c3a0:	4158      	adcs	r0, r3
 800c3a2:	00c7      	lsls	r7, r0, #3
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800c3a4:	aa02      	add	r2, sp, #8
 800c3a6:	2102      	movs	r1, #2
 800c3a8:	9801      	ldr	r0, [sp, #4]
 800c3aa:	f002 f8eb 	bl	800e584 <FreeRTOS_CLIGetParameter>
	intensity = ( uint8_t ) atol( ( char * ) pcParameterString2 );
 800c3ae:	f005 fe00 	bl	8011fb2 <atol>
 800c3b2:	0004      	movs	r4, r0
	result = RGB_LED_setColor(color, intensity);
 800c3b4:	b2c1      	uxtb	r1, r0
 800c3b6:	0038      	movs	r0, r7
 800c3b8:	f7ff fd02 	bl	800bdc0 <RGB_LED_setColor>
	if (result == H01R0_OK) 
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	d006      	beq.n	800c3ce <colorCommand+0xda>
	else if (result == H01R0_ERR_WrongColor)
 800c3c0:	2802      	cmp	r0, #2
 800c3c2:	d011      	beq.n	800c3e8 <colorCommand+0xf4>
	else if (result == H01R0_ERR_WrongIntensity)
 800c3c4:	2803      	cmp	r0, #3
 800c3c6:	d015      	beq.n	800c3f4 <colorCommand+0x100>
}
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	b009      	add	sp, #36	; 0x24
 800c3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strncpy(par, ( char * ) pcParameterString1, xParameterStringLength1);
 800c3ce:	9a03      	ldr	r2, [sp, #12]
 800c3d0:	4b0b      	ldr	r3, [pc, #44]	; (800c400 <colorCommand+0x10c>)
 800c3d2:	6819      	ldr	r1, [r3, #0]
 800c3d4:	a804      	add	r0, sp, #16
 800c3d6:	f005 ffba 	bl	801234e <strncpy>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOKMessage, par, intensity);
 800c3da:	b2e3      	uxtb	r3, r4
 800c3dc:	aa04      	add	r2, sp, #16
 800c3de:	4911      	ldr	r1, [pc, #68]	; (800c424 <colorCommand+0x130>)
 800c3e0:	0030      	movs	r0, r6
 800c3e2:	f005 ff5f 	bl	80122a4 <siprintf>
 800c3e6:	e7ef      	b.n	800c3c8 <colorCommand+0xd4>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcWrongColorMessage);
 800c3e8:	2211      	movs	r2, #17
 800c3ea:	490f      	ldr	r1, [pc, #60]	; (800c428 <colorCommand+0x134>)
 800c3ec:	0030      	movs	r0, r6
 800c3ee:	f005 fe52 	bl	8012096 <memcpy>
 800c3f2:	e7e9      	b.n	800c3c8 <colorCommand+0xd4>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcWrongIntensityMessage);
 800c3f4:	2213      	movs	r2, #19
 800c3f6:	490d      	ldr	r1, [pc, #52]	; (800c42c <colorCommand+0x138>)
 800c3f8:	0030      	movs	r0, r6
 800c3fa:	f005 fe4c 	bl	8012096 <memcpy>
 800c3fe:	e7e3      	b.n	800c3c8 <colorCommand+0xd4>
 800c400:	2000105c 	.word	0x2000105c
 800c404:	08019054 	.word	0x08019054
 800c408:	0801905c 	.word	0x0801905c
 800c40c:	08019064 	.word	0x08019064
 800c410:	08019068 	.word	0x08019068
 800c414:	08019070 	.word	0x08019070
 800c418:	08019078 	.word	0x08019078
 800c41c:	08019080 	.word	0x08019080
 800c420:	08019088 	.word	0x08019088
 800c424:	08018e08 	.word	0x08018e08
 800c428:	08018e30 	.word	0x08018e30
 800c42c:	08019030 	.word	0x08019030

0800c430 <RGB_LED_sweep>:
{
 800c430:	b510      	push	{r4, lr}
	if (mode == 3 || mode == 4)
 800c432:	1ec4      	subs	r4, r0, #3
		return H01R0_ERR_WrongMode;
 800c434:	2304      	movs	r3, #4
	if (mode == 3 || mode == 4)
 800c436:	2c01      	cmp	r4, #1
 800c438:	d806      	bhi.n	800c448 <RGB_LED_sweep+0x18>
	rgbPeriod = period; rgbCount = repeat;
 800c43a:	4b04      	ldr	r3, [pc, #16]	; (800c44c <RGB_LED_sweep+0x1c>)
 800c43c:	6019      	str	r1, [r3, #0]
 800c43e:	4b04      	ldr	r3, [pc, #16]	; (800c450 <RGB_LED_sweep+0x20>)
 800c440:	801a      	strh	r2, [r3, #0]
	rgbLedMode = mode;
 800c442:	4b04      	ldr	r3, [pc, #16]	; (800c454 <RGB_LED_sweep+0x24>)
 800c444:	7018      	strb	r0, [r3, #0]
	return result;
 800c446:	2300      	movs	r3, #0
}
 800c448:	0018      	movs	r0, r3
 800c44a:	bd10      	pop	{r4, pc}
 800c44c:	2000107c 	.word	0x2000107c
 800c450:	20001072 	.word	0x20001072
 800c454:	20001079 	.word	0x20001079

0800c458 <sweepCommand>:

/*-----------------------------------------------------------*/

portBASE_TYPE sweepCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800c458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c45a:	b08d      	sub	sp, #52	; 0x34
 800c45c:	0005      	movs	r5, r0
 800c45e:	9203      	str	r2, [sp, #12]
	Module_Status result = H01R0_OK;
	uint8_t mode = 0; uint32_t period = 0; int32_t repeat = 0; char par[15] = {0};
 800c460:	220f      	movs	r2, #15
 800c462:	2100      	movs	r1, #0
 800c464:	a808      	add	r0, sp, #32
 800c466:	f005 fe1f 	bl	80120a8 <memset>
	static int8_t *pcParameterString1, *pcParameterString2, *pcParameterString3; 
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 800c46a:	2300      	movs	r3, #0
 800c46c:	9307      	str	r3, [sp, #28]
 800c46e:	9306      	str	r3, [sp, #24]
 800c470:	9305      	str	r3, [sp, #20]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800c472:	2d00      	cmp	r5, #0
 800c474:	d101      	bne.n	800c47a <sweepCommand+0x22>
 800c476:	b672      	cpsid	i
 800c478:	e7fe      	b.n	800c478 <sweepCommand+0x20>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c47a:	aa07      	add	r2, sp, #28
 800c47c:	2101      	movs	r1, #1
 800c47e:	9803      	ldr	r0, [sp, #12]
 800c480:	f002 f880 	bl	800e584 <FreeRTOS_CLIGetParameter>
 800c484:	0006      	movs	r6, r0
 800c486:	4b2d      	ldr	r3, [pc, #180]	; (800c53c <sweepCommand+0xe4>)
 800c488:	6018      	str	r0, [r3, #0]
	if (!strncmp( ( char * ) pcParameterString1, "basic", xParameterStringLength1))
 800c48a:	9f07      	ldr	r7, [sp, #28]
 800c48c:	003a      	movs	r2, r7
 800c48e:	492c      	ldr	r1, [pc, #176]	; (800c540 <sweepCommand+0xe8>)
 800c490:	f005 ff4c 	bl	801232c <strncmp>
		mode = RGB_SWEEP_BASIC;
 800c494:	2403      	movs	r4, #3
	if (!strncmp( ( char * ) pcParameterString1, "basic", xParameterStringLength1))
 800c496:	2800      	cmp	r0, #0
 800c498:	d007      	beq.n	800c4aa <sweepCommand+0x52>
	else if (!strncmp( ( char * ) pcParameterString1, "fine", xParameterStringLength1))
 800c49a:	003a      	movs	r2, r7
 800c49c:	4929      	ldr	r1, [pc, #164]	; (800c544 <sweepCommand+0xec>)
 800c49e:	0030      	movs	r0, r6
 800c4a0:	f005 ff44 	bl	801232c <strncmp>
		mode = RGB_SWEEP_FINE;
 800c4a4:	4244      	negs	r4, r0
 800c4a6:	4144      	adcs	r4, r0
 800c4a8:	00a4      	lsls	r4, r4, #2
	
	/* Obtain the 2nd parameter string. */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800c4aa:	aa06      	add	r2, sp, #24
 800c4ac:	2102      	movs	r1, #2
 800c4ae:	9f03      	ldr	r7, [sp, #12]
 800c4b0:	0038      	movs	r0, r7
 800c4b2:	f002 f867 	bl	800e584 <FreeRTOS_CLIGetParameter>
	period = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 800c4b6:	f005 fd7c 	bl	8011fb2 <atol>
 800c4ba:	0006      	movs	r6, r0
	
	/* Obtain the 3rd parameter string. */
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800c4bc:	aa05      	add	r2, sp, #20
 800c4be:	2103      	movs	r1, #3
 800c4c0:	0038      	movs	r0, r7
 800c4c2:	f002 f85f 	bl	800e584 <FreeRTOS_CLIGetParameter>
 800c4c6:	0007      	movs	r7, r0
	if (!strcmp( ( char * ) pcParameterString3, "inf"))
 800c4c8:	491f      	ldr	r1, [pc, #124]	; (800c548 <sweepCommand+0xf0>)
 800c4ca:	f7f3 fe1b 	bl	8000104 <strcmp>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d10a      	bne.n	800c4e8 <sweepCommand+0x90>
		repeat = -1;
	else
		repeat = ( int32_t ) atol( ( char * ) pcParameterString3 );
	
	result = RGB_LED_sweep(mode, period, repeat);
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	4252      	negs	r2, r2
 800c4d6:	0031      	movs	r1, r6
 800c4d8:	0020      	movs	r0, r4
 800c4da:	f7ff ffa9 	bl	800c430 <RGB_LED_sweep>
	
	/* Respond to the command */
	if (result == H01R0_OK) 
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d024      	beq.n	800c52c <sweepCommand+0xd4>
	}
	
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	b00d      	add	sp, #52	; 0x34
 800c4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		repeat = ( int32_t ) atol( ( char * ) pcParameterString3 );
 800c4e8:	0038      	movs	r0, r7
 800c4ea:	f005 fd62 	bl	8011fb2 <atol>
 800c4ee:	0007      	movs	r7, r0
	result = RGB_LED_sweep(mode, period, repeat);
 800c4f0:	0002      	movs	r2, r0
 800c4f2:	0031      	movs	r1, r6
 800c4f4:	0020      	movs	r0, r4
 800c4f6:	f7ff ff9b 	bl	800c430 <RGB_LED_sweep>
	if (result == H01R0_OK) 
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d1f1      	bne.n	800c4e2 <sweepCommand+0x8a>
		strncpy(par, ( char * ) pcParameterString1, xParameterStringLength1); 
 800c4fe:	9a07      	ldr	r2, [sp, #28]
 800c500:	4b0e      	ldr	r3, [pc, #56]	; (800c53c <sweepCommand+0xe4>)
 800c502:	6819      	ldr	r1, [r3, #0]
 800c504:	a808      	add	r0, sp, #32
 800c506:	f005 ff22 	bl	801234e <strncpy>
		if (repeat == -1)
 800c50a:	1c7b      	adds	r3, r7, #1
 800c50c:	d106      	bne.n	800c51c <sweepCommand+0xc4>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageInf, par, period);
 800c50e:	0033      	movs	r3, r6
 800c510:	aa08      	add	r2, sp, #32
 800c512:	490e      	ldr	r1, [pc, #56]	; (800c54c <sweepCommand+0xf4>)
 800c514:	0028      	movs	r0, r5
 800c516:	f005 fec5 	bl	80122a4 <siprintf>
 800c51a:	e7e2      	b.n	800c4e2 <sweepCommand+0x8a>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par, period, repeat);
 800c51c:	9700      	str	r7, [sp, #0]
 800c51e:	0033      	movs	r3, r6
 800c520:	aa08      	add	r2, sp, #32
 800c522:	490b      	ldr	r1, [pc, #44]	; (800c550 <sweepCommand+0xf8>)
 800c524:	0028      	movs	r0, r5
 800c526:	f005 febd 	bl	80122a4 <siprintf>
 800c52a:	e7da      	b.n	800c4e2 <sweepCommand+0x8a>
		strncpy(par, ( char * ) pcParameterString1, xParameterStringLength1); 
 800c52c:	9a07      	ldr	r2, [sp, #28]
 800c52e:	4b03      	ldr	r3, [pc, #12]	; (800c53c <sweepCommand+0xe4>)
 800c530:	6819      	ldr	r1, [r3, #0]
 800c532:	a808      	add	r0, sp, #32
 800c534:	f005 ff0b 	bl	801234e <strncpy>
 800c538:	e7e9      	b.n	800c50e <sweepCommand+0xb6>
 800c53a:	46c0      	nop			; (mov r8, r8)
 800c53c:	20001064 	.word	0x20001064
 800c540:	08019848 	.word	0x08019848
 800c544:	08019850 	.word	0x08019850
 800c548:	08019090 	.word	0x08019090
 800c54c:	08019858 	.word	0x08019858
 800c550:	080198b8 	.word	0x080198b8

0800c554 <RGB_LED_dim>:
{
 800c554:	b510      	push	{r4, lr}
	if (mode >= 5 && mode <= 12)
 800c556:	1f4c      	subs	r4, r1, #5
 800c558:	2c07      	cmp	r4, #7
 800c55a:	d80c      	bhi.n	800c576 <RGB_LED_dim+0x22>
	rgbColor = color;
 800c55c:	4c07      	ldr	r4, [pc, #28]	; (800c57c <RGB_LED_dim+0x28>)
 800c55e:	7020      	strb	r0, [r4, #0]
	rgbPeriod = period; rgbDC = wait; rgbCount = repeat;
 800c560:	4807      	ldr	r0, [pc, #28]	; (800c580 <RGB_LED_dim+0x2c>)
 800c562:	6002      	str	r2, [r0, #0]
 800c564:	4a07      	ldr	r2, [pc, #28]	; (800c584 <RGB_LED_dim+0x30>)
 800c566:	6013      	str	r3, [r2, #0]
 800c568:	4b07      	ldr	r3, [pc, #28]	; (800c588 <RGB_LED_dim+0x34>)
 800c56a:	9a02      	ldr	r2, [sp, #8]
 800c56c:	801a      	strh	r2, [r3, #0]
	rgbLedMode = mode;
 800c56e:	4b07      	ldr	r3, [pc, #28]	; (800c58c <RGB_LED_dim+0x38>)
 800c570:	7019      	strb	r1, [r3, #0]
	return result;
 800c572:	2000      	movs	r0, #0
}
 800c574:	bd10      	pop	{r4, pc}
		return H01R0_ERR_WrongMode;
 800c576:	2004      	movs	r0, #4
 800c578:	e7fc      	b.n	800c574 <RGB_LED_dim+0x20>
 800c57a:	46c0      	nop			; (mov r8, r8)
 800c57c:	20001071 	.word	0x20001071
 800c580:	2000107c 	.word	0x2000107c
 800c584:	20001074 	.word	0x20001074
 800c588:	20001072 	.word	0x20001072
 800c58c:	20001079 	.word	0x20001079

0800c590 <Module_MessagingTask>:
{
 800c590:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c592:	46d6      	mov	lr, sl
 800c594:	464f      	mov	r7, r9
 800c596:	4646      	mov	r6, r8
 800c598:	b5c0      	push	{r6, r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	ab0a      	add	r3, sp, #40	; 0x28
 800c59e:	781c      	ldrb	r4, [r3, #0]
	switch (code)
 800c5a0:	3864      	subs	r0, #100	; 0x64
 800c5a2:	b283      	uxth	r3, r0
 800c5a4:	2b06      	cmp	r3, #6
 800c5a6:	d900      	bls.n	800c5aa <Module_MessagingTask+0x1a>
 800c5a8:	e126      	b.n	800c7f8 <Module_MessagingTask+0x268>
 800c5aa:	0098      	lsls	r0, r3, #2
 800c5ac:	4b93      	ldr	r3, [pc, #588]	; (800c7fc <Module_MessagingTask+0x26c>)
 800c5ae:	581b      	ldr	r3, [r3, r0]
 800c5b0:	469f      	mov	pc, r3
			RGB_LED_on(cMessage[port-1][shift]);
 800c5b2:	3901      	subs	r1, #1
 800c5b4:	00cb      	lsls	r3, r1, #3
 800c5b6:	1a59      	subs	r1, r3, r1
 800c5b8:	00c9      	lsls	r1, r1, #3
 800c5ba:	4b91      	ldr	r3, [pc, #580]	; (800c800 <Module_MessagingTask+0x270>)
 800c5bc:	1859      	adds	r1, r3, r1
 800c5be:	5d08      	ldrb	r0, [r1, r4]
 800c5c0:	f7ff fa46 	bl	800ba50 <RGB_LED_on>
	Module_Status result = H01R0_OK;
 800c5c4:	2000      	movs	r0, #0
}
 800c5c6:	b002      	add	sp, #8
 800c5c8:	bc1c      	pop	{r2, r3, r4}
 800c5ca:	4690      	mov	r8, r2
 800c5cc:	4699      	mov	r9, r3
 800c5ce:	46a2      	mov	sl, r4
 800c5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RGB_LED_off();
 800c5d2:	f7ff fa8b 	bl	800baec <RGB_LED_off>
	Module_Status result = H01R0_OK;
 800c5d6:	2000      	movs	r0, #0
			break;
 800c5d8:	e7f5      	b.n	800c5c6 <Module_MessagingTask+0x36>
			if (RGB_LED_State)
 800c5da:	4b8a      	ldr	r3, [pc, #552]	; (800c804 <Module_MessagingTask+0x274>)
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d003      	beq.n	800c5ea <Module_MessagingTask+0x5a>
				RGB_LED_off();
 800c5e2:	f7ff fa83 	bl	800baec <RGB_LED_off>
	Module_Status result = H01R0_OK;
 800c5e6:	2000      	movs	r0, #0
 800c5e8:	e7ed      	b.n	800c5c6 <Module_MessagingTask+0x36>
				RGB_LED_on(cMessage[port-1][shift]);
 800c5ea:	3901      	subs	r1, #1
 800c5ec:	00cb      	lsls	r3, r1, #3
 800c5ee:	1a59      	subs	r1, r3, r1
 800c5f0:	00c9      	lsls	r1, r1, #3
 800c5f2:	4b83      	ldr	r3, [pc, #524]	; (800c800 <Module_MessagingTask+0x270>)
 800c5f4:	1859      	adds	r1, r3, r1
 800c5f6:	5d08      	ldrb	r0, [r1, r4]
 800c5f8:	f7ff fa2a 	bl	800ba50 <RGB_LED_on>
	Module_Status result = H01R0_OK;
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	e7e2      	b.n	800c5c6 <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 0) {
 800c600:	3901      	subs	r1, #1
 800c602:	00cb      	lsls	r3, r1, #3
 800c604:	1a5b      	subs	r3, r3, r1
 800c606:	00db      	lsls	r3, r3, #3
 800c608:	4a7d      	ldr	r2, [pc, #500]	; (800c800 <Module_MessagingTask+0x270>)
 800c60a:	18d3      	adds	r3, r2, r3
 800c60c:	5d1b      	ldrb	r3, [r3, r4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d011      	beq.n	800c636 <Module_MessagingTask+0xa6>
	Module_Status result = H01R0_OK;
 800c612:	2000      	movs	r0, #0
			} else if (cMessage[port-1][shift] == 1) {
 800c614:	2b01      	cmp	r3, #1
 800c616:	d1d6      	bne.n	800c5c6 <Module_MessagingTask+0x36>
				RGB_LED_setRGB(cMessage[port-1][1+shift], cMessage[port-1][2+shift], cMessage[port-1][3+shift], cMessage[port-1][4+shift]);			
 800c618:	4d79      	ldr	r5, [pc, #484]	; (800c800 <Module_MessagingTask+0x270>)
 800c61a:	00ce      	lsls	r6, r1, #3
 800c61c:	1a70      	subs	r0, r6, r1
 800c61e:	00c0      	lsls	r0, r0, #3
 800c620:	1828      	adds	r0, r5, r0
 800c622:	1900      	adds	r0, r0, r4
 800c624:	7903      	ldrb	r3, [r0, #4]
 800c626:	78c2      	ldrb	r2, [r0, #3]
 800c628:	7887      	ldrb	r7, [r0, #2]
 800c62a:	7840      	ldrb	r0, [r0, #1]
 800c62c:	0039      	movs	r1, r7
 800c62e:	f7ff facf 	bl	800bbd0 <RGB_LED_setRGB>
	Module_Status result = H01R0_OK;
 800c632:	2000      	movs	r0, #0
 800c634:	e7c7      	b.n	800c5c6 <Module_MessagingTask+0x36>
				RGB_LED_setColor(cMessage[port-1][1+shift], cMessage[port-1][2+shift]);
 800c636:	00c8      	lsls	r0, r1, #3
 800c638:	1a43      	subs	r3, r0, r1
 800c63a:	00db      	lsls	r3, r3, #3
 800c63c:	18d3      	adds	r3, r2, r3
 800c63e:	191b      	adds	r3, r3, r4
 800c640:	789b      	ldrb	r3, [r3, #2]
 800c642:	1a40      	subs	r0, r0, r1
 800c644:	00c0      	lsls	r0, r0, #3
 800c646:	1812      	adds	r2, r2, r0
 800c648:	1914      	adds	r4, r2, r4
 800c64a:	7860      	ldrb	r0, [r4, #1]
 800c64c:	0019      	movs	r1, r3
 800c64e:	f7ff fbb7 	bl	800bdc0 <RGB_LED_setColor>
	Module_Status result = H01R0_OK;
 800c652:	2000      	movs	r0, #0
 800c654:	e7b7      	b.n	800c5c6 <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 0) {
 800c656:	3901      	subs	r1, #1
 800c658:	00cb      	lsls	r3, r1, #3
 800c65a:	1a5b      	subs	r3, r3, r1
 800c65c:	00db      	lsls	r3, r3, #3
 800c65e:	4a68      	ldr	r2, [pc, #416]	; (800c800 <Module_MessagingTask+0x270>)
 800c660:	18d3      	adds	r3, r2, r3
 800c662:	5d1b      	ldrb	r3, [r3, r4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d03b      	beq.n	800c6e0 <Module_MessagingTask+0x150>
	Module_Status result = H01R0_OK;
 800c668:	2000      	movs	r0, #0
			} else if (cMessage[port-1][shift] == 1) {
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d1ab      	bne.n	800c5c6 <Module_MessagingTask+0x36>
				period = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800c66e:	4d64      	ldr	r5, [pc, #400]	; (800c800 <Module_MessagingTask+0x270>)
 800c670:	00ce      	lsls	r6, r1, #3
 800c672:	1a73      	subs	r3, r6, r1
 800c674:	00db      	lsls	r3, r3, #3
 800c676:	18eb      	adds	r3, r5, r3
 800c678:	191b      	adds	r3, r3, r4
 800c67a:	7918      	ldrb	r0, [r3, #4]
 800c67c:	0600      	lsls	r0, r0, #24
 800c67e:	795a      	ldrb	r2, [r3, #5]
 800c680:	0412      	lsls	r2, r2, #16
 800c682:	1880      	adds	r0, r0, r2
 800c684:	79da      	ldrb	r2, [r3, #7]
 800c686:	1880      	adds	r0, r0, r2
 800c688:	799a      	ldrb	r2, [r3, #6]
 800c68a:	0212      	lsls	r2, r2, #8
 800c68c:	1880      	adds	r0, r0, r2
				dc = ( (uint32_t) cMessage[port-1][8+shift] << 24 ) + ( (uint32_t) cMessage[port-1][9+shift] << 16 ) + ( (uint32_t) cMessage[port-1][10+shift] << 8 ) + cMessage[port-1][11+shift];
 800c68e:	7a1a      	ldrb	r2, [r3, #8]
 800c690:	0612      	lsls	r2, r2, #24
 800c692:	7a5f      	ldrb	r7, [r3, #9]
 800c694:	043f      	lsls	r7, r7, #16
 800c696:	19d2      	adds	r2, r2, r7
 800c698:	7adf      	ldrb	r7, [r3, #11]
 800c69a:	19d2      	adds	r2, r2, r7
 800c69c:	7a9f      	ldrb	r7, [r3, #10]
 800c69e:	023f      	lsls	r7, r7, #8
 800c6a0:	4690      	mov	r8, r2
 800c6a2:	44b8      	add	r8, r7
				repeat = ( (uint32_t) cMessage[port-1][12+shift] << 24 ) + ( (uint32_t) cMessage[port-1][13+shift] << 16 ) + ( (uint32_t) cMessage[port-1][14+shift] << 8 ) + cMessage[port-1][15+shift];
 800c6a4:	7bdf      	ldrb	r7, [r3, #15]
 800c6a6:	46bc      	mov	ip, r7
 800c6a8:	7b9f      	ldrb	r7, [r3, #14]
 800c6aa:	023f      	lsls	r7, r7, #8
 800c6ac:	4467      	add	r7, ip
				RGB_LED_pulseRGB(cMessage[port-1][1+shift], cMessage[port-1][2+shift], cMessage[port-1][3+shift], period, dc, repeat);			
 800c6ae:	789a      	ldrb	r2, [r3, #2]
 800c6b0:	78db      	ldrb	r3, [r3, #3]
 800c6b2:	1a71      	subs	r1, r6, r1
 800c6b4:	00c9      	lsls	r1, r1, #3
 800c6b6:	186d      	adds	r5, r5, r1
 800c6b8:	192c      	adds	r4, r5, r4
	rgbRed = red; rgbGreen = green; rgbBlue = blue;
 800c6ba:	7864      	ldrb	r4, [r4, #1]
 800c6bc:	4952      	ldr	r1, [pc, #328]	; (800c808 <Module_MessagingTask+0x278>)
 800c6be:	700c      	strb	r4, [r1, #0]
 800c6c0:	4952      	ldr	r1, [pc, #328]	; (800c80c <Module_MessagingTask+0x27c>)
 800c6c2:	700a      	strb	r2, [r1, #0]
 800c6c4:	4952      	ldr	r1, [pc, #328]	; (800c810 <Module_MessagingTask+0x280>)
 800c6c6:	700b      	strb	r3, [r1, #0]
	rgbPeriod = period; rgbDC = dc; rgbCount = repeat;
 800c6c8:	4b52      	ldr	r3, [pc, #328]	; (800c814 <Module_MessagingTask+0x284>)
 800c6ca:	6018      	str	r0, [r3, #0]
 800c6cc:	4b52      	ldr	r3, [pc, #328]	; (800c818 <Module_MessagingTask+0x288>)
 800c6ce:	4642      	mov	r2, r8
 800c6d0:	601a      	str	r2, [r3, #0]
 800c6d2:	4b52      	ldr	r3, [pc, #328]	; (800c81c <Module_MessagingTask+0x28c>)
 800c6d4:	801f      	strh	r7, [r3, #0]
	rgbLedMode = RGB_PULSE_RGB;
 800c6d6:	4b52      	ldr	r3, [pc, #328]	; (800c820 <Module_MessagingTask+0x290>)
 800c6d8:	2201      	movs	r2, #1
 800c6da:	701a      	strb	r2, [r3, #0]
	Module_Status result = H01R0_OK;
 800c6dc:	2000      	movs	r0, #0
 800c6de:	e772      	b.n	800c5c6 <Module_MessagingTask+0x36>
				period = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];
 800c6e0:	0015      	movs	r5, r2
 800c6e2:	00ce      	lsls	r6, r1, #3
 800c6e4:	1a73      	subs	r3, r6, r1
 800c6e6:	00db      	lsls	r3, r3, #3
 800c6e8:	18d3      	adds	r3, r2, r3
 800c6ea:	191b      	adds	r3, r3, r4
 800c6ec:	7898      	ldrb	r0, [r3, #2]
 800c6ee:	0600      	lsls	r0, r0, #24
 800c6f0:	78da      	ldrb	r2, [r3, #3]
 800c6f2:	0412      	lsls	r2, r2, #16
 800c6f4:	1880      	adds	r0, r0, r2
 800c6f6:	795a      	ldrb	r2, [r3, #5]
 800c6f8:	1880      	adds	r0, r0, r2
 800c6fa:	791a      	ldrb	r2, [r3, #4]
 800c6fc:	0212      	lsls	r2, r2, #8
 800c6fe:	1880      	adds	r0, r0, r2
				dc = ( (uint32_t) cMessage[port-1][6+shift] << 24 ) + ( (uint32_t) cMessage[port-1][7+shift] << 16 ) + ( (uint32_t) cMessage[port-1][8+shift] << 8 ) + cMessage[port-1][9+shift];
 800c700:	799a      	ldrb	r2, [r3, #6]
 800c702:	0612      	lsls	r2, r2, #24
 800c704:	79df      	ldrb	r7, [r3, #7]
 800c706:	043f      	lsls	r7, r7, #16
 800c708:	19d2      	adds	r2, r2, r7
 800c70a:	7a5f      	ldrb	r7, [r3, #9]
 800c70c:	19d2      	adds	r2, r2, r7
 800c70e:	7a1f      	ldrb	r7, [r3, #8]
 800c710:	023f      	lsls	r7, r7, #8
 800c712:	19d2      	adds	r2, r2, r7
				repeat = ( (uint32_t) cMessage[port-1][10+shift] << 24 ) + ( (uint32_t) cMessage[port-1][11+shift] << 16 ) + ( (uint32_t) cMessage[port-1][12+shift] << 8 ) + cMessage[port-1][13+shift];
 800c714:	7b5f      	ldrb	r7, [r3, #13]
 800c716:	7b1b      	ldrb	r3, [r3, #12]
 800c718:	021b      	lsls	r3, r3, #8
 800c71a:	18fb      	adds	r3, r7, r3
				RGB_LED_pulseColor(cMessage[port-1][1+shift], period, dc, repeat);
 800c71c:	1a71      	subs	r1, r6, r1
 800c71e:	00c9      	lsls	r1, r1, #3
 800c720:	186d      	adds	r5, r5, r1
 800c722:	192c      	adds	r4, r5, r4
	rgbColor = color;
 800c724:	7864      	ldrb	r4, [r4, #1]
 800c726:	493f      	ldr	r1, [pc, #252]	; (800c824 <Module_MessagingTask+0x294>)
 800c728:	700c      	strb	r4, [r1, #0]
	rgbPeriod = period; rgbDC = dc; rgbCount = repeat;
 800c72a:	493a      	ldr	r1, [pc, #232]	; (800c814 <Module_MessagingTask+0x284>)
 800c72c:	6008      	str	r0, [r1, #0]
 800c72e:	493a      	ldr	r1, [pc, #232]	; (800c818 <Module_MessagingTask+0x288>)
 800c730:	600a      	str	r2, [r1, #0]
 800c732:	4a3a      	ldr	r2, [pc, #232]	; (800c81c <Module_MessagingTask+0x28c>)
 800c734:	8013      	strh	r3, [r2, #0]
	rgbLedMode = RGB_PULSE_COLOR;
 800c736:	4b3a      	ldr	r3, [pc, #232]	; (800c820 <Module_MessagingTask+0x290>)
 800c738:	2202      	movs	r2, #2
 800c73a:	701a      	strb	r2, [r3, #0]
	Module_Status result = H01R0_OK;
 800c73c:	2000      	movs	r0, #0
 800c73e:	e742      	b.n	800c5c6 <Module_MessagingTask+0x36>
			period = ( (uint32_t) cMessage[port-1][1+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][3+shift] << 8 ) + cMessage[port-1][4+shift];
 800c740:	1e4f      	subs	r7, r1, #1
			repeat = ( (uint32_t) cMessage[port-1][5+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][7+shift] << 8 ) + cMessage[port-1][8+shift];
 800c742:	4e2f      	ldr	r6, [pc, #188]	; (800c800 <Module_MessagingTask+0x270>)
 800c744:	00fd      	lsls	r5, r7, #3
 800c746:	1beb      	subs	r3, r5, r7
 800c748:	00db      	lsls	r3, r3, #3
 800c74a:	18f3      	adds	r3, r6, r3
 800c74c:	191b      	adds	r3, r3, r4
 800c74e:	795a      	ldrb	r2, [r3, #5]
 800c750:	0612      	lsls	r2, r2, #24
 800c752:	7999      	ldrb	r1, [r3, #6]
 800c754:	0409      	lsls	r1, r1, #16
 800c756:	1852      	adds	r2, r2, r1
 800c758:	7a19      	ldrb	r1, [r3, #8]
 800c75a:	1852      	adds	r2, r2, r1
 800c75c:	79d9      	ldrb	r1, [r3, #7]
 800c75e:	0209      	lsls	r1, r1, #8
 800c760:	1852      	adds	r2, r2, r1
			period = ( (uint32_t) cMessage[port-1][1+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][3+shift] << 8 ) + cMessage[port-1][4+shift];
 800c762:	7858      	ldrb	r0, [r3, #1]
 800c764:	0600      	lsls	r0, r0, #24
 800c766:	7899      	ldrb	r1, [r3, #2]
 800c768:	0409      	lsls	r1, r1, #16
 800c76a:	1840      	adds	r0, r0, r1
 800c76c:	7919      	ldrb	r1, [r3, #4]
 800c76e:	1840      	adds	r0, r0, r1
 800c770:	78d9      	ldrb	r1, [r3, #3]
 800c772:	0209      	lsls	r1, r1, #8
 800c774:	1841      	adds	r1, r0, r1
			RGB_LED_sweep(cMessage[port-1][shift], period, repeat);
 800c776:	1bed      	subs	r5, r5, r7
 800c778:	00ed      	lsls	r5, r5, #3
 800c77a:	1975      	adds	r5, r6, r5
 800c77c:	5d28      	ldrb	r0, [r5, r4]
 800c77e:	f7ff fe57 	bl	800c430 <RGB_LED_sweep>
	Module_Status result = H01R0_OK;
 800c782:	2000      	movs	r0, #0
			break;
 800c784:	e71f      	b.n	800c5c6 <Module_MessagingTask+0x36>
			period = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];
 800c786:	3901      	subs	r1, #1
			dc = ( (uint32_t) cMessage[port-1][6+shift] << 24 ) + ( (uint32_t) cMessage[port-1][7+shift] << 16 ) + ( (uint32_t) cMessage[port-1][8+shift] << 8 ) + cMessage[port-1][9+shift];
 800c788:	4e1d      	ldr	r6, [pc, #116]	; (800c800 <Module_MessagingTask+0x270>)
 800c78a:	00cf      	lsls	r7, r1, #3
 800c78c:	1a78      	subs	r0, r7, r1
 800c78e:	00c0      	lsls	r0, r0, #3
 800c790:	1830      	adds	r0, r6, r0
 800c792:	1905      	adds	r5, r0, r4
 800c794:	79ab      	ldrb	r3, [r5, #6]
 800c796:	061b      	lsls	r3, r3, #24
 800c798:	79ea      	ldrb	r2, [r5, #7]
 800c79a:	0412      	lsls	r2, r2, #16
 800c79c:	189b      	adds	r3, r3, r2
 800c79e:	7a6a      	ldrb	r2, [r5, #9]
 800c7a0:	189b      	adds	r3, r3, r2
 800c7a2:	7a2a      	ldrb	r2, [r5, #8]
 800c7a4:	0212      	lsls	r2, r2, #8
 800c7a6:	469a      	mov	sl, r3
 800c7a8:	4492      	add	sl, r2
			period = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];
 800c7aa:	78aa      	ldrb	r2, [r5, #2]
 800c7ac:	0612      	lsls	r2, r2, #24
 800c7ae:	78eb      	ldrb	r3, [r5, #3]
 800c7b0:	041b      	lsls	r3, r3, #16
 800c7b2:	469c      	mov	ip, r3
 800c7b4:	4462      	add	r2, ip
 800c7b6:	796b      	ldrb	r3, [r5, #5]
 800c7b8:	469c      	mov	ip, r3
 800c7ba:	4462      	add	r2, ip
 800c7bc:	792b      	ldrb	r3, [r5, #4]
 800c7be:	021b      	lsls	r3, r3, #8
 800c7c0:	469c      	mov	ip, r3
 800c7c2:	4462      	add	r2, ip
			RGB_LED_dim(cMessage[port-1][shift], cMessage[port-1][1+shift], period, dc, repeat);
 800c7c4:	786b      	ldrb	r3, [r5, #1]
 800c7c6:	469c      	mov	ip, r3
 800c7c8:	5d00      	ldrb	r0, [r0, r4]
			repeat = ( (uint32_t) cMessage[port-1][10+shift] << 24 ) + ( (uint32_t) cMessage[port-1][11+shift] << 16 ) + ( (uint32_t) cMessage[port-1][12+shift] << 8 ) + cMessage[port-1][13+shift];
 800c7ca:	7aab      	ldrb	r3, [r5, #10]
 800c7cc:	061b      	lsls	r3, r3, #24
 800c7ce:	4698      	mov	r8, r3
 800c7d0:	7aeb      	ldrb	r3, [r5, #11]
 800c7d2:	041b      	lsls	r3, r3, #16
 800c7d4:	4699      	mov	r9, r3
 800c7d6:	44c8      	add	r8, r9
 800c7d8:	7b6d      	ldrb	r5, [r5, #13]
 800c7da:	4445      	add	r5, r8
 800c7dc:	1a79      	subs	r1, r7, r1
 800c7de:	00c9      	lsls	r1, r1, #3
 800c7e0:	1876      	adds	r6, r6, r1
 800c7e2:	1934      	adds	r4, r6, r4
 800c7e4:	7b21      	ldrb	r1, [r4, #12]
 800c7e6:	0209      	lsls	r1, r1, #8
 800c7e8:	1869      	adds	r1, r5, r1
			RGB_LED_dim(cMessage[port-1][shift], cMessage[port-1][1+shift], period, dc, repeat);
 800c7ea:	9100      	str	r1, [sp, #0]
 800c7ec:	4653      	mov	r3, sl
 800c7ee:	4661      	mov	r1, ip
 800c7f0:	f7ff feb0 	bl	800c554 <RGB_LED_dim>
	Module_Status result = H01R0_OK;
 800c7f4:	2000      	movs	r0, #0
			break;
 800c7f6:	e6e6      	b.n	800c5c6 <Module_MessagingTask+0x36>
			result = H01R0_ERR_UnknownMessage;
 800c7f8:	2001      	movs	r0, #1
 800c7fa:	e6e4      	b.n	800c5c6 <Module_MessagingTask+0x36>
 800c7fc:	08018d8c 	.word	0x08018d8c
 800c800:	200006d8 	.word	0x200006d8
 800c804:	20001054 	.word	0x20001054
 800c808:	20001080 	.word	0x20001080
 800c80c:	20001078 	.word	0x20001078
 800c810:	20001070 	.word	0x20001070
 800c814:	2000107c 	.word	0x2000107c
 800c818:	20001074 	.word	0x20001074
 800c81c:	20001072 	.word	0x20001072
 800c820:	20001079 	.word	0x20001079
 800c824:	20001071 	.word	0x20001071

0800c828 <dimCommand>:

/*-----------------------------------------------------------*/

portBASE_TYPE dimCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800c828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c82a:	b095      	sub	sp, #84	; 0x54
 800c82c:	0004      	movs	r4, r0
 800c82e:	9005      	str	r0, [sp, #20]
 800c830:	9204      	str	r2, [sp, #16]
	Module_Status result = H01R0_OK;
	uint8_t color = 0, mode = 0; uint32_t period = 0, wait = 0; int32_t repeat = 0;
	static int8_t *pcParameterString1, *pcParameterString2, *pcParameterString3, *pcParameterString4 , *pcParameterString5; 
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 800c832:	2300      	movs	r3, #0
 800c834:	9313      	str	r3, [sp, #76]	; 0x4c
 800c836:	9312      	str	r3, [sp, #72]	; 0x48
 800c838:	9311      	str	r3, [sp, #68]	; 0x44
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 800c83a:	9310      	str	r3, [sp, #64]	; 0x40
 800c83c:	930f      	str	r3, [sp, #60]	; 0x3c
	char par1[15] = {0}, par2[15] = {0};
 800c83e:	220f      	movs	r2, #15
 800c840:	2100      	movs	r1, #0
 800c842:	a80b      	add	r0, sp, #44	; 0x2c
 800c844:	f005 fc30 	bl	80120a8 <memset>
 800c848:	220f      	movs	r2, #15
 800c84a:	2100      	movs	r1, #0
 800c84c:	a807      	add	r0, sp, #28
 800c84e:	f005 fc2b 	bl	80120a8 <memset>
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800c852:	2c00      	cmp	r4, #0
 800c854:	d101      	bne.n	800c85a <dimCommand+0x32>
 800c856:	b672      	cpsid	i
 800c858:	e7fe      	b.n	800c858 <dimCommand+0x30>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c85a:	aa13      	add	r2, sp, #76	; 0x4c
 800c85c:	2101      	movs	r1, #1
 800c85e:	9804      	ldr	r0, [sp, #16]
 800c860:	f001 fe90 	bl	800e584 <FreeRTOS_CLIGetParameter>
 800c864:	0004      	movs	r4, r0
 800c866:	4b79      	ldr	r3, [pc, #484]	; (800ca4c <dimCommand+0x224>)
 800c868:	6018      	str	r0, [r3, #0]
	/* Read the color value. */
	if (!strncmp((const char *)pcParameterString1, "black", xParameterStringLength1))
 800c86a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800c86c:	003a      	movs	r2, r7
 800c86e:	4978      	ldr	r1, [pc, #480]	; (800ca50 <dimCommand+0x228>)
 800c870:	f005 fd5c 	bl	801232c <strncmp>
		color = BLACK;
 800c874:	2601      	movs	r6, #1
	if (!strncmp((const char *)pcParameterString1, "black", xParameterStringLength1))
 800c876:	2800      	cmp	r0, #0
 800c878:	d037      	beq.n	800c8ea <dimCommand+0xc2>
	else if (!strncmp(( const char *)pcParameterString1, "white", xParameterStringLength1))
 800c87a:	003a      	movs	r2, r7
 800c87c:	4975      	ldr	r1, [pc, #468]	; (800ca54 <dimCommand+0x22c>)
 800c87e:	0020      	movs	r0, r4
 800c880:	f005 fd54 	bl	801232c <strncmp>
		color = WHITE;
 800c884:	3601      	adds	r6, #1
	else if (!strncmp(( const char *)pcParameterString1, "white", xParameterStringLength1))
 800c886:	2800      	cmp	r0, #0
 800c888:	d02f      	beq.n	800c8ea <dimCommand+0xc2>
	else if (!strncmp((const char *)pcParameterString1, "red", xParameterStringLength1))
 800c88a:	003a      	movs	r2, r7
 800c88c:	4972      	ldr	r1, [pc, #456]	; (800ca58 <dimCommand+0x230>)
 800c88e:	0020      	movs	r0, r4
 800c890:	f005 fd4c 	bl	801232c <strncmp>
		color = RED;
 800c894:	3601      	adds	r6, #1
	else if (!strncmp((const char *)pcParameterString1, "red", xParameterStringLength1))
 800c896:	2800      	cmp	r0, #0
 800c898:	d027      	beq.n	800c8ea <dimCommand+0xc2>
	else if (!strncmp((const char *) pcParameterString1, "blue", xParameterStringLength1))
 800c89a:	003a      	movs	r2, r7
 800c89c:	496f      	ldr	r1, [pc, #444]	; (800ca5c <dimCommand+0x234>)
 800c89e:	0020      	movs	r0, r4
 800c8a0:	f005 fd44 	bl	801232c <strncmp>
		color = BLUE;
 800c8a4:	3601      	adds	r6, #1
	else if (!strncmp((const char *) pcParameterString1, "blue", xParameterStringLength1))
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d01f      	beq.n	800c8ea <dimCommand+0xc2>
	else if (!strncmp((const char *) pcParameterString1, "yellow", xParameterStringLength1))
 800c8aa:	003a      	movs	r2, r7
 800c8ac:	496c      	ldr	r1, [pc, #432]	; (800ca60 <dimCommand+0x238>)
 800c8ae:	0020      	movs	r0, r4
 800c8b0:	f005 fd3c 	bl	801232c <strncmp>
		color = YELLOW;
 800c8b4:	3601      	adds	r6, #1
	else if (!strncmp((const char *) pcParameterString1, "yellow", xParameterStringLength1))
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d017      	beq.n	800c8ea <dimCommand+0xc2>
	else if (!strncmp((const char *) pcParameterString1, "cyan", xParameterStringLength1))
 800c8ba:	003a      	movs	r2, r7
 800c8bc:	4969      	ldr	r1, [pc, #420]	; (800ca64 <dimCommand+0x23c>)
 800c8be:	0020      	movs	r0, r4
 800c8c0:	f005 fd34 	bl	801232c <strncmp>
		color = CYAN;
 800c8c4:	3601      	adds	r6, #1
	else if (!strncmp((const char *) pcParameterString1, "cyan", xParameterStringLength1))
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d00f      	beq.n	800c8ea <dimCommand+0xc2>
	else if (!strncmp((const char *) pcParameterString1, "magenta", xParameterStringLength1))
 800c8ca:	003a      	movs	r2, r7
 800c8cc:	4966      	ldr	r1, [pc, #408]	; (800ca68 <dimCommand+0x240>)
 800c8ce:	0020      	movs	r0, r4
 800c8d0:	f005 fd2c 	bl	801232c <strncmp>
		color = MAGENTA;
 800c8d4:	3601      	adds	r6, #1
	else if (!strncmp((const char *) pcParameterString1, "magenta", xParameterStringLength1))
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	d007      	beq.n	800c8ea <dimCommand+0xc2>
	else if (!strncmp((const char *) pcParameterString1, "green", xParameterStringLength1))
 800c8da:	003a      	movs	r2, r7
 800c8dc:	4963      	ldr	r1, [pc, #396]	; (800ca6c <dimCommand+0x244>)
 800c8de:	0020      	movs	r0, r4
 800c8e0:	f005 fd24 	bl	801232c <strncmp>
		color = GREEN;
 800c8e4:	4243      	negs	r3, r0
 800c8e6:	4158      	adcs	r0, r3
 800c8e8:	00c6      	lsls	r6, r0, #3
	
	/* Obtain the 2nd parameter string. */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800c8ea:	aa12      	add	r2, sp, #72	; 0x48
 800c8ec:	2102      	movs	r1, #2
 800c8ee:	9804      	ldr	r0, [sp, #16]
 800c8f0:	f001 fe48 	bl	800e584 <FreeRTOS_CLIGetParameter>
 800c8f4:	0005      	movs	r5, r0
 800c8f6:	4b5e      	ldr	r3, [pc, #376]	; (800ca70 <dimCommand+0x248>)
 800c8f8:	6018      	str	r0, [r3, #0]
	if (!strncmp( ( char * ) pcParameterString2, "up", xParameterStringLength2))
 800c8fa:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800c8fc:	003a      	movs	r2, r7
 800c8fe:	495d      	ldr	r1, [pc, #372]	; (800ca74 <dimCommand+0x24c>)
 800c900:	f005 fd14 	bl	801232c <strncmp>
		mode = RGB_DIM_UP;
 800c904:	2405      	movs	r4, #5
	if (!strncmp( ( char * ) pcParameterString2, "up", xParameterStringLength2))
 800c906:	2800      	cmp	r0, #0
 800c908:	d038      	beq.n	800c97c <dimCommand+0x154>
	else if (!strncmp( ( char * ) pcParameterString2, "upwait", xParameterStringLength2))
 800c90a:	003a      	movs	r2, r7
 800c90c:	495a      	ldr	r1, [pc, #360]	; (800ca78 <dimCommand+0x250>)
 800c90e:	0028      	movs	r0, r5
 800c910:	f005 fd0c 	bl	801232c <strncmp>
		mode = RGB_DIM_UP_WAIT;
 800c914:	3401      	adds	r4, #1
	else if (!strncmp( ( char * ) pcParameterString2, "upwait", xParameterStringLength2))
 800c916:	2800      	cmp	r0, #0
 800c918:	d030      	beq.n	800c97c <dimCommand+0x154>
	else if (!strncmp( ( char * ) pcParameterString2, "down", xParameterStringLength2))
 800c91a:	003a      	movs	r2, r7
 800c91c:	4957      	ldr	r1, [pc, #348]	; (800ca7c <dimCommand+0x254>)
 800c91e:	0028      	movs	r0, r5
 800c920:	f005 fd04 	bl	801232c <strncmp>
		mode = RGB_DIM_DOWN;
 800c924:	3401      	adds	r4, #1
	else if (!strncmp( ( char * ) pcParameterString2, "down", xParameterStringLength2))
 800c926:	2800      	cmp	r0, #0
 800c928:	d028      	beq.n	800c97c <dimCommand+0x154>
	else if (!strncmp( ( char * ) pcParameterString2, "downwait", xParameterStringLength2))
 800c92a:	003a      	movs	r2, r7
 800c92c:	4954      	ldr	r1, [pc, #336]	; (800ca80 <dimCommand+0x258>)
 800c92e:	0028      	movs	r0, r5
 800c930:	f005 fcfc 	bl	801232c <strncmp>
		mode = RGB_DIM_DOWN_WAIT;
 800c934:	3401      	adds	r4, #1
	else if (!strncmp( ( char * ) pcParameterString2, "downwait", xParameterStringLength2))
 800c936:	2800      	cmp	r0, #0
 800c938:	d020      	beq.n	800c97c <dimCommand+0x154>
	else if (!strncmp( ( char * ) pcParameterString2, "updown", xParameterStringLength2))
 800c93a:	003a      	movs	r2, r7
 800c93c:	4951      	ldr	r1, [pc, #324]	; (800ca84 <dimCommand+0x25c>)
 800c93e:	0028      	movs	r0, r5
 800c940:	f005 fcf4 	bl	801232c <strncmp>
		mode = RGB_DIM_UP_DOWN;
 800c944:	3401      	adds	r4, #1
	else if (!strncmp( ( char * ) pcParameterString2, "updown", xParameterStringLength2))
 800c946:	2800      	cmp	r0, #0
 800c948:	d018      	beq.n	800c97c <dimCommand+0x154>
	else if (!strncmp( ( char * ) pcParameterString2, "downup", xParameterStringLength2))
 800c94a:	003a      	movs	r2, r7
 800c94c:	494e      	ldr	r1, [pc, #312]	; (800ca88 <dimCommand+0x260>)
 800c94e:	0028      	movs	r0, r5
 800c950:	f005 fcec 	bl	801232c <strncmp>
		mode = RGB_DIM_DOWN_UP;
 800c954:	3401      	adds	r4, #1
	else if (!strncmp( ( char * ) pcParameterString2, "downup", xParameterStringLength2))
 800c956:	2800      	cmp	r0, #0
 800c958:	d010      	beq.n	800c97c <dimCommand+0x154>
	else if (!strncmp( ( char * ) pcParameterString2, "updownwait", xParameterStringLength2))
 800c95a:	003a      	movs	r2, r7
 800c95c:	494b      	ldr	r1, [pc, #300]	; (800ca8c <dimCommand+0x264>)
 800c95e:	0028      	movs	r0, r5
 800c960:	f005 fce4 	bl	801232c <strncmp>
		mode = RGB_DIM_UP_DOWN_WAIT;
 800c964:	3401      	adds	r4, #1
	else if (!strncmp( ( char * ) pcParameterString2, "updownwait", xParameterStringLength2))
 800c966:	2800      	cmp	r0, #0
 800c968:	d008      	beq.n	800c97c <dimCommand+0x154>
	else if (!strncmp( ( char * ) pcParameterString2, "downupwait", xParameterStringLength2))
 800c96a:	003a      	movs	r2, r7
 800c96c:	4948      	ldr	r1, [pc, #288]	; (800ca90 <dimCommand+0x268>)
 800c96e:	0028      	movs	r0, r5
 800c970:	f005 fcdc 	bl	801232c <strncmp>
	uint8_t color = 0, mode = 0; uint32_t period = 0, wait = 0; int32_t repeat = 0;
 800c974:	2400      	movs	r4, #0
	else if (!strncmp( ( char * ) pcParameterString2, "downupwait", xParameterStringLength2))
 800c976:	42a0      	cmp	r0, r4
 800c978:	d100      	bne.n	800c97c <dimCommand+0x154>
		mode = RGB_DIM_DOWN_UP_WAIT;
 800c97a:	340c      	adds	r4, #12
	
	/* Obtain the 3rd parameter string. */
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800c97c:	aa11      	add	r2, sp, #68	; 0x44
 800c97e:	2103      	movs	r1, #3
 800c980:	9d04      	ldr	r5, [sp, #16]
 800c982:	0028      	movs	r0, r5
 800c984:	f001 fdfe 	bl	800e584 <FreeRTOS_CLIGetParameter>
	period = ( uint32_t ) atol( ( char * ) pcParameterString3 );
 800c988:	f005 fb13 	bl	8011fb2 <atol>
 800c98c:	9004      	str	r0, [sp, #16]

	/* Obtain the 4th parameter string. */
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800c98e:	aa10      	add	r2, sp, #64	; 0x40
 800c990:	2104      	movs	r1, #4
 800c992:	0028      	movs	r0, r5
 800c994:	f001 fdf6 	bl	800e584 <FreeRTOS_CLIGetParameter>
	wait = ( uint32_t ) atol( ( char * ) pcParameterString4 );
 800c998:	f005 fb0b 	bl	8011fb2 <atol>
 800c99c:	0007      	movs	r7, r0
	
	/* Obtain the 5th parameter string. */
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 800c99e:	aa0f      	add	r2, sp, #60	; 0x3c
 800c9a0:	2105      	movs	r1, #5
 800c9a2:	0028      	movs	r0, r5
 800c9a4:	f001 fdee 	bl	800e584 <FreeRTOS_CLIGetParameter>
 800c9a8:	0005      	movs	r5, r0
	if (!strcmp( ( char * ) pcParameterString5, "inf"))
 800c9aa:	493a      	ldr	r1, [pc, #232]	; (800ca94 <dimCommand+0x26c>)
 800c9ac:	f7f3 fbaa 	bl	8000104 <strcmp>
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d10d      	bne.n	800c9d0 <dimCommand+0x1a8>
		repeat = -1;
	else
		repeat = ( int32_t ) atol( ( char * ) pcParameterString5 );
	
	result = RGB_LED_dim(color, mode, period, wait, repeat);
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	425b      	negs	r3, r3
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	003b      	movs	r3, r7
 800c9bc:	9a04      	ldr	r2, [sp, #16]
 800c9be:	0021      	movs	r1, r4
 800c9c0:	0030      	movs	r0, r6
 800c9c2:	f7ff fdc7 	bl	800c554 <RGB_LED_dim>
	
	/* Respond to the command */
	if (result == H01R0_OK) 
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d032      	beq.n	800ca30 <dimCommand+0x208>
	}
	
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	b015      	add	sp, #84	; 0x54
 800c9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		repeat = ( int32_t ) atol( ( char * ) pcParameterString5 );
 800c9d0:	0028      	movs	r0, r5
 800c9d2:	f005 faee 	bl	8011fb2 <atol>
 800c9d6:	0005      	movs	r5, r0
	result = RGB_LED_dim(color, mode, period, wait, repeat);
 800c9d8:	9000      	str	r0, [sp, #0]
 800c9da:	003b      	movs	r3, r7
 800c9dc:	9a04      	ldr	r2, [sp, #16]
 800c9de:	0021      	movs	r1, r4
 800c9e0:	0030      	movs	r0, r6
 800c9e2:	f7ff fdb7 	bl	800c554 <RGB_LED_dim>
	if (result == H01R0_OK) 
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	d1ef      	bne.n	800c9ca <dimCommand+0x1a2>
		strncpy(par1, ( char * ) pcParameterString1, xParameterStringLength1);
 800c9ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c9ec:	4b17      	ldr	r3, [pc, #92]	; (800ca4c <dimCommand+0x224>)
 800c9ee:	6819      	ldr	r1, [r3, #0]
 800c9f0:	a80b      	add	r0, sp, #44	; 0x2c
 800c9f2:	f005 fcac 	bl	801234e <strncpy>
		strncpy(par2, ( char * ) pcParameterString2, xParameterStringLength2);
 800c9f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c9f8:	4b1d      	ldr	r3, [pc, #116]	; (800ca70 <dimCommand+0x248>)
 800c9fa:	6819      	ldr	r1, [r3, #0]
 800c9fc:	a807      	add	r0, sp, #28
 800c9fe:	f005 fca6 	bl	801234e <strncpy>
		if (repeat == -1)
 800ca02:	1c6b      	adds	r3, r5, #1
 800ca04:	d109      	bne.n	800ca1a <dimCommand+0x1f2>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageInf, par1, period, wait, par2);
 800ca06:	ab07      	add	r3, sp, #28
 800ca08:	9301      	str	r3, [sp, #4]
 800ca0a:	9700      	str	r7, [sp, #0]
 800ca0c:	9b04      	ldr	r3, [sp, #16]
 800ca0e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca10:	4921      	ldr	r1, [pc, #132]	; (800ca98 <dimCommand+0x270>)
 800ca12:	9805      	ldr	r0, [sp, #20]
 800ca14:	f005 fc46 	bl	80122a4 <siprintf>
 800ca18:	e7d7      	b.n	800c9ca <dimCommand+0x1a2>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par1, period, wait, par2, repeat);
 800ca1a:	9502      	str	r5, [sp, #8]
 800ca1c:	ab07      	add	r3, sp, #28
 800ca1e:	9301      	str	r3, [sp, #4]
 800ca20:	9700      	str	r7, [sp, #0]
 800ca22:	9b04      	ldr	r3, [sp, #16]
 800ca24:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca26:	491d      	ldr	r1, [pc, #116]	; (800ca9c <dimCommand+0x274>)
 800ca28:	9805      	ldr	r0, [sp, #20]
 800ca2a:	f005 fc3b 	bl	80122a4 <siprintf>
 800ca2e:	e7cc      	b.n	800c9ca <dimCommand+0x1a2>
		strncpy(par1, ( char * ) pcParameterString1, xParameterStringLength1);
 800ca30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca32:	4b06      	ldr	r3, [pc, #24]	; (800ca4c <dimCommand+0x224>)
 800ca34:	6819      	ldr	r1, [r3, #0]
 800ca36:	a80b      	add	r0, sp, #44	; 0x2c
 800ca38:	f005 fc89 	bl	801234e <strncpy>
		strncpy(par2, ( char * ) pcParameterString2, xParameterStringLength2);
 800ca3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca3e:	4b0c      	ldr	r3, [pc, #48]	; (800ca70 <dimCommand+0x248>)
 800ca40:	6819      	ldr	r1, [r3, #0]
 800ca42:	a807      	add	r0, sp, #28
 800ca44:	f005 fc83 	bl	801234e <strncpy>
 800ca48:	e7dd      	b.n	800ca06 <dimCommand+0x1de>
 800ca4a:	46c0      	nop			; (mov r8, r8)
 800ca4c:	20001068 	.word	0x20001068
 800ca50:	08019054 	.word	0x08019054
 800ca54:	0801905c 	.word	0x0801905c
 800ca58:	08019064 	.word	0x08019064
 800ca5c:	08019068 	.word	0x08019068
 800ca60:	08019070 	.word	0x08019070
 800ca64:	08019078 	.word	0x08019078
 800ca68:	08019080 	.word	0x08019080
 800ca6c:	08019088 	.word	0x08019088
 800ca70:	2000106c 	.word	0x2000106c
 800ca74:	08018eb8 	.word	0x08018eb8
 800ca78:	08018ecc 	.word	0x08018ecc
 800ca7c:	08018e98 	.word	0x08018e98
 800ca80:	08018ea0 	.word	0x08018ea0
 800ca84:	08018eac 	.word	0x08018eac
 800ca88:	08018eb4 	.word	0x08018eb4
 800ca8c:	08018ebc 	.word	0x08018ebc
 800ca90:	08018ec8 	.word	0x08018ec8
 800ca94:	08019090 	.word	0x08019090
 800ca98:	08018ed4 	.word	0x08018ed4
 800ca9c:	08018f58 	.word	0x08018f58

0800caa0 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800caa0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800caa2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800caa4:	2300      	movs	r3, #0
 800caa6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800caa8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800caaa:	2280      	movs	r2, #128	; 0x80
 800caac:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800caae:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cab0:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800cab2:	3320      	adds	r3, #32
 800cab4:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800cab6:	2380      	movs	r3, #128	; 0x80
 800cab8:	019b      	lsls	r3, r3, #6
 800caba:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800cabc:	f002 fa4a 	bl	800ef54 <HAL_DMA_Init>
}
 800cac0:	bd10      	pop	{r4, pc}

0800cac2 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800cac2:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800cac4:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cac6:	2310      	movs	r3, #16
 800cac8:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800caca:	2300      	movs	r3, #0
 800cacc:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800cace:	2280      	movs	r2, #128	; 0x80
 800cad0:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cad2:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cad4:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800cad6:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800cad8:	2380      	movs	r3, #128	; 0x80
 800cada:	019b      	lsls	r3, r3, #6
 800cadc:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800cade:	f002 fa39 	bl	800ef54 <HAL_DMA_Init>
}
 800cae2:	bd10      	pop	{r4, pc}

0800cae4 <DMA_Init>:
{
 800cae4:	b510      	push	{r4, lr}
 800cae6:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800cae8:	4b20      	ldr	r3, [pc, #128]	; (800cb6c <DMA_Init+0x88>)
 800caea:	6959      	ldr	r1, [r3, #20]
 800caec:	2201      	movs	r2, #1
 800caee:	4311      	orrs	r1, r2
 800caf0:	6159      	str	r1, [r3, #20]
 800caf2:	6959      	ldr	r1, [r3, #20]
 800caf4:	400a      	ands	r2, r1
 800caf6:	9200      	str	r2, [sp, #0]
 800caf8:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800cafa:	6959      	ldr	r1, [r3, #20]
 800cafc:	2202      	movs	r2, #2
 800cafe:	4311      	orrs	r1, r2
 800cb00:	6159      	str	r1, [r3, #20]
 800cb02:	695b      	ldr	r3, [r3, #20]
 800cb04:	401a      	ands	r2, r3
 800cb06:	9201      	str	r2, [sp, #4]
 800cb08:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800cb0a:	4c19      	ldr	r4, [pc, #100]	; (800cb70 <DMA_Init+0x8c>)
 800cb0c:	4919      	ldr	r1, [pc, #100]	; (800cb74 <DMA_Init+0x90>)
 800cb0e:	0020      	movs	r0, r4
 800cb10:	f7ff ffc6 	bl	800caa0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800cb14:	0020      	movs	r0, r4
 800cb16:	3038      	adds	r0, #56	; 0x38
 800cb18:	4917      	ldr	r1, [pc, #92]	; (800cb78 <DMA_Init+0x94>)
 800cb1a:	f7ff ffc1 	bl	800caa0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800cb1e:	0020      	movs	r0, r4
 800cb20:	3070      	adds	r0, #112	; 0x70
 800cb22:	4916      	ldr	r1, [pc, #88]	; (800cb7c <DMA_Init+0x98>)
 800cb24:	f7ff ffbc 	bl	800caa0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800cb28:	0020      	movs	r0, r4
 800cb2a:	30a8      	adds	r0, #168	; 0xa8
 800cb2c:	4914      	ldr	r1, [pc, #80]	; (800cb80 <DMA_Init+0x9c>)
 800cb2e:	f7ff ffb7 	bl	800caa0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800cb32:	0020      	movs	r0, r4
 800cb34:	30e0      	adds	r0, #224	; 0xe0
 800cb36:	4913      	ldr	r1, [pc, #76]	; (800cb84 <DMA_Init+0xa0>)
 800cb38:	f7ff ffb2 	bl	800caa0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800cb3c:	0020      	movs	r0, r4
 800cb3e:	3019      	adds	r0, #25
 800cb40:	30ff      	adds	r0, #255	; 0xff
 800cb42:	4911      	ldr	r1, [pc, #68]	; (800cb88 <DMA_Init+0xa4>)
 800cb44:	f7ff ffac 	bl	800caa0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800cb48:	4c10      	ldr	r4, [pc, #64]	; (800cb8c <DMA_Init+0xa8>)
 800cb4a:	4911      	ldr	r1, [pc, #68]	; (800cb90 <DMA_Init+0xac>)
 800cb4c:	0020      	movs	r0, r4
 800cb4e:	f7ff ffb8 	bl	800cac2 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800cb52:	0020      	movs	r0, r4
 800cb54:	3038      	adds	r0, #56	; 0x38
 800cb56:	490f      	ldr	r1, [pc, #60]	; (800cb94 <DMA_Init+0xb0>)
 800cb58:	f7ff ffb3 	bl	800cac2 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800cb5c:	0020      	movs	r0, r4
 800cb5e:	3070      	adds	r0, #112	; 0x70
 800cb60:	490d      	ldr	r1, [pc, #52]	; (800cb98 <DMA_Init+0xb4>)
 800cb62:	f7ff ffae 	bl	800cac2 <DMA_MSG_TX_CH_Init>
}
 800cb66:	b002      	add	sp, #8
 800cb68:	bd10      	pop	{r4, pc}
 800cb6a:	46c0      	nop			; (mov r8, r8)
 800cb6c:	40021000 	.word	0x40021000
 800cb70:	2000108c 	.word	0x2000108c
 800cb74:	40020008 	.word	0x40020008
 800cb78:	40020030 	.word	0x40020030
 800cb7c:	40020058 	.word	0x40020058
 800cb80:	4002006c 	.word	0x4002006c
 800cb84:	4002041c 	.word	0x4002041c
 800cb88:	40020430 	.word	0x40020430
 800cb8c:	200011dc 	.word	0x200011dc
 800cb90:	4002001c 	.word	0x4002001c
 800cb94:	40020044 	.word	0x40020044
 800cb98:	40020080 	.word	0x40020080

0800cb9c <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800cb9c:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800cb9e:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cba0:	2300      	movs	r3, #0
 800cba2:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800cba4:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800cba6:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cba8:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cbaa:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800cbac:	3320      	adds	r3, #32
 800cbae:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800cbb0:	2380      	movs	r3, #128	; 0x80
 800cbb2:	015b      	lsls	r3, r3, #5
 800cbb4:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800cbb6:	f002 f9cd 	bl	800ef54 <HAL_DMA_Init>
}
 800cbba:	bd10      	pop	{r4, pc}

0800cbbc <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800cbbc:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800cbbe:	6803      	ldr	r3, [r0, #0]
 800cbc0:	4a20      	ldr	r2, [pc, #128]	; (800cc44 <SetupDMAInterrupts+0x88>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d020      	beq.n	800cc08 <SetupDMAInterrupts+0x4c>
 800cbc6:	d827      	bhi.n	800cc18 <SetupDMAInterrupts+0x5c>
 800cbc8:	4a1f      	ldr	r2, [pc, #124]	; (800cc48 <SetupDMAInterrupts+0x8c>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d00e      	beq.n	800cbec <SetupDMAInterrupts+0x30>
 800cbce:	d815      	bhi.n	800cbfc <SetupDMAInterrupts+0x40>
 800cbd0:	4a1e      	ldr	r2, [pc, #120]	; (800cc4c <SetupDMAInterrupts+0x90>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d107      	bne.n	800cbe6 <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	2009      	movs	r0, #9
 800cbda:	f002 f81d 	bl	800ec18 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800cbde:	2009      	movs	r0, #9
 800cbe0:	f002 f84e 	bl	800ec80 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800cbe4:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800cbe6:	4a1a      	ldr	r2, [pc, #104]	; (800cc50 <SetupDMAInterrupts+0x94>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d1fb      	bne.n	800cbe4 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800cbec:	2200      	movs	r2, #0
 800cbee:	200a      	movs	r0, #10
 800cbf0:	f002 f812 	bl	800ec18 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800cbf4:	200a      	movs	r0, #10
 800cbf6:	f002 f843 	bl	800ec80 <HAL_NVIC_EnableIRQ>
			break;
 800cbfa:	e7f3      	b.n	800cbe4 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800cbfc:	4a15      	ldr	r2, [pc, #84]	; (800cc54 <SetupDMAInterrupts+0x98>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d002      	beq.n	800cc08 <SetupDMAInterrupts+0x4c>
 800cc02:	4a15      	ldr	r2, [pc, #84]	; (800cc58 <SetupDMAInterrupts+0x9c>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d1ed      	bne.n	800cbe4 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800cc08:	2200      	movs	r2, #0
 800cc0a:	200b      	movs	r0, #11
 800cc0c:	f002 f804 	bl	800ec18 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800cc10:	200b      	movs	r0, #11
 800cc12:	f002 f835 	bl	800ec80 <HAL_NVIC_EnableIRQ>
}
 800cc16:	e7e5      	b.n	800cbe4 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800cc18:	4a10      	ldr	r2, [pc, #64]	; (800cc5c <SetupDMAInterrupts+0xa0>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d0e6      	beq.n	800cbec <SetupDMAInterrupts+0x30>
 800cc1e:	d909      	bls.n	800cc34 <SetupDMAInterrupts+0x78>
 800cc20:	4a0f      	ldr	r2, [pc, #60]	; (800cc60 <SetupDMAInterrupts+0xa4>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d0f0      	beq.n	800cc08 <SetupDMAInterrupts+0x4c>
 800cc26:	4a0f      	ldr	r2, [pc, #60]	; (800cc64 <SetupDMAInterrupts+0xa8>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d0ed      	beq.n	800cc08 <SetupDMAInterrupts+0x4c>
 800cc2c:	4a0e      	ldr	r2, [pc, #56]	; (800cc68 <SetupDMAInterrupts+0xac>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d1d8      	bne.n	800cbe4 <SetupDMAInterrupts+0x28>
 800cc32:	e7e9      	b.n	800cc08 <SetupDMAInterrupts+0x4c>
 800cc34:	4a0d      	ldr	r2, [pc, #52]	; (800cc6c <SetupDMAInterrupts+0xb0>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d0e6      	beq.n	800cc08 <SetupDMAInterrupts+0x4c>
 800cc3a:	4a0d      	ldr	r2, [pc, #52]	; (800cc70 <SetupDMAInterrupts+0xb4>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d0d5      	beq.n	800cbec <SetupDMAInterrupts+0x30>
 800cc40:	e7d0      	b.n	800cbe4 <SetupDMAInterrupts+0x28>
 800cc42:	46c0      	nop			; (mov r8, r8)
 800cc44:	4002006c 	.word	0x4002006c
 800cc48:	40020030 	.word	0x40020030
 800cc4c:	40020008 	.word	0x40020008
 800cc50:	4002001c 	.word	0x4002001c
 800cc54:	40020044 	.word	0x40020044
 800cc58:	40020058 	.word	0x40020058
 800cc5c:	4002041c 	.word	0x4002041c
 800cc60:	40020444 	.word	0x40020444
 800cc64:	40020458 	.word	0x40020458
 800cc68:	40020430 	.word	0x40020430
 800cc6c:	40020080 	.word	0x40020080
 800cc70:	40020408 	.word	0x40020408

0800cc74 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800cc74:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800cc76:	6803      	ldr	r3, [r0, #0]
 800cc78:	4a1a      	ldr	r2, [pc, #104]	; (800cce4 <UnSetupDMAInterrupts+0x70>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d018      	beq.n	800ccb0 <UnSetupDMAInterrupts+0x3c>
 800cc7e:	d81b      	bhi.n	800ccb8 <UnSetupDMAInterrupts+0x44>
 800cc80:	4a19      	ldr	r2, [pc, #100]	; (800cce8 <UnSetupDMAInterrupts+0x74>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d00a      	beq.n	800cc9c <UnSetupDMAInterrupts+0x28>
 800cc86:	d80d      	bhi.n	800cca4 <UnSetupDMAInterrupts+0x30>
 800cc88:	4a18      	ldr	r2, [pc, #96]	; (800ccec <UnSetupDMAInterrupts+0x78>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d103      	bne.n	800cc96 <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800cc8e:	2009      	movs	r0, #9
 800cc90:	f002 f800 	bl	800ec94 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800cc94:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800cc96:	4a16      	ldr	r2, [pc, #88]	; (800ccf0 <UnSetupDMAInterrupts+0x7c>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d1fb      	bne.n	800cc94 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800cc9c:	200a      	movs	r0, #10
 800cc9e:	f001 fff9 	bl	800ec94 <HAL_NVIC_DisableIRQ>
			break;
 800cca2:	e7f7      	b.n	800cc94 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800cca4:	4a13      	ldr	r2, [pc, #76]	; (800ccf4 <UnSetupDMAInterrupts+0x80>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d002      	beq.n	800ccb0 <UnSetupDMAInterrupts+0x3c>
 800ccaa:	4a13      	ldr	r2, [pc, #76]	; (800ccf8 <UnSetupDMAInterrupts+0x84>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d1f1      	bne.n	800cc94 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ccb0:	200b      	movs	r0, #11
 800ccb2:	f001 ffef 	bl	800ec94 <HAL_NVIC_DisableIRQ>
}
 800ccb6:	e7ed      	b.n	800cc94 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800ccb8:	4a10      	ldr	r2, [pc, #64]	; (800ccfc <UnSetupDMAInterrupts+0x88>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d0ee      	beq.n	800cc9c <UnSetupDMAInterrupts+0x28>
 800ccbe:	d909      	bls.n	800ccd4 <UnSetupDMAInterrupts+0x60>
 800ccc0:	4a0f      	ldr	r2, [pc, #60]	; (800cd00 <UnSetupDMAInterrupts+0x8c>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d0f4      	beq.n	800ccb0 <UnSetupDMAInterrupts+0x3c>
 800ccc6:	4a0f      	ldr	r2, [pc, #60]	; (800cd04 <UnSetupDMAInterrupts+0x90>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d0f1      	beq.n	800ccb0 <UnSetupDMAInterrupts+0x3c>
 800cccc:	4a0e      	ldr	r2, [pc, #56]	; (800cd08 <UnSetupDMAInterrupts+0x94>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d1e0      	bne.n	800cc94 <UnSetupDMAInterrupts+0x20>
 800ccd2:	e7ed      	b.n	800ccb0 <UnSetupDMAInterrupts+0x3c>
 800ccd4:	4a0d      	ldr	r2, [pc, #52]	; (800cd0c <UnSetupDMAInterrupts+0x98>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d0ea      	beq.n	800ccb0 <UnSetupDMAInterrupts+0x3c>
 800ccda:	4a0d      	ldr	r2, [pc, #52]	; (800cd10 <UnSetupDMAInterrupts+0x9c>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d0dd      	beq.n	800cc9c <UnSetupDMAInterrupts+0x28>
 800cce0:	e7d8      	b.n	800cc94 <UnSetupDMAInterrupts+0x20>
 800cce2:	46c0      	nop			; (mov r8, r8)
 800cce4:	4002006c 	.word	0x4002006c
 800cce8:	40020030 	.word	0x40020030
 800ccec:	40020008 	.word	0x40020008
 800ccf0:	4002001c 	.word	0x4002001c
 800ccf4:	40020044 	.word	0x40020044
 800ccf8:	40020058 	.word	0x40020058
 800ccfc:	4002041c 	.word	0x4002041c
 800cd00:	40020444 	.word	0x40020444
 800cd04:	40020458 	.word	0x40020458
 800cd08:	40020430 	.word	0x40020430
 800cd0c:	40020080 	.word	0x40020080
 800cd10:	40020408 	.word	0x40020408

0800cd14 <DMA_MSG_TX_UnSetup>:
{	
 800cd14:	b510      	push	{r4, lr}
 800cd16:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800cd18:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800cd1a:	f7ff ffab 	bl	800cc74 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800cd1e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800cd20:	2300      	movs	r3, #0
 800cd22:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800cd24:	6623      	str	r3, [r4, #96]	; 0x60
}
 800cd26:	bd10      	pop	{r4, pc}

0800cd28 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800cd28:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800cd2a:	6803      	ldr	r3, [r0, #0]
 800cd2c:	4abd      	ldr	r2, [pc, #756]	; (800d024 <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d02f      	beq.n	800cd92 <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800cd32:	4abd      	ldr	r2, [pc, #756]	; (800d028 <RemapAndLinkDMAtoUARTRx+0x300>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d100      	bne.n	800cd3a <RemapAndLinkDMAtoUARTRx+0x12>
 800cd38:	e087      	b.n	800ce4a <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800cd3a:	4abc      	ldr	r2, [pc, #752]	; (800d02c <RemapAndLinkDMAtoUARTRx+0x304>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d100      	bne.n	800cd42 <RemapAndLinkDMAtoUARTRx+0x1a>
 800cd40:	e0dc      	b.n	800cefc <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800cd42:	4abb      	ldr	r2, [pc, #748]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x308>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d000      	beq.n	800cd4a <RemapAndLinkDMAtoUARTRx+0x22>
 800cd48:	e18a      	b.n	800d060 <RemapAndLinkDMAtoUARTRx+0x338>
 800cd4a:	680b      	ldr	r3, [r1, #0]
 800cd4c:	4ab9      	ldr	r2, [pc, #740]	; (800d034 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d100      	bne.n	800cd54 <RemapAndLinkDMAtoUARTRx+0x2c>
 800cd52:	e12d      	b.n	800cfb0 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800cd54:	4ab8      	ldr	r2, [pc, #736]	; (800d038 <RemapAndLinkDMAtoUARTRx+0x310>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d100      	bne.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x34>
 800cd5a:	e134      	b.n	800cfc6 <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800cd5c:	4ab7      	ldr	r2, [pc, #732]	; (800d03c <RemapAndLinkDMAtoUARTRx+0x314>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d100      	bne.n	800cd64 <RemapAndLinkDMAtoUARTRx+0x3c>
 800cd62:	e13c      	b.n	800cfde <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800cd64:	4ab6      	ldr	r2, [pc, #728]	; (800d040 <RemapAndLinkDMAtoUARTRx+0x318>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d100      	bne.n	800cd6c <RemapAndLinkDMAtoUARTRx+0x44>
 800cd6a:	e144      	b.n	800cff6 <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800cd6c:	4ab5      	ldr	r2, [pc, #724]	; (800d044 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d100      	bne.n	800cd74 <RemapAndLinkDMAtoUARTRx+0x4c>
 800cd72:	e14c      	b.n	800d00e <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800cd74:	4ab4      	ldr	r2, [pc, #720]	; (800d048 <RemapAndLinkDMAtoUARTRx+0x320>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d11e      	bne.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800cd7a:	4ab4      	ldr	r2, [pc, #720]	; (800d04c <RemapAndLinkDMAtoUARTRx+0x324>)
 800cd7c:	23a8      	movs	r3, #168	; 0xa8
 800cd7e:	58d4      	ldr	r4, [r2, r3]
 800cd80:	4db3      	ldr	r5, [pc, #716]	; (800d050 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cd82:	402c      	ands	r4, r5
 800cd84:	50d4      	str	r4, [r2, r3]
 800cd86:	58d5      	ldr	r5, [r2, r3]
 800cd88:	24b0      	movs	r4, #176	; 0xb0
 800cd8a:	0124      	lsls	r4, r4, #4
 800cd8c:	432c      	orrs	r4, r5
 800cd8e:	50d4      	str	r4, [r2, r3]
 800cd90:	e012      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800cd92:	680b      	ldr	r3, [r1, #0]
 800cd94:	4aa7      	ldr	r2, [pc, #668]	; (800d034 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d011      	beq.n	800cdbe <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800cd9a:	4aa7      	ldr	r2, [pc, #668]	; (800d038 <RemapAndLinkDMAtoUARTRx+0x310>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d019      	beq.n	800cdd4 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800cda0:	4aa6      	ldr	r2, [pc, #664]	; (800d03c <RemapAndLinkDMAtoUARTRx+0x314>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d022      	beq.n	800cdec <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800cda6:	4aa6      	ldr	r2, [pc, #664]	; (800d040 <RemapAndLinkDMAtoUARTRx+0x318>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d02b      	beq.n	800ce04 <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800cdac:	4aa5      	ldr	r2, [pc, #660]	; (800d044 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d034      	beq.n	800ce1c <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800cdb2:	4aa5      	ldr	r2, [pc, #660]	; (800d048 <RemapAndLinkDMAtoUARTRx+0x320>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d03c      	beq.n	800ce32 <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800cdb8:	6641      	str	r1, [r0, #100]	; 0x64
 800cdba:	6248      	str	r0, [r1, #36]	; 0x24
}
 800cdbc:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800cdbe:	4aa5      	ldr	r2, [pc, #660]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cdc0:	23a8      	movs	r3, #168	; 0xa8
 800cdc2:	58d4      	ldr	r4, [r2, r3]
 800cdc4:	250f      	movs	r5, #15
 800cdc6:	43ac      	bics	r4, r5
 800cdc8:	50d4      	str	r4, [r2, r3]
 800cdca:	58d4      	ldr	r4, [r2, r3]
 800cdcc:	3d07      	subs	r5, #7
 800cdce:	432c      	orrs	r4, r5
 800cdd0:	50d4      	str	r4, [r2, r3]
 800cdd2:	e7f1      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800cdd4:	4a9f      	ldr	r2, [pc, #636]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cdd6:	23a8      	movs	r3, #168	; 0xa8
 800cdd8:	58d4      	ldr	r4, [r2, r3]
 800cdda:	4d9d      	ldr	r5, [pc, #628]	; (800d050 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cddc:	402c      	ands	r4, r5
 800cdde:	50d4      	str	r4, [r2, r3]
 800cde0:	58d5      	ldr	r5, [r2, r3]
 800cde2:	2480      	movs	r4, #128	; 0x80
 800cde4:	0124      	lsls	r4, r4, #4
 800cde6:	432c      	orrs	r4, r5
 800cde8:	50d4      	str	r4, [r2, r3]
 800cdea:	e7e5      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800cdec:	4a99      	ldr	r2, [pc, #612]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cdee:	23a8      	movs	r3, #168	; 0xa8
 800cdf0:	58d4      	ldr	r4, [r2, r3]
 800cdf2:	4d99      	ldr	r5, [pc, #612]	; (800d058 <RemapAndLinkDMAtoUARTRx+0x330>)
 800cdf4:	402c      	ands	r4, r5
 800cdf6:	50d4      	str	r4, [r2, r3]
 800cdf8:	58d5      	ldr	r5, [r2, r3]
 800cdfa:	2480      	movs	r4, #128	; 0x80
 800cdfc:	0324      	lsls	r4, r4, #12
 800cdfe:	432c      	orrs	r4, r5
 800ce00:	50d4      	str	r4, [r2, r3]
 800ce02:	e7d9      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800ce04:	4a93      	ldr	r2, [pc, #588]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ce06:	23a8      	movs	r3, #168	; 0xa8
 800ce08:	58d4      	ldr	r4, [r2, r3]
 800ce0a:	4d94      	ldr	r5, [pc, #592]	; (800d05c <RemapAndLinkDMAtoUARTRx+0x334>)
 800ce0c:	402c      	ands	r4, r5
 800ce0e:	50d4      	str	r4, [r2, r3]
 800ce10:	58d5      	ldr	r5, [r2, r3]
 800ce12:	2480      	movs	r4, #128	; 0x80
 800ce14:	0424      	lsls	r4, r4, #16
 800ce16:	432c      	orrs	r4, r5
 800ce18:	50d4      	str	r4, [r2, r3]
 800ce1a:	e7cd      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800ce1c:	4a8b      	ldr	r2, [pc, #556]	; (800d04c <RemapAndLinkDMAtoUARTRx+0x324>)
 800ce1e:	23a8      	movs	r3, #168	; 0xa8
 800ce20:	58d4      	ldr	r4, [r2, r3]
 800ce22:	25f0      	movs	r5, #240	; 0xf0
 800ce24:	43ac      	bics	r4, r5
 800ce26:	50d4      	str	r4, [r2, r3]
 800ce28:	58d4      	ldr	r4, [r2, r3]
 800ce2a:	3d70      	subs	r5, #112	; 0x70
 800ce2c:	432c      	orrs	r4, r5
 800ce2e:	50d4      	str	r4, [r2, r3]
 800ce30:	e7c2      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800ce32:	4a86      	ldr	r2, [pc, #536]	; (800d04c <RemapAndLinkDMAtoUARTRx+0x324>)
 800ce34:	23a8      	movs	r3, #168	; 0xa8
 800ce36:	58d4      	ldr	r4, [r2, r3]
 800ce38:	4d85      	ldr	r5, [pc, #532]	; (800d050 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ce3a:	402c      	ands	r4, r5
 800ce3c:	50d4      	str	r4, [r2, r3]
 800ce3e:	58d5      	ldr	r5, [r2, r3]
 800ce40:	2480      	movs	r4, #128	; 0x80
 800ce42:	0124      	lsls	r4, r4, #4
 800ce44:	432c      	orrs	r4, r5
 800ce46:	50d4      	str	r4, [r2, r3]
 800ce48:	e7b6      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ce4a:	680b      	ldr	r3, [r1, #0]
 800ce4c:	4a79      	ldr	r2, [pc, #484]	; (800d034 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d01a      	beq.n	800ce88 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800ce52:	4a79      	ldr	r2, [pc, #484]	; (800d038 <RemapAndLinkDMAtoUARTRx+0x310>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d022      	beq.n	800ce9e <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800ce58:	4a78      	ldr	r2, [pc, #480]	; (800d03c <RemapAndLinkDMAtoUARTRx+0x314>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d02b      	beq.n	800ceb6 <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800ce5e:	4a78      	ldr	r2, [pc, #480]	; (800d040 <RemapAndLinkDMAtoUARTRx+0x318>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d034      	beq.n	800cece <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800ce64:	4a77      	ldr	r2, [pc, #476]	; (800d044 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d03d      	beq.n	800cee6 <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800ce6a:	4a77      	ldr	r2, [pc, #476]	; (800d048 <RemapAndLinkDMAtoUARTRx+0x320>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d1a3      	bne.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800ce70:	4a76      	ldr	r2, [pc, #472]	; (800d04c <RemapAndLinkDMAtoUARTRx+0x324>)
 800ce72:	23a8      	movs	r3, #168	; 0xa8
 800ce74:	58d4      	ldr	r4, [r2, r3]
 800ce76:	4d76      	ldr	r5, [pc, #472]	; (800d050 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ce78:	402c      	ands	r4, r5
 800ce7a:	50d4      	str	r4, [r2, r3]
 800ce7c:	58d5      	ldr	r5, [r2, r3]
 800ce7e:	2490      	movs	r4, #144	; 0x90
 800ce80:	0124      	lsls	r4, r4, #4
 800ce82:	432c      	orrs	r4, r5
 800ce84:	50d4      	str	r4, [r2, r3]
 800ce86:	e797      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800ce88:	4a72      	ldr	r2, [pc, #456]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ce8a:	23a8      	movs	r3, #168	; 0xa8
 800ce8c:	58d4      	ldr	r4, [r2, r3]
 800ce8e:	250f      	movs	r5, #15
 800ce90:	43ac      	bics	r4, r5
 800ce92:	50d4      	str	r4, [r2, r3]
 800ce94:	58d4      	ldr	r4, [r2, r3]
 800ce96:	3d06      	subs	r5, #6
 800ce98:	432c      	orrs	r4, r5
 800ce9a:	50d4      	str	r4, [r2, r3]
 800ce9c:	e78c      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800ce9e:	4a6d      	ldr	r2, [pc, #436]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cea0:	23a8      	movs	r3, #168	; 0xa8
 800cea2:	58d4      	ldr	r4, [r2, r3]
 800cea4:	4d6a      	ldr	r5, [pc, #424]	; (800d050 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cea6:	402c      	ands	r4, r5
 800cea8:	50d4      	str	r4, [r2, r3]
 800ceaa:	58d5      	ldr	r5, [r2, r3]
 800ceac:	2490      	movs	r4, #144	; 0x90
 800ceae:	0124      	lsls	r4, r4, #4
 800ceb0:	432c      	orrs	r4, r5
 800ceb2:	50d4      	str	r4, [r2, r3]
 800ceb4:	e780      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800ceb6:	4a67      	ldr	r2, [pc, #412]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ceb8:	23a8      	movs	r3, #168	; 0xa8
 800ceba:	58d4      	ldr	r4, [r2, r3]
 800cebc:	4d66      	ldr	r5, [pc, #408]	; (800d058 <RemapAndLinkDMAtoUARTRx+0x330>)
 800cebe:	402c      	ands	r4, r5
 800cec0:	50d4      	str	r4, [r2, r3]
 800cec2:	58d5      	ldr	r5, [r2, r3]
 800cec4:	2490      	movs	r4, #144	; 0x90
 800cec6:	0324      	lsls	r4, r4, #12
 800cec8:	432c      	orrs	r4, r5
 800ceca:	50d4      	str	r4, [r2, r3]
 800cecc:	e774      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800cece:	4a61      	ldr	r2, [pc, #388]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ced0:	23a8      	movs	r3, #168	; 0xa8
 800ced2:	58d4      	ldr	r4, [r2, r3]
 800ced4:	4d61      	ldr	r5, [pc, #388]	; (800d05c <RemapAndLinkDMAtoUARTRx+0x334>)
 800ced6:	402c      	ands	r4, r5
 800ced8:	50d4      	str	r4, [r2, r3]
 800ceda:	58d5      	ldr	r5, [r2, r3]
 800cedc:	2490      	movs	r4, #144	; 0x90
 800cede:	0424      	lsls	r4, r4, #16
 800cee0:	432c      	orrs	r4, r5
 800cee2:	50d4      	str	r4, [r2, r3]
 800cee4:	e768      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800cee6:	4a59      	ldr	r2, [pc, #356]	; (800d04c <RemapAndLinkDMAtoUARTRx+0x324>)
 800cee8:	23a8      	movs	r3, #168	; 0xa8
 800ceea:	58d4      	ldr	r4, [r2, r3]
 800ceec:	25f0      	movs	r5, #240	; 0xf0
 800ceee:	43ac      	bics	r4, r5
 800cef0:	50d4      	str	r4, [r2, r3]
 800cef2:	58d4      	ldr	r4, [r2, r3]
 800cef4:	3d60      	subs	r5, #96	; 0x60
 800cef6:	432c      	orrs	r4, r5
 800cef8:	50d4      	str	r4, [r2, r3]
 800cefa:	e75d      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800cefc:	680b      	ldr	r3, [r1, #0]
 800cefe:	4a4d      	ldr	r2, [pc, #308]	; (800d034 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d01b      	beq.n	800cf3c <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800cf04:	4a4c      	ldr	r2, [pc, #304]	; (800d038 <RemapAndLinkDMAtoUARTRx+0x310>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d023      	beq.n	800cf52 <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800cf0a:	4a4c      	ldr	r2, [pc, #304]	; (800d03c <RemapAndLinkDMAtoUARTRx+0x314>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d02c      	beq.n	800cf6a <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800cf10:	4a4b      	ldr	r2, [pc, #300]	; (800d040 <RemapAndLinkDMAtoUARTRx+0x318>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d035      	beq.n	800cf82 <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800cf16:	4a4b      	ldr	r2, [pc, #300]	; (800d044 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d03e      	beq.n	800cf9a <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800cf1c:	4a4a      	ldr	r2, [pc, #296]	; (800d048 <RemapAndLinkDMAtoUARTRx+0x320>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d000      	beq.n	800cf24 <RemapAndLinkDMAtoUARTRx+0x1fc>
 800cf22:	e749      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800cf24:	4a49      	ldr	r2, [pc, #292]	; (800d04c <RemapAndLinkDMAtoUARTRx+0x324>)
 800cf26:	23a8      	movs	r3, #168	; 0xa8
 800cf28:	58d4      	ldr	r4, [r2, r3]
 800cf2a:	4d49      	ldr	r5, [pc, #292]	; (800d050 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cf2c:	402c      	ands	r4, r5
 800cf2e:	50d4      	str	r4, [r2, r3]
 800cf30:	58d5      	ldr	r5, [r2, r3]
 800cf32:	24a0      	movs	r4, #160	; 0xa0
 800cf34:	0124      	lsls	r4, r4, #4
 800cf36:	432c      	orrs	r4, r5
 800cf38:	50d4      	str	r4, [r2, r3]
 800cf3a:	e73d      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800cf3c:	4a45      	ldr	r2, [pc, #276]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf3e:	23a8      	movs	r3, #168	; 0xa8
 800cf40:	58d4      	ldr	r4, [r2, r3]
 800cf42:	250f      	movs	r5, #15
 800cf44:	43ac      	bics	r4, r5
 800cf46:	50d4      	str	r4, [r2, r3]
 800cf48:	58d4      	ldr	r4, [r2, r3]
 800cf4a:	3d05      	subs	r5, #5
 800cf4c:	432c      	orrs	r4, r5
 800cf4e:	50d4      	str	r4, [r2, r3]
 800cf50:	e732      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800cf52:	4a40      	ldr	r2, [pc, #256]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf54:	23a8      	movs	r3, #168	; 0xa8
 800cf56:	58d4      	ldr	r4, [r2, r3]
 800cf58:	4d3d      	ldr	r5, [pc, #244]	; (800d050 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cf5a:	402c      	ands	r4, r5
 800cf5c:	50d4      	str	r4, [r2, r3]
 800cf5e:	58d5      	ldr	r5, [r2, r3]
 800cf60:	24a0      	movs	r4, #160	; 0xa0
 800cf62:	0124      	lsls	r4, r4, #4
 800cf64:	432c      	orrs	r4, r5
 800cf66:	50d4      	str	r4, [r2, r3]
 800cf68:	e726      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800cf6a:	4a3a      	ldr	r2, [pc, #232]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf6c:	23a8      	movs	r3, #168	; 0xa8
 800cf6e:	58d4      	ldr	r4, [r2, r3]
 800cf70:	4d39      	ldr	r5, [pc, #228]	; (800d058 <RemapAndLinkDMAtoUARTRx+0x330>)
 800cf72:	402c      	ands	r4, r5
 800cf74:	50d4      	str	r4, [r2, r3]
 800cf76:	58d5      	ldr	r5, [r2, r3]
 800cf78:	24a0      	movs	r4, #160	; 0xa0
 800cf7a:	0324      	lsls	r4, r4, #12
 800cf7c:	432c      	orrs	r4, r5
 800cf7e:	50d4      	str	r4, [r2, r3]
 800cf80:	e71a      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800cf82:	4a34      	ldr	r2, [pc, #208]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf84:	23a8      	movs	r3, #168	; 0xa8
 800cf86:	58d4      	ldr	r4, [r2, r3]
 800cf88:	4d34      	ldr	r5, [pc, #208]	; (800d05c <RemapAndLinkDMAtoUARTRx+0x334>)
 800cf8a:	402c      	ands	r4, r5
 800cf8c:	50d4      	str	r4, [r2, r3]
 800cf8e:	58d5      	ldr	r5, [r2, r3]
 800cf90:	24a0      	movs	r4, #160	; 0xa0
 800cf92:	0424      	lsls	r4, r4, #16
 800cf94:	432c      	orrs	r4, r5
 800cf96:	50d4      	str	r4, [r2, r3]
 800cf98:	e70e      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800cf9a:	4a2c      	ldr	r2, [pc, #176]	; (800d04c <RemapAndLinkDMAtoUARTRx+0x324>)
 800cf9c:	23a8      	movs	r3, #168	; 0xa8
 800cf9e:	58d4      	ldr	r4, [r2, r3]
 800cfa0:	25f0      	movs	r5, #240	; 0xf0
 800cfa2:	43ac      	bics	r4, r5
 800cfa4:	50d4      	str	r4, [r2, r3]
 800cfa6:	58d4      	ldr	r4, [r2, r3]
 800cfa8:	3d50      	subs	r5, #80	; 0x50
 800cfaa:	432c      	orrs	r4, r5
 800cfac:	50d4      	str	r4, [r2, r3]
 800cfae:	e703      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800cfb0:	4a28      	ldr	r2, [pc, #160]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cfb2:	23a8      	movs	r3, #168	; 0xa8
 800cfb4:	58d4      	ldr	r4, [r2, r3]
 800cfb6:	250f      	movs	r5, #15
 800cfb8:	43ac      	bics	r4, r5
 800cfba:	50d4      	str	r4, [r2, r3]
 800cfbc:	58d4      	ldr	r4, [r2, r3]
 800cfbe:	3d04      	subs	r5, #4
 800cfc0:	432c      	orrs	r4, r5
 800cfc2:	50d4      	str	r4, [r2, r3]
 800cfc4:	e6f8      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800cfc6:	4a23      	ldr	r2, [pc, #140]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cfc8:	23a8      	movs	r3, #168	; 0xa8
 800cfca:	58d4      	ldr	r4, [r2, r3]
 800cfcc:	4d20      	ldr	r5, [pc, #128]	; (800d050 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cfce:	402c      	ands	r4, r5
 800cfd0:	50d4      	str	r4, [r2, r3]
 800cfd2:	58d5      	ldr	r5, [r2, r3]
 800cfd4:	24b0      	movs	r4, #176	; 0xb0
 800cfd6:	0124      	lsls	r4, r4, #4
 800cfd8:	432c      	orrs	r4, r5
 800cfda:	50d4      	str	r4, [r2, r3]
 800cfdc:	e6ec      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800cfde:	4a1d      	ldr	r2, [pc, #116]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cfe0:	23a8      	movs	r3, #168	; 0xa8
 800cfe2:	58d4      	ldr	r4, [r2, r3]
 800cfe4:	4d1c      	ldr	r5, [pc, #112]	; (800d058 <RemapAndLinkDMAtoUARTRx+0x330>)
 800cfe6:	402c      	ands	r4, r5
 800cfe8:	50d4      	str	r4, [r2, r3]
 800cfea:	58d5      	ldr	r5, [r2, r3]
 800cfec:	24b0      	movs	r4, #176	; 0xb0
 800cfee:	0324      	lsls	r4, r4, #12
 800cff0:	432c      	orrs	r4, r5
 800cff2:	50d4      	str	r4, [r2, r3]
 800cff4:	e6e0      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800cff6:	4a17      	ldr	r2, [pc, #92]	; (800d054 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cff8:	23a8      	movs	r3, #168	; 0xa8
 800cffa:	58d4      	ldr	r4, [r2, r3]
 800cffc:	4d17      	ldr	r5, [pc, #92]	; (800d05c <RemapAndLinkDMAtoUARTRx+0x334>)
 800cffe:	402c      	ands	r4, r5
 800d000:	50d4      	str	r4, [r2, r3]
 800d002:	58d5      	ldr	r5, [r2, r3]
 800d004:	24b0      	movs	r4, #176	; 0xb0
 800d006:	0424      	lsls	r4, r4, #16
 800d008:	432c      	orrs	r4, r5
 800d00a:	50d4      	str	r4, [r2, r3]
 800d00c:	e6d4      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800d00e:	4a0f      	ldr	r2, [pc, #60]	; (800d04c <RemapAndLinkDMAtoUARTRx+0x324>)
 800d010:	23a8      	movs	r3, #168	; 0xa8
 800d012:	58d4      	ldr	r4, [r2, r3]
 800d014:	25f0      	movs	r5, #240	; 0xf0
 800d016:	43ac      	bics	r4, r5
 800d018:	50d4      	str	r4, [r2, r3]
 800d01a:	58d4      	ldr	r4, [r2, r3]
 800d01c:	3d40      	subs	r5, #64	; 0x40
 800d01e:	432c      	orrs	r4, r5
 800d020:	50d4      	str	r4, [r2, r3]
 800d022:	e6c9      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
 800d024:	40013800 	.word	0x40013800
 800d028:	40004400 	.word	0x40004400
 800d02c:	40004800 	.word	0x40004800
 800d030:	40004c00 	.word	0x40004c00
 800d034:	40020008 	.word	0x40020008
 800d038:	40020030 	.word	0x40020030
 800d03c:	40020058 	.word	0x40020058
 800d040:	4002006c 	.word	0x4002006c
 800d044:	4002041c 	.word	0x4002041c
 800d048:	40020430 	.word	0x40020430
 800d04c:	40020400 	.word	0x40020400
 800d050:	fffff0ff 	.word	0xfffff0ff
 800d054:	40020000 	.word	0x40020000
 800d058:	fff0ffff 	.word	0xfff0ffff
 800d05c:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800d060:	4ab9      	ldr	r2, [pc, #740]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x620>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d159      	bne.n	800d11a <RemapAndLinkDMAtoUARTRx+0x3f2>
 800d066:	680b      	ldr	r3, [r1, #0]
 800d068:	4ab8      	ldr	r2, [pc, #736]	; (800d34c <RemapAndLinkDMAtoUARTRx+0x624>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d01b      	beq.n	800d0a6 <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800d06e:	4ab8      	ldr	r2, [pc, #736]	; (800d350 <RemapAndLinkDMAtoUARTRx+0x628>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d023      	beq.n	800d0bc <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800d074:	4ab7      	ldr	r2, [pc, #732]	; (800d354 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d02c      	beq.n	800d0d4 <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800d07a:	4ab7      	ldr	r2, [pc, #732]	; (800d358 <RemapAndLinkDMAtoUARTRx+0x630>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d035      	beq.n	800d0ec <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800d080:	4ab6      	ldr	r2, [pc, #728]	; (800d35c <RemapAndLinkDMAtoUARTRx+0x634>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d03e      	beq.n	800d104 <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800d086:	4ab6      	ldr	r2, [pc, #728]	; (800d360 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d000      	beq.n	800d08e <RemapAndLinkDMAtoUARTRx+0x366>
 800d08c:	e694      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800d08e:	4ab5      	ldr	r2, [pc, #724]	; (800d364 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d090:	23a8      	movs	r3, #168	; 0xa8
 800d092:	58d4      	ldr	r4, [r2, r3]
 800d094:	4db4      	ldr	r5, [pc, #720]	; (800d368 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d096:	402c      	ands	r4, r5
 800d098:	50d4      	str	r4, [r2, r3]
 800d09a:	58d5      	ldr	r5, [r2, r3]
 800d09c:	24c0      	movs	r4, #192	; 0xc0
 800d09e:	0124      	lsls	r4, r4, #4
 800d0a0:	432c      	orrs	r4, r5
 800d0a2:	50d4      	str	r4, [r2, r3]
 800d0a4:	e688      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800d0a6:	4ab1      	ldr	r2, [pc, #708]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d0a8:	23a8      	movs	r3, #168	; 0xa8
 800d0aa:	58d4      	ldr	r4, [r2, r3]
 800d0ac:	250f      	movs	r5, #15
 800d0ae:	43ac      	bics	r4, r5
 800d0b0:	50d4      	str	r4, [r2, r3]
 800d0b2:	58d4      	ldr	r4, [r2, r3]
 800d0b4:	3d03      	subs	r5, #3
 800d0b6:	432c      	orrs	r4, r5
 800d0b8:	50d4      	str	r4, [r2, r3]
 800d0ba:	e67d      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800d0bc:	4aab      	ldr	r2, [pc, #684]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d0be:	23a8      	movs	r3, #168	; 0xa8
 800d0c0:	58d4      	ldr	r4, [r2, r3]
 800d0c2:	4da9      	ldr	r5, [pc, #676]	; (800d368 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d0c4:	402c      	ands	r4, r5
 800d0c6:	50d4      	str	r4, [r2, r3]
 800d0c8:	58d5      	ldr	r5, [r2, r3]
 800d0ca:	24c0      	movs	r4, #192	; 0xc0
 800d0cc:	0124      	lsls	r4, r4, #4
 800d0ce:	432c      	orrs	r4, r5
 800d0d0:	50d4      	str	r4, [r2, r3]
 800d0d2:	e671      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800d0d4:	4aa5      	ldr	r2, [pc, #660]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d0d6:	23a8      	movs	r3, #168	; 0xa8
 800d0d8:	58d4      	ldr	r4, [r2, r3]
 800d0da:	4da5      	ldr	r5, [pc, #660]	; (800d370 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d0dc:	402c      	ands	r4, r5
 800d0de:	50d4      	str	r4, [r2, r3]
 800d0e0:	58d5      	ldr	r5, [r2, r3]
 800d0e2:	24c0      	movs	r4, #192	; 0xc0
 800d0e4:	0324      	lsls	r4, r4, #12
 800d0e6:	432c      	orrs	r4, r5
 800d0e8:	50d4      	str	r4, [r2, r3]
 800d0ea:	e665      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800d0ec:	4a9f      	ldr	r2, [pc, #636]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d0ee:	23a8      	movs	r3, #168	; 0xa8
 800d0f0:	58d4      	ldr	r4, [r2, r3]
 800d0f2:	4da0      	ldr	r5, [pc, #640]	; (800d374 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d0f4:	402c      	ands	r4, r5
 800d0f6:	50d4      	str	r4, [r2, r3]
 800d0f8:	58d5      	ldr	r5, [r2, r3]
 800d0fa:	24c0      	movs	r4, #192	; 0xc0
 800d0fc:	0424      	lsls	r4, r4, #16
 800d0fe:	432c      	orrs	r4, r5
 800d100:	50d4      	str	r4, [r2, r3]
 800d102:	e659      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800d104:	4a97      	ldr	r2, [pc, #604]	; (800d364 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d106:	23a8      	movs	r3, #168	; 0xa8
 800d108:	58d4      	ldr	r4, [r2, r3]
 800d10a:	25f0      	movs	r5, #240	; 0xf0
 800d10c:	43ac      	bics	r4, r5
 800d10e:	50d4      	str	r4, [r2, r3]
 800d110:	58d4      	ldr	r4, [r2, r3]
 800d112:	3d30      	subs	r5, #48	; 0x30
 800d114:	432c      	orrs	r4, r5
 800d116:	50d4      	str	r4, [r2, r3]
 800d118:	e64e      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800d11a:	4a97      	ldr	r2, [pc, #604]	; (800d378 <RemapAndLinkDMAtoUARTRx+0x650>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d159      	bne.n	800d1d4 <RemapAndLinkDMAtoUARTRx+0x4ac>
 800d120:	680b      	ldr	r3, [r1, #0]
 800d122:	4a8a      	ldr	r2, [pc, #552]	; (800d34c <RemapAndLinkDMAtoUARTRx+0x624>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d01b      	beq.n	800d160 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800d128:	4a89      	ldr	r2, [pc, #548]	; (800d350 <RemapAndLinkDMAtoUARTRx+0x628>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d023      	beq.n	800d176 <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800d12e:	4a89      	ldr	r2, [pc, #548]	; (800d354 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d02c      	beq.n	800d18e <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800d134:	4a88      	ldr	r2, [pc, #544]	; (800d358 <RemapAndLinkDMAtoUARTRx+0x630>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d035      	beq.n	800d1a6 <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800d13a:	4a88      	ldr	r2, [pc, #544]	; (800d35c <RemapAndLinkDMAtoUARTRx+0x634>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d03e      	beq.n	800d1be <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800d140:	4a87      	ldr	r2, [pc, #540]	; (800d360 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d000      	beq.n	800d148 <RemapAndLinkDMAtoUARTRx+0x420>
 800d146:	e637      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800d148:	4a86      	ldr	r2, [pc, #536]	; (800d364 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d14a:	23a8      	movs	r3, #168	; 0xa8
 800d14c:	58d4      	ldr	r4, [r2, r3]
 800d14e:	4d86      	ldr	r5, [pc, #536]	; (800d368 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d150:	402c      	ands	r4, r5
 800d152:	50d4      	str	r4, [r2, r3]
 800d154:	58d5      	ldr	r5, [r2, r3]
 800d156:	24d0      	movs	r4, #208	; 0xd0
 800d158:	0124      	lsls	r4, r4, #4
 800d15a:	432c      	orrs	r4, r5
 800d15c:	50d4      	str	r4, [r2, r3]
 800d15e:	e62b      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800d160:	4a82      	ldr	r2, [pc, #520]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d162:	23a8      	movs	r3, #168	; 0xa8
 800d164:	58d4      	ldr	r4, [r2, r3]
 800d166:	250f      	movs	r5, #15
 800d168:	43ac      	bics	r4, r5
 800d16a:	50d4      	str	r4, [r2, r3]
 800d16c:	58d4      	ldr	r4, [r2, r3]
 800d16e:	3d02      	subs	r5, #2
 800d170:	432c      	orrs	r4, r5
 800d172:	50d4      	str	r4, [r2, r3]
 800d174:	e620      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800d176:	4a7d      	ldr	r2, [pc, #500]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d178:	23a8      	movs	r3, #168	; 0xa8
 800d17a:	58d4      	ldr	r4, [r2, r3]
 800d17c:	4d7a      	ldr	r5, [pc, #488]	; (800d368 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d17e:	402c      	ands	r4, r5
 800d180:	50d4      	str	r4, [r2, r3]
 800d182:	58d5      	ldr	r5, [r2, r3]
 800d184:	24d0      	movs	r4, #208	; 0xd0
 800d186:	0124      	lsls	r4, r4, #4
 800d188:	432c      	orrs	r4, r5
 800d18a:	50d4      	str	r4, [r2, r3]
 800d18c:	e614      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800d18e:	4a77      	ldr	r2, [pc, #476]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d190:	23a8      	movs	r3, #168	; 0xa8
 800d192:	58d4      	ldr	r4, [r2, r3]
 800d194:	4d76      	ldr	r5, [pc, #472]	; (800d370 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d196:	402c      	ands	r4, r5
 800d198:	50d4      	str	r4, [r2, r3]
 800d19a:	58d5      	ldr	r5, [r2, r3]
 800d19c:	24d0      	movs	r4, #208	; 0xd0
 800d19e:	0324      	lsls	r4, r4, #12
 800d1a0:	432c      	orrs	r4, r5
 800d1a2:	50d4      	str	r4, [r2, r3]
 800d1a4:	e608      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800d1a6:	4a71      	ldr	r2, [pc, #452]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d1a8:	23a8      	movs	r3, #168	; 0xa8
 800d1aa:	58d4      	ldr	r4, [r2, r3]
 800d1ac:	4d71      	ldr	r5, [pc, #452]	; (800d374 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d1ae:	402c      	ands	r4, r5
 800d1b0:	50d4      	str	r4, [r2, r3]
 800d1b2:	58d5      	ldr	r5, [r2, r3]
 800d1b4:	24d0      	movs	r4, #208	; 0xd0
 800d1b6:	0424      	lsls	r4, r4, #16
 800d1b8:	432c      	orrs	r4, r5
 800d1ba:	50d4      	str	r4, [r2, r3]
 800d1bc:	e5fc      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800d1be:	4a69      	ldr	r2, [pc, #420]	; (800d364 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d1c0:	23a8      	movs	r3, #168	; 0xa8
 800d1c2:	58d4      	ldr	r4, [r2, r3]
 800d1c4:	25f0      	movs	r5, #240	; 0xf0
 800d1c6:	43ac      	bics	r4, r5
 800d1c8:	50d4      	str	r4, [r2, r3]
 800d1ca:	58d4      	ldr	r4, [r2, r3]
 800d1cc:	3d20      	subs	r5, #32
 800d1ce:	432c      	orrs	r4, r5
 800d1d0:	50d4      	str	r4, [r2, r3]
 800d1d2:	e5f1      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800d1d4:	4a69      	ldr	r2, [pc, #420]	; (800d37c <RemapAndLinkDMAtoUARTRx+0x654>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d159      	bne.n	800d28e <RemapAndLinkDMAtoUARTRx+0x566>
 800d1da:	680b      	ldr	r3, [r1, #0]
 800d1dc:	4a5b      	ldr	r2, [pc, #364]	; (800d34c <RemapAndLinkDMAtoUARTRx+0x624>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d01b      	beq.n	800d21a <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800d1e2:	4a5b      	ldr	r2, [pc, #364]	; (800d350 <RemapAndLinkDMAtoUARTRx+0x628>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d023      	beq.n	800d230 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800d1e8:	4a5a      	ldr	r2, [pc, #360]	; (800d354 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d02c      	beq.n	800d248 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800d1ee:	4a5a      	ldr	r2, [pc, #360]	; (800d358 <RemapAndLinkDMAtoUARTRx+0x630>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d035      	beq.n	800d260 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800d1f4:	4a59      	ldr	r2, [pc, #356]	; (800d35c <RemapAndLinkDMAtoUARTRx+0x634>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d03e      	beq.n	800d278 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800d1fa:	4a59      	ldr	r2, [pc, #356]	; (800d360 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d000      	beq.n	800d202 <RemapAndLinkDMAtoUARTRx+0x4da>
 800d200:	e5da      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800d202:	4a58      	ldr	r2, [pc, #352]	; (800d364 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d204:	23a8      	movs	r3, #168	; 0xa8
 800d206:	58d4      	ldr	r4, [r2, r3]
 800d208:	4d57      	ldr	r5, [pc, #348]	; (800d368 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d20a:	402c      	ands	r4, r5
 800d20c:	50d4      	str	r4, [r2, r3]
 800d20e:	58d5      	ldr	r5, [r2, r3]
 800d210:	24e0      	movs	r4, #224	; 0xe0
 800d212:	0124      	lsls	r4, r4, #4
 800d214:	432c      	orrs	r4, r5
 800d216:	50d4      	str	r4, [r2, r3]
 800d218:	e5ce      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800d21a:	4a54      	ldr	r2, [pc, #336]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d21c:	23a8      	movs	r3, #168	; 0xa8
 800d21e:	58d4      	ldr	r4, [r2, r3]
 800d220:	250f      	movs	r5, #15
 800d222:	43ac      	bics	r4, r5
 800d224:	50d4      	str	r4, [r2, r3]
 800d226:	58d4      	ldr	r4, [r2, r3]
 800d228:	3d01      	subs	r5, #1
 800d22a:	432c      	orrs	r4, r5
 800d22c:	50d4      	str	r4, [r2, r3]
 800d22e:	e5c3      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800d230:	4a4e      	ldr	r2, [pc, #312]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d232:	23a8      	movs	r3, #168	; 0xa8
 800d234:	58d4      	ldr	r4, [r2, r3]
 800d236:	4d4c      	ldr	r5, [pc, #304]	; (800d368 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d238:	402c      	ands	r4, r5
 800d23a:	50d4      	str	r4, [r2, r3]
 800d23c:	58d5      	ldr	r5, [r2, r3]
 800d23e:	24e0      	movs	r4, #224	; 0xe0
 800d240:	0124      	lsls	r4, r4, #4
 800d242:	432c      	orrs	r4, r5
 800d244:	50d4      	str	r4, [r2, r3]
 800d246:	e5b7      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800d248:	4a48      	ldr	r2, [pc, #288]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d24a:	23a8      	movs	r3, #168	; 0xa8
 800d24c:	58d4      	ldr	r4, [r2, r3]
 800d24e:	4d48      	ldr	r5, [pc, #288]	; (800d370 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d250:	402c      	ands	r4, r5
 800d252:	50d4      	str	r4, [r2, r3]
 800d254:	58d5      	ldr	r5, [r2, r3]
 800d256:	24e0      	movs	r4, #224	; 0xe0
 800d258:	0324      	lsls	r4, r4, #12
 800d25a:	432c      	orrs	r4, r5
 800d25c:	50d4      	str	r4, [r2, r3]
 800d25e:	e5ab      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800d260:	4a42      	ldr	r2, [pc, #264]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d262:	23a8      	movs	r3, #168	; 0xa8
 800d264:	58d4      	ldr	r4, [r2, r3]
 800d266:	4d43      	ldr	r5, [pc, #268]	; (800d374 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d268:	402c      	ands	r4, r5
 800d26a:	50d4      	str	r4, [r2, r3]
 800d26c:	58d5      	ldr	r5, [r2, r3]
 800d26e:	24e0      	movs	r4, #224	; 0xe0
 800d270:	0424      	lsls	r4, r4, #16
 800d272:	432c      	orrs	r4, r5
 800d274:	50d4      	str	r4, [r2, r3]
 800d276:	e59f      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800d278:	4a3a      	ldr	r2, [pc, #232]	; (800d364 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d27a:	23a8      	movs	r3, #168	; 0xa8
 800d27c:	58d4      	ldr	r4, [r2, r3]
 800d27e:	25f0      	movs	r5, #240	; 0xf0
 800d280:	43ac      	bics	r4, r5
 800d282:	50d4      	str	r4, [r2, r3]
 800d284:	58d4      	ldr	r4, [r2, r3]
 800d286:	3d10      	subs	r5, #16
 800d288:	432c      	orrs	r4, r5
 800d28a:	50d4      	str	r4, [r2, r3]
 800d28c:	e594      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800d28e:	4a3c      	ldr	r2, [pc, #240]	; (800d380 <RemapAndLinkDMAtoUARTRx+0x658>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d000      	beq.n	800d296 <RemapAndLinkDMAtoUARTRx+0x56e>
 800d294:	e590      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
 800d296:	680b      	ldr	r3, [r1, #0]
 800d298:	4a2c      	ldr	r2, [pc, #176]	; (800d34c <RemapAndLinkDMAtoUARTRx+0x624>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d01b      	beq.n	800d2d6 <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800d29e:	4a2c      	ldr	r2, [pc, #176]	; (800d350 <RemapAndLinkDMAtoUARTRx+0x628>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d022      	beq.n	800d2ea <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800d2a4:	4a2b      	ldr	r2, [pc, #172]	; (800d354 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d02b      	beq.n	800d302 <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800d2aa:	4a2b      	ldr	r2, [pc, #172]	; (800d358 <RemapAndLinkDMAtoUARTRx+0x630>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d034      	beq.n	800d31a <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800d2b0:	4a2a      	ldr	r2, [pc, #168]	; (800d35c <RemapAndLinkDMAtoUARTRx+0x634>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d03d      	beq.n	800d332 <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800d2b6:	4a2a      	ldr	r2, [pc, #168]	; (800d360 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d000      	beq.n	800d2be <RemapAndLinkDMAtoUARTRx+0x596>
 800d2bc:	e57c      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800d2be:	4a29      	ldr	r2, [pc, #164]	; (800d364 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d2c0:	23a8      	movs	r3, #168	; 0xa8
 800d2c2:	58d4      	ldr	r4, [r2, r3]
 800d2c4:	4d28      	ldr	r5, [pc, #160]	; (800d368 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d2c6:	402c      	ands	r4, r5
 800d2c8:	50d4      	str	r4, [r2, r3]
 800d2ca:	58d5      	ldr	r5, [r2, r3]
 800d2cc:	24f0      	movs	r4, #240	; 0xf0
 800d2ce:	0124      	lsls	r4, r4, #4
 800d2d0:	432c      	orrs	r4, r5
 800d2d2:	50d4      	str	r4, [r2, r3]
 800d2d4:	e570      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800d2d6:	4a25      	ldr	r2, [pc, #148]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d2d8:	23a8      	movs	r3, #168	; 0xa8
 800d2da:	58d5      	ldr	r5, [r2, r3]
 800d2dc:	260f      	movs	r6, #15
 800d2de:	43b5      	bics	r5, r6
 800d2e0:	50d5      	str	r5, [r2, r3]
 800d2e2:	58d4      	ldr	r4, [r2, r3]
 800d2e4:	4334      	orrs	r4, r6
 800d2e6:	50d4      	str	r4, [r2, r3]
 800d2e8:	e566      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800d2ea:	4a20      	ldr	r2, [pc, #128]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d2ec:	23a8      	movs	r3, #168	; 0xa8
 800d2ee:	58d4      	ldr	r4, [r2, r3]
 800d2f0:	4d1d      	ldr	r5, [pc, #116]	; (800d368 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d2f2:	402c      	ands	r4, r5
 800d2f4:	50d4      	str	r4, [r2, r3]
 800d2f6:	58d5      	ldr	r5, [r2, r3]
 800d2f8:	24f0      	movs	r4, #240	; 0xf0
 800d2fa:	0124      	lsls	r4, r4, #4
 800d2fc:	432c      	orrs	r4, r5
 800d2fe:	50d4      	str	r4, [r2, r3]
 800d300:	e55a      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800d302:	4a1a      	ldr	r2, [pc, #104]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d304:	23a8      	movs	r3, #168	; 0xa8
 800d306:	58d4      	ldr	r4, [r2, r3]
 800d308:	4d19      	ldr	r5, [pc, #100]	; (800d370 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d30a:	402c      	ands	r4, r5
 800d30c:	50d4      	str	r4, [r2, r3]
 800d30e:	58d5      	ldr	r5, [r2, r3]
 800d310:	24f0      	movs	r4, #240	; 0xf0
 800d312:	0324      	lsls	r4, r4, #12
 800d314:	432c      	orrs	r4, r5
 800d316:	50d4      	str	r4, [r2, r3]
 800d318:	e54e      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800d31a:	4a14      	ldr	r2, [pc, #80]	; (800d36c <RemapAndLinkDMAtoUARTRx+0x644>)
 800d31c:	23a8      	movs	r3, #168	; 0xa8
 800d31e:	58d4      	ldr	r4, [r2, r3]
 800d320:	4d14      	ldr	r5, [pc, #80]	; (800d374 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d322:	402c      	ands	r4, r5
 800d324:	50d4      	str	r4, [r2, r3]
 800d326:	58d5      	ldr	r5, [r2, r3]
 800d328:	24f0      	movs	r4, #240	; 0xf0
 800d32a:	0424      	lsls	r4, r4, #16
 800d32c:	432c      	orrs	r4, r5
 800d32e:	50d4      	str	r4, [r2, r3]
 800d330:	e542      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800d332:	4a0c      	ldr	r2, [pc, #48]	; (800d364 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d334:	23a8      	movs	r3, #168	; 0xa8
 800d336:	58d5      	ldr	r5, [r2, r3]
 800d338:	26f0      	movs	r6, #240	; 0xf0
 800d33a:	43b5      	bics	r5, r6
 800d33c:	50d5      	str	r5, [r2, r3]
 800d33e:	58d4      	ldr	r4, [r2, r3]
 800d340:	4334      	orrs	r4, r6
 800d342:	50d4      	str	r4, [r2, r3]
 800d344:	e538      	b.n	800cdb8 <RemapAndLinkDMAtoUARTRx+0x90>
 800d346:	46c0      	nop			; (mov r8, r8)
 800d348:	40005000 	.word	0x40005000
 800d34c:	40020008 	.word	0x40020008
 800d350:	40020030 	.word	0x40020030
 800d354:	40020058 	.word	0x40020058
 800d358:	4002006c 	.word	0x4002006c
 800d35c:	4002041c 	.word	0x4002041c
 800d360:	40020430 	.word	0x40020430
 800d364:	40020400 	.word	0x40020400
 800d368:	fffff0ff 	.word	0xfffff0ff
 800d36c:	40020000 	.word	0x40020000
 800d370:	fff0ffff 	.word	0xfff0ffff
 800d374:	ff0fffff 	.word	0xff0fffff
 800d378:	40011400 	.word	0x40011400
 800d37c:	40011800 	.word	0x40011800
 800d380:	40011c00 	.word	0x40011c00

0800d384 <DMA_MSG_RX_Setup>:
{	
 800d384:	b570      	push	{r4, r5, r6, lr}
 800d386:	0004      	movs	r4, r0
 800d388:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800d38a:	f7ff fccd 	bl	800cd28 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d38e:	2100      	movs	r1, #0
 800d390:	0028      	movs	r0, r5
 800d392:	f7ff fc13 	bl	800cbbc <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800d396:	0020      	movs	r0, r4
 800d398:	f7fe fa16 	bl	800b7c8 <GetPort>
 800d39c:	1e41      	subs	r1, r0, #1
 800d39e:	0189      	lsls	r1, r1, #6
 800d3a0:	4803      	ldr	r0, [pc, #12]	; (800d3b0 <DMA_MSG_RX_Setup+0x2c>)
 800d3a2:	1809      	adds	r1, r1, r0
 800d3a4:	2240      	movs	r2, #64	; 0x40
 800d3a6:	0020      	movs	r0, r4
 800d3a8:	f004 f956 	bl	8011658 <HAL_UART_Receive_DMA>
}
 800d3ac:	bd70      	pop	{r4, r5, r6, pc}
 800d3ae:	46c0      	nop			; (mov r8, r8)
 800d3b0:	20000e14 	.word	0x20000e14

0800d3b4 <SetupMessagingRxDMAs>:
{	
 800d3b4:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800d3b6:	4b1b      	ldr	r3, [pc, #108]	; (800d424 <SetupMessagingRxDMAs+0x70>)
 800d3b8:	785b      	ldrb	r3, [r3, #1]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d014      	beq.n	800d3e8 <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800d3be:	4b19      	ldr	r3, [pc, #100]	; (800d424 <SetupMessagingRxDMAs+0x70>)
 800d3c0:	789b      	ldrb	r3, [r3, #2]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d015      	beq.n	800d3f2 <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800d3c6:	4b17      	ldr	r3, [pc, #92]	; (800d424 <SetupMessagingRxDMAs+0x70>)
 800d3c8:	78db      	ldrb	r3, [r3, #3]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d016      	beq.n	800d3fc <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800d3ce:	4b15      	ldr	r3, [pc, #84]	; (800d424 <SetupMessagingRxDMAs+0x70>)
 800d3d0:	791b      	ldrb	r3, [r3, #4]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d017      	beq.n	800d406 <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800d3d6:	4b13      	ldr	r3, [pc, #76]	; (800d424 <SetupMessagingRxDMAs+0x70>)
 800d3d8:	795b      	ldrb	r3, [r3, #5]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d018      	beq.n	800d410 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800d3de:	4b11      	ldr	r3, [pc, #68]	; (800d424 <SetupMessagingRxDMAs+0x70>)
 800d3e0:	799b      	ldrb	r3, [r3, #6]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d019      	beq.n	800d41a <SetupMessagingRxDMAs+0x66>
}
 800d3e6:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800d3e8:	490f      	ldr	r1, [pc, #60]	; (800d428 <SetupMessagingRxDMAs+0x74>)
 800d3ea:	4810      	ldr	r0, [pc, #64]	; (800d42c <SetupMessagingRxDMAs+0x78>)
 800d3ec:	f7ff ffca 	bl	800d384 <DMA_MSG_RX_Setup>
 800d3f0:	e7e5      	b.n	800d3be <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800d3f2:	490f      	ldr	r1, [pc, #60]	; (800d430 <SetupMessagingRxDMAs+0x7c>)
 800d3f4:	480f      	ldr	r0, [pc, #60]	; (800d434 <SetupMessagingRxDMAs+0x80>)
 800d3f6:	f7ff ffc5 	bl	800d384 <DMA_MSG_RX_Setup>
 800d3fa:	e7e4      	b.n	800d3c6 <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800d3fc:	490e      	ldr	r1, [pc, #56]	; (800d438 <SetupMessagingRxDMAs+0x84>)
 800d3fe:	480f      	ldr	r0, [pc, #60]	; (800d43c <SetupMessagingRxDMAs+0x88>)
 800d400:	f7ff ffc0 	bl	800d384 <DMA_MSG_RX_Setup>
 800d404:	e7e3      	b.n	800d3ce <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800d406:	490e      	ldr	r1, [pc, #56]	; (800d440 <SetupMessagingRxDMAs+0x8c>)
 800d408:	480e      	ldr	r0, [pc, #56]	; (800d444 <SetupMessagingRxDMAs+0x90>)
 800d40a:	f7ff ffbb 	bl	800d384 <DMA_MSG_RX_Setup>
 800d40e:	e7e2      	b.n	800d3d6 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800d410:	490d      	ldr	r1, [pc, #52]	; (800d448 <SetupMessagingRxDMAs+0x94>)
 800d412:	480e      	ldr	r0, [pc, #56]	; (800d44c <SetupMessagingRxDMAs+0x98>)
 800d414:	f7ff ffb6 	bl	800d384 <DMA_MSG_RX_Setup>
 800d418:	e7e1      	b.n	800d3de <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800d41a:	490d      	ldr	r1, [pc, #52]	; (800d450 <SetupMessagingRxDMAs+0x9c>)
 800d41c:	480d      	ldr	r0, [pc, #52]	; (800d454 <SetupMessagingRxDMAs+0xa0>)
 800d41e:	f7ff ffb1 	bl	800d384 <DMA_MSG_RX_Setup>
}
 800d422:	e7e0      	b.n	800d3e6 <SetupMessagingRxDMAs+0x32>
 800d424:	20000c40 	.word	0x20000c40
 800d428:	2000108c 	.word	0x2000108c
 800d42c:	20006474 	.word	0x20006474
 800d430:	200010c4 	.word	0x200010c4
 800d434:	200064e4 	.word	0x200064e4
 800d438:	200010fc 	.word	0x200010fc
 800d43c:	20006404 	.word	0x20006404
 800d440:	20001134 	.word	0x20001134
 800d444:	20006278 	.word	0x20006278
 800d448:	2000116c 	.word	0x2000116c
 800d44c:	20006394 	.word	0x20006394
 800d450:	200011a4 	.word	0x200011a4
 800d454:	20006324 	.word	0x20006324

0800d458 <DMA_STREAM_Setup>:
{	
 800d458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d45a:	0005      	movs	r5, r0
 800d45c:	000f      	movs	r7, r1
 800d45e:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800d460:	f7fe f9b2 	bl	800b7c8 <GetPort>
	hDMA = &streamDMA[port-1];
 800d464:	3801      	subs	r0, #1
 800d466:	00c4      	lsls	r4, r0, #3
 800d468:	1a24      	subs	r4, r4, r0
 800d46a:	00e4      	lsls	r4, r4, #3
 800d46c:	4809      	ldr	r0, [pc, #36]	; (800d494 <DMA_STREAM_Setup+0x3c>)
 800d46e:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800d470:	0021      	movs	r1, r4
 800d472:	0028      	movs	r0, r5
 800d474:	f7ff fc58 	bl	800cd28 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800d478:	2101      	movs	r1, #1
 800d47a:	0020      	movs	r0, r4
 800d47c:	f7ff fb9e 	bl	800cbbc <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800d480:	2369      	movs	r3, #105	; 0x69
 800d482:	2201      	movs	r2, #1
 800d484:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	3128      	adds	r1, #40	; 0x28
 800d48a:	0032      	movs	r2, r6
 800d48c:	0028      	movs	r0, r5
 800d48e:	f004 f8e3 	bl	8011658 <HAL_UART_Receive_DMA>
}
 800d492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d494:	20001284 	.word	0x20001284

0800d498 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800d498:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d49a:	6803      	ldr	r3, [r0, #0]
 800d49c:	4abd      	ldr	r2, [pc, #756]	; (800d794 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d02f      	beq.n	800d502 <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d4a2:	4abd      	ldr	r2, [pc, #756]	; (800d798 <RemapAndLinkDMAtoUARTTx+0x300>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d100      	bne.n	800d4aa <RemapAndLinkDMAtoUARTTx+0x12>
 800d4a8:	e087      	b.n	800d5ba <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d4aa:	4abc      	ldr	r2, [pc, #752]	; (800d79c <RemapAndLinkDMAtoUARTTx+0x304>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d100      	bne.n	800d4b2 <RemapAndLinkDMAtoUARTTx+0x1a>
 800d4b0:	e0dc      	b.n	800d66c <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800d4b2:	4abb      	ldr	r2, [pc, #748]	; (800d7a0 <RemapAndLinkDMAtoUARTTx+0x308>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d000      	beq.n	800d4ba <RemapAndLinkDMAtoUARTTx+0x22>
 800d4b8:	e18a      	b.n	800d7d0 <RemapAndLinkDMAtoUARTTx+0x338>
 800d4ba:	680b      	ldr	r3, [r1, #0]
 800d4bc:	4ab9      	ldr	r2, [pc, #740]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d100      	bne.n	800d4c4 <RemapAndLinkDMAtoUARTTx+0x2c>
 800d4c2:	e12d      	b.n	800d720 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800d4c4:	4ab8      	ldr	r2, [pc, #736]	; (800d7a8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d100      	bne.n	800d4cc <RemapAndLinkDMAtoUARTTx+0x34>
 800d4ca:	e134      	b.n	800d736 <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800d4cc:	4ab7      	ldr	r2, [pc, #732]	; (800d7ac <RemapAndLinkDMAtoUARTTx+0x314>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d100      	bne.n	800d4d4 <RemapAndLinkDMAtoUARTTx+0x3c>
 800d4d2:	e13c      	b.n	800d74e <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800d4d4:	4ab6      	ldr	r2, [pc, #728]	; (800d7b0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d100      	bne.n	800d4dc <RemapAndLinkDMAtoUARTTx+0x44>
 800d4da:	e144      	b.n	800d766 <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800d4dc:	4ab5      	ldr	r2, [pc, #724]	; (800d7b4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d100      	bne.n	800d4e4 <RemapAndLinkDMAtoUARTTx+0x4c>
 800d4e2:	e14b      	b.n	800d77c <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800d4e4:	4ab4      	ldr	r2, [pc, #720]	; (800d7b8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d11e      	bne.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800d4ea:	4ab4      	ldr	r2, [pc, #720]	; (800d7bc <RemapAndLinkDMAtoUARTTx+0x324>)
 800d4ec:	23a8      	movs	r3, #168	; 0xa8
 800d4ee:	58d4      	ldr	r4, [r2, r3]
 800d4f0:	4db3      	ldr	r5, [pc, #716]	; (800d7c0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d4f2:	402c      	ands	r4, r5
 800d4f4:	50d4      	str	r4, [r2, r3]
 800d4f6:	58d5      	ldr	r5, [r2, r3]
 800d4f8:	24b0      	movs	r4, #176	; 0xb0
 800d4fa:	0324      	lsls	r4, r4, #12
 800d4fc:	432c      	orrs	r4, r5
 800d4fe:	50d4      	str	r4, [r2, r3]
 800d500:	e012      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d502:	680b      	ldr	r3, [r1, #0]
 800d504:	4aa7      	ldr	r2, [pc, #668]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d011      	beq.n	800d52e <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800d50a:	4aa7      	ldr	r2, [pc, #668]	; (800d7a8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d019      	beq.n	800d544 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800d510:	4aa6      	ldr	r2, [pc, #664]	; (800d7ac <RemapAndLinkDMAtoUARTTx+0x314>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d022      	beq.n	800d55c <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800d516:	4aa6      	ldr	r2, [pc, #664]	; (800d7b0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	d02b      	beq.n	800d574 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800d51c:	4aa5      	ldr	r2, [pc, #660]	; (800d7b4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d033      	beq.n	800d58a <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800d522:	4aa5      	ldr	r2, [pc, #660]	; (800d7b8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d03c      	beq.n	800d5a2 <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800d528:	6601      	str	r1, [r0, #96]	; 0x60
 800d52a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800d52c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800d52e:	4aa5      	ldr	r2, [pc, #660]	; (800d7c4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d530:	23a8      	movs	r3, #168	; 0xa8
 800d532:	58d4      	ldr	r4, [r2, r3]
 800d534:	25f0      	movs	r5, #240	; 0xf0
 800d536:	43ac      	bics	r4, r5
 800d538:	50d4      	str	r4, [r2, r3]
 800d53a:	58d4      	ldr	r4, [r2, r3]
 800d53c:	3d70      	subs	r5, #112	; 0x70
 800d53e:	432c      	orrs	r4, r5
 800d540:	50d4      	str	r4, [r2, r3]
 800d542:	e7f1      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800d544:	4a9f      	ldr	r2, [pc, #636]	; (800d7c4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d546:	23a8      	movs	r3, #168	; 0xa8
 800d548:	58d4      	ldr	r4, [r2, r3]
 800d54a:	4d9f      	ldr	r5, [pc, #636]	; (800d7c8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d54c:	402c      	ands	r4, r5
 800d54e:	50d4      	str	r4, [r2, r3]
 800d550:	58d5      	ldr	r5, [r2, r3]
 800d552:	2480      	movs	r4, #128	; 0x80
 800d554:	0224      	lsls	r4, r4, #8
 800d556:	432c      	orrs	r4, r5
 800d558:	50d4      	str	r4, [r2, r3]
 800d55a:	e7e5      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800d55c:	4a99      	ldr	r2, [pc, #612]	; (800d7c4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d55e:	23a8      	movs	r3, #168	; 0xa8
 800d560:	58d4      	ldr	r4, [r2, r3]
 800d562:	4d9a      	ldr	r5, [pc, #616]	; (800d7cc <RemapAndLinkDMAtoUARTTx+0x334>)
 800d564:	402c      	ands	r4, r5
 800d566:	50d4      	str	r4, [r2, r3]
 800d568:	58d5      	ldr	r5, [r2, r3]
 800d56a:	2480      	movs	r4, #128	; 0x80
 800d56c:	0524      	lsls	r4, r4, #20
 800d56e:	432c      	orrs	r4, r5
 800d570:	50d4      	str	r4, [r2, r3]
 800d572:	e7d9      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800d574:	4a91      	ldr	r2, [pc, #580]	; (800d7bc <RemapAndLinkDMAtoUARTTx+0x324>)
 800d576:	23a8      	movs	r3, #168	; 0xa8
 800d578:	58d4      	ldr	r4, [r2, r3]
 800d57a:	250f      	movs	r5, #15
 800d57c:	43ac      	bics	r4, r5
 800d57e:	50d4      	str	r4, [r2, r3]
 800d580:	58d4      	ldr	r4, [r2, r3]
 800d582:	3d07      	subs	r5, #7
 800d584:	432c      	orrs	r4, r5
 800d586:	50d4      	str	r4, [r2, r3]
 800d588:	e7ce      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800d58a:	4a8c      	ldr	r2, [pc, #560]	; (800d7bc <RemapAndLinkDMAtoUARTTx+0x324>)
 800d58c:	23a8      	movs	r3, #168	; 0xa8
 800d58e:	58d4      	ldr	r4, [r2, r3]
 800d590:	4d8d      	ldr	r5, [pc, #564]	; (800d7c8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d592:	402c      	ands	r4, r5
 800d594:	50d4      	str	r4, [r2, r3]
 800d596:	58d5      	ldr	r5, [r2, r3]
 800d598:	2480      	movs	r4, #128	; 0x80
 800d59a:	0224      	lsls	r4, r4, #8
 800d59c:	432c      	orrs	r4, r5
 800d59e:	50d4      	str	r4, [r2, r3]
 800d5a0:	e7c2      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800d5a2:	4a86      	ldr	r2, [pc, #536]	; (800d7bc <RemapAndLinkDMAtoUARTTx+0x324>)
 800d5a4:	23a8      	movs	r3, #168	; 0xa8
 800d5a6:	58d4      	ldr	r4, [r2, r3]
 800d5a8:	4d85      	ldr	r5, [pc, #532]	; (800d7c0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d5aa:	402c      	ands	r4, r5
 800d5ac:	50d4      	str	r4, [r2, r3]
 800d5ae:	58d5      	ldr	r5, [r2, r3]
 800d5b0:	2480      	movs	r4, #128	; 0x80
 800d5b2:	0324      	lsls	r4, r4, #12
 800d5b4:	432c      	orrs	r4, r5
 800d5b6:	50d4      	str	r4, [r2, r3]
 800d5b8:	e7b6      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d5ba:	680b      	ldr	r3, [r1, #0]
 800d5bc:	4a79      	ldr	r2, [pc, #484]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d01a      	beq.n	800d5f8 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800d5c2:	4a79      	ldr	r2, [pc, #484]	; (800d7a8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d022      	beq.n	800d60e <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800d5c8:	4a78      	ldr	r2, [pc, #480]	; (800d7ac <RemapAndLinkDMAtoUARTTx+0x314>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d02b      	beq.n	800d626 <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800d5ce:	4a78      	ldr	r2, [pc, #480]	; (800d7b0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d034      	beq.n	800d63e <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800d5d4:	4a77      	ldr	r2, [pc, #476]	; (800d7b4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d03c      	beq.n	800d654 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800d5da:	4a77      	ldr	r2, [pc, #476]	; (800d7b8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d1a3      	bne.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800d5e0:	4a76      	ldr	r2, [pc, #472]	; (800d7bc <RemapAndLinkDMAtoUARTTx+0x324>)
 800d5e2:	23a8      	movs	r3, #168	; 0xa8
 800d5e4:	58d4      	ldr	r4, [r2, r3]
 800d5e6:	4d76      	ldr	r5, [pc, #472]	; (800d7c0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d5e8:	402c      	ands	r4, r5
 800d5ea:	50d4      	str	r4, [r2, r3]
 800d5ec:	58d5      	ldr	r5, [r2, r3]
 800d5ee:	2490      	movs	r4, #144	; 0x90
 800d5f0:	0324      	lsls	r4, r4, #12
 800d5f2:	432c      	orrs	r4, r5
 800d5f4:	50d4      	str	r4, [r2, r3]
 800d5f6:	e797      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800d5f8:	4a72      	ldr	r2, [pc, #456]	; (800d7c4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d5fa:	23a8      	movs	r3, #168	; 0xa8
 800d5fc:	58d4      	ldr	r4, [r2, r3]
 800d5fe:	25f0      	movs	r5, #240	; 0xf0
 800d600:	43ac      	bics	r4, r5
 800d602:	50d4      	str	r4, [r2, r3]
 800d604:	58d4      	ldr	r4, [r2, r3]
 800d606:	3d60      	subs	r5, #96	; 0x60
 800d608:	432c      	orrs	r4, r5
 800d60a:	50d4      	str	r4, [r2, r3]
 800d60c:	e78c      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800d60e:	4a6d      	ldr	r2, [pc, #436]	; (800d7c4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d610:	23a8      	movs	r3, #168	; 0xa8
 800d612:	58d4      	ldr	r4, [r2, r3]
 800d614:	4d6c      	ldr	r5, [pc, #432]	; (800d7c8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d616:	402c      	ands	r4, r5
 800d618:	50d4      	str	r4, [r2, r3]
 800d61a:	58d5      	ldr	r5, [r2, r3]
 800d61c:	2490      	movs	r4, #144	; 0x90
 800d61e:	0224      	lsls	r4, r4, #8
 800d620:	432c      	orrs	r4, r5
 800d622:	50d4      	str	r4, [r2, r3]
 800d624:	e780      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800d626:	4a67      	ldr	r2, [pc, #412]	; (800d7c4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d628:	23a8      	movs	r3, #168	; 0xa8
 800d62a:	58d4      	ldr	r4, [r2, r3]
 800d62c:	4d67      	ldr	r5, [pc, #412]	; (800d7cc <RemapAndLinkDMAtoUARTTx+0x334>)
 800d62e:	402c      	ands	r4, r5
 800d630:	50d4      	str	r4, [r2, r3]
 800d632:	58d5      	ldr	r5, [r2, r3]
 800d634:	2490      	movs	r4, #144	; 0x90
 800d636:	0524      	lsls	r4, r4, #20
 800d638:	432c      	orrs	r4, r5
 800d63a:	50d4      	str	r4, [r2, r3]
 800d63c:	e774      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800d63e:	4a5f      	ldr	r2, [pc, #380]	; (800d7bc <RemapAndLinkDMAtoUARTTx+0x324>)
 800d640:	23a8      	movs	r3, #168	; 0xa8
 800d642:	58d4      	ldr	r4, [r2, r3]
 800d644:	250f      	movs	r5, #15
 800d646:	43ac      	bics	r4, r5
 800d648:	50d4      	str	r4, [r2, r3]
 800d64a:	58d4      	ldr	r4, [r2, r3]
 800d64c:	3d06      	subs	r5, #6
 800d64e:	432c      	orrs	r4, r5
 800d650:	50d4      	str	r4, [r2, r3]
 800d652:	e769      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800d654:	4a59      	ldr	r2, [pc, #356]	; (800d7bc <RemapAndLinkDMAtoUARTTx+0x324>)
 800d656:	23a8      	movs	r3, #168	; 0xa8
 800d658:	58d4      	ldr	r4, [r2, r3]
 800d65a:	4d5b      	ldr	r5, [pc, #364]	; (800d7c8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d65c:	402c      	ands	r4, r5
 800d65e:	50d4      	str	r4, [r2, r3]
 800d660:	58d5      	ldr	r5, [r2, r3]
 800d662:	2490      	movs	r4, #144	; 0x90
 800d664:	0224      	lsls	r4, r4, #8
 800d666:	432c      	orrs	r4, r5
 800d668:	50d4      	str	r4, [r2, r3]
 800d66a:	e75d      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d66c:	680b      	ldr	r3, [r1, #0]
 800d66e:	4a4d      	ldr	r2, [pc, #308]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d01b      	beq.n	800d6ac <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800d674:	4a4c      	ldr	r2, [pc, #304]	; (800d7a8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d023      	beq.n	800d6c2 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800d67a:	4a4c      	ldr	r2, [pc, #304]	; (800d7ac <RemapAndLinkDMAtoUARTTx+0x314>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d02c      	beq.n	800d6da <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800d680:	4a4b      	ldr	r2, [pc, #300]	; (800d7b0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d035      	beq.n	800d6f2 <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800d686:	4a4b      	ldr	r2, [pc, #300]	; (800d7b4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d03d      	beq.n	800d708 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800d68c:	4a4a      	ldr	r2, [pc, #296]	; (800d7b8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d000      	beq.n	800d694 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800d692:	e749      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800d694:	4a49      	ldr	r2, [pc, #292]	; (800d7bc <RemapAndLinkDMAtoUARTTx+0x324>)
 800d696:	23a8      	movs	r3, #168	; 0xa8
 800d698:	58d4      	ldr	r4, [r2, r3]
 800d69a:	4d49      	ldr	r5, [pc, #292]	; (800d7c0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d69c:	402c      	ands	r4, r5
 800d69e:	50d4      	str	r4, [r2, r3]
 800d6a0:	58d5      	ldr	r5, [r2, r3]
 800d6a2:	24a0      	movs	r4, #160	; 0xa0
 800d6a4:	0324      	lsls	r4, r4, #12
 800d6a6:	432c      	orrs	r4, r5
 800d6a8:	50d4      	str	r4, [r2, r3]
 800d6aa:	e73d      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800d6ac:	4a45      	ldr	r2, [pc, #276]	; (800d7c4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d6ae:	23a8      	movs	r3, #168	; 0xa8
 800d6b0:	58d4      	ldr	r4, [r2, r3]
 800d6b2:	25f0      	movs	r5, #240	; 0xf0
 800d6b4:	43ac      	bics	r4, r5
 800d6b6:	50d4      	str	r4, [r2, r3]
 800d6b8:	58d4      	ldr	r4, [r2, r3]
 800d6ba:	3d50      	subs	r5, #80	; 0x50
 800d6bc:	432c      	orrs	r4, r5
 800d6be:	50d4      	str	r4, [r2, r3]
 800d6c0:	e732      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800d6c2:	4a40      	ldr	r2, [pc, #256]	; (800d7c4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d6c4:	23a8      	movs	r3, #168	; 0xa8
 800d6c6:	58d4      	ldr	r4, [r2, r3]
 800d6c8:	4d3f      	ldr	r5, [pc, #252]	; (800d7c8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d6ca:	402c      	ands	r4, r5
 800d6cc:	50d4      	str	r4, [r2, r3]
 800d6ce:	58d5      	ldr	r5, [r2, r3]
 800d6d0:	24a0      	movs	r4, #160	; 0xa0
 800d6d2:	0224      	lsls	r4, r4, #8
 800d6d4:	432c      	orrs	r4, r5
 800d6d6:	50d4      	str	r4, [r2, r3]
 800d6d8:	e726      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800d6da:	4a3a      	ldr	r2, [pc, #232]	; (800d7c4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d6dc:	23a8      	movs	r3, #168	; 0xa8
 800d6de:	58d4      	ldr	r4, [r2, r3]
 800d6e0:	4d3a      	ldr	r5, [pc, #232]	; (800d7cc <RemapAndLinkDMAtoUARTTx+0x334>)
 800d6e2:	402c      	ands	r4, r5
 800d6e4:	50d4      	str	r4, [r2, r3]
 800d6e6:	58d5      	ldr	r5, [r2, r3]
 800d6e8:	24a0      	movs	r4, #160	; 0xa0
 800d6ea:	0524      	lsls	r4, r4, #20
 800d6ec:	432c      	orrs	r4, r5
 800d6ee:	50d4      	str	r4, [r2, r3]
 800d6f0:	e71a      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800d6f2:	4a32      	ldr	r2, [pc, #200]	; (800d7bc <RemapAndLinkDMAtoUARTTx+0x324>)
 800d6f4:	23a8      	movs	r3, #168	; 0xa8
 800d6f6:	58d4      	ldr	r4, [r2, r3]
 800d6f8:	250f      	movs	r5, #15
 800d6fa:	43ac      	bics	r4, r5
 800d6fc:	50d4      	str	r4, [r2, r3]
 800d6fe:	58d4      	ldr	r4, [r2, r3]
 800d700:	3d05      	subs	r5, #5
 800d702:	432c      	orrs	r4, r5
 800d704:	50d4      	str	r4, [r2, r3]
 800d706:	e70f      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800d708:	4a2c      	ldr	r2, [pc, #176]	; (800d7bc <RemapAndLinkDMAtoUARTTx+0x324>)
 800d70a:	23a8      	movs	r3, #168	; 0xa8
 800d70c:	58d4      	ldr	r4, [r2, r3]
 800d70e:	4d2e      	ldr	r5, [pc, #184]	; (800d7c8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d710:	402c      	ands	r4, r5
 800d712:	50d4      	str	r4, [r2, r3]
 800d714:	58d5      	ldr	r5, [r2, r3]
 800d716:	24a0      	movs	r4, #160	; 0xa0
 800d718:	0224      	lsls	r4, r4, #8
 800d71a:	432c      	orrs	r4, r5
 800d71c:	50d4      	str	r4, [r2, r3]
 800d71e:	e703      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800d720:	4a28      	ldr	r2, [pc, #160]	; (800d7c4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d722:	23a8      	movs	r3, #168	; 0xa8
 800d724:	58d4      	ldr	r4, [r2, r3]
 800d726:	25f0      	movs	r5, #240	; 0xf0
 800d728:	43ac      	bics	r4, r5
 800d72a:	50d4      	str	r4, [r2, r3]
 800d72c:	58d4      	ldr	r4, [r2, r3]
 800d72e:	3d40      	subs	r5, #64	; 0x40
 800d730:	432c      	orrs	r4, r5
 800d732:	50d4      	str	r4, [r2, r3]
 800d734:	e6f8      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800d736:	4a23      	ldr	r2, [pc, #140]	; (800d7c4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d738:	23a8      	movs	r3, #168	; 0xa8
 800d73a:	58d4      	ldr	r4, [r2, r3]
 800d73c:	4d22      	ldr	r5, [pc, #136]	; (800d7c8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d73e:	402c      	ands	r4, r5
 800d740:	50d4      	str	r4, [r2, r3]
 800d742:	58d5      	ldr	r5, [r2, r3]
 800d744:	24b0      	movs	r4, #176	; 0xb0
 800d746:	0224      	lsls	r4, r4, #8
 800d748:	432c      	orrs	r4, r5
 800d74a:	50d4      	str	r4, [r2, r3]
 800d74c:	e6ec      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800d74e:	4a1d      	ldr	r2, [pc, #116]	; (800d7c4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d750:	23a8      	movs	r3, #168	; 0xa8
 800d752:	58d4      	ldr	r4, [r2, r3]
 800d754:	4d1d      	ldr	r5, [pc, #116]	; (800d7cc <RemapAndLinkDMAtoUARTTx+0x334>)
 800d756:	402c      	ands	r4, r5
 800d758:	50d4      	str	r4, [r2, r3]
 800d75a:	58d5      	ldr	r5, [r2, r3]
 800d75c:	24b0      	movs	r4, #176	; 0xb0
 800d75e:	0524      	lsls	r4, r4, #20
 800d760:	432c      	orrs	r4, r5
 800d762:	50d4      	str	r4, [r2, r3]
 800d764:	e6e0      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800d766:	4a15      	ldr	r2, [pc, #84]	; (800d7bc <RemapAndLinkDMAtoUARTTx+0x324>)
 800d768:	23a8      	movs	r3, #168	; 0xa8
 800d76a:	58d4      	ldr	r4, [r2, r3]
 800d76c:	250f      	movs	r5, #15
 800d76e:	43ac      	bics	r4, r5
 800d770:	50d4      	str	r4, [r2, r3]
 800d772:	58d4      	ldr	r4, [r2, r3]
 800d774:	3d04      	subs	r5, #4
 800d776:	432c      	orrs	r4, r5
 800d778:	50d4      	str	r4, [r2, r3]
 800d77a:	e6d5      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800d77c:	4a0f      	ldr	r2, [pc, #60]	; (800d7bc <RemapAndLinkDMAtoUARTTx+0x324>)
 800d77e:	23a8      	movs	r3, #168	; 0xa8
 800d780:	58d4      	ldr	r4, [r2, r3]
 800d782:	4d11      	ldr	r5, [pc, #68]	; (800d7c8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d784:	402c      	ands	r4, r5
 800d786:	50d4      	str	r4, [r2, r3]
 800d788:	58d5      	ldr	r5, [r2, r3]
 800d78a:	24b0      	movs	r4, #176	; 0xb0
 800d78c:	0224      	lsls	r4, r4, #8
 800d78e:	432c      	orrs	r4, r5
 800d790:	50d4      	str	r4, [r2, r3]
 800d792:	e6c9      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
 800d794:	40013800 	.word	0x40013800
 800d798:	40004400 	.word	0x40004400
 800d79c:	40004800 	.word	0x40004800
 800d7a0:	40004c00 	.word	0x40004c00
 800d7a4:	4002001c 	.word	0x4002001c
 800d7a8:	40020044 	.word	0x40020044
 800d7ac:	40020080 	.word	0x40020080
 800d7b0:	40020408 	.word	0x40020408
 800d7b4:	40020444 	.word	0x40020444
 800d7b8:	40020458 	.word	0x40020458
 800d7bc:	40020400 	.word	0x40020400
 800d7c0:	fff0ffff 	.word	0xfff0ffff
 800d7c4:	40020000 	.word	0x40020000
 800d7c8:	ffff0fff 	.word	0xffff0fff
 800d7cc:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d7d0:	4ab9      	ldr	r2, [pc, #740]	; (800dab8 <RemapAndLinkDMAtoUARTTx+0x620>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d159      	bne.n	800d88a <RemapAndLinkDMAtoUARTTx+0x3f2>
 800d7d6:	680b      	ldr	r3, [r1, #0]
 800d7d8:	4ab8      	ldr	r2, [pc, #736]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x624>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d01b      	beq.n	800d816 <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800d7de:	4ab8      	ldr	r2, [pc, #736]	; (800dac0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d023      	beq.n	800d82c <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800d7e4:	4ab7      	ldr	r2, [pc, #732]	; (800dac4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d02c      	beq.n	800d844 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800d7ea:	4ab7      	ldr	r2, [pc, #732]	; (800dac8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d035      	beq.n	800d85c <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800d7f0:	4ab6      	ldr	r2, [pc, #728]	; (800dacc <RemapAndLinkDMAtoUARTTx+0x634>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d03d      	beq.n	800d872 <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800d7f6:	4ab6      	ldr	r2, [pc, #728]	; (800dad0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d000      	beq.n	800d7fe <RemapAndLinkDMAtoUARTTx+0x366>
 800d7fc:	e694      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800d7fe:	4ab5      	ldr	r2, [pc, #724]	; (800dad4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d800:	23a8      	movs	r3, #168	; 0xa8
 800d802:	58d4      	ldr	r4, [r2, r3]
 800d804:	4db4      	ldr	r5, [pc, #720]	; (800dad8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d806:	402c      	ands	r4, r5
 800d808:	50d4      	str	r4, [r2, r3]
 800d80a:	58d5      	ldr	r5, [r2, r3]
 800d80c:	24c0      	movs	r4, #192	; 0xc0
 800d80e:	0324      	lsls	r4, r4, #12
 800d810:	432c      	orrs	r4, r5
 800d812:	50d4      	str	r4, [r2, r3]
 800d814:	e688      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800d816:	4ab1      	ldr	r2, [pc, #708]	; (800dadc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d818:	23a8      	movs	r3, #168	; 0xa8
 800d81a:	58d4      	ldr	r4, [r2, r3]
 800d81c:	25f0      	movs	r5, #240	; 0xf0
 800d81e:	43ac      	bics	r4, r5
 800d820:	50d4      	str	r4, [r2, r3]
 800d822:	58d4      	ldr	r4, [r2, r3]
 800d824:	3d30      	subs	r5, #48	; 0x30
 800d826:	432c      	orrs	r4, r5
 800d828:	50d4      	str	r4, [r2, r3]
 800d82a:	e67d      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800d82c:	4aab      	ldr	r2, [pc, #684]	; (800dadc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d82e:	23a8      	movs	r3, #168	; 0xa8
 800d830:	58d4      	ldr	r4, [r2, r3]
 800d832:	4dab      	ldr	r5, [pc, #684]	; (800dae0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d834:	402c      	ands	r4, r5
 800d836:	50d4      	str	r4, [r2, r3]
 800d838:	58d5      	ldr	r5, [r2, r3]
 800d83a:	24c0      	movs	r4, #192	; 0xc0
 800d83c:	0224      	lsls	r4, r4, #8
 800d83e:	432c      	orrs	r4, r5
 800d840:	50d4      	str	r4, [r2, r3]
 800d842:	e671      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800d844:	4aa5      	ldr	r2, [pc, #660]	; (800dadc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d846:	23a8      	movs	r3, #168	; 0xa8
 800d848:	58d4      	ldr	r4, [r2, r3]
 800d84a:	4da6      	ldr	r5, [pc, #664]	; (800dae4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d84c:	402c      	ands	r4, r5
 800d84e:	50d4      	str	r4, [r2, r3]
 800d850:	58d5      	ldr	r5, [r2, r3]
 800d852:	24c0      	movs	r4, #192	; 0xc0
 800d854:	0524      	lsls	r4, r4, #20
 800d856:	432c      	orrs	r4, r5
 800d858:	50d4      	str	r4, [r2, r3]
 800d85a:	e665      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800d85c:	4a9d      	ldr	r2, [pc, #628]	; (800dad4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d85e:	23a8      	movs	r3, #168	; 0xa8
 800d860:	58d4      	ldr	r4, [r2, r3]
 800d862:	250f      	movs	r5, #15
 800d864:	43ac      	bics	r4, r5
 800d866:	50d4      	str	r4, [r2, r3]
 800d868:	58d4      	ldr	r4, [r2, r3]
 800d86a:	3d03      	subs	r5, #3
 800d86c:	432c      	orrs	r4, r5
 800d86e:	50d4      	str	r4, [r2, r3]
 800d870:	e65a      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d872:	4a98      	ldr	r2, [pc, #608]	; (800dad4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d874:	23a8      	movs	r3, #168	; 0xa8
 800d876:	58d4      	ldr	r4, [r2, r3]
 800d878:	4d99      	ldr	r5, [pc, #612]	; (800dae0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d87a:	402c      	ands	r4, r5
 800d87c:	50d4      	str	r4, [r2, r3]
 800d87e:	58d5      	ldr	r5, [r2, r3]
 800d880:	24c0      	movs	r4, #192	; 0xc0
 800d882:	0224      	lsls	r4, r4, #8
 800d884:	432c      	orrs	r4, r5
 800d886:	50d4      	str	r4, [r2, r3]
 800d888:	e64e      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d88a:	4a97      	ldr	r2, [pc, #604]	; (800dae8 <RemapAndLinkDMAtoUARTTx+0x650>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d159      	bne.n	800d944 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800d890:	680b      	ldr	r3, [r1, #0]
 800d892:	4a8a      	ldr	r2, [pc, #552]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x624>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d01b      	beq.n	800d8d0 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800d898:	4a89      	ldr	r2, [pc, #548]	; (800dac0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d023      	beq.n	800d8e6 <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800d89e:	4a89      	ldr	r2, [pc, #548]	; (800dac4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d02c      	beq.n	800d8fe <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d8a4:	4a88      	ldr	r2, [pc, #544]	; (800dac8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d035      	beq.n	800d916 <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d8aa:	4a88      	ldr	r2, [pc, #544]	; (800dacc <RemapAndLinkDMAtoUARTTx+0x634>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d03d      	beq.n	800d92c <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d8b0:	4a87      	ldr	r2, [pc, #540]	; (800dad0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d000      	beq.n	800d8b8 <RemapAndLinkDMAtoUARTTx+0x420>
 800d8b6:	e637      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d8b8:	4a86      	ldr	r2, [pc, #536]	; (800dad4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d8ba:	23a8      	movs	r3, #168	; 0xa8
 800d8bc:	58d4      	ldr	r4, [r2, r3]
 800d8be:	4d86      	ldr	r5, [pc, #536]	; (800dad8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d8c0:	402c      	ands	r4, r5
 800d8c2:	50d4      	str	r4, [r2, r3]
 800d8c4:	58d5      	ldr	r5, [r2, r3]
 800d8c6:	24d0      	movs	r4, #208	; 0xd0
 800d8c8:	0324      	lsls	r4, r4, #12
 800d8ca:	432c      	orrs	r4, r5
 800d8cc:	50d4      	str	r4, [r2, r3]
 800d8ce:	e62b      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800d8d0:	4a82      	ldr	r2, [pc, #520]	; (800dadc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d8d2:	23a8      	movs	r3, #168	; 0xa8
 800d8d4:	58d4      	ldr	r4, [r2, r3]
 800d8d6:	25f0      	movs	r5, #240	; 0xf0
 800d8d8:	43ac      	bics	r4, r5
 800d8da:	50d4      	str	r4, [r2, r3]
 800d8dc:	58d4      	ldr	r4, [r2, r3]
 800d8de:	3d20      	subs	r5, #32
 800d8e0:	432c      	orrs	r4, r5
 800d8e2:	50d4      	str	r4, [r2, r3]
 800d8e4:	e620      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800d8e6:	4a7d      	ldr	r2, [pc, #500]	; (800dadc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d8e8:	23a8      	movs	r3, #168	; 0xa8
 800d8ea:	58d4      	ldr	r4, [r2, r3]
 800d8ec:	4d7c      	ldr	r5, [pc, #496]	; (800dae0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d8ee:	402c      	ands	r4, r5
 800d8f0:	50d4      	str	r4, [r2, r3]
 800d8f2:	58d5      	ldr	r5, [r2, r3]
 800d8f4:	24d0      	movs	r4, #208	; 0xd0
 800d8f6:	0224      	lsls	r4, r4, #8
 800d8f8:	432c      	orrs	r4, r5
 800d8fa:	50d4      	str	r4, [r2, r3]
 800d8fc:	e614      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800d8fe:	4a77      	ldr	r2, [pc, #476]	; (800dadc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d900:	23a8      	movs	r3, #168	; 0xa8
 800d902:	58d4      	ldr	r4, [r2, r3]
 800d904:	4d77      	ldr	r5, [pc, #476]	; (800dae4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d906:	402c      	ands	r4, r5
 800d908:	50d4      	str	r4, [r2, r3]
 800d90a:	58d5      	ldr	r5, [r2, r3]
 800d90c:	24d0      	movs	r4, #208	; 0xd0
 800d90e:	0524      	lsls	r4, r4, #20
 800d910:	432c      	orrs	r4, r5
 800d912:	50d4      	str	r4, [r2, r3]
 800d914:	e608      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d916:	4a6f      	ldr	r2, [pc, #444]	; (800dad4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d918:	23a8      	movs	r3, #168	; 0xa8
 800d91a:	58d4      	ldr	r4, [r2, r3]
 800d91c:	250f      	movs	r5, #15
 800d91e:	43ac      	bics	r4, r5
 800d920:	50d4      	str	r4, [r2, r3]
 800d922:	58d4      	ldr	r4, [r2, r3]
 800d924:	3d02      	subs	r5, #2
 800d926:	432c      	orrs	r4, r5
 800d928:	50d4      	str	r4, [r2, r3]
 800d92a:	e5fd      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d92c:	4a69      	ldr	r2, [pc, #420]	; (800dad4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d92e:	23a8      	movs	r3, #168	; 0xa8
 800d930:	58d4      	ldr	r4, [r2, r3]
 800d932:	4d6b      	ldr	r5, [pc, #428]	; (800dae0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d934:	402c      	ands	r4, r5
 800d936:	50d4      	str	r4, [r2, r3]
 800d938:	58d5      	ldr	r5, [r2, r3]
 800d93a:	24d0      	movs	r4, #208	; 0xd0
 800d93c:	0224      	lsls	r4, r4, #8
 800d93e:	432c      	orrs	r4, r5
 800d940:	50d4      	str	r4, [r2, r3]
 800d942:	e5f1      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d944:	4a69      	ldr	r2, [pc, #420]	; (800daec <RemapAndLinkDMAtoUARTTx+0x654>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d159      	bne.n	800d9fe <RemapAndLinkDMAtoUARTTx+0x566>
 800d94a:	680b      	ldr	r3, [r1, #0]
 800d94c:	4a5b      	ldr	r2, [pc, #364]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x624>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d01b      	beq.n	800d98a <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d952:	4a5b      	ldr	r2, [pc, #364]	; (800dac0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d023      	beq.n	800d9a0 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d958:	4a5a      	ldr	r2, [pc, #360]	; (800dac4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d02c      	beq.n	800d9b8 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d95e:	4a5a      	ldr	r2, [pc, #360]	; (800dac8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d035      	beq.n	800d9d0 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d964:	4a59      	ldr	r2, [pc, #356]	; (800dacc <RemapAndLinkDMAtoUARTTx+0x634>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d03d      	beq.n	800d9e6 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d96a:	4a59      	ldr	r2, [pc, #356]	; (800dad0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d000      	beq.n	800d972 <RemapAndLinkDMAtoUARTTx+0x4da>
 800d970:	e5da      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800d972:	4a58      	ldr	r2, [pc, #352]	; (800dad4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d974:	23a8      	movs	r3, #168	; 0xa8
 800d976:	58d4      	ldr	r4, [r2, r3]
 800d978:	4d57      	ldr	r5, [pc, #348]	; (800dad8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d97a:	402c      	ands	r4, r5
 800d97c:	50d4      	str	r4, [r2, r3]
 800d97e:	58d5      	ldr	r5, [r2, r3]
 800d980:	24e0      	movs	r4, #224	; 0xe0
 800d982:	0324      	lsls	r4, r4, #12
 800d984:	432c      	orrs	r4, r5
 800d986:	50d4      	str	r4, [r2, r3]
 800d988:	e5ce      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800d98a:	4a54      	ldr	r2, [pc, #336]	; (800dadc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d98c:	23a8      	movs	r3, #168	; 0xa8
 800d98e:	58d4      	ldr	r4, [r2, r3]
 800d990:	25f0      	movs	r5, #240	; 0xf0
 800d992:	43ac      	bics	r4, r5
 800d994:	50d4      	str	r4, [r2, r3]
 800d996:	58d4      	ldr	r4, [r2, r3]
 800d998:	3d10      	subs	r5, #16
 800d99a:	432c      	orrs	r4, r5
 800d99c:	50d4      	str	r4, [r2, r3]
 800d99e:	e5c3      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800d9a0:	4a4e      	ldr	r2, [pc, #312]	; (800dadc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d9a2:	23a8      	movs	r3, #168	; 0xa8
 800d9a4:	58d4      	ldr	r4, [r2, r3]
 800d9a6:	4d4e      	ldr	r5, [pc, #312]	; (800dae0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d9a8:	402c      	ands	r4, r5
 800d9aa:	50d4      	str	r4, [r2, r3]
 800d9ac:	58d5      	ldr	r5, [r2, r3]
 800d9ae:	24e0      	movs	r4, #224	; 0xe0
 800d9b0:	0224      	lsls	r4, r4, #8
 800d9b2:	432c      	orrs	r4, r5
 800d9b4:	50d4      	str	r4, [r2, r3]
 800d9b6:	e5b7      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800d9b8:	4a48      	ldr	r2, [pc, #288]	; (800dadc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d9ba:	23a8      	movs	r3, #168	; 0xa8
 800d9bc:	58d4      	ldr	r4, [r2, r3]
 800d9be:	4d49      	ldr	r5, [pc, #292]	; (800dae4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d9c0:	402c      	ands	r4, r5
 800d9c2:	50d4      	str	r4, [r2, r3]
 800d9c4:	58d5      	ldr	r5, [r2, r3]
 800d9c6:	24e0      	movs	r4, #224	; 0xe0
 800d9c8:	0524      	lsls	r4, r4, #20
 800d9ca:	432c      	orrs	r4, r5
 800d9cc:	50d4      	str	r4, [r2, r3]
 800d9ce:	e5ab      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800d9d0:	4a40      	ldr	r2, [pc, #256]	; (800dad4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d9d2:	23a8      	movs	r3, #168	; 0xa8
 800d9d4:	58d4      	ldr	r4, [r2, r3]
 800d9d6:	250f      	movs	r5, #15
 800d9d8:	43ac      	bics	r4, r5
 800d9da:	50d4      	str	r4, [r2, r3]
 800d9dc:	58d4      	ldr	r4, [r2, r3]
 800d9de:	3d01      	subs	r5, #1
 800d9e0:	432c      	orrs	r4, r5
 800d9e2:	50d4      	str	r4, [r2, r3]
 800d9e4:	e5a0      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d9e6:	4a3b      	ldr	r2, [pc, #236]	; (800dad4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d9e8:	23a8      	movs	r3, #168	; 0xa8
 800d9ea:	58d4      	ldr	r4, [r2, r3]
 800d9ec:	4d3c      	ldr	r5, [pc, #240]	; (800dae0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d9ee:	402c      	ands	r4, r5
 800d9f0:	50d4      	str	r4, [r2, r3]
 800d9f2:	58d5      	ldr	r5, [r2, r3]
 800d9f4:	24e0      	movs	r4, #224	; 0xe0
 800d9f6:	0224      	lsls	r4, r4, #8
 800d9f8:	432c      	orrs	r4, r5
 800d9fa:	50d4      	str	r4, [r2, r3]
 800d9fc:	e594      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800d9fe:	4a3c      	ldr	r2, [pc, #240]	; (800daf0 <RemapAndLinkDMAtoUARTTx+0x658>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d000      	beq.n	800da06 <RemapAndLinkDMAtoUARTTx+0x56e>
 800da04:	e590      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
 800da06:	680b      	ldr	r3, [r1, #0]
 800da08:	4a2c      	ldr	r2, [pc, #176]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x624>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d01b      	beq.n	800da46 <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800da0e:	4a2c      	ldr	r2, [pc, #176]	; (800dac0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d022      	beq.n	800da5a <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800da14:	4a2b      	ldr	r2, [pc, #172]	; (800dac4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d02b      	beq.n	800da72 <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800da1a:	4a2b      	ldr	r2, [pc, #172]	; (800dac8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d034      	beq.n	800da8a <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800da20:	4a2a      	ldr	r2, [pc, #168]	; (800dacc <RemapAndLinkDMAtoUARTTx+0x634>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d03b      	beq.n	800da9e <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800da26:	4a2a      	ldr	r2, [pc, #168]	; (800dad0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d000      	beq.n	800da2e <RemapAndLinkDMAtoUARTTx+0x596>
 800da2c:	e57c      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800da2e:	4a29      	ldr	r2, [pc, #164]	; (800dad4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800da30:	23a8      	movs	r3, #168	; 0xa8
 800da32:	58d4      	ldr	r4, [r2, r3]
 800da34:	4d28      	ldr	r5, [pc, #160]	; (800dad8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800da36:	402c      	ands	r4, r5
 800da38:	50d4      	str	r4, [r2, r3]
 800da3a:	58d5      	ldr	r5, [r2, r3]
 800da3c:	24f0      	movs	r4, #240	; 0xf0
 800da3e:	0324      	lsls	r4, r4, #12
 800da40:	432c      	orrs	r4, r5
 800da42:	50d4      	str	r4, [r2, r3]
 800da44:	e570      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800da46:	4a25      	ldr	r2, [pc, #148]	; (800dadc <RemapAndLinkDMAtoUARTTx+0x644>)
 800da48:	23a8      	movs	r3, #168	; 0xa8
 800da4a:	58d5      	ldr	r5, [r2, r3]
 800da4c:	26f0      	movs	r6, #240	; 0xf0
 800da4e:	43b5      	bics	r5, r6
 800da50:	50d5      	str	r5, [r2, r3]
 800da52:	58d4      	ldr	r4, [r2, r3]
 800da54:	4334      	orrs	r4, r6
 800da56:	50d4      	str	r4, [r2, r3]
 800da58:	e566      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800da5a:	4a20      	ldr	r2, [pc, #128]	; (800dadc <RemapAndLinkDMAtoUARTTx+0x644>)
 800da5c:	23a8      	movs	r3, #168	; 0xa8
 800da5e:	58d4      	ldr	r4, [r2, r3]
 800da60:	4d1f      	ldr	r5, [pc, #124]	; (800dae0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800da62:	402c      	ands	r4, r5
 800da64:	50d4      	str	r4, [r2, r3]
 800da66:	58d5      	ldr	r5, [r2, r3]
 800da68:	24f0      	movs	r4, #240	; 0xf0
 800da6a:	0224      	lsls	r4, r4, #8
 800da6c:	432c      	orrs	r4, r5
 800da6e:	50d4      	str	r4, [r2, r3]
 800da70:	e55a      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800da72:	4a1a      	ldr	r2, [pc, #104]	; (800dadc <RemapAndLinkDMAtoUARTTx+0x644>)
 800da74:	23a8      	movs	r3, #168	; 0xa8
 800da76:	58d4      	ldr	r4, [r2, r3]
 800da78:	4d1a      	ldr	r5, [pc, #104]	; (800dae4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800da7a:	402c      	ands	r4, r5
 800da7c:	50d4      	str	r4, [r2, r3]
 800da7e:	58d5      	ldr	r5, [r2, r3]
 800da80:	24f0      	movs	r4, #240	; 0xf0
 800da82:	0524      	lsls	r4, r4, #20
 800da84:	432c      	orrs	r4, r5
 800da86:	50d4      	str	r4, [r2, r3]
 800da88:	e54e      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800da8a:	4a12      	ldr	r2, [pc, #72]	; (800dad4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800da8c:	23a8      	movs	r3, #168	; 0xa8
 800da8e:	58d5      	ldr	r5, [r2, r3]
 800da90:	260f      	movs	r6, #15
 800da92:	43b5      	bics	r5, r6
 800da94:	50d5      	str	r5, [r2, r3]
 800da96:	58d4      	ldr	r4, [r2, r3]
 800da98:	4334      	orrs	r4, r6
 800da9a:	50d4      	str	r4, [r2, r3]
 800da9c:	e544      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800da9e:	4a0d      	ldr	r2, [pc, #52]	; (800dad4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800daa0:	23a8      	movs	r3, #168	; 0xa8
 800daa2:	58d4      	ldr	r4, [r2, r3]
 800daa4:	4d0e      	ldr	r5, [pc, #56]	; (800dae0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800daa6:	402c      	ands	r4, r5
 800daa8:	50d4      	str	r4, [r2, r3]
 800daaa:	58d5      	ldr	r5, [r2, r3]
 800daac:	24f0      	movs	r4, #240	; 0xf0
 800daae:	0224      	lsls	r4, r4, #8
 800dab0:	432c      	orrs	r4, r5
 800dab2:	50d4      	str	r4, [r2, r3]
 800dab4:	e538      	b.n	800d528 <RemapAndLinkDMAtoUARTTx+0x90>
 800dab6:	46c0      	nop			; (mov r8, r8)
 800dab8:	40005000 	.word	0x40005000
 800dabc:	4002001c 	.word	0x4002001c
 800dac0:	40020044 	.word	0x40020044
 800dac4:	40020080 	.word	0x40020080
 800dac8:	40020408 	.word	0x40020408
 800dacc:	40020444 	.word	0x40020444
 800dad0:	40020458 	.word	0x40020458
 800dad4:	40020400 	.word	0x40020400
 800dad8:	fff0ffff 	.word	0xfff0ffff
 800dadc:	40020000 	.word	0x40020000
 800dae0:	ffff0fff 	.word	0xffff0fff
 800dae4:	f0ffffff 	.word	0xf0ffffff
 800dae8:	40011400 	.word	0x40011400
 800daec:	40011800 	.word	0x40011800
 800daf0:	40011c00 	.word	0x40011c00

0800daf4 <DMA_MSG_TX_Setup>:
{	
 800daf4:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800daf6:	4b0d      	ldr	r3, [pc, #52]	; (800db2c <DMA_MSG_TX_Setup+0x38>)
 800daf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d012      	beq.n	800db24 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800dafe:	4b0b      	ldr	r3, [pc, #44]	; (800db2c <DMA_MSG_TX_Setup+0x38>)
 800db00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db02:	2b00      	cmp	r3, #0
 800db04:	d010      	beq.n	800db28 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800db06:	4a09      	ldr	r2, [pc, #36]	; (800db2c <DMA_MSG_TX_Setup+0x38>)
 800db08:	2394      	movs	r3, #148	; 0x94
 800db0a:	58d3      	ldr	r3, [r2, r3]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d007      	beq.n	800db20 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800db10:	0021      	movs	r1, r4
 800db12:	f7ff fcc1 	bl	800d498 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800db16:	2100      	movs	r1, #0
 800db18:	0020      	movs	r0, r4
 800db1a:	f7ff f84f 	bl	800cbbc <SetupDMAInterrupts>
}
 800db1e:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800db20:	4c03      	ldr	r4, [pc, #12]	; (800db30 <DMA_MSG_TX_Setup+0x3c>)
 800db22:	e7f5      	b.n	800db10 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800db24:	4c01      	ldr	r4, [pc, #4]	; (800db2c <DMA_MSG_TX_Setup+0x38>)
 800db26:	e7f3      	b.n	800db10 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800db28:	4c02      	ldr	r4, [pc, #8]	; (800db34 <DMA_MSG_TX_Setup+0x40>)
 800db2a:	e7f1      	b.n	800db10 <DMA_MSG_TX_Setup+0x1c>
 800db2c:	200011dc 	.word	0x200011dc
 800db30:	2000124c 	.word	0x2000124c
 800db34:	20001214 	.word	0x20001214

0800db38 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800db38:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800db3a:	4807      	ldr	r0, [pc, #28]	; (800db58 <CRC_Init+0x20>)
 800db3c:	4b07      	ldr	r3, [pc, #28]	; (800db5c <CRC_Init+0x24>)
 800db3e:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800db40:	2310      	movs	r3, #16
 800db42:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800db44:	2300      	movs	r3, #0
 800db46:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800db48:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800db4a:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800db4c:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800db4e:	3303      	adds	r3, #3
 800db50:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800db52:	f001 f92b 	bl	800edac <HAL_CRC_Init>
}
 800db56:	bd10      	pop	{r4, pc}
 800db58:	20006590 	.word	0x20006590
 800db5c:	40023000 	.word	0x40023000

0800db60 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800db60:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800db62:	4a05      	ldr	r2, [pc, #20]	; (800db78 <HAL_CRC_MspInit+0x18>)
 800db64:	6951      	ldr	r1, [r2, #20]
 800db66:	2340      	movs	r3, #64	; 0x40
 800db68:	4319      	orrs	r1, r3
 800db6a:	6151      	str	r1, [r2, #20]
 800db6c:	6952      	ldr	r2, [r2, #20]
 800db6e:	4013      	ands	r3, r2
 800db70:	9301      	str	r3, [sp, #4]
 800db72:	9b01      	ldr	r3, [sp, #4]
}
 800db74:	b002      	add	sp, #8
 800db76:	4770      	bx	lr
 800db78:	40021000 	.word	0x40021000

0800db7c <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800db7c:	b500      	push	{lr}
 800db7e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800db80:	2380      	movs	r3, #128	; 0x80
 800db82:	011b      	lsls	r3, r3, #4
 800db84:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800db86:	2301      	movs	r3, #1
 800db88:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db8a:	2300      	movs	r3, #0
 800db8c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800db8e:	3303      	adds	r3, #3
 800db90:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800db92:	2090      	movs	r0, #144	; 0x90
 800db94:	a901      	add	r1, sp, #4
 800db96:	05c0      	lsls	r0, r0, #23
 800db98:	f002 f808 	bl	800fbac <HAL_GPIO_Init>
}
 800db9c:	b007      	add	sp, #28
 800db9e:	bd00      	pop	{pc}

0800dba0 <GPIO_Init>:
{
 800dba0:	b500      	push	{lr}
 800dba2:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800dba4:	4b18      	ldr	r3, [pc, #96]	; (800dc08 <GPIO_Init+0x68>)
 800dba6:	6959      	ldr	r1, [r3, #20]
 800dba8:	2080      	movs	r0, #128	; 0x80
 800dbaa:	0300      	lsls	r0, r0, #12
 800dbac:	4301      	orrs	r1, r0
 800dbae:	6159      	str	r1, [r3, #20]
 800dbb0:	695a      	ldr	r2, [r3, #20]
 800dbb2:	4002      	ands	r2, r0
 800dbb4:	9201      	str	r2, [sp, #4]
 800dbb6:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800dbb8:	6959      	ldr	r1, [r3, #20]
 800dbba:	2080      	movs	r0, #128	; 0x80
 800dbbc:	0280      	lsls	r0, r0, #10
 800dbbe:	4301      	orrs	r1, r0
 800dbc0:	6159      	str	r1, [r3, #20]
 800dbc2:	695a      	ldr	r2, [r3, #20]
 800dbc4:	4002      	ands	r2, r0
 800dbc6:	9202      	str	r2, [sp, #8]
 800dbc8:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800dbca:	6959      	ldr	r1, [r3, #20]
 800dbcc:	2080      	movs	r0, #128	; 0x80
 800dbce:	0340      	lsls	r0, r0, #13
 800dbd0:	4301      	orrs	r1, r0
 800dbd2:	6159      	str	r1, [r3, #20]
 800dbd4:	695a      	ldr	r2, [r3, #20]
 800dbd6:	4002      	ands	r2, r0
 800dbd8:	9203      	str	r2, [sp, #12]
 800dbda:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800dbdc:	6959      	ldr	r1, [r3, #20]
 800dbde:	2080      	movs	r0, #128	; 0x80
 800dbe0:	02c0      	lsls	r0, r0, #11
 800dbe2:	4301      	orrs	r1, r0
 800dbe4:	6159      	str	r1, [r3, #20]
 800dbe6:	695a      	ldr	r2, [r3, #20]
 800dbe8:	4002      	ands	r2, r0
 800dbea:	9204      	str	r2, [sp, #16]
 800dbec:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800dbee:	695a      	ldr	r2, [r3, #20]
 800dbf0:	2180      	movs	r1, #128	; 0x80
 800dbf2:	03c9      	lsls	r1, r1, #15
 800dbf4:	430a      	orrs	r2, r1
 800dbf6:	615a      	str	r2, [r3, #20]
 800dbf8:	695b      	ldr	r3, [r3, #20]
 800dbfa:	400b      	ands	r3, r1
 800dbfc:	9305      	str	r3, [sp, #20]
 800dbfe:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800dc00:	f7ff ffbc 	bl	800db7c <IND_LED_Init>
}
 800dc04:	b007      	add	sp, #28
 800dc06:	bd00      	pop	{pc}
 800dc08:	40021000 	.word	0x40021000

0800dc0c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800dc0c:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800dc0e:	f000 ffd9 	bl	800ebc4 <HAL_IncTick>
  osSystickHandler();  
 800dc12:	f000 fc11 	bl	800e438 <osSystickHandler>

}
 800dc16:	bd10      	pop	{r4, pc}

0800dc18 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800dc18:	e7fe      	b.n	800dc18 <HardFault_Handler>
	...

0800dc1c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800dc1c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800dc1e:	4802      	ldr	r0, [pc, #8]	; (800dc28 <USART1_IRQHandler+0xc>)
 800dc20:	f004 f931 	bl	8011e86 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800dc24:	bd10      	pop	{r4, pc}
 800dc26:	46c0      	nop			; (mov r8, r8)
 800dc28:	20006394 	.word	0x20006394

0800dc2c <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800dc2c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800dc2e:	4802      	ldr	r0, [pc, #8]	; (800dc38 <USART2_IRQHandler+0xc>)
 800dc30:	f004 f929 	bl	8011e86 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800dc34:	bd10      	pop	{r4, pc}
 800dc36:	46c0      	nop			; (mov r8, r8)
 800dc38:	200064e4 	.word	0x200064e4

0800dc3c <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800dc3c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800dc3e:	4806      	ldr	r0, [pc, #24]	; (800dc58 <USART3_8_IRQHandler+0x1c>)
 800dc40:	f004 f921 	bl	8011e86 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800dc44:	4805      	ldr	r0, [pc, #20]	; (800dc5c <USART3_8_IRQHandler+0x20>)
 800dc46:	f004 f91e 	bl	8011e86 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800dc4a:	4805      	ldr	r0, [pc, #20]	; (800dc60 <USART3_8_IRQHandler+0x24>)
 800dc4c:	f004 f91b 	bl	8011e86 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800dc50:	4804      	ldr	r0, [pc, #16]	; (800dc64 <USART3_8_IRQHandler+0x28>)
 800dc52:	f004 f918 	bl	8011e86 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800dc56:	bd10      	pop	{r4, pc}
 800dc58:	20006278 	.word	0x20006278
 800dc5c:	20006474 	.word	0x20006474
 800dc60:	20006324 	.word	0x20006324
 800dc64:	20006404 	.word	0x20006404

0800dc68 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800dc68:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800dc6a:	2001      	movs	r0, #1
 800dc6c:	f7fc fcb8 	bl	800a5e0 <DMA_IRQHandler>
	
}
 800dc70:	bd10      	pop	{r4, pc}
	...

0800dc74 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800dc74:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800dc76:	4b0c      	ldr	r3, [pc, #48]	; (800dca8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	06db      	lsls	r3, r3, #27
 800dc7c:	d408      	bmi.n	800dc90 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800dc7e:	4b0b      	ldr	r3, [pc, #44]	; (800dcac <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	05db      	lsls	r3, r3, #23
 800dc84:	d408      	bmi.n	800dc98 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800dc86:	4b09      	ldr	r3, [pc, #36]	; (800dcac <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	06db      	lsls	r3, r3, #27
 800dc8c:	d408      	bmi.n	800dca0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800dc8e:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800dc90:	2005      	movs	r0, #5
 800dc92:	f7fc fca5 	bl	800a5e0 <DMA_IRQHandler>
 800dc96:	e7fa      	b.n	800dc8e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800dc98:	2002      	movs	r0, #2
 800dc9a:	f7fc fca1 	bl	800a5e0 <DMA_IRQHandler>
 800dc9e:	e7f6      	b.n	800dc8e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800dca0:	4803      	ldr	r0, [pc, #12]	; (800dcb0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800dca2:	f001 f9df 	bl	800f064 <HAL_DMA_IRQHandler>
}
 800dca6:	e7f2      	b.n	800dc8e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800dca8:	40020400 	.word	0x40020400
 800dcac:	40020000 	.word	0x40020000
 800dcb0:	200011dc 	.word	0x200011dc

0800dcb4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800dcb4:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800dcb6:	4b14      	ldr	r3, [pc, #80]	; (800dd08 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	03db      	lsls	r3, r3, #15
 800dcbc:	d413      	bmi.n	800dce6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800dcbe:	4b12      	ldr	r3, [pc, #72]	; (800dd08 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	02db      	lsls	r3, r3, #11
 800dcc4:	d413      	bmi.n	800dcee <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800dcc6:	4b11      	ldr	r3, [pc, #68]	; (800dd0c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	05db      	lsls	r3, r3, #23
 800dccc:	d413      	bmi.n	800dcf6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800dcce:	4b0e      	ldr	r3, [pc, #56]	; (800dd08 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	04db      	lsls	r3, r3, #19
 800dcd4:	d413      	bmi.n	800dcfe <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800dcd6:	4b0c      	ldr	r3, [pc, #48]	; (800dd08 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	01db      	lsls	r3, r3, #7
 800dcdc:	d506      	bpl.n	800dcec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800dcde:	480c      	ldr	r0, [pc, #48]	; (800dd10 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800dce0:	f001 f9c0 	bl	800f064 <HAL_DMA_IRQHandler>
	}
}
 800dce4:	e002      	b.n	800dcec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800dce6:	2003      	movs	r0, #3
 800dce8:	f7fc fc7a 	bl	800a5e0 <DMA_IRQHandler>
}
 800dcec:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800dcee:	2004      	movs	r0, #4
 800dcf0:	f7fc fc76 	bl	800a5e0 <DMA_IRQHandler>
 800dcf4:	e7fa      	b.n	800dcec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800dcf6:	2006      	movs	r0, #6
 800dcf8:	f7fc fc72 	bl	800a5e0 <DMA_IRQHandler>
 800dcfc:	e7f6      	b.n	800dcec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800dcfe:	4805      	ldr	r0, [pc, #20]	; (800dd14 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800dd00:	f001 f9b0 	bl	800f064 <HAL_DMA_IRQHandler>
 800dd04:	e7f2      	b.n	800dcec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800dd06:	46c0      	nop			; (mov r8, r8)
 800dd08:	40020000 	.word	0x40020000
 800dd0c:	40020400 	.word	0x40020400
 800dd10:	2000124c 	.word	0x2000124c
 800dd14:	20001214 	.word	0x20001214

0800dd18 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dd18:	b510      	push	{r4, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800dd22:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d001      	beq.n	800dd2c <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800dd28:	f7fe fff4 	bl	800cd14 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800dd2c:	0020      	movs	r0, r4
 800dd2e:	f7fd fd4b 	bl	800b7c8 <GetPort>
 800dd32:	0080      	lsls	r0, r0, #2
 800dd34:	4b03      	ldr	r3, [pc, #12]	; (800dd44 <HAL_UART_TxCpltCallback+0x2c>)
 800dd36:	58c0      	ldr	r0, [r0, r3]
 800dd38:	a901      	add	r1, sp, #4
 800dd3a:	f006 ff39 	bl	8014bb0 <xQueueGiveFromISR>
}
 800dd3e:	b002      	add	sp, #8
 800dd40:	bd10      	pop	{r4, pc}
 800dd42:	46c0      	nop			; (mov r8, r8)
 800dd44:	20006240 	.word	0x20006240

0800dd48 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dd48:	b510      	push	{r4, lr}
 800dd4a:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800dd4c:	2369      	movs	r3, #105	; 0x69
 800dd4e:	2201      	movs	r2, #1
 800dd50:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800dd52:	f7fd fd39 	bl	800b7c8 <GetPort>
	if (portStatus[port] == STREAM) {
 800dd56:	4b0c      	ldr	r3, [pc, #48]	; (800dd88 <HAL_UART_ErrorCallback+0x40>)
 800dd58:	5c1b      	ldrb	r3, [r3, r0]
 800dd5a:	2b02      	cmp	r3, #2
 800dd5c:	d005      	beq.n	800dd6a <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800dd5e:	4b0b      	ldr	r3, [pc, #44]	; (800dd8c <HAL_UART_ErrorCallback+0x44>)
 800dd60:	1818      	adds	r0, r3, r0
 800dd62:	3801      	subs	r0, #1
 800dd64:	2301      	movs	r3, #1
 800dd66:	7003      	strb	r3, [r0, #0]
	}	
}
 800dd68:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800dd6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	685a      	ldr	r2, [r3, #4]
 800dd70:	b292      	uxth	r2, r2
 800dd72:	3801      	subs	r0, #1
 800dd74:	0080      	lsls	r0, r0, #2
 800dd76:	4b06      	ldr	r3, [pc, #24]	; (800dd90 <HAL_UART_ErrorCallback+0x48>)
 800dd78:	58c3      	ldr	r3, [r0, r3]
 800dd7a:	6819      	ldr	r1, [r3, #0]
 800dd7c:	3128      	adds	r1, #40	; 0x28
 800dd7e:	0020      	movs	r0, r4
 800dd80:	f003 fc6a 	bl	8011658 <HAL_UART_Receive_DMA>
 800dd84:	e7f0      	b.n	800dd68 <HAL_UART_ErrorCallback+0x20>
 800dd86:	46c0      	nop			; (mov r8, r8)
 800dd88:	20000c40 	.word	0x20000c40
 800dd8c:	20000e0c 	.word	0x20000e0c
 800dd90:	20000fec 	.word	0x20000fec

0800dd94 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dd94:	b510      	push	{r4, lr}
 800dd96:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800dd98:	f7fd fd16 	bl	800b7c8 <GetPort>
 800dd9c:	4b13      	ldr	r3, [pc, #76]	; (800ddec <HAL_UART_RxCpltCallback+0x58>)
 800dd9e:	5c1b      	ldrb	r3, [r3, r0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d006      	beq.n	800ddb2 <HAL_UART_RxCpltCallback+0x1e>
 800dda4:	0020      	movs	r0, r4
 800dda6:	f7fd fd0f 	bl	800b7c8 <GetPort>
 800ddaa:	4b10      	ldr	r3, [pc, #64]	; (800ddec <HAL_UART_RxCpltCallback+0x58>)
 800ddac:	5c1b      	ldrb	r3, [r3, r0]
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d11a      	bne.n	800dde8 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800ddb2:	0020      	movs	r0, r4
 800ddb4:	f7fd fd08 	bl	800b7c8 <GetPort>
 800ddb8:	4b0d      	ldr	r3, [pc, #52]	; (800ddf0 <HAL_UART_RxCpltCallback+0x5c>)
 800ddba:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800ddbc:	0020      	movs	r0, r4
 800ddbe:	f7fd fd03 	bl	800b7c8 <GetPort>
 800ddc2:	4b0a      	ldr	r3, [pc, #40]	; (800ddec <HAL_UART_RxCpltCallback+0x58>)
 800ddc4:	2205      	movs	r2, #5
 800ddc6:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800ddc8:	0020      	movs	r0, r4
 800ddca:	f7fd fcfd 	bl	800b7c8 <GetPort>
 800ddce:	4b09      	ldr	r3, [pc, #36]	; (800ddf4 <HAL_UART_RxCpltCallback+0x60>)
 800ddd0:	1818      	adds	r0, r3, r0
 800ddd2:	3801      	subs	r0, #1
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800ddd8:	0020      	movs	r0, r4
 800ddda:	f7fd fcf5 	bl	800b7c8 <GetPort>
 800ddde:	4b06      	ldr	r3, [pc, #24]	; (800ddf8 <HAL_UART_RxCpltCallback+0x64>)
 800dde0:	1818      	adds	r0, r3, r0
 800dde2:	3801      	subs	r0, #1
 800dde4:	2301      	movs	r3, #1
 800dde6:	7003      	strb	r3, [r0, #0]
	}
}
 800dde8:	bd10      	pop	{r4, pc}
 800ddea:	46c0      	nop			; (mov r8, r8)
 800ddec:	20000c40 	.word	0x20000c40
 800ddf0:	20006160 	.word	0x20006160
 800ddf4:	20000f94 	.word	0x20000f94
 800ddf8:	20000e0c 	.word	0x20000e0c

0800ddfc <TIM3_IRQHandler>:

/*-----------------------------------------------------------*/
/* This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{	
 800ddfc:	b510      	push	{r4, lr}
		HAL_TIM_IRQHandler(&htim3);
 800ddfe:	4802      	ldr	r0, [pc, #8]	; (800de08 <TIM3_IRQHandler+0xc>)
 800de00:	f003 f8a1 	bl	8010f46 <HAL_TIM_IRQHandler>
}
 800de04:	bd10      	pop	{r4, pc}
 800de06:	46c0      	nop			; (mov r8, r8)
 800de08:	200062e8 	.word	0x200062e8

0800de0c <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800de0c:	b672      	cpsid	i
 800de0e:	e7fe      	b.n	800de0e <vApplicationStackOverflowHook+0x2>

0800de10 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800de10:	b672      	cpsid	i
 800de12:	e7fe      	b.n	800de12 <vApplicationMallocFailedHook+0x2>

0800de14 <MX_USART1_UART_Init>:

#ifdef H01R0
/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800de14:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800de16:	4809      	ldr	r0, [pc, #36]	; (800de3c <MX_USART1_UART_Init+0x28>)
 800de18:	4b09      	ldr	r3, [pc, #36]	; (800de40 <MX_USART1_UART_Init+0x2c>)
 800de1a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800de1c:	23e1      	movs	r3, #225	; 0xe1
 800de1e:	031b      	lsls	r3, r3, #12
 800de20:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800de22:	2300      	movs	r3, #0
 800de24:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800de26:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800de28:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800de2a:	220c      	movs	r2, #12
 800de2c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800de2e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800de30:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800de32:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800de34:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800de36:	f003 ff4f 	bl	8011cd8 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800de3a:	bd10      	pop	{r4, pc}
 800de3c:	20006394 	.word	0x20006394
 800de40:	40013800 	.word	0x40013800

0800de44 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800de44:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800de46:	4809      	ldr	r0, [pc, #36]	; (800de6c <MX_USART2_UART_Init+0x28>)
 800de48:	4b09      	ldr	r3, [pc, #36]	; (800de70 <MX_USART2_UART_Init+0x2c>)
 800de4a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800de4c:	23e1      	movs	r3, #225	; 0xe1
 800de4e:	031b      	lsls	r3, r3, #12
 800de50:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800de52:	2300      	movs	r3, #0
 800de54:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800de56:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800de58:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800de5a:	220c      	movs	r2, #12
 800de5c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800de5e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800de60:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800de62:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800de64:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800de66:	f003 ff37 	bl	8011cd8 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800de6a:	bd10      	pop	{r4, pc}
 800de6c:	200064e4 	.word	0x200064e4
 800de70:	40004400 	.word	0x40004400

0800de74 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800de74:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800de76:	4809      	ldr	r0, [pc, #36]	; (800de9c <MX_USART3_UART_Init+0x28>)
 800de78:	4b09      	ldr	r3, [pc, #36]	; (800dea0 <MX_USART3_UART_Init+0x2c>)
 800de7a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800de7c:	23e1      	movs	r3, #225	; 0xe1
 800de7e:	031b      	lsls	r3, r3, #12
 800de80:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800de82:	2300      	movs	r3, #0
 800de84:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800de86:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800de88:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800de8a:	220c      	movs	r2, #12
 800de8c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800de8e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800de90:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800de92:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800de94:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800de96:	f003 ff1f 	bl	8011cd8 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800de9a:	bd10      	pop	{r4, pc}
 800de9c:	20006278 	.word	0x20006278
 800dea0:	40004800 	.word	0x40004800

0800dea4 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800dea4:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800dea6:	4809      	ldr	r0, [pc, #36]	; (800decc <MX_USART4_UART_Init+0x28>)
 800dea8:	4b09      	ldr	r3, [pc, #36]	; (800ded0 <MX_USART4_UART_Init+0x2c>)
 800deaa:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800deac:	23e1      	movs	r3, #225	; 0xe1
 800deae:	031b      	lsls	r3, r3, #12
 800deb0:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800deb2:	2300      	movs	r3, #0
 800deb4:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800deb6:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800deb8:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800deba:	220c      	movs	r2, #12
 800debc:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800debe:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800dec0:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dec2:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dec4:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800dec6:	f003 ff07 	bl	8011cd8 <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800deca:	bd10      	pop	{r4, pc}
 800decc:	20006474 	.word	0x20006474
 800ded0:	40004c00 	.word	0x40004c00

0800ded4 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800ded4:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800ded6:	4809      	ldr	r0, [pc, #36]	; (800defc <MX_USART5_UART_Init+0x28>)
 800ded8:	4b09      	ldr	r3, [pc, #36]	; (800df00 <MX_USART5_UART_Init+0x2c>)
 800deda:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dedc:	23e1      	movs	r3, #225	; 0xe1
 800dede:	031b      	lsls	r3, r3, #12
 800dee0:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800dee2:	2300      	movs	r3, #0
 800dee4:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800dee6:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800dee8:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800deea:	220c      	movs	r2, #12
 800deec:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800deee:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800def0:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800def2:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800def4:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800def6:	f003 feef 	bl	8011cd8 <HAL_UART_Init>
	#if _P6pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800defa:	bd10      	pop	{r4, pc}
 800defc:	20006324 	.word	0x20006324
 800df00:	40005000 	.word	0x40005000

0800df04 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800df04:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800df06:	4809      	ldr	r0, [pc, #36]	; (800df2c <MX_USART6_UART_Init+0x28>)
 800df08:	4b09      	ldr	r3, [pc, #36]	; (800df30 <MX_USART6_UART_Init+0x2c>)
 800df0a:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800df0c:	23e1      	movs	r3, #225	; 0xe1
 800df0e:	031b      	lsls	r3, r3, #12
 800df10:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800df12:	2300      	movs	r3, #0
 800df14:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800df16:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800df18:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800df1a:	220c      	movs	r2, #12
 800df1c:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800df1e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800df20:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800df22:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800df24:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800df26:	f003 fed7 	bl	8011cd8 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800df2a:	bd10      	pop	{r4, pc}
 800df2c:	20006404 	.word	0x20006404
 800df30:	40011400 	.word	0x40011400

0800df34 <HAL_UART_MspInit>:
	#endif	
}
#endif
#endif
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800df34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df36:	46ce      	mov	lr, r9
 800df38:	b500      	push	{lr}
 800df3a:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800df3c:	6803      	ldr	r3, [r0, #0]
 800df3e:	4a91      	ldr	r2, [pc, #580]	; (800e184 <HAL_UART_MspInit+0x250>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d015      	beq.n	800df70 <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800df44:	4a90      	ldr	r2, [pc, #576]	; (800e188 <HAL_UART_MspInit+0x254>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d040      	beq.n	800dfcc <HAL_UART_MspInit+0x98>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800df4a:	4a90      	ldr	r2, [pc, #576]	; (800e18c <HAL_UART_MspInit+0x258>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d069      	beq.n	800e024 <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800df50:	4a8f      	ldr	r2, [pc, #572]	; (800e190 <HAL_UART_MspInit+0x25c>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d100      	bne.n	800df58 <HAL_UART_MspInit+0x24>
 800df56:	e092      	b.n	800e07e <HAL_UART_MspInit+0x14a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800df58:	4a8e      	ldr	r2, [pc, #568]	; (800e194 <HAL_UART_MspInit+0x260>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d100      	bne.n	800df60 <HAL_UART_MspInit+0x2c>
 800df5e:	e0b9      	b.n	800e0d4 <HAL_UART_MspInit+0x1a0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800df60:	4a8d      	ldr	r2, [pc, #564]	; (800e198 <HAL_UART_MspInit+0x264>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d100      	bne.n	800df68 <HAL_UART_MspInit+0x34>
 800df66:	e0e0      	b.n	800e12a <HAL_UART_MspInit+0x1f6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800df68:	b00c      	add	sp, #48	; 0x30
 800df6a:	bc04      	pop	{r2}
 800df6c:	4691      	mov	r9, r2
 800df6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800df70:	4a8a      	ldr	r2, [pc, #552]	; (800e19c <HAL_UART_MspInit+0x268>)
 800df72:	6991      	ldr	r1, [r2, #24]
 800df74:	2080      	movs	r0, #128	; 0x80
 800df76:	01c0      	lsls	r0, r0, #7
 800df78:	4301      	orrs	r1, r0
 800df7a:	6191      	str	r1, [r2, #24]
 800df7c:	6993      	ldr	r3, [r2, #24]
 800df7e:	4003      	ands	r3, r0
 800df80:	9301      	str	r3, [sp, #4]
 800df82:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800df84:	2380      	movs	r3, #128	; 0x80
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df8a:	2702      	movs	r7, #2
 800df8c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df8e:	2401      	movs	r4, #1
 800df90:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df92:	2603      	movs	r6, #3
 800df94:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800df96:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800df98:	2590      	movs	r5, #144	; 0x90
 800df9a:	05ed      	lsls	r5, r5, #23
 800df9c:	a907      	add	r1, sp, #28
 800df9e:	0028      	movs	r0, r5
 800dfa0:	f001 fe04 	bl	800fbac <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800dfa4:	2380      	movs	r3, #128	; 0x80
 800dfa6:	00db      	lsls	r3, r3, #3
 800dfa8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfaa:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfac:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dfae:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800dfb0:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800dfb2:	a907      	add	r1, sp, #28
 800dfb4:	0028      	movs	r0, r5
 800dfb6:	f001 fdf9 	bl	800fbac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800dfba:	2200      	movs	r2, #0
 800dfbc:	2101      	movs	r1, #1
 800dfbe:	201b      	movs	r0, #27
 800dfc0:	f000 fe2a 	bl	800ec18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800dfc4:	201b      	movs	r0, #27
 800dfc6:	f000 fe5b 	bl	800ec80 <HAL_NVIC_EnableIRQ>
 800dfca:	e7cd      	b.n	800df68 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800dfcc:	4a73      	ldr	r2, [pc, #460]	; (800e19c <HAL_UART_MspInit+0x268>)
 800dfce:	69d1      	ldr	r1, [r2, #28]
 800dfd0:	2080      	movs	r0, #128	; 0x80
 800dfd2:	0280      	lsls	r0, r0, #10
 800dfd4:	4301      	orrs	r1, r0
 800dfd6:	61d1      	str	r1, [r2, #28]
 800dfd8:	69d3      	ldr	r3, [r2, #28]
 800dfda:	4003      	ands	r3, r0
 800dfdc:	9302      	str	r3, [sp, #8]
 800dfde:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800dfe0:	2304      	movs	r3, #4
 800dfe2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfe4:	2702      	movs	r7, #2
 800dfe6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfe8:	2401      	movs	r4, #1
 800dfea:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dfec:	2603      	movs	r6, #3
 800dfee:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800dff0:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800dff2:	2590      	movs	r5, #144	; 0x90
 800dff4:	05ed      	lsls	r5, r5, #23
 800dff6:	a907      	add	r1, sp, #28
 800dff8:	0028      	movs	r0, r5
 800dffa:	f001 fdd7 	bl	800fbac <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800dffe:	2308      	movs	r3, #8
 800e000:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e002:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e004:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e006:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800e008:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800e00a:	a907      	add	r1, sp, #28
 800e00c:	0028      	movs	r0, r5
 800e00e:	f001 fdcd 	bl	800fbac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800e012:	2200      	movs	r2, #0
 800e014:	2101      	movs	r1, #1
 800e016:	201c      	movs	r0, #28
 800e018:	f000 fdfe 	bl	800ec18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e01c:	201c      	movs	r0, #28
 800e01e:	f000 fe2f 	bl	800ec80 <HAL_NVIC_EnableIRQ>
 800e022:	e7a1      	b.n	800df68 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800e024:	4a5d      	ldr	r2, [pc, #372]	; (800e19c <HAL_UART_MspInit+0x268>)
 800e026:	69d1      	ldr	r1, [r2, #28]
 800e028:	2080      	movs	r0, #128	; 0x80
 800e02a:	02c0      	lsls	r0, r0, #11
 800e02c:	4301      	orrs	r1, r0
 800e02e:	61d1      	str	r1, [r2, #28]
 800e030:	69d3      	ldr	r3, [r2, #28]
 800e032:	4003      	ands	r3, r0
 800e034:	9303      	str	r3, [sp, #12]
 800e036:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800e038:	2380      	movs	r3, #128	; 0x80
 800e03a:	00db      	lsls	r3, r3, #3
 800e03c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e03e:	2402      	movs	r4, #2
 800e040:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e042:	2701      	movs	r7, #1
 800e044:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e046:	2603      	movs	r6, #3
 800e048:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800e04a:	2504      	movs	r5, #4
 800e04c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800e04e:	a907      	add	r1, sp, #28
 800e050:	4853      	ldr	r0, [pc, #332]	; (800e1a0 <HAL_UART_MspInit+0x26c>)
 800e052:	f001 fdab 	bl	800fbac <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800e056:	2380      	movs	r3, #128	; 0x80
 800e058:	011b      	lsls	r3, r3, #4
 800e05a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e05c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e05e:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e060:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800e062:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800e064:	a907      	add	r1, sp, #28
 800e066:	484e      	ldr	r0, [pc, #312]	; (800e1a0 <HAL_UART_MspInit+0x26c>)
 800e068:	f001 fda0 	bl	800fbac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e06c:	2200      	movs	r2, #0
 800e06e:	2101      	movs	r1, #1
 800e070:	201d      	movs	r0, #29
 800e072:	f000 fdd1 	bl	800ec18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e076:	201d      	movs	r0, #29
 800e078:	f000 fe02 	bl	800ec80 <HAL_NVIC_EnableIRQ>
 800e07c:	e774      	b.n	800df68 <HAL_UART_MspInit+0x34>
    __USART4_CLK_ENABLE();
 800e07e:	4a47      	ldr	r2, [pc, #284]	; (800e19c <HAL_UART_MspInit+0x268>)
 800e080:	69d1      	ldr	r1, [r2, #28]
 800e082:	2080      	movs	r0, #128	; 0x80
 800e084:	0300      	lsls	r0, r0, #12
 800e086:	4301      	orrs	r1, r0
 800e088:	61d1      	str	r1, [r2, #28]
 800e08a:	69d3      	ldr	r3, [r2, #28]
 800e08c:	4003      	ands	r3, r0
 800e08e:	9304      	str	r3, [sp, #16]
 800e090:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800e092:	2401      	movs	r4, #1
 800e094:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e096:	2502      	movs	r5, #2
 800e098:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e09a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e09c:	2603      	movs	r6, #3
 800e09e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800e0a0:	2704      	movs	r7, #4
 800e0a2:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800e0a4:	a907      	add	r1, sp, #28
 800e0a6:	2090      	movs	r0, #144	; 0x90
 800e0a8:	05c0      	lsls	r0, r0, #23
 800e0aa:	f001 fd7f 	bl	800fbac <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800e0ae:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0b0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e0b2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e0b4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800e0b6:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800e0b8:	a907      	add	r1, sp, #28
 800e0ba:	2090      	movs	r0, #144	; 0x90
 800e0bc:	05c0      	lsls	r0, r0, #23
 800e0be:	f001 fd75 	bl	800fbac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	2101      	movs	r1, #1
 800e0c6:	201d      	movs	r0, #29
 800e0c8:	f000 fda6 	bl	800ec18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e0cc:	201d      	movs	r0, #29
 800e0ce:	f000 fdd7 	bl	800ec80 <HAL_NVIC_EnableIRQ>
 800e0d2:	e749      	b.n	800df68 <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800e0d4:	4a31      	ldr	r2, [pc, #196]	; (800e19c <HAL_UART_MspInit+0x268>)
 800e0d6:	69d1      	ldr	r1, [r2, #28]
 800e0d8:	2080      	movs	r0, #128	; 0x80
 800e0da:	0340      	lsls	r0, r0, #13
 800e0dc:	4301      	orrs	r1, r0
 800e0de:	61d1      	str	r1, [r2, #28]
 800e0e0:	69d3      	ldr	r3, [r2, #28]
 800e0e2:	4003      	ands	r3, r0
 800e0e4:	9305      	str	r3, [sp, #20]
 800e0e6:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800e0e8:	2308      	movs	r3, #8
 800e0ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0ec:	2402      	movs	r4, #2
 800e0ee:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e0f0:	2701      	movs	r7, #1
 800e0f2:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e0f4:	2603      	movs	r6, #3
 800e0f6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800e0f8:	2504      	movs	r5, #4
 800e0fa:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800e0fc:	a907      	add	r1, sp, #28
 800e0fe:	4828      	ldr	r0, [pc, #160]	; (800e1a0 <HAL_UART_MspInit+0x26c>)
 800e100:	f001 fd54 	bl	800fbac <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800e104:	2310      	movs	r3, #16
 800e106:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e108:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e10a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e10c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800e10e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800e110:	a907      	add	r1, sp, #28
 800e112:	4823      	ldr	r0, [pc, #140]	; (800e1a0 <HAL_UART_MspInit+0x26c>)
 800e114:	f001 fd4a 	bl	800fbac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e118:	2200      	movs	r2, #0
 800e11a:	2101      	movs	r1, #1
 800e11c:	201d      	movs	r0, #29
 800e11e:	f000 fd7b 	bl	800ec18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e122:	201d      	movs	r0, #29
 800e124:	f000 fdac 	bl	800ec80 <HAL_NVIC_EnableIRQ>
 800e128:	e71e      	b.n	800df68 <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800e12a:	4b1c      	ldr	r3, [pc, #112]	; (800e19c <HAL_UART_MspInit+0x268>)
 800e12c:	699a      	ldr	r2, [r3, #24]
 800e12e:	2420      	movs	r4, #32
 800e130:	4322      	orrs	r2, r4
 800e132:	619a      	str	r2, [r3, #24]
 800e134:	699b      	ldr	r3, [r3, #24]
 800e136:	4023      	ands	r3, r4
 800e138:	9306      	str	r3, [sp, #24]
 800e13a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800e13c:	2310      	movs	r3, #16
 800e13e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e140:	3b0e      	subs	r3, #14
 800e142:	4699      	mov	r9, r3
 800e144:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e146:	2501      	movs	r5, #1
 800e148:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e14a:	2703      	movs	r7, #3
 800e14c:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800e14e:	2605      	movs	r6, #5
 800e150:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800e152:	a907      	add	r1, sp, #28
 800e154:	2090      	movs	r0, #144	; 0x90
 800e156:	05c0      	lsls	r0, r0, #23
 800e158:	f001 fd28 	bl	800fbac <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800e15c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e15e:	464b      	mov	r3, r9
 800e160:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e162:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e164:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800e166:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800e168:	a907      	add	r1, sp, #28
 800e16a:	2090      	movs	r0, #144	; 0x90
 800e16c:	05c0      	lsls	r0, r0, #23
 800e16e:	f001 fd1d 	bl	800fbac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e172:	2200      	movs	r2, #0
 800e174:	2101      	movs	r1, #1
 800e176:	201d      	movs	r0, #29
 800e178:	f000 fd4e 	bl	800ec18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e17c:	201d      	movs	r0, #29
 800e17e:	f000 fd7f 	bl	800ec80 <HAL_NVIC_EnableIRQ>
}
 800e182:	e6f1      	b.n	800df68 <HAL_UART_MspInit+0x34>
 800e184:	40013800 	.word	0x40013800
 800e188:	40004400 	.word	0x40004400
 800e18c:	40004800 	.word	0x40004800
 800e190:	40004c00 	.word	0x40004c00
 800e194:	40005000 	.word	0x40005000
 800e198:	40011400 	.word	0x40011400
 800e19c:	40021000 	.word	0x40021000
 800e1a0:	48000400 	.word	0x48000400

0800e1a4 <writePxMutex>:
}

/* --- Blocking (polling-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout, uint32_t portTimeout)
{
 800e1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1a6:	b083      	sub	sp, #12
 800e1a8:	0004      	movs	r4, r0
 800e1aa:	000d      	movs	r5, r1
 800e1ac:	0016      	movs	r6, r2
 800e1ae:	9301      	str	r3, [sp, #4]
	HAL_StatusTypeDef result = HAL_ERROR;
	
	if (GetUart(port) != NULL) {
 800e1b0:	f7f6 fa14 	bl	80045dc <GetUart>
	HAL_StatusTypeDef result = HAL_ERROR;
 800e1b4:	2701      	movs	r7, #1
	if (GetUart(port) != NULL) {
 800e1b6:	2800      	cmp	r0, #0
 800e1b8:	d018      	beq.n	800e1ec <writePxMutex+0x48>
		/*/ Wait for the semaphore to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e1ba:	00a3      	lsls	r3, r4, #2
 800e1bc:	4a0d      	ldr	r2, [pc, #52]	; (800e1f4 <writePxMutex+0x50>)
 800e1be:	5898      	ldr	r0, [r3, r2]
 800e1c0:	9901      	ldr	r1, [sp, #4]
 800e1c2:	f000 f8e5 	bl	800e390 <osSemaphoreWait>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d110      	bne.n	800e1ec <writePxMutex+0x48>
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800e1ca:	0020      	movs	r0, r4
 800e1cc:	f7f6 fa06 	bl	80045dc <GetUart>
 800e1d0:	9b08      	ldr	r3, [sp, #32]
 800e1d2:	0032      	movs	r2, r6
 800e1d4:	0029      	movs	r1, r5
 800e1d6:	f003 fcd9 	bl	8011b8c <HAL_UART_Transmit>
 800e1da:	1e07      	subs	r7, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800e1dc:	d001      	beq.n	800e1e2 <writePxMutex+0x3e>
 800e1de:	2803      	cmp	r0, #3
 800e1e0:	d1f3      	bne.n	800e1ca <writePxMutex+0x26>
			}
			/* Give back the semaphore. */
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e1e2:	00a4      	lsls	r4, r4, #2
 800e1e4:	4b03      	ldr	r3, [pc, #12]	; (800e1f4 <writePxMutex+0x50>)
 800e1e6:	58e0      	ldr	r0, [r4, r3]
 800e1e8:	f000 f8fe 	bl	800e3e8 <osSemaphoreRelease>
		}
	}
	
	return result;
}
 800e1ec:	0038      	movs	r0, r7
 800e1ee:	b003      	add	sp, #12
 800e1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1f2:	46c0      	nop			; (mov r8, r8)
 800e1f4:	20006240 	.word	0x20006240

0800e1f8 <writePxITMutex>:
}

/* --- Non-blocking (interrupt-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxITMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800e1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fa:	0004      	movs	r4, r0
 800e1fc:	000e      	movs	r6, r1
 800e1fe:	0017      	movs	r7, r2
 800e200:	001d      	movs	r5, r3
	HAL_StatusTypeDef result = HAL_ERROR; 

	if (GetUart(port) != NULL) {	
 800e202:	f7f6 f9eb 	bl	80045dc <GetUart>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e206:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800e208:	2800      	cmp	r0, #0
 800e20a:	d008      	beq.n	800e21e <writePxITMutex+0x26>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e20c:	00a3      	lsls	r3, r4, #2
 800e20e:	4a09      	ldr	r2, [pc, #36]	; (800e234 <writePxITMutex+0x3c>)
 800e210:	5898      	ldr	r0, [r3, r2]
 800e212:	0029      	movs	r1, r5
 800e214:	f000 f8bc 	bl	800e390 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e218:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d001      	beq.n	800e222 <writePxITMutex+0x2a>
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800e21e:	0018      	movs	r0, r3
 800e220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800e222:	0020      	movs	r0, r4
 800e224:	f7f6 f9da 	bl	80045dc <GetUart>
 800e228:	003a      	movs	r2, r7
 800e22a:	0031      	movs	r1, r6
 800e22c:	f003 f918 	bl	8011460 <HAL_UART_Transmit_IT>
 800e230:	0003      	movs	r3, r0
 800e232:	e7f4      	b.n	800e21e <writePxITMutex+0x26>
 800e234:	20006240 	.word	0x20006240

0800e238 <writePxDMAMutex>:

/* --- Non-blocking (DMA-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxDMAMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800e238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e23a:	b083      	sub	sp, #12
 800e23c:	0004      	movs	r4, r0
 800e23e:	000f      	movs	r7, r1
 800e240:	9201      	str	r2, [sp, #4]
 800e242:	001e      	movs	r6, r3
	HAL_StatusTypeDef result = HAL_ERROR; 
	UART_HandleTypeDef* hUart = GetUart(port);
 800e244:	f7f6 f9ca 	bl	80045dc <GetUart>
 800e248:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e24a:	2301      	movs	r3, #1

	if (hUart != NULL) {	
 800e24c:	2800      	cmp	r0, #0
 800e24e:	d008      	beq.n	800e262 <writePxDMAMutex+0x2a>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e250:	00a4      	lsls	r4, r4, #2
 800e252:	4b0a      	ldr	r3, [pc, #40]	; (800e27c <writePxDMAMutex+0x44>)
 800e254:	58e0      	ldr	r0, [r4, r3]
 800e256:	0031      	movs	r1, r6
 800e258:	f000 f89a 	bl	800e390 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e25c:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e25e:	2800      	cmp	r0, #0
 800e260:	d002      	beq.n	800e268 <writePxDMAMutex+0x30>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800e262:	0018      	movs	r0, r3
 800e264:	b003      	add	sp, #12
 800e266:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800e268:	0028      	movs	r0, r5
 800e26a:	f7ff fc43 	bl	800daf4 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800e26e:	9a01      	ldr	r2, [sp, #4]
 800e270:	0039      	movs	r1, r7
 800e272:	0028      	movs	r0, r5
 800e274:	f003 f9a0 	bl	80115b8 <HAL_UART_Transmit_DMA>
 800e278:	0003      	movs	r3, r0
 800e27a:	e7f2      	b.n	800e262 <writePxDMAMutex+0x2a>
 800e27c:	20006240 	.word	0x20006240

0800e280 <UpdateBaudrate>:

/* --- Update baudrate for this port --- 
*/
BOS_Status UpdateBaudrate(uint8_t port, uint32_t baudrate)
{
 800e280:	b510      	push	{r4, lr}
 800e282:	000c      	movs	r4, r1
	BOS_Status result = BOS_OK; 
	UART_HandleTypeDef *huart = GetUart(port);
 800e284:	f7f6 f9aa 	bl	80045dc <GetUart>

	huart->Init.BaudRate = baudrate;
 800e288:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e28a:	f003 fd25 	bl	8011cd8 <HAL_UART_Init>
	
	return result;
}
 800e28e:	2000      	movs	r0, #0
 800e290:	bd10      	pop	{r4, pc}
	...

0800e294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e294:	480d      	ldr	r0, [pc, #52]	; (800e2cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800e296:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e298:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e29a:	e003      	b.n	800e2a4 <LoopCopyDataInit>

0800e29c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e29c:	4b0c      	ldr	r3, [pc, #48]	; (800e2d0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800e29e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e2a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e2a2:	3104      	adds	r1, #4

0800e2a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e2a4:	480b      	ldr	r0, [pc, #44]	; (800e2d4 <LoopForever+0xa>)
  ldr r3, =_edata
 800e2a6:	4b0c      	ldr	r3, [pc, #48]	; (800e2d8 <LoopForever+0xe>)
  adds r2, r0, r1
 800e2a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e2aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e2ac:	d3f6      	bcc.n	800e29c <CopyDataInit>
  ldr r2, =_sbss
 800e2ae:	4a0b      	ldr	r2, [pc, #44]	; (800e2dc <LoopForever+0x12>)
  b LoopFillZerobss
 800e2b0:	e002      	b.n	800e2b8 <LoopFillZerobss>

0800e2b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e2b2:	2300      	movs	r3, #0
  str  r3, [r2]
 800e2b4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e2b6:	3204      	adds	r2, #4

0800e2b8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e2b8:	4b09      	ldr	r3, [pc, #36]	; (800e2e0 <LoopForever+0x16>)
  cmp r2, r3
 800e2ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e2bc:	d3f9      	bcc.n	800e2b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e2be:	f000 f813 	bl	800e2e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e2c2:	f003 fe7d 	bl	8011fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e2c6:	f003 fe5c 	bl	8011f82 <main>

0800e2ca <LoopForever>:

LoopForever:
    b LoopForever
 800e2ca:	e7fe      	b.n	800e2ca <LoopForever>
  ldr   r0, =_estack
 800e2cc:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e2d0:	08019d80 	.word	0x08019d80
  ldr r0, =_sdata
 800e2d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800e2d8:	20000230 	.word	0x20000230
  ldr r2, =_sbss
 800e2dc:	20000398 	.word	0x20000398
  ldr r3, = _ebss
 800e2e0:	2000661c 	.word	0x2000661c

0800e2e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e2e4:	e7fe      	b.n	800e2e4 <ADC1_COMP_IRQHandler>
	...

0800e2e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e2e8:	4b11      	ldr	r3, [pc, #68]	; (800e330 <SystemInit+0x48>)
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	2101      	movs	r1, #1
 800e2ee:	430a      	orrs	r2, r1
 800e2f0:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e2f2:	685a      	ldr	r2, [r3, #4]
 800e2f4:	480f      	ldr	r0, [pc, #60]	; (800e334 <SystemInit+0x4c>)
 800e2f6:	4002      	ands	r2, r0
 800e2f8:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	480e      	ldr	r0, [pc, #56]	; (800e338 <SystemInit+0x50>)
 800e2fe:	4002      	ands	r2, r0
 800e300:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	480d      	ldr	r0, [pc, #52]	; (800e33c <SystemInit+0x54>)
 800e306:	4002      	ands	r2, r0
 800e308:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e30a:	685a      	ldr	r2, [r3, #4]
 800e30c:	480c      	ldr	r0, [pc, #48]	; (800e340 <SystemInit+0x58>)
 800e30e:	4002      	ands	r2, r0
 800e310:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e314:	200f      	movs	r0, #15
 800e316:	4382      	bics	r2, r0
 800e318:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e31a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e31c:	4809      	ldr	r0, [pc, #36]	; (800e344 <SystemInit+0x5c>)
 800e31e:	4002      	ands	r2, r0
 800e320:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e324:	438a      	bics	r2, r1
 800e326:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e328:	2200      	movs	r2, #0
 800e32a:	609a      	str	r2, [r3, #8]

}
 800e32c:	4770      	bx	lr
 800e32e:	46c0      	nop			; (mov r8, r8)
 800e330:	40021000 	.word	0x40021000
 800e334:	08ffb80c 	.word	0x08ffb80c
 800e338:	fef6ffff 	.word	0xfef6ffff
 800e33c:	fffbffff 	.word	0xfffbffff
 800e340:	ffc0ffff 	.word	0xffc0ffff
 800e344:	fff0feac 	.word	0xfff0feac

0800e348 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e348:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e34a:	f007 fc03 	bl	8015b54 <vTaskStartScheduler>
  
  return osOK;
}
 800e34e:	2000      	movs	r0, #0
 800e350:	bd10      	pop	{r4, pc}

0800e352 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e352:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e354:	2800      	cmp	r0, #0
 800e356:	d100      	bne.n	800e35a <osDelay+0x8>
 800e358:	3001      	adds	r0, #1
 800e35a:	f007 f899 	bl	8015490 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e35e:	2000      	movs	r0, #0
 800e360:	bd10      	pop	{r4, pc}

0800e362 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e362:	b510      	push	{r4, lr}
 800e364:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e366:	2901      	cmp	r1, #1
 800e368:	d005      	beq.n	800e376 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e36a:	2100      	movs	r1, #0
 800e36c:	f006 fdc0 	bl	8014ef0 <xQueueCreateCountingSemaphore>
 800e370:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e372:	0020      	movs	r0, r4
 800e374:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e376:	2203      	movs	r2, #3
 800e378:	2100      	movs	r1, #0
 800e37a:	f006 fd92 	bl	8014ea2 <xQueueGenericCreate>
 800e37e:	1e04      	subs	r4, r0, #0
 800e380:	d0f7      	beq.n	800e372 <osSemaphoreCreate+0x10>
 800e382:	2300      	movs	r3, #0
 800e384:	2200      	movs	r2, #0
 800e386:	2100      	movs	r1, #0
 800e388:	f006 fa4b 	bl	8014822 <xQueueGenericSend>
 800e38c:	e7f1      	b.n	800e372 <osSemaphoreCreate+0x10>
	...

0800e390 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e390:	b500      	push	{lr}
 800e392:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e394:	2300      	movs	r3, #0
 800e396:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e398:	2800      	cmp	r0, #0
 800e39a:	d021      	beq.n	800e3e0 <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e39c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d010      	beq.n	800e3c6 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e3a4:	aa01      	add	r2, sp, #4
 800e3a6:	2100      	movs	r1, #0
 800e3a8:	f006 fc3d 	bl	8014c26 <xQueueReceiveFromISR>
 800e3ac:	0003      	movs	r3, r0
      return osErrorOS;
 800e3ae:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d113      	bne.n	800e3dc <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e3b4:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800e3b6:	9b01      	ldr	r3, [sp, #4]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d00f      	beq.n	800e3dc <osSemaphoreWait+0x4c>
 800e3bc:	4b09      	ldr	r3, [pc, #36]	; (800e3e4 <osSemaphoreWait+0x54>)
 800e3be:	2280      	movs	r2, #128	; 0x80
 800e3c0:	0552      	lsls	r2, r2, #21
 800e3c2:	601a      	str	r2, [r3, #0]
 800e3c4:	e00a      	b.n	800e3dc <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	000a      	movs	r2, r1
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	f006 fae6 	bl	801499c <xQueueGenericReceive>
  return osOK;
 800e3d0:	3801      	subs	r0, #1
 800e3d2:	1e43      	subs	r3, r0, #1
 800e3d4:	4198      	sbcs	r0, r3
 800e3d6:	4240      	negs	r0, r0
 800e3d8:	23ff      	movs	r3, #255	; 0xff
 800e3da:	4018      	ands	r0, r3
}
 800e3dc:	b003      	add	sp, #12
 800e3de:	bd00      	pop	{pc}
    return osErrorParameter;
 800e3e0:	2080      	movs	r0, #128	; 0x80
 800e3e2:	e7fb      	b.n	800e3dc <osSemaphoreWait+0x4c>
 800e3e4:	e000ed04 	.word	0xe000ed04

0800e3e8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e3e8:	b500      	push	{lr}
 800e3ea:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d00f      	beq.n	800e418 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e3f8:	a901      	add	r1, sp, #4
 800e3fa:	f006 fbd9 	bl	8014bb0 <xQueueGiveFromISR>
 800e3fe:	0003      	movs	r3, r0
      return osErrorOS;
 800e400:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e402:	2b01      	cmp	r3, #1
 800e404:	d114      	bne.n	800e430 <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800e406:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e408:	9b01      	ldr	r3, [sp, #4]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d010      	beq.n	800e430 <osSemaphoreRelease+0x48>
 800e40e:	4b09      	ldr	r3, [pc, #36]	; (800e434 <osSemaphoreRelease+0x4c>)
 800e410:	2280      	movs	r2, #128	; 0x80
 800e412:	0552      	lsls	r2, r2, #21
 800e414:	601a      	str	r2, [r3, #0]
 800e416:	e00b      	b.n	800e430 <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e418:	2300      	movs	r3, #0
 800e41a:	2200      	movs	r2, #0
 800e41c:	2100      	movs	r1, #0
 800e41e:	f006 fa00 	bl	8014822 <xQueueGenericSend>
      result = osErrorOS;
 800e422:	3801      	subs	r0, #1
 800e424:	4243      	negs	r3, r0
 800e426:	4158      	adcs	r0, r3
 800e428:	4240      	negs	r0, r0
 800e42a:	23fe      	movs	r3, #254	; 0xfe
 800e42c:	4398      	bics	r0, r3
 800e42e:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800e430:	b003      	add	sp, #12
 800e432:	bd00      	pop	{pc}
 800e434:	e000ed04 	.word	0xe000ed04

0800e438 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e438:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e43a:	f007 fa2b 	bl	8015894 <xTaskGetSchedulerState>
 800e43e:	2801      	cmp	r0, #1
 800e440:	d001      	beq.n	800e446 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800e442:	f000 fb61 	bl	800eb08 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e446:	bd10      	pop	{r4, pc}

0800e448 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800e448:	b570      	push	{r4, r5, r6, lr}
 800e44a:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800e44c:	d101      	bne.n	800e452 <FreeRTOS_CLIRegisterCommand+0xa>
 800e44e:	b672      	cpsid	i
 800e450:	e7fe      	b.n	800e450 <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e452:	2008      	movs	r0, #8
 800e454:	f007 fe8c 	bl	8016170 <pvPortMalloc>
 800e458:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800e45a:	d101      	bne.n	800e460 <FreeRTOS_CLIRegisterCommand+0x18>
 800e45c:	b672      	cpsid	i
 800e45e:	e7fe      	b.n	800e45e <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800e460:	f000 fb0c 	bl	800ea7c <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e464:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800e466:	2300      	movs	r3, #0
 800e468:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800e46a:	4b04      	ldr	r3, [pc, #16]	; (800e47c <FreeRTOS_CLIRegisterCommand+0x34>)
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800e470:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800e472:	f000 fb0f 	bl	800ea94 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800e476:	2001      	movs	r0, #1
 800e478:	bd70      	pop	{r4, r5, r6, pc}
 800e47a:	46c0      	nop			; (mov r8, r8)
 800e47c:	20000050 	.word	0x20000050

0800e480 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800e480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e482:	46d6      	mov	lr, sl
 800e484:	b500      	push	{lr}
 800e486:	b084      	sub	sp, #16
 800e488:	9001      	str	r0, [sp, #4]
 800e48a:	9102      	str	r1, [sp, #8]
 800e48c:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800e48e:	4b37      	ldr	r3, [pc, #220]	; (800e56c <FreeRTOS_CLIProcessCommand+0xec>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00e      	beq.n	800e4b4 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	9a01      	ldr	r2, [sp, #4]
 800e49c:	9903      	ldr	r1, [sp, #12]
 800e49e:	9802      	ldr	r0, [sp, #8]
 800e4a0:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	d102      	bne.n	800e4ac <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800e4a6:	4b31      	ldr	r3, [pc, #196]	; (800e56c <FreeRTOS_CLIProcessCommand+0xec>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800e4ac:	b004      	add	sp, #16
 800e4ae:	bc04      	pop	{r2}
 800e4b0:	4692      	mov	sl, r2
 800e4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e4b4:	4d2e      	ldr	r5, [pc, #184]	; (800e570 <FreeRTOS_CLIProcessCommand+0xf0>)
 800e4b6:	4a2d      	ldr	r2, [pc, #180]	; (800e56c <FreeRTOS_CLIProcessCommand+0xec>)
 800e4b8:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e4ba:	3320      	adds	r3, #32
 800e4bc:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e4be:	0017      	movs	r7, r2
 800e4c0:	e00a      	b.n	800e4d8 <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e4c2:	0002      	movs	r2, r0
 800e4c4:	0021      	movs	r1, r4
 800e4c6:	9801      	ldr	r0, [sp, #4]
 800e4c8:	f003 ff30 	bl	801232c <strncmp>
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d00e      	beq.n	800e4ee <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e4d0:	686d      	ldr	r5, [r5, #4]
 800e4d2:	603d      	str	r5, [r7, #0]
 800e4d4:	2d00      	cmp	r5, #0
 800e4d6:	d012      	beq.n	800e4fe <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e4d8:	682e      	ldr	r6, [r5, #0]
 800e4da:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e4dc:	0020      	movs	r0, r4
 800e4de:	f7f1 fe1b 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e4e2:	9b01      	ldr	r3, [sp, #4]
 800e4e4:	5c1b      	ldrb	r3, [r3, r0]
 800e4e6:	4652      	mov	r2, sl
 800e4e8:	4393      	bics	r3, r2
 800e4ea:	d1f1      	bne.n	800e4d0 <FreeRTOS_CLIProcessCommand+0x50>
 800e4ec:	e7e9      	b.n	800e4c2 <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e4ee:	200c      	movs	r0, #12
 800e4f0:	5630      	ldrsb	r0, [r6, r0]
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	da0a      	bge.n	800e50c <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e4f6:	4b1d      	ldr	r3, [pc, #116]	; (800e56c <FreeRTOS_CLIProcessCommand+0xec>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1cb      	bne.n	800e496 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e4fe:	9a03      	ldr	r2, [sp, #12]
 800e500:	491c      	ldr	r1, [pc, #112]	; (800e574 <FreeRTOS_CLIProcessCommand+0xf4>)
 800e502:	9802      	ldr	r0, [sp, #8]
 800e504:	f003 ff23 	bl	801234e <strncpy>
		xReturn = pdFALSE;
 800e508:	2000      	movs	r0, #0
	return xReturn;
 800e50a:	e7cf      	b.n	800e4ac <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e50c:	9a01      	ldr	r2, [sp, #4]
 800e50e:	2300      	movs	r3, #0
 800e510:	56d3      	ldrsb	r3, [r2, r3]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d027      	beq.n	800e566 <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800e516:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e518:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800e51a:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800e51c:	2501      	movs	r5, #1
 800e51e:	e009      	b.n	800e534 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800e520:	2901      	cmp	r1, #1
 800e522:	d002      	beq.n	800e52a <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800e524:	3401      	adds	r4, #1
 800e526:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800e528:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800e52a:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800e52c:	2300      	movs	r3, #0
 800e52e:	56d3      	ldrsb	r3, [r2, r3]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d003      	beq.n	800e53c <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800e534:	2b20      	cmp	r3, #32
 800e536:	d0f3      	beq.n	800e520 <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800e538:	0031      	movs	r1, r6
 800e53a:	e7f6      	b.n	800e52a <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e53c:	2901      	cmp	r1, #1
 800e53e:	d00f      	beq.n	800e560 <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e540:	4b0a      	ldr	r3, [pc, #40]	; (800e56c <FreeRTOS_CLIProcessCommand+0xec>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d0da      	beq.n	800e4fe <FreeRTOS_CLIProcessCommand+0x7e>
 800e548:	42a0      	cmp	r0, r4
 800e54a:	d0a4      	beq.n	800e496 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e54c:	9a03      	ldr	r2, [sp, #12]
 800e54e:	490a      	ldr	r1, [pc, #40]	; (800e578 <FreeRTOS_CLIProcessCommand+0xf8>)
 800e550:	9802      	ldr	r0, [sp, #8]
 800e552:	f003 fefc 	bl	801234e <strncpy>
		pxCommand = NULL;
 800e556:	4b05      	ldr	r3, [pc, #20]	; (800e56c <FreeRTOS_CLIProcessCommand+0xec>)
 800e558:	2200      	movs	r2, #0
 800e55a:	601a      	str	r2, [r3, #0]
 800e55c:	2000      	movs	r0, #0
 800e55e:	e7a5      	b.n	800e4ac <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800e560:	3c01      	subs	r4, #1
 800e562:	b264      	sxtb	r4, r4
 800e564:	e7ec      	b.n	800e540 <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800e566:	2400      	movs	r4, #0
 800e568:	e7ea      	b.n	800e540 <FreeRTOS_CLIProcessCommand+0xc0>
 800e56a:	46c0      	nop			; (mov r8, r8)
 800e56c:	2000163c 	.word	0x2000163c
 800e570:	20000054 	.word	0x20000054
 800e574:	0801998c 	.word	0x0801998c
 800e578:	08019934 	.word	0x08019934

0800e57c <FreeRTOS_CLIGetOutputBuffer>:
}
 800e57c:	4800      	ldr	r0, [pc, #0]	; (800e580 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e57e:	4770      	bx	lr
 800e580:	200013d4 	.word	0x200013d4

0800e584 <FreeRTOS_CLIGetParameter>:
{
 800e584:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800e586:	2300      	movs	r3, #0
 800e588:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e58a:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e58c:	2900      	cmp	r1, #0
 800e58e:	d10b      	bne.n	800e5a8 <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800e590:	2000      	movs	r0, #0
 800e592:	e02a      	b.n	800e5ea <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800e594:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e596:	2300      	movs	r3, #0
 800e598:	56c3      	ldrsb	r3, [r0, r3]
 800e59a:	2b20      	cmp	r3, #32
 800e59c:	d0fa      	beq.n	800e594 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d022      	beq.n	800e5e8 <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800e5a2:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e5a4:	42a1      	cmp	r1, r4
 800e5a6:	d00d      	beq.n	800e5c4 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	56c3      	ldrsb	r3, [r0, r3]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d01f      	beq.n	800e5f0 <FreeRTOS_CLIGetParameter+0x6c>
 800e5b0:	2b20      	cmp	r3, #32
 800e5b2:	d0ef      	beq.n	800e594 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800e5b4:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	56c3      	ldrsb	r3, [r0, r3]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d018      	beq.n	800e5f0 <FreeRTOS_CLIGetParameter+0x6c>
 800e5be:	2b20      	cmp	r3, #32
 800e5c0:	d1f8      	bne.n	800e5b4 <FreeRTOS_CLIGetParameter+0x30>
 800e5c2:	e7e7      	b.n	800e594 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e5c4:	7803      	ldrb	r3, [r0, #0]
 800e5c6:	2120      	movs	r1, #32
 800e5c8:	438b      	bics	r3, r1
 800e5ca:	d00f      	beq.n	800e5ec <FreeRTOS_CLIGetParameter+0x68>
 800e5cc:	0004      	movs	r4, r0
 800e5ce:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800e5d0:	6813      	ldr	r3, [r2, #0]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800e5d6:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e5d8:	7821      	ldrb	r1, [r4, #0]
 800e5da:	43a9      	bics	r1, r5
 800e5dc:	d1f8      	bne.n	800e5d0 <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800e5de:	1e5a      	subs	r2, r3, #1
 800e5e0:	4193      	sbcs	r3, r2
 800e5e2:	425b      	negs	r3, r3
 800e5e4:	4018      	ands	r0, r3
 800e5e6:	e000      	b.n	800e5ea <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800e5e8:	2000      	movs	r0, #0
}
 800e5ea:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800e5ec:	2000      	movs	r0, #0
 800e5ee:	e7fc      	b.n	800e5ea <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	56c3      	ldrsb	r3, [r0, r3]
 800e5f4:	e7d3      	b.n	800e59e <FreeRTOS_CLIGetParameter+0x1a>
	...

0800e5f8 <prvHelpCommand>:
{
 800e5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	0004      	movs	r4, r0
 800e5fe:	000d      	movs	r5, r1
 800e600:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800e602:	2300      	movs	r3, #0
 800e604:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e606:	aa01      	add	r2, sp, #4
 800e608:	2101      	movs	r1, #1
 800e60a:	f7ff ffbb 	bl	800e584 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e60e:	2800      	cmp	r0, #0
 800e610:	d027      	beq.n	800e662 <prvHelpCommand+0x6a>
 800e612:	2206      	movs	r2, #6
 800e614:	4930      	ldr	r1, [pc, #192]	; (800e6d8 <prvHelpCommand+0xe0>)
 800e616:	f003 fe89 	bl	801232c <strncmp>
 800e61a:	2800      	cmp	r0, #0
 800e61c:	d149      	bne.n	800e6b2 <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800e61e:	4b2f      	ldr	r3, [pc, #188]	; (800e6dc <prvHelpCommand+0xe4>)
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	2b07      	cmp	r3, #7
 800e624:	d012      	beq.n	800e64c <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e626:	1c5f      	adds	r7, r3, #1
 800e628:	b2ff      	uxtb	r7, r7
 800e62a:	4a2c      	ldr	r2, [pc, #176]	; (800e6dc <prvHelpCommand+0xe4>)
 800e62c:	7017      	strb	r7, [r2, #0]
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	4a2b      	ldr	r2, [pc, #172]	; (800e6e0 <prvHelpCommand+0xe8>)
 800e632:	5899      	ldr	r1, [r3, r2]
 800e634:	002a      	movs	r2, r5
 800e636:	0020      	movs	r0, r4
 800e638:	f003 fe89 	bl	801234e <strncpy>
			xReturn = pdTRUE;
 800e63c:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800e63e:	2f07      	cmp	r7, #7
 800e640:	d137      	bne.n	800e6b2 <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800e642:	4b26      	ldr	r3, [pc, #152]	; (800e6dc <prvHelpCommand+0xe4>)
 800e644:	2200      	movs	r2, #0
 800e646:	701a      	strb	r2, [r3, #0]
 800e648:	2600      	movs	r6, #0
 800e64a:	e032      	b.n	800e6b2 <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e64c:	4b23      	ldr	r3, [pc, #140]	; (800e6dc <prvHelpCommand+0xe4>)
 800e64e:	2201      	movs	r2, #1
 800e650:	701a      	strb	r2, [r3, #0]
 800e652:	4b23      	ldr	r3, [pc, #140]	; (800e6e0 <prvHelpCommand+0xe8>)
 800e654:	6819      	ldr	r1, [r3, #0]
 800e656:	002a      	movs	r2, r5
 800e658:	0020      	movs	r0, r4
 800e65a:	f003 fe78 	bl	801234e <strncpy>
			xReturn = pdTRUE;
 800e65e:	2601      	movs	r6, #1
 800e660:	e027      	b.n	800e6b2 <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800e662:	4b20      	ldr	r3, [pc, #128]	; (800e6e4 <prvHelpCommand+0xec>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d026      	beq.n	800e6b8 <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800e66a:	4b1f      	ldr	r3, [pc, #124]	; (800e6e8 <prvHelpCommand+0xf0>)
 800e66c:	781a      	ldrb	r2, [r3, #0]
 800e66e:	4b1f      	ldr	r3, [pc, #124]	; (800e6ec <prvHelpCommand+0xf4>)
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	429a      	cmp	r2, r3
 800e674:	d927      	bls.n	800e6c6 <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e676:	002a      	movs	r2, r5
 800e678:	3a08      	subs	r2, #8
 800e67a:	4b1a      	ldr	r3, [pc, #104]	; (800e6e4 <prvHelpCommand+0xec>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	6859      	ldr	r1, [r3, #4]
 800e682:	0020      	movs	r0, r4
 800e684:	3008      	adds	r0, #8
 800e686:	f003 fe62 	bl	801234e <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e68a:	1c60      	adds	r0, r4, #1
 800e68c:	4918      	ldr	r1, [pc, #96]	; (800e6f0 <prvHelpCommand+0xf8>)
 800e68e:	f003 fe45 	bl	801231c <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e692:	2328      	movs	r3, #40	; 0x28
 800e694:	7023      	strb	r3, [r4, #0]
 800e696:	3301      	adds	r3, #1
 800e698:	71a3      	strb	r3, [r4, #6]
 800e69a:	3b09      	subs	r3, #9
 800e69c:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800e69e:	4b11      	ldr	r3, [pc, #68]	; (800e6e4 <prvHelpCommand+0xec>)
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	6856      	ldr	r6, [r2, #4]
 800e6a4:	601e      	str	r6, [r3, #0]
		counter++;
 800e6a6:	4a10      	ldr	r2, [pc, #64]	; (800e6e8 <prvHelpCommand+0xf0>)
 800e6a8:	7813      	ldrb	r3, [r2, #0]
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800e6ae:	1e73      	subs	r3, r6, #1
 800e6b0:	419e      	sbcs	r6, r3
}
 800e6b2:	0030      	movs	r0, r6
 800e6b4:	b003      	add	sp, #12
 800e6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800e6b8:	4b0a      	ldr	r3, [pc, #40]	; (800e6e4 <prvHelpCommand+0xec>)
 800e6ba:	4a0e      	ldr	r2, [pc, #56]	; (800e6f4 <prvHelpCommand+0xfc>)
 800e6bc:	601a      	str	r2, [r3, #0]
			counter = 1;
 800e6be:	4b0a      	ldr	r3, [pc, #40]	; (800e6e8 <prvHelpCommand+0xf0>)
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	701a      	strb	r2, [r3, #0]
 800e6c4:	e7d1      	b.n	800e66a <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e6c6:	4b07      	ldr	r3, [pc, #28]	; (800e6e4 <prvHelpCommand+0xec>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	6859      	ldr	r1, [r3, #4]
 800e6ce:	002a      	movs	r2, r5
 800e6d0:	0020      	movs	r0, r4
 800e6d2:	f003 fe3c 	bl	801234e <strncpy>
 800e6d6:	e7e2      	b.n	800e69e <prvHelpCommand+0xa6>
 800e6d8:	08016ba0 	.word	0x08016ba0
 800e6dc:	20001644 	.word	0x20001644
 800e6e0:	20000020 	.word	0x20000020
 800e6e4:	20001640 	.word	0x20001640
 800e6e8:	20001638 	.word	0x20001638
 800e6ec:	200060a8 	.word	0x200060a8
 800e6f0:	08016fc2 	.word	0x08016fc2
 800e6f4:	20000054 	.word	0x20000054

0800e6f8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6f8:	0003      	movs	r3, r0
 800e6fa:	3308      	adds	r3, #8
 800e6fc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e6fe:	2201      	movs	r2, #1
 800e700:	4252      	negs	r2, r2
 800e702:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e704:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e706:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e708:	2300      	movs	r3, #0
 800e70a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e70c:	4770      	bx	lr

0800e70e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e70e:	2300      	movs	r3, #0
 800e710:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e712:	4770      	bx	lr

0800e714 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e714:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e716:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e718:	689a      	ldr	r2, [r3, #8]
 800e71a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e71c:	689a      	ldr	r2, [r3, #8]
 800e71e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e720:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e722:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e724:	6803      	ldr	r3, [r0, #0]
 800e726:	3301      	adds	r3, #1
 800e728:	6003      	str	r3, [r0, #0]
}
 800e72a:	4770      	bx	lr

0800e72c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e72c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e72e:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e730:	0002      	movs	r2, r0
 800e732:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800e734:	1c63      	adds	r3, r4, #1
 800e736:	d102      	bne.n	800e73e <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800e738:	6902      	ldr	r2, [r0, #16]
 800e73a:	e004      	b.n	800e746 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e73c:	001a      	movs	r2, r3
 800e73e:	6853      	ldr	r3, [r2, #4]
 800e740:	681d      	ldr	r5, [r3, #0]
 800e742:	42a5      	cmp	r5, r4
 800e744:	d9fa      	bls.n	800e73c <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e746:	6853      	ldr	r3, [r2, #4]
 800e748:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e74a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e74c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e74e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e750:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e752:	6803      	ldr	r3, [r0, #0]
 800e754:	3301      	adds	r3, #1
 800e756:	6003      	str	r3, [r0, #0]
}
 800e758:	bd30      	pop	{r4, r5, pc}

0800e75a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e75a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e75c:	6842      	ldr	r2, [r0, #4]
 800e75e:	6881      	ldr	r1, [r0, #8]
 800e760:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e762:	6882      	ldr	r2, [r0, #8]
 800e764:	6841      	ldr	r1, [r0, #4]
 800e766:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e768:	685a      	ldr	r2, [r3, #4]
 800e76a:	4282      	cmp	r2, r0
 800e76c:	d005      	beq.n	800e77a <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e76e:	2200      	movs	r2, #0
 800e770:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	1e50      	subs	r0, r2, #1
 800e776:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e778:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e77a:	6882      	ldr	r2, [r0, #8]
 800e77c:	605a      	str	r2, [r3, #4]
 800e77e:	e7f6      	b.n	800e76e <uxListRemove+0x14>

0800e780 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e780:	4b08      	ldr	r3, [pc, #32]	; (800e7a4 <prvResetNextTaskUnblockTime+0x24>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d006      	beq.n	800e798 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e78a:	4b06      	ldr	r3, [pc, #24]	; (800e7a4 <prvResetNextTaskUnblockTime+0x24>)
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e790:	68d2      	ldr	r2, [r2, #12]
 800e792:	6852      	ldr	r2, [r2, #4]
 800e794:	605a      	str	r2, [r3, #4]
	}
}
 800e796:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800e798:	4b02      	ldr	r3, [pc, #8]	; (800e7a4 <prvResetNextTaskUnblockTime+0x24>)
 800e79a:	2201      	movs	r2, #1
 800e79c:	4252      	negs	r2, r2
 800e79e:	605a      	str	r2, [r3, #4]
 800e7a0:	e7f9      	b.n	800e796 <prvResetNextTaskUnblockTime+0x16>
 800e7a2:	46c0      	nop			; (mov r8, r8)
 800e7a4:	20000230 	.word	0x20000230

0800e7a8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e7a8:	b510      	push	{r4, lr}
 800e7aa:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e7ac:	f003 fdb6 	bl	801231c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e7b0:	0020      	movs	r0, r4
 800e7b2:	f7f1 fcb1 	bl	8000118 <strlen>
 800e7b6:	0003      	movs	r3, r0
 800e7b8:	280b      	cmp	r0, #11
 800e7ba:	dc08      	bgt.n	800e7ce <prvWriteNameToBuffer+0x26>
 800e7bc:	1820      	adds	r0, r4, r0
 800e7be:	0022      	movs	r2, r4
 800e7c0:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800e7c2:	2320      	movs	r3, #32
 800e7c4:	7003      	strb	r3, [r0, #0]
 800e7c6:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e7c8:	4290      	cmp	r0, r2
 800e7ca:	d1fb      	bne.n	800e7c4 <prvWriteNameToBuffer+0x1c>
 800e7cc:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e7ce:	18e0      	adds	r0, r4, r3
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e7d4:	bd10      	pop	{r4, pc}
	...

0800e7d8 <prvIdleTask>:
{
 800e7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e7da:	4d15      	ldr	r5, [pc, #84]	; (800e830 <prvIdleTask+0x58>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e7dc:	002e      	movs	r6, r5
 800e7de:	e003      	b.n	800e7e8 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e7e0:	4b14      	ldr	r3, [pc, #80]	; (800e834 <prvIdleTask+0x5c>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d820      	bhi.n	800e82a <prvIdleTask+0x52>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e7e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d0f8      	beq.n	800e7e0 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800e7ee:	f006 fd45 	bl	801527c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e7f2:	6974      	ldr	r4, [r6, #20]
			( void ) xTaskResumeAll();
 800e7f4:	f006 fde8 	bl	80153c8 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e7f8:	2c00      	cmp	r4, #0
 800e7fa:	d0f5      	beq.n	800e7e8 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800e7fc:	f000 f93e 	bl	800ea7c <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e800:	4c0b      	ldr	r4, [pc, #44]	; (800e830 <prvIdleTask+0x58>)
 800e802:	6a23      	ldr	r3, [r4, #32]
 800e804:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e806:	1d38      	adds	r0, r7, #4
 800e808:	f7ff ffa7 	bl	800e75a <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e80c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e80e:	3b01      	subs	r3, #1
 800e810:	6663      	str	r3, [r4, #100]	; 0x64
					--uxTasksDeleted;
 800e812:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e814:	3b01      	subs	r3, #1
 800e816:	62a3      	str	r3, [r4, #40]	; 0x28
				taskEXIT_CRITICAL();
 800e818:	f000 f93c 	bl	800ea94 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e81c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e81e:	f007 fd3d 	bl	801629c <vPortFree>
		vPortFree( pxTCB );
 800e822:	0038      	movs	r0, r7
 800e824:	f007 fd3a 	bl	801629c <vPortFree>
 800e828:	e7de      	b.n	800e7e8 <prvIdleTask+0x10>
				taskYIELD();
 800e82a:	f000 f91b 	bl	800ea64 <vPortYield>
 800e82e:	e7db      	b.n	800e7e8 <prvIdleTask+0x10>
 800e830:	20000230 	.word	0x20000230
 800e834:	200002d0 	.word	0x200002d0

0800e838 <uxTaskGetSystemState>:
	{
 800e838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e83a:	46c6      	mov	lr, r8
 800e83c:	b500      	push	{lr}
 800e83e:	0006      	movs	r6, r0
 800e840:	000d      	movs	r5, r1
 800e842:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800e844:	f006 fd1a 	bl	801527c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e848:	4b1e      	ldr	r3, [pc, #120]	; (800e8c4 <uxTaskGetSystemState+0x8c>)
 800e84a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e84c:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e84e:	42ab      	cmp	r3, r5
 800e850:	d832      	bhi.n	800e8b8 <uxTaskGetSystemState+0x80>
 800e852:	4d1d      	ldr	r5, [pc, #116]	; (800e8c8 <uxTaskGetSystemState+0x90>)
 800e854:	002f      	movs	r7, r5
 800e856:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e858:	0160      	lsls	r0, r4, #5
 800e85a:	1830      	adds	r0, r6, r0
 800e85c:	2201      	movs	r2, #1
 800e85e:	0029      	movs	r1, r5
 800e860:	f006 fb62 	bl	8014f28 <prvListTaskWithinSingleList>
 800e864:	1824      	adds	r4, r4, r0
 800e866:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e868:	42bd      	cmp	r5, r7
 800e86a:	d1f5      	bne.n	800e858 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e86c:	4d15      	ldr	r5, [pc, #84]	; (800e8c4 <uxTaskGetSystemState+0x8c>)
 800e86e:	6829      	ldr	r1, [r5, #0]
 800e870:	0160      	lsls	r0, r4, #5
 800e872:	1830      	adds	r0, r6, r0
 800e874:	2202      	movs	r2, #2
 800e876:	f006 fb57 	bl	8014f28 <prvListTaskWithinSingleList>
 800e87a:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e87c:	6929      	ldr	r1, [r5, #16]
 800e87e:	0160      	lsls	r0, r4, #5
 800e880:	1830      	adds	r0, r6, r0
 800e882:	2202      	movs	r2, #2
 800e884:	f006 fb50 	bl	8014f28 <prvListTaskWithinSingleList>
 800e888:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800e88a:	0029      	movs	r1, r5
 800e88c:	3114      	adds	r1, #20
 800e88e:	0160      	lsls	r0, r4, #5
 800e890:	1830      	adds	r0, r6, r0
 800e892:	2204      	movs	r2, #4
 800e894:	f006 fb48 	bl	8014f28 <prvListTaskWithinSingleList>
 800e898:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800e89a:	0029      	movs	r1, r5
 800e89c:	313c      	adds	r1, #60	; 0x3c
 800e89e:	0160      	lsls	r0, r4, #5
 800e8a0:	1830      	adds	r0, r6, r0
 800e8a2:	2203      	movs	r2, #3
 800e8a4:	f006 fb40 	bl	8014f28 <prvListTaskWithinSingleList>
 800e8a8:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800e8aa:	4643      	mov	r3, r8
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d003      	beq.n	800e8b8 <uxTaskGetSystemState+0x80>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e8b0:	f7fc fda4 	bl	800b3fc <ulMainGetRunTimeCounterValue>
 800e8b4:	4643      	mov	r3, r8
 800e8b6:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e8b8:	f006 fd86 	bl	80153c8 <xTaskResumeAll>
	}
 800e8bc:	0020      	movs	r0, r4
 800e8be:	bc04      	pop	{r2}
 800e8c0:	4690      	mov	r8, r2
 800e8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8c4:	20000230 	.word	0x20000230
 800e8c8:	20000348 	.word	0x20000348

0800e8cc <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e8cc:	4b05      	ldr	r3, [pc, #20]	; (800e8e4 <pvTaskIncrementMutexHeldCount+0x18>)
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d004      	beq.n	800e8de <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e8d4:	4b03      	ldr	r3, [pc, #12]	; (800e8e4 <pvTaskIncrementMutexHeldCount+0x18>)
 800e8d6:	689a      	ldr	r2, [r3, #8]
 800e8d8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e8da:	3301      	adds	r3, #1
 800e8dc:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e8de:	4b01      	ldr	r3, [pc, #4]	; (800e8e4 <pvTaskIncrementMutexHeldCount+0x18>)
 800e8e0:	6898      	ldr	r0, [r3, #8]
	}
 800e8e2:	4770      	bx	lr
 800e8e4:	20000230 	.word	0x20000230

0800e8e8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800e8e8:	b570      	push	{r4, r5, r6, lr}
 800e8ea:	0005      	movs	r5, r0
 800e8ec:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800e8ee:	f000 f8c5 	bl	800ea7c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800e8f2:	4b20      	ldr	r3, [pc, #128]	; (800e974 <ulTaskNotifyTake+0x8c>)
 800e8f4:	689b      	ldr	r3, [r3, #8]
 800e8f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d106      	bne.n	800e90a <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800e8fc:	4b1d      	ldr	r3, [pc, #116]	; (800e974 <ulTaskNotifyTake+0x8c>)
 800e8fe:	689a      	ldr	r2, [r3, #8]
 800e900:	235c      	movs	r3, #92	; 0x5c
 800e902:	2101      	movs	r1, #1
 800e904:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800e906:	2c00      	cmp	r4, #0
 800e908:	d118      	bne.n	800e93c <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e90a:	f000 f8c3 	bl	800ea94 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e90e:	f000 f8b5 	bl	800ea7c <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e912:	4b18      	ldr	r3, [pc, #96]	; (800e974 <ulTaskNotifyTake+0x8c>)
 800e914:	689b      	ldr	r3, [r3, #8]
 800e916:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800e918:	2c00      	cmp	r4, #0
 800e91a:	d006      	beq.n	800e92a <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800e91c:	2d00      	cmp	r5, #0
 800e91e:	d123      	bne.n	800e968 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800e920:	4b14      	ldr	r3, [pc, #80]	; (800e974 <ulTaskNotifyTake+0x8c>)
 800e922:	689a      	ldr	r2, [r3, #8]
 800e924:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e926:	3b01      	subs	r3, #1
 800e928:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800e92a:	4b12      	ldr	r3, [pc, #72]	; (800e974 <ulTaskNotifyTake+0x8c>)
 800e92c:	689a      	ldr	r2, [r3, #8]
 800e92e:	235c      	movs	r3, #92	; 0x5c
 800e930:	2100      	movs	r1, #0
 800e932:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800e934:	f000 f8ae 	bl	800ea94 <vPortExitCritical>

		return ulReturn;
	}
 800e938:	0020      	movs	r0, r4
 800e93a:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e93c:	4b0d      	ldr	r3, [pc, #52]	; (800e974 <ulTaskNotifyTake+0x8c>)
 800e93e:	6898      	ldr	r0, [r3, #8]
 800e940:	3004      	adds	r0, #4
 800e942:	f7ff ff0a 	bl	800e75a <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800e946:	1c63      	adds	r3, r4, #1
 800e948:	d007      	beq.n	800e95a <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800e94a:	4b0a      	ldr	r3, [pc, #40]	; (800e974 <ulTaskNotifyTake+0x8c>)
 800e94c:	68d8      	ldr	r0, [r3, #12]
 800e94e:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e950:	f006 fb3e 	bl	8014fd0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800e954:	f000 f886 	bl	800ea64 <vPortYield>
 800e958:	e7d7      	b.n	800e90a <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e95a:	4806      	ldr	r0, [pc, #24]	; (800e974 <ulTaskNotifyTake+0x8c>)
 800e95c:	6881      	ldr	r1, [r0, #8]
 800e95e:	3104      	adds	r1, #4
 800e960:	303c      	adds	r0, #60	; 0x3c
 800e962:	f7ff fed7 	bl	800e714 <vListInsertEnd>
 800e966:	e7f5      	b.n	800e954 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e968:	4b02      	ldr	r3, [pc, #8]	; (800e974 <ulTaskNotifyTake+0x8c>)
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	2200      	movs	r2, #0
 800e96e:	659a      	str	r2, [r3, #88]	; 0x58
 800e970:	e7db      	b.n	800e92a <ulTaskNotifyTake+0x42>
 800e972:	46c0      	nop			; (mov r8, r8)
 800e974:	20000230 	.word	0x20000230

0800e978 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e97a:	0004      	movs	r4, r0
 800e97c:	000e      	movs	r6, r1
 800e97e:	0015      	movs	r5, r2
 800e980:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800e982:	2800      	cmp	r0, #0
 800e984:	d101      	bne.n	800e98a <xTaskGenericNotify+0x12>
 800e986:	b672      	cpsid	i
 800e988:	e7fe      	b.n	800e988 <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800e98a:	f000 f877 	bl	800ea7c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e98e:	2f00      	cmp	r7, #0
 800e990:	d001      	beq.n	800e996 <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e992:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e994:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800e996:	225c      	movs	r2, #92	; 0x5c
 800e998:	5ca3      	ldrb	r3, [r4, r2]
 800e99a:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800e99c:	2102      	movs	r1, #2
 800e99e:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800e9a0:	2d02      	cmp	r5, #2
 800e9a2:	d015      	beq.n	800e9d0 <xTaskGenericNotify+0x58>
 800e9a4:	d907      	bls.n	800e9b6 <xTaskGenericNotify+0x3e>
 800e9a6:	2d03      	cmp	r5, #3
 800e9a8:	d016      	beq.n	800e9d8 <xTaskGenericNotify+0x60>
 800e9aa:	2d04      	cmp	r5, #4
 800e9ac:	d105      	bne.n	800e9ba <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800e9ae:	2b02      	cmp	r3, #2
 800e9b0:	d035      	beq.n	800ea1e <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e9b2:	65a6      	str	r6, [r4, #88]	; 0x58
 800e9b4:	e001      	b.n	800e9ba <xTaskGenericNotify+0x42>
			switch( eAction )
 800e9b6:	2d01      	cmp	r5, #1
 800e9b8:	d006      	beq.n	800e9c8 <xTaskGenericNotify+0x50>
 800e9ba:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d00d      	beq.n	800e9dc <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e9c0:	f000 f868 	bl	800ea94 <vPortExitCritical>

		return xReturn;
	}
 800e9c4:	0028      	movs	r0, r5
 800e9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800e9c8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e9ca:	4316      	orrs	r6, r2
 800e9cc:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800e9ce:	e7f4      	b.n	800e9ba <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 800e9d0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e9d2:	3201      	adds	r2, #1
 800e9d4:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800e9d6:	e7f0      	b.n	800e9ba <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 800e9d8:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800e9da:	e7ee      	b.n	800e9ba <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e9dc:	1d25      	adds	r5, r4, #4
 800e9de:	0028      	movs	r0, r5
 800e9e0:	f7ff febb 	bl	800e75a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e9e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e9e6:	4a0f      	ldr	r2, [pc, #60]	; (800ea24 <xTaskGenericNotify+0xac>)
 800e9e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d901      	bls.n	800e9f2 <xTaskGenericNotify+0x7a>
 800e9ee:	4a0d      	ldr	r2, [pc, #52]	; (800ea24 <xTaskGenericNotify+0xac>)
 800e9f0:	6393      	str	r3, [r2, #56]	; 0x38
 800e9f2:	2014      	movs	r0, #20
 800e9f4:	4358      	muls	r0, r3
 800e9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ea28 <xTaskGenericNotify+0xb0>)
 800e9f8:	18c0      	adds	r0, r0, r3
 800e9fa:	0029      	movs	r1, r5
 800e9fc:	f7ff fe8a 	bl	800e714 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ea00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d001      	beq.n	800ea0a <xTaskGenericNotify+0x92>
 800ea06:	b672      	cpsid	i
 800ea08:	e7fe      	b.n	800ea08 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea0a:	4b06      	ldr	r3, [pc, #24]	; (800ea24 <xTaskGenericNotify+0xac>)
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ea10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea12:	2501      	movs	r5, #1
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d9d3      	bls.n	800e9c0 <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 800ea18:	f000 f824 	bl	800ea64 <vPortYield>
 800ea1c:	e7d0      	b.n	800e9c0 <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 800ea1e:	2500      	movs	r5, #0
 800ea20:	e7ce      	b.n	800e9c0 <xTaskGenericNotify+0x48>
 800ea22:	46c0      	nop			; (mov r8, r8)
 800ea24:	20000230 	.word	0x20000230
 800ea28:	200002d0 	.word	0x200002d0

0800ea2c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea2c:	4b03      	ldr	r3, [pc, #12]	; (800ea3c <prvTaskExitError+0x10>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	3301      	adds	r3, #1
 800ea32:	d001      	beq.n	800ea38 <prvTaskExitError+0xc>
 800ea34:	b672      	cpsid	i
 800ea36:	e7fe      	b.n	800ea36 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800ea38:	b672      	cpsid	i
 800ea3a:	e7fe      	b.n	800ea3a <prvTaskExitError+0xe>
 800ea3c:	2000005c 	.word	0x2000005c

0800ea40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800ea40:	4a06      	ldr	r2, [pc, #24]	; (800ea5c <pxCurrentTCBConst2>)
 800ea42:	6813      	ldr	r3, [r2, #0]
 800ea44:	6818      	ldr	r0, [r3, #0]
 800ea46:	3020      	adds	r0, #32
 800ea48:	f380 8809 	msr	PSP, r0
 800ea4c:	2002      	movs	r0, #2
 800ea4e:	f380 8814 	msr	CONTROL, r0
 800ea52:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800ea54:	46ae      	mov	lr, r5
 800ea56:	b662      	cpsie	i
 800ea58:	bd00      	pop	{pc}
 800ea5a:	46c0      	nop			; (mov r8, r8)

0800ea5c <pxCurrentTCBConst2>:
 800ea5c:	20000238 	.word	0x20000238

0800ea60 <SVC_Handler>:
}
 800ea60:	4770      	bx	lr
	...

0800ea64 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800ea64:	4b04      	ldr	r3, [pc, #16]	; (800ea78 <vPortYield+0x14>)
 800ea66:	2280      	movs	r2, #128	; 0x80
 800ea68:	0552      	lsls	r2, r2, #21
 800ea6a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 800ea6c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800ea70:	f3bf 8f6f 	isb	sy
}
 800ea74:	4770      	bx	lr
 800ea76:	46c0      	nop			; (mov r8, r8)
 800ea78:	e000ed04 	.word	0xe000ed04

0800ea7c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
 800ea7c:	b672      	cpsid	i
    uxCriticalNesting++;
 800ea7e:	4a04      	ldr	r2, [pc, #16]	; (800ea90 <vPortEnterCritical+0x14>)
 800ea80:	6813      	ldr	r3, [r2, #0]
 800ea82:	3301      	adds	r3, #1
 800ea84:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800ea86:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800ea8a:	f3bf 8f6f 	isb	sy
}
 800ea8e:	4770      	bx	lr
 800ea90:	2000005c 	.word	0x2000005c

0800ea94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800ea94:	4b06      	ldr	r3, [pc, #24]	; (800eab0 <vPortExitCritical+0x1c>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d101      	bne.n	800eaa0 <vPortExitCritical+0xc>
 800ea9c:	b672      	cpsid	i
 800ea9e:	e7fe      	b.n	800ea9e <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800eaa0:	3b01      	subs	r3, #1
 800eaa2:	4a03      	ldr	r2, [pc, #12]	; (800eab0 <vPortExitCritical+0x1c>)
 800eaa4:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d100      	bne.n	800eaac <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
 800eaaa:	b662      	cpsie	i
    }
}
 800eaac:	4770      	bx	lr
 800eaae:	46c0      	nop			; (mov r8, r8)
 800eab0:	2000005c 	.word	0x2000005c

0800eab4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800eab4:	f3ef 8010 	mrs	r0, PRIMASK
 800eab8:	b672      	cpsid	i
 800eaba:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
 800eabc:	2000      	movs	r0, #0

0800eabe <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 800eabe:	f380 8810 	msr	PRIMASK, r0
 800eac2:	4770      	bx	lr

0800eac4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eac4:	f3ef 8009 	mrs	r0, PSP
 800eac8:	4b0e      	ldr	r3, [pc, #56]	; (800eb04 <pxCurrentTCBConst>)
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	3820      	subs	r0, #32
 800eace:	6010      	str	r0, [r2, #0]
 800ead0:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ead2:	4644      	mov	r4, r8
 800ead4:	464d      	mov	r5, r9
 800ead6:	4656      	mov	r6, sl
 800ead8:	465f      	mov	r7, fp
 800eada:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800eadc:	b508      	push	{r3, lr}
 800eade:	b672      	cpsid	i
 800eae0:	f006 fdc4 	bl	801566c <vTaskSwitchContext>
 800eae4:	b662      	cpsie	i
 800eae6:	bc0c      	pop	{r2, r3}
 800eae8:	6811      	ldr	r1, [r2, #0]
 800eaea:	6808      	ldr	r0, [r1, #0]
 800eaec:	3010      	adds	r0, #16
 800eaee:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800eaf0:	46a0      	mov	r8, r4
 800eaf2:	46a9      	mov	r9, r5
 800eaf4:	46b2      	mov	sl, r6
 800eaf6:	46bb      	mov	fp, r7
 800eaf8:	f380 8809 	msr	PSP, r0
 800eafc:	3820      	subs	r0, #32
 800eafe:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800eb00:	4718      	bx	r3
 800eb02:	46c0      	nop			; (mov r8, r8)

0800eb04 <pxCurrentTCBConst>:
 800eb04:	20000238 	.word	0x20000238

0800eb08 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eb08:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb0a:	f7ff ffd3 	bl	800eab4 <ulSetInterruptMaskFromISR>
 800eb0e:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eb10:	f006 fbe4 	bl	80152dc <xTaskIncrementTick>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d003      	beq.n	800eb20 <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800eb18:	4b03      	ldr	r3, [pc, #12]	; (800eb28 <xPortSysTickHandler+0x20>)
 800eb1a:	2280      	movs	r2, #128	; 0x80
 800eb1c:	0552      	lsls	r2, r2, #21
 800eb1e:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800eb20:	0020      	movs	r0, r4
 800eb22:	f7ff ffcc 	bl	800eabe <vClearInterruptMaskFromISR>
}
 800eb26:	bd10      	pop	{r4, pc}
 800eb28:	e000ed04 	.word	0xe000ed04

0800eb2c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb2c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb2e:	4b12      	ldr	r3, [pc, #72]	; (800eb78 <prvInsertBlockIntoFreeList+0x4c>)
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	4282      	cmp	r2, r0
 800eb34:	d319      	bcc.n	800eb6a <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb36:	685c      	ldr	r4, [r3, #4]
 800eb38:	1919      	adds	r1, r3, r4
 800eb3a:	4288      	cmp	r0, r1
 800eb3c:	d103      	bne.n	800eb46 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb3e:	6841      	ldr	r1, [r0, #4]
 800eb40:	1909      	adds	r1, r1, r4
 800eb42:	6059      	str	r1, [r3, #4]
 800eb44:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb46:	6841      	ldr	r1, [r0, #4]
 800eb48:	1844      	adds	r4, r0, r1
 800eb4a:	42a2      	cmp	r2, r4
 800eb4c:	d111      	bne.n	800eb72 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb4e:	4c0b      	ldr	r4, [pc, #44]	; (800eb7c <prvInsertBlockIntoFreeList+0x50>)
 800eb50:	6824      	ldr	r4, [r4, #0]
 800eb52:	42a2      	cmp	r2, r4
 800eb54:	d00b      	beq.n	800eb6e <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb56:	6852      	ldr	r2, [r2, #4]
 800eb58:	1852      	adds	r2, r2, r1
 800eb5a:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	6812      	ldr	r2, [r2, #0]
 800eb60:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb62:	4298      	cmp	r0, r3
 800eb64:	d000      	beq.n	800eb68 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eb66:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb68:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb6a:	0013      	movs	r3, r2
 800eb6c:	e7e0      	b.n	800eb30 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb6e:	6002      	str	r2, [r0, #0]
 800eb70:	e7f7      	b.n	800eb62 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb72:	6002      	str	r2, [r0, #0]
 800eb74:	e7f5      	b.n	800eb62 <prvInsertBlockIntoFreeList+0x36>
 800eb76:	46c0      	nop			; (mov r8, r8)
 800eb78:	20006090 	.word	0x20006090
 800eb7c:	20001648 	.word	0x20001648

0800eb80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eb80:	b510      	push	{r4, lr}
 800eb82:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800eb84:	f001 fd5a 	bl	801063c <HAL_RCC_GetHCLKFreq>
 800eb88:	21fa      	movs	r1, #250	; 0xfa
 800eb8a:	0089      	lsls	r1, r1, #2
 800eb8c:	f7f1 fad6 	bl	800013c <__udivsi3>
 800eb90:	f000 f88a 	bl	800eca8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800eb94:	2001      	movs	r0, #1
 800eb96:	2200      	movs	r2, #0
 800eb98:	0021      	movs	r1, r4
 800eb9a:	4240      	negs	r0, r0
 800eb9c:	f000 f83c 	bl	800ec18 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800eba0:	2000      	movs	r0, #0
 800eba2:	bd10      	pop	{r4, pc}

0800eba4 <HAL_Init>:
{
 800eba4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800eba6:	4a06      	ldr	r2, [pc, #24]	; (800ebc0 <HAL_Init+0x1c>)
 800eba8:	6813      	ldr	r3, [r2, #0]
 800ebaa:	2110      	movs	r1, #16
 800ebac:	430b      	orrs	r3, r1
 800ebae:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800ebb0:	2000      	movs	r0, #0
 800ebb2:	f7ff ffe5 	bl	800eb80 <HAL_InitTick>
  HAL_MspInit();
 800ebb6:	f001 f8e9 	bl	800fd8c <HAL_MspInit>
}
 800ebba:	2000      	movs	r0, #0
 800ebbc:	bd10      	pop	{r4, pc}
 800ebbe:	46c0      	nop			; (mov r8, r8)
 800ebc0:	40022000 	.word	0x40022000

0800ebc4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800ebc4:	4a02      	ldr	r2, [pc, #8]	; (800ebd0 <HAL_IncTick+0xc>)
 800ebc6:	6813      	ldr	r3, [r2, #0]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	6013      	str	r3, [r2, #0]
}
 800ebcc:	4770      	bx	lr
 800ebce:	46c0      	nop			; (mov r8, r8)
 800ebd0:	20006098 	.word	0x20006098

0800ebd4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800ebd4:	4b01      	ldr	r3, [pc, #4]	; (800ebdc <HAL_GetTick+0x8>)
 800ebd6:	6818      	ldr	r0, [r3, #0]
}
 800ebd8:	4770      	bx	lr
 800ebda:	46c0      	nop			; (mov r8, r8)
 800ebdc:	20006098 	.word	0x20006098

0800ebe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800ebe0:	b510      	push	{r4, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800ebe6:	f7ff fff5 	bl	800ebd4 <HAL_GetTick>
 800ebea:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800ebec:	f7ff fff2 	bl	800ebd4 <HAL_GetTick>
 800ebf0:	9b01      	ldr	r3, [sp, #4]
 800ebf2:	1b00      	subs	r0, r0, r4
 800ebf4:	4298      	cmp	r0, r3
 800ebf6:	d3f9      	bcc.n	800ebec <HAL_Delay+0xc>
  {
  }
}
 800ebf8:	b002      	add	sp, #8
 800ebfa:	bd10      	pop	{r4, pc}

0800ebfc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800ebfc:	4b01      	ldr	r3, [pc, #4]	; (800ec04 <HAL_GetREVID+0x8>)
 800ebfe:	6818      	ldr	r0, [r3, #0]
 800ec00:	0c00      	lsrs	r0, r0, #16
}
 800ec02:	4770      	bx	lr
 800ec04:	40015800 	.word	0x40015800

0800ec08 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800ec08:	4b02      	ldr	r3, [pc, #8]	; (800ec14 <HAL_GetDEVID+0xc>)
 800ec0a:	6818      	ldr	r0, [r3, #0]
 800ec0c:	0500      	lsls	r0, r0, #20
 800ec0e:	0d00      	lsrs	r0, r0, #20
}
 800ec10:	4770      	bx	lr
 800ec12:	46c0      	nop			; (mov r8, r8)
 800ec14:	40015800 	.word	0x40015800

0800ec18 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ec18:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	db14      	blt.n	800ec48 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ec1e:	0883      	lsrs	r3, r0, #2
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4a15      	ldr	r2, [pc, #84]	; (800ec78 <HAL_NVIC_SetPriority+0x60>)
 800ec24:	4694      	mov	ip, r2
 800ec26:	4463      	add	r3, ip
 800ec28:	26c0      	movs	r6, #192	; 0xc0
 800ec2a:	00b6      	lsls	r6, r6, #2
 800ec2c:	599d      	ldr	r5, [r3, r6]
 800ec2e:	2403      	movs	r4, #3
 800ec30:	4020      	ands	r0, r4
 800ec32:	00c0      	lsls	r0, r0, #3
 800ec34:	22ff      	movs	r2, #255	; 0xff
 800ec36:	0014      	movs	r4, r2
 800ec38:	4084      	lsls	r4, r0
 800ec3a:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ec3c:	0189      	lsls	r1, r1, #6
 800ec3e:	400a      	ands	r2, r1
 800ec40:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ec42:	432a      	orrs	r2, r5
 800ec44:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800ec46:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ec48:	b2c0      	uxtb	r0, r0
 800ec4a:	230f      	movs	r3, #15
 800ec4c:	4003      	ands	r3, r0
 800ec4e:	3b08      	subs	r3, #8
 800ec50:	089b      	lsrs	r3, r3, #2
 800ec52:	009b      	lsls	r3, r3, #2
 800ec54:	4a09      	ldr	r2, [pc, #36]	; (800ec7c <HAL_NVIC_SetPriority+0x64>)
 800ec56:	4694      	mov	ip, r2
 800ec58:	4463      	add	r3, ip
 800ec5a:	69dd      	ldr	r5, [r3, #28]
 800ec5c:	2203      	movs	r2, #3
 800ec5e:	4010      	ands	r0, r2
 800ec60:	00c0      	lsls	r0, r0, #3
 800ec62:	24ff      	movs	r4, #255	; 0xff
 800ec64:	0022      	movs	r2, r4
 800ec66:	4082      	lsls	r2, r0
 800ec68:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ec6a:	0189      	lsls	r1, r1, #6
 800ec6c:	400c      	ands	r4, r1
 800ec6e:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ec70:	432c      	orrs	r4, r5
 800ec72:	61dc      	str	r4, [r3, #28]
 800ec74:	e7e7      	b.n	800ec46 <HAL_NVIC_SetPriority+0x2e>
 800ec76:	46c0      	nop			; (mov r8, r8)
 800ec78:	e000e100 	.word	0xe000e100
 800ec7c:	e000ed00 	.word	0xe000ed00

0800ec80 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800ec80:	231f      	movs	r3, #31
 800ec82:	4018      	ands	r0, r3
 800ec84:	3b1e      	subs	r3, #30
 800ec86:	4083      	lsls	r3, r0
 800ec88:	4a01      	ldr	r2, [pc, #4]	; (800ec90 <HAL_NVIC_EnableIRQ+0x10>)
 800ec8a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800ec8c:	4770      	bx	lr
 800ec8e:	46c0      	nop			; (mov r8, r8)
 800ec90:	e000e100 	.word	0xe000e100

0800ec94 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800ec94:	231f      	movs	r3, #31
 800ec96:	4018      	ands	r0, r3
 800ec98:	3b1e      	subs	r3, #30
 800ec9a:	4083      	lsls	r3, r0
 800ec9c:	4901      	ldr	r1, [pc, #4]	; (800eca4 <HAL_NVIC_DisableIRQ+0x10>)
 800ec9e:	2280      	movs	r2, #128	; 0x80
 800eca0:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800eca2:	4770      	bx	lr
 800eca4:	e000e100 	.word	0xe000e100

0800eca8 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800eca8:	1e43      	subs	r3, r0, #1
 800ecaa:	4a0a      	ldr	r2, [pc, #40]	; (800ecd4 <HAL_SYSTICK_Config+0x2c>)
 800ecac:	2001      	movs	r0, #1
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d80e      	bhi.n	800ecd0 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ecb2:	4a09      	ldr	r2, [pc, #36]	; (800ecd8 <HAL_SYSTICK_Config+0x30>)
 800ecb4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ecb6:	4809      	ldr	r0, [pc, #36]	; (800ecdc <HAL_SYSTICK_Config+0x34>)
 800ecb8:	6a03      	ldr	r3, [r0, #32]
 800ecba:	021b      	lsls	r3, r3, #8
 800ecbc:	0a1b      	lsrs	r3, r3, #8
 800ecbe:	21c0      	movs	r1, #192	; 0xc0
 800ecc0:	0609      	lsls	r1, r1, #24
 800ecc2:	430b      	orrs	r3, r1
 800ecc4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ecca:	3307      	adds	r3, #7
 800eccc:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ecce:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800ecd0:	4770      	bx	lr
 800ecd2:	46c0      	nop			; (mov r8, r8)
 800ecd4:	00ffffff 	.word	0x00ffffff
 800ecd8:	e000e010 	.word	0xe000e010
 800ecdc:	e000ed00 	.word	0xe000ed00

0800ece0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800ece0:	2804      	cmp	r0, #4
 800ece2:	d005      	beq.n	800ecf0 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800ece4:	4a05      	ldr	r2, [pc, #20]	; (800ecfc <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800ece6:	6813      	ldr	r3, [r2, #0]
 800ece8:	2104      	movs	r1, #4
 800ecea:	438b      	bics	r3, r1
 800ecec:	6013      	str	r3, [r2, #0]
  }
}
 800ecee:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800ecf0:	4a02      	ldr	r2, [pc, #8]	; (800ecfc <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800ecf2:	6813      	ldr	r3, [r2, #0]
 800ecf4:	2104      	movs	r1, #4
 800ecf6:	430b      	orrs	r3, r1
 800ecf8:	6013      	str	r3, [r2, #0]
 800ecfa:	e7f8      	b.n	800ecee <HAL_SYSTICK_CLKSourceConfig+0xe>
 800ecfc:	e000e010 	.word	0xe000e010

0800ed00 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800ed00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed02:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800ed04:	0891      	lsrs	r1, r2, #2
 800ed06:	d013      	beq.n	800ed30 <CRC_Handle_8+0x30>
 800ed08:	0034      	movs	r4, r6
 800ed0a:	2303      	movs	r3, #3
 800ed0c:	0017      	movs	r7, r2
 800ed0e:	439f      	bics	r7, r3
 800ed10:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800ed12:	7823      	ldrb	r3, [r4, #0]
 800ed14:	061b      	lsls	r3, r3, #24
 800ed16:	7865      	ldrb	r5, [r4, #1]
 800ed18:	042d      	lsls	r5, r5, #16
 800ed1a:	432b      	orrs	r3, r5
 800ed1c:	78e5      	ldrb	r5, [r4, #3]
 800ed1e:	432b      	orrs	r3, r5
 800ed20:	78a5      	ldrb	r5, [r4, #2]
 800ed22:	022d      	lsls	r5, r5, #8
 800ed24:	432b      	orrs	r3, r5
 800ed26:	6805      	ldr	r5, [r0, #0]
 800ed28:	602b      	str	r3, [r5, #0]
 800ed2a:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 800ed2c:	42bc      	cmp	r4, r7
 800ed2e:	d1f0      	bne.n	800ed12 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800ed30:	2303      	movs	r3, #3
 800ed32:	401a      	ands	r2, r3
 800ed34:	d01e      	beq.n	800ed74 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 800ed36:	2a01      	cmp	r2, #1
 800ed38:	d00a      	beq.n	800ed50 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 800ed3a:	2a02      	cmp	r2, #2
 800ed3c:	d10d      	bne.n	800ed5a <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800ed3e:	0089      	lsls	r1, r1, #2
 800ed40:	5c72      	ldrb	r2, [r6, r1]
 800ed42:	0212      	lsls	r2, r2, #8
 800ed44:	1871      	adds	r1, r6, r1
 800ed46:	784b      	ldrb	r3, [r1, #1]
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	6802      	ldr	r2, [r0, #0]
 800ed4c:	8013      	strh	r3, [r2, #0]
 800ed4e:	e011      	b.n	800ed74 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800ed50:	0089      	lsls	r1, r1, #2
 800ed52:	5d8b      	ldrb	r3, [r1, r6]
 800ed54:	6802      	ldr	r2, [r0, #0]
 800ed56:	7013      	strb	r3, [r2, #0]
 800ed58:	e00c      	b.n	800ed74 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 800ed5a:	2a03      	cmp	r2, #3
 800ed5c:	d10a      	bne.n	800ed74 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800ed5e:	0089      	lsls	r1, r1, #2
 800ed60:	5c72      	ldrb	r2, [r6, r1]
 800ed62:	0212      	lsls	r2, r2, #8
 800ed64:	1871      	adds	r1, r6, r1
 800ed66:	784b      	ldrb	r3, [r1, #1]
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	6802      	ldr	r2, [r0, #0]
 800ed6c:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800ed6e:	788b      	ldrb	r3, [r1, #2]
 800ed70:	6802      	ldr	r2, [r0, #0]
 800ed72:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800ed74:	6803      	ldr	r3, [r0, #0]
 800ed76:	6818      	ldr	r0, [r3, #0]
}
 800ed78:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed7a <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800ed7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed7c:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800ed7e:	0852      	lsrs	r2, r2, #1
 800ed80:	d00b      	beq.n	800ed9a <CRC_Handle_16+0x20>
 800ed82:	000c      	movs	r4, r1
 800ed84:	0097      	lsls	r7, r2, #2
 800ed86:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800ed88:	8823      	ldrh	r3, [r4, #0]
 800ed8a:	041b      	lsls	r3, r3, #16
 800ed8c:	8866      	ldrh	r6, [r4, #2]
 800ed8e:	4333      	orrs	r3, r6
 800ed90:	6806      	ldr	r6, [r0, #0]
 800ed92:	6033      	str	r3, [r6, #0]
 800ed94:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 800ed96:	42bc      	cmp	r4, r7
 800ed98:	d1f6      	bne.n	800ed88 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800ed9a:	07eb      	lsls	r3, r5, #31
 800ed9c:	d503      	bpl.n	800eda6 <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800ed9e:	0092      	lsls	r2, r2, #2
 800eda0:	5a53      	ldrh	r3, [r2, r1]
 800eda2:	6802      	ldr	r2, [r0, #0]
 800eda4:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800eda6:	6803      	ldr	r3, [r0, #0]
 800eda8:	6818      	ldr	r0, [r3, #0]
}
 800edaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800edac <HAL_CRC_Init>:
{
 800edac:	b510      	push	{r4, lr}
 800edae:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800edb0:	d029      	beq.n	800ee06 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800edb2:	7f43      	ldrb	r3, [r0, #29]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d01e      	beq.n	800edf6 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800edb8:	2302      	movs	r3, #2
 800edba:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800edbc:	0020      	movs	r0, r4
 800edbe:	f000 f8b1 	bl	800ef24 <HAL_CRCEx_Init>
 800edc2:	2800      	cmp	r0, #0
 800edc4:	d121      	bne.n	800ee0a <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800edc6:	7963      	ldrb	r3, [r4, #5]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d118      	bne.n	800edfe <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800edcc:	6823      	ldr	r3, [r4, #0]
 800edce:	2201      	movs	r2, #1
 800edd0:	4252      	negs	r2, r2
 800edd2:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800edd4:	6822      	ldr	r2, [r4, #0]
 800edd6:	6893      	ldr	r3, [r2, #8]
 800edd8:	2160      	movs	r1, #96	; 0x60
 800edda:	438b      	bics	r3, r1
 800eddc:	6961      	ldr	r1, [r4, #20]
 800edde:	430b      	orrs	r3, r1
 800ede0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800ede2:	6822      	ldr	r2, [r4, #0]
 800ede4:	6893      	ldr	r3, [r2, #8]
 800ede6:	2180      	movs	r1, #128	; 0x80
 800ede8:	438b      	bics	r3, r1
 800edea:	69a1      	ldr	r1, [r4, #24]
 800edec:	430b      	orrs	r3, r1
 800edee:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800edf0:	2301      	movs	r3, #1
 800edf2:	7763      	strb	r3, [r4, #29]
}
 800edf4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800edf6:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800edf8:	f7fe feb2 	bl	800db60 <HAL_CRC_MspInit>
 800edfc:	e7dc      	b.n	800edb8 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800edfe:	6823      	ldr	r3, [r4, #0]
 800ee00:	6922      	ldr	r2, [r4, #16]
 800ee02:	611a      	str	r2, [r3, #16]
 800ee04:	e7e6      	b.n	800edd4 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 800ee06:	2001      	movs	r0, #1
 800ee08:	e7f4      	b.n	800edf4 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800ee0a:	2001      	movs	r0, #1
 800ee0c:	e7f2      	b.n	800edf4 <HAL_CRC_Init+0x48>

0800ee0e <HAL_CRC_Accumulate>:
{
 800ee0e:	b510      	push	{r4, lr}
 800ee10:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800ee12:	7f03      	ldrb	r3, [r0, #28]
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d024      	beq.n	800ee62 <HAL_CRC_Accumulate+0x54>
 800ee18:	2301      	movs	r3, #1
 800ee1a:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800ee20:	6a03      	ldr	r3, [r0, #32]
 800ee22:	2b02      	cmp	r3, #2
 800ee24:	d01a      	beq.n	800ee5c <HAL_CRC_Accumulate+0x4e>
 800ee26:	2b03      	cmp	r3, #3
 800ee28:	d007      	beq.n	800ee3a <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800ee2a:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d011      	beq.n	800ee54 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 800ee30:	2301      	movs	r3, #1
 800ee32:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800ee34:	2300      	movs	r3, #0
 800ee36:	7723      	strb	r3, [r4, #28]
}
 800ee38:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 800ee3a:	2a00      	cmp	r2, #0
 800ee3c:	d007      	beq.n	800ee4e <HAL_CRC_Accumulate+0x40>
 800ee3e:	000b      	movs	r3, r1
 800ee40:	0092      	lsls	r2, r2, #2
 800ee42:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800ee44:	6822      	ldr	r2, [r4, #0]
 800ee46:	cb01      	ldmia	r3!, {r0}
 800ee48:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 800ee4a:	428b      	cmp	r3, r1
 800ee4c:	d1fa      	bne.n	800ee44 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	6818      	ldr	r0, [r3, #0]
      break;
 800ee52:	e7ed      	b.n	800ee30 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800ee54:	0020      	movs	r0, r4
 800ee56:	f7ff ff53 	bl	800ed00 <CRC_Handle_8>
      break;
 800ee5a:	e7e9      	b.n	800ee30 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800ee5c:	f7ff ff8d 	bl	800ed7a <CRC_Handle_16>
      break;
 800ee60:	e7e6      	b.n	800ee30 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 800ee62:	2002      	movs	r0, #2
 800ee64:	e7e8      	b.n	800ee38 <HAL_CRC_Accumulate+0x2a>

0800ee66 <HAL_CRC_Calculate>:
{
 800ee66:	b570      	push	{r4, r5, r6, lr}
 800ee68:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800ee6a:	7f03      	ldrb	r3, [r0, #28]
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d029      	beq.n	800eec4 <HAL_CRC_Calculate+0x5e>
 800ee70:	2501      	movs	r5, #1
 800ee72:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ee74:	2302      	movs	r3, #2
 800ee76:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800ee78:	6800      	ldr	r0, [r0, #0]
 800ee7a:	6883      	ldr	r3, [r0, #8]
 800ee7c:	432b      	orrs	r3, r5
 800ee7e:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 800ee80:	6a23      	ldr	r3, [r4, #32]
 800ee82:	2b02      	cmp	r3, #2
 800ee84:	d01a      	beq.n	800eebc <HAL_CRC_Calculate+0x56>
 800ee86:	2b03      	cmp	r3, #3
 800ee88:	d007      	beq.n	800ee9a <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800ee8a:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d011      	beq.n	800eeb4 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 800ee90:	2301      	movs	r3, #1
 800ee92:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800ee94:	2300      	movs	r3, #0
 800ee96:	7723      	strb	r3, [r4, #28]
}
 800ee98:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800ee9a:	2a00      	cmp	r2, #0
 800ee9c:	d007      	beq.n	800eeae <HAL_CRC_Calculate+0x48>
 800ee9e:	000b      	movs	r3, r1
 800eea0:	0092      	lsls	r2, r2, #2
 800eea2:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800eea4:	6820      	ldr	r0, [r4, #0]
 800eea6:	cb20      	ldmia	r3!, {r5}
 800eea8:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800eeaa:	428b      	cmp	r3, r1
 800eeac:	d1fa      	bne.n	800eea4 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 800eeae:	6823      	ldr	r3, [r4, #0]
 800eeb0:	6818      	ldr	r0, [r3, #0]
      break;
 800eeb2:	e7ed      	b.n	800ee90 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800eeb4:	0020      	movs	r0, r4
 800eeb6:	f7ff ff23 	bl	800ed00 <CRC_Handle_8>
      break;
 800eeba:	e7e9      	b.n	800ee90 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800eebc:	0020      	movs	r0, r4
 800eebe:	f7ff ff5c 	bl	800ed7a <CRC_Handle_16>
      break;
 800eec2:	e7e5      	b.n	800ee90 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800eec4:	2002      	movs	r0, #2
 800eec6:	e7e7      	b.n	800ee98 <HAL_CRC_Calculate+0x32>

0800eec8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800eec8:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800eeca:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800eecc:	2501      	movs	r5, #1
 800eece:	002c      	movs	r4, r5
 800eed0:	409c      	lsls	r4, r3
 800eed2:	4221      	tst	r1, r4
 800eed4:	d10b      	bne.n	800eeee <HAL_CRCEx_Polynomial_Set+0x26>
 800eed6:	3b01      	subs	r3, #1
 800eed8:	d2f9      	bcs.n	800eece <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 800eeda:	2a10      	cmp	r2, #16
 800eedc:	d01c      	beq.n	800ef18 <HAL_CRCEx_Polynomial_Set+0x50>
 800eede:	2a18      	cmp	r2, #24
 800eee0:	d01e      	beq.n	800ef20 <HAL_CRCEx_Polynomial_Set+0x58>
 800eee2:	2a08      	cmp	r2, #8
 800eee4:	d109      	bne.n	800eefa <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 800eee6:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 800eee8:	2b0f      	cmp	r3, #15
 800eeea:	d906      	bls.n	800eefa <HAL_CRCEx_Polynomial_Set+0x32>
 800eeec:	e00e      	b.n	800ef0c <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 800eeee:	2a10      	cmp	r2, #16
 800eef0:	d012      	beq.n	800ef18 <HAL_CRCEx_Polynomial_Set+0x50>
 800eef2:	2a18      	cmp	r2, #24
 800eef4:	d00c      	beq.n	800ef10 <HAL_CRCEx_Polynomial_Set+0x48>
 800eef6:	2a08      	cmp	r2, #8
 800eef8:	d0f5      	beq.n	800eee6 <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800eefa:	6803      	ldr	r3, [r0, #0]
 800eefc:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800eefe:	6801      	ldr	r1, [r0, #0]
 800ef00:	688b      	ldr	r3, [r1, #8]
 800ef02:	2018      	movs	r0, #24
 800ef04:	4383      	bics	r3, r0
 800ef06:	431a      	orrs	r2, r3
 800ef08:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 800ef0a:	2400      	movs	r4, #0
}
 800ef0c:	0020      	movs	r0, r4
 800ef0e:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 800ef10:	2b06      	cmp	r3, #6
 800ef12:	d9f2      	bls.n	800eefa <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 800ef14:	2401      	movs	r4, #1
 800ef16:	e7f9      	b.n	800ef0c <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 800ef18:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 800ef1a:	2b07      	cmp	r3, #7
 800ef1c:	d9ed      	bls.n	800eefa <HAL_CRCEx_Polynomial_Set+0x32>
 800ef1e:	e7f5      	b.n	800ef0c <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 800ef20:	2401      	movs	r4, #1
 800ef22:	e7f3      	b.n	800ef0c <HAL_CRCEx_Polynomial_Set+0x44>

0800ef24 <HAL_CRCEx_Init>:
{
 800ef24:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ef26:	7903      	ldrb	r3, [r0, #4]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d109      	bne.n	800ef40 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800ef2c:	6803      	ldr	r3, [r0, #0]
 800ef2e:	4a08      	ldr	r2, [pc, #32]	; (800ef50 <HAL_CRCEx_Init+0x2c>)
 800ef30:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ef32:	6802      	ldr	r2, [r0, #0]
 800ef34:	6893      	ldr	r3, [r2, #8]
 800ef36:	2118      	movs	r1, #24
 800ef38:	438b      	bics	r3, r1
 800ef3a:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 800ef3c:	2000      	movs	r0, #0
}
 800ef3e:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ef40:	68c2      	ldr	r2, [r0, #12]
 800ef42:	6881      	ldr	r1, [r0, #8]
 800ef44:	f7ff ffc0 	bl	800eec8 <HAL_CRCEx_Polynomial_Set>
 800ef48:	1e43      	subs	r3, r0, #1
 800ef4a:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800ef4c:	b2c0      	uxtb	r0, r0
 800ef4e:	e7f6      	b.n	800ef3e <HAL_CRCEx_Init+0x1a>
 800ef50:	04c11db7 	.word	0x04c11db7

0800ef54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800ef54:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ef56:	2800      	cmp	r0, #0
 800ef58:	d022      	beq.n	800efa0 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800ef5a:	2321      	movs	r3, #33	; 0x21
 800ef5c:	5cc3      	ldrb	r3, [r0, r3]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d102      	bne.n	800ef68 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 800ef62:	3320      	adds	r3, #32
 800ef64:	2200      	movs	r2, #0
 800ef66:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ef68:	2121      	movs	r1, #33	; 0x21
 800ef6a:	2302      	movs	r3, #2
 800ef6c:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ef6e:	6804      	ldr	r4, [r0, #0]
 800ef70:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800ef72:	4a0c      	ldr	r2, [pc, #48]	; (800efa4 <HAL_DMA_Init+0x50>)
 800ef74:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ef76:	6843      	ldr	r3, [r0, #4]
 800ef78:	6885      	ldr	r5, [r0, #8]
 800ef7a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ef7c:	68c5      	ldr	r5, [r0, #12]
 800ef7e:	432b      	orrs	r3, r5
 800ef80:	6905      	ldr	r5, [r0, #16]
 800ef82:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ef84:	6945      	ldr	r5, [r0, #20]
 800ef86:	432b      	orrs	r3, r5
 800ef88:	6985      	ldr	r5, [r0, #24]
 800ef8a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800ef8c:	69c5      	ldr	r5, [r0, #28]
 800ef8e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800ef90:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800ef92:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ef94:	2300      	movs	r3, #0
 800ef96:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ef98:	3301      	adds	r3, #1
 800ef9a:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800ef9c:	2000      	movs	r0, #0
}  
 800ef9e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800efa0:	2001      	movs	r0, #1
 800efa2:	e7fc      	b.n	800ef9e <HAL_DMA_Init+0x4a>
 800efa4:	ffffc00f 	.word	0xffffc00f

0800efa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800efa8:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800efaa:	2420      	movs	r4, #32
 800efac:	5d04      	ldrb	r4, [r0, r4]
 800efae:	2c01      	cmp	r4, #1
 800efb0:	d02d      	beq.n	800f00e <HAL_DMA_Start_IT+0x66>
 800efb2:	2601      	movs	r6, #1
 800efb4:	2420      	movs	r4, #32
 800efb6:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800efb8:	3401      	adds	r4, #1
 800efba:	2502      	movs	r5, #2
 800efbc:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800efbe:	6805      	ldr	r5, [r0, #0]
 800efc0:	682c      	ldr	r4, [r5, #0]
 800efc2:	43b4      	bics	r4, r6
 800efc4:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800efc6:	6804      	ldr	r4, [r0, #0]
 800efc8:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800efca:	6843      	ldr	r3, [r0, #4]
 800efcc:	2b10      	cmp	r3, #16
 800efce:	d019      	beq.n	800f004 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800efd0:	6803      	ldr	r3, [r0, #0]
 800efd2:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800efd4:	6803      	ldr	r3, [r0, #0]
 800efd6:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800efd8:	6802      	ldr	r2, [r0, #0]
 800efda:	6813      	ldr	r3, [r2, #0]
 800efdc:	2102      	movs	r1, #2
 800efde:	430b      	orrs	r3, r1
 800efe0:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800efe2:	6802      	ldr	r2, [r0, #0]
 800efe4:	6813      	ldr	r3, [r2, #0]
 800efe6:	3102      	adds	r1, #2
 800efe8:	430b      	orrs	r3, r1
 800efea:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800efec:	6802      	ldr	r2, [r0, #0]
 800efee:	6813      	ldr	r3, [r2, #0]
 800eff0:	3104      	adds	r1, #4
 800eff2:	430b      	orrs	r3, r1
 800eff4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 800eff6:	6802      	ldr	r2, [r0, #0]
 800eff8:	6813      	ldr	r3, [r2, #0]
 800effa:	3907      	subs	r1, #7
 800effc:	430b      	orrs	r3, r1
 800effe:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 800f000:	2000      	movs	r0, #0
} 
 800f002:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800f004:	6803      	ldr	r3, [r0, #0]
 800f006:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800f008:	6803      	ldr	r3, [r0, #0]
 800f00a:	60d9      	str	r1, [r3, #12]
 800f00c:	e7e4      	b.n	800efd8 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 800f00e:	2002      	movs	r0, #2
 800f010:	e7f7      	b.n	800f002 <HAL_DMA_Start_IT+0x5a>

0800f012 <HAL_DMA_Abort>:
{
 800f012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f014:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800f016:	6802      	ldr	r2, [r0, #0]
 800f018:	6813      	ldr	r3, [r2, #0]
 800f01a:	2101      	movs	r1, #1
 800f01c:	438b      	bics	r3, r1
 800f01e:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800f020:	f7ff fdd8 	bl	800ebd4 <HAL_GetTick>
 800f024:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f026:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f028:	26fa      	movs	r6, #250	; 0xfa
 800f02a:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f02c:	6823      	ldr	r3, [r4, #0]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	421d      	tst	r5, r3
 800f032:	d00f      	beq.n	800f054 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f034:	f7ff fdce 	bl	800ebd4 <HAL_GetTick>
 800f038:	1bc0      	subs	r0, r0, r7
 800f03a:	42b0      	cmp	r0, r6
 800f03c:	d9f6      	bls.n	800f02c <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800f03e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f040:	2220      	movs	r2, #32
 800f042:	4313      	orrs	r3, r2
 800f044:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f046:	2321      	movs	r3, #33	; 0x21
 800f048:	2103      	movs	r1, #3
 800f04a:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800f04c:	2300      	movs	r3, #0
 800f04e:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800f050:	2003      	movs	r0, #3
 800f052:	e006      	b.n	800f062 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 800f054:	2321      	movs	r3, #33	; 0x21
 800f056:	2201      	movs	r2, #1
 800f058:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 800f05a:	3b01      	subs	r3, #1
 800f05c:	2200      	movs	r2, #0
 800f05e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 800f060:	2000      	movs	r0, #0
}
 800f062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f064 <HAL_DMA_IRQHandler>:
{        
 800f064:	b510      	push	{r4, lr}
 800f066:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f068:	6803      	ldr	r3, [r0, #0]
 800f06a:	4ab4      	ldr	r2, [pc, #720]	; (800f33c <HAL_DMA_IRQHandler+0x2d8>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d94d      	bls.n	800f10c <HAL_DMA_IRQHandler+0xa8>
 800f070:	4ab3      	ldr	r2, [pc, #716]	; (800f340 <HAL_DMA_IRQHandler+0x2dc>)
 800f072:	6811      	ldr	r1, [r2, #0]
 800f074:	4ab3      	ldr	r2, [pc, #716]	; (800f344 <HAL_DMA_IRQHandler+0x2e0>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d026      	beq.n	800f0c8 <HAL_DMA_IRQHandler+0x64>
 800f07a:	4ab3      	ldr	r2, [pc, #716]	; (800f348 <HAL_DMA_IRQHandler+0x2e4>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d02d      	beq.n	800f0dc <HAL_DMA_IRQHandler+0x78>
 800f080:	4ab2      	ldr	r2, [pc, #712]	; (800f34c <HAL_DMA_IRQHandler+0x2e8>)
 800f082:	4293      	cmp	r3, r2
 800f084:	d02c      	beq.n	800f0e0 <HAL_DMA_IRQHandler+0x7c>
 800f086:	4ab2      	ldr	r2, [pc, #712]	; (800f350 <HAL_DMA_IRQHandler+0x2ec>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d02c      	beq.n	800f0e6 <HAL_DMA_IRQHandler+0x82>
 800f08c:	4ab1      	ldr	r2, [pc, #708]	; (800f354 <HAL_DMA_IRQHandler+0x2f0>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d02c      	beq.n	800f0ec <HAL_DMA_IRQHandler+0x88>
 800f092:	4ab1      	ldr	r2, [pc, #708]	; (800f358 <HAL_DMA_IRQHandler+0x2f4>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d02c      	beq.n	800f0f2 <HAL_DMA_IRQHandler+0x8e>
 800f098:	4aa8      	ldr	r2, [pc, #672]	; (800f33c <HAL_DMA_IRQHandler+0x2d8>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d02c      	beq.n	800f0f8 <HAL_DMA_IRQHandler+0x94>
 800f09e:	4aaf      	ldr	r2, [pc, #700]	; (800f35c <HAL_DMA_IRQHandler+0x2f8>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d02c      	beq.n	800f0fe <HAL_DMA_IRQHandler+0x9a>
 800f0a4:	4aae      	ldr	r2, [pc, #696]	; (800f360 <HAL_DMA_IRQHandler+0x2fc>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d02b      	beq.n	800f102 <HAL_DMA_IRQHandler+0x9e>
 800f0aa:	4aae      	ldr	r2, [pc, #696]	; (800f364 <HAL_DMA_IRQHandler+0x300>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d02a      	beq.n	800f106 <HAL_DMA_IRQHandler+0xa2>
 800f0b0:	4aad      	ldr	r2, [pc, #692]	; (800f368 <HAL_DMA_IRQHandler+0x304>)
 800f0b2:	189a      	adds	r2, r3, r2
 800f0b4:	4250      	negs	r0, r2
 800f0b6:	4142      	adcs	r2, r0
 800f0b8:	4252      	negs	r2, r2
 800f0ba:	48ac      	ldr	r0, [pc, #688]	; (800f36c <HAL_DMA_IRQHandler+0x308>)
 800f0bc:	4002      	ands	r2, r0
 800f0be:	2080      	movs	r0, #128	; 0x80
 800f0c0:	0300      	lsls	r0, r0, #12
 800f0c2:	4684      	mov	ip, r0
 800f0c4:	4462      	add	r2, ip
 800f0c6:	e000      	b.n	800f0ca <HAL_DMA_IRQHandler+0x66>
 800f0c8:	2208      	movs	r2, #8
 800f0ca:	420a      	tst	r2, r1
 800f0cc:	d100      	bne.n	800f0d0 <HAL_DMA_IRQHandler+0x6c>
 800f0ce:	e0e6      	b.n	800f29e <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f0d0:	681a      	ldr	r2, [r3, #0]
 800f0d2:	0712      	lsls	r2, r2, #28
 800f0d4:	d500      	bpl.n	800f0d8 <HAL_DMA_IRQHandler+0x74>
 800f0d6:	e097      	b.n	800f208 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f0d8:	6823      	ldr	r3, [r4, #0]
 800f0da:	e0e0      	b.n	800f29e <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f0dc:	2280      	movs	r2, #128	; 0x80
 800f0de:	e7f4      	b.n	800f0ca <HAL_DMA_IRQHandler+0x66>
 800f0e0:	2280      	movs	r2, #128	; 0x80
 800f0e2:	0112      	lsls	r2, r2, #4
 800f0e4:	e7f1      	b.n	800f0ca <HAL_DMA_IRQHandler+0x66>
 800f0e6:	2280      	movs	r2, #128	; 0x80
 800f0e8:	0212      	lsls	r2, r2, #8
 800f0ea:	e7ee      	b.n	800f0ca <HAL_DMA_IRQHandler+0x66>
 800f0ec:	2280      	movs	r2, #128	; 0x80
 800f0ee:	0312      	lsls	r2, r2, #12
 800f0f0:	e7eb      	b.n	800f0ca <HAL_DMA_IRQHandler+0x66>
 800f0f2:	2280      	movs	r2, #128	; 0x80
 800f0f4:	0412      	lsls	r2, r2, #16
 800f0f6:	e7e8      	b.n	800f0ca <HAL_DMA_IRQHandler+0x66>
 800f0f8:	2280      	movs	r2, #128	; 0x80
 800f0fa:	0512      	lsls	r2, r2, #20
 800f0fc:	e7e5      	b.n	800f0ca <HAL_DMA_IRQHandler+0x66>
 800f0fe:	2208      	movs	r2, #8
 800f100:	e7e3      	b.n	800f0ca <HAL_DMA_IRQHandler+0x66>
 800f102:	2280      	movs	r2, #128	; 0x80
 800f104:	e7e1      	b.n	800f0ca <HAL_DMA_IRQHandler+0x66>
 800f106:	2280      	movs	r2, #128	; 0x80
 800f108:	0112      	lsls	r2, r2, #4
 800f10a:	e7de      	b.n	800f0ca <HAL_DMA_IRQHandler+0x66>
 800f10c:	4a98      	ldr	r2, [pc, #608]	; (800f370 <HAL_DMA_IRQHandler+0x30c>)
 800f10e:	6811      	ldr	r1, [r2, #0]
 800f110:	4a8c      	ldr	r2, [pc, #560]	; (800f344 <HAL_DMA_IRQHandler+0x2e0>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d026      	beq.n	800f164 <HAL_DMA_IRQHandler+0x100>
 800f116:	4a8c      	ldr	r2, [pc, #560]	; (800f348 <HAL_DMA_IRQHandler+0x2e4>)
 800f118:	4293      	cmp	r3, r2
 800f11a:	d05d      	beq.n	800f1d8 <HAL_DMA_IRQHandler+0x174>
 800f11c:	4a8b      	ldr	r2, [pc, #556]	; (800f34c <HAL_DMA_IRQHandler+0x2e8>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d05c      	beq.n	800f1dc <HAL_DMA_IRQHandler+0x178>
 800f122:	4a8b      	ldr	r2, [pc, #556]	; (800f350 <HAL_DMA_IRQHandler+0x2ec>)
 800f124:	4293      	cmp	r3, r2
 800f126:	d05c      	beq.n	800f1e2 <HAL_DMA_IRQHandler+0x17e>
 800f128:	4a8a      	ldr	r2, [pc, #552]	; (800f354 <HAL_DMA_IRQHandler+0x2f0>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d05c      	beq.n	800f1e8 <HAL_DMA_IRQHandler+0x184>
 800f12e:	4a8a      	ldr	r2, [pc, #552]	; (800f358 <HAL_DMA_IRQHandler+0x2f4>)
 800f130:	4293      	cmp	r3, r2
 800f132:	d05c      	beq.n	800f1ee <HAL_DMA_IRQHandler+0x18a>
 800f134:	4a81      	ldr	r2, [pc, #516]	; (800f33c <HAL_DMA_IRQHandler+0x2d8>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d05c      	beq.n	800f1f4 <HAL_DMA_IRQHandler+0x190>
 800f13a:	4a88      	ldr	r2, [pc, #544]	; (800f35c <HAL_DMA_IRQHandler+0x2f8>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d05c      	beq.n	800f1fa <HAL_DMA_IRQHandler+0x196>
 800f140:	4a87      	ldr	r2, [pc, #540]	; (800f360 <HAL_DMA_IRQHandler+0x2fc>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d05b      	beq.n	800f1fe <HAL_DMA_IRQHandler+0x19a>
 800f146:	4a87      	ldr	r2, [pc, #540]	; (800f364 <HAL_DMA_IRQHandler+0x300>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d05a      	beq.n	800f202 <HAL_DMA_IRQHandler+0x19e>
 800f14c:	4a86      	ldr	r2, [pc, #536]	; (800f368 <HAL_DMA_IRQHandler+0x304>)
 800f14e:	189a      	adds	r2, r3, r2
 800f150:	4250      	negs	r0, r2
 800f152:	4142      	adcs	r2, r0
 800f154:	4252      	negs	r2, r2
 800f156:	4885      	ldr	r0, [pc, #532]	; (800f36c <HAL_DMA_IRQHandler+0x308>)
 800f158:	4002      	ands	r2, r0
 800f15a:	2080      	movs	r0, #128	; 0x80
 800f15c:	0300      	lsls	r0, r0, #12
 800f15e:	4684      	mov	ip, r0
 800f160:	4462      	add	r2, ip
 800f162:	e000      	b.n	800f166 <HAL_DMA_IRQHandler+0x102>
 800f164:	2208      	movs	r2, #8
 800f166:	420a      	tst	r2, r1
 800f168:	d000      	beq.n	800f16c <HAL_DMA_IRQHandler+0x108>
 800f16a:	e3ad      	b.n	800f8c8 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f16c:	4a80      	ldr	r2, [pc, #512]	; (800f370 <HAL_DMA_IRQHandler+0x30c>)
 800f16e:	6811      	ldr	r1, [r2, #0]
 800f170:	4a74      	ldr	r2, [pc, #464]	; (800f344 <HAL_DMA_IRQHandler+0x2e0>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d100      	bne.n	800f178 <HAL_DMA_IRQHandler+0x114>
 800f176:	e198      	b.n	800f4aa <HAL_DMA_IRQHandler+0x446>
 800f178:	4a73      	ldr	r2, [pc, #460]	; (800f348 <HAL_DMA_IRQHandler+0x2e4>)
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d100      	bne.n	800f180 <HAL_DMA_IRQHandler+0x11c>
 800f17e:	e1da      	b.n	800f536 <HAL_DMA_IRQHandler+0x4d2>
 800f180:	4a72      	ldr	r2, [pc, #456]	; (800f34c <HAL_DMA_IRQHandler+0x2e8>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d100      	bne.n	800f188 <HAL_DMA_IRQHandler+0x124>
 800f186:	e1d8      	b.n	800f53a <HAL_DMA_IRQHandler+0x4d6>
 800f188:	4a71      	ldr	r2, [pc, #452]	; (800f350 <HAL_DMA_IRQHandler+0x2ec>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d100      	bne.n	800f190 <HAL_DMA_IRQHandler+0x12c>
 800f18e:	e1d7      	b.n	800f540 <HAL_DMA_IRQHandler+0x4dc>
 800f190:	4a70      	ldr	r2, [pc, #448]	; (800f354 <HAL_DMA_IRQHandler+0x2f0>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d100      	bne.n	800f198 <HAL_DMA_IRQHandler+0x134>
 800f196:	e1d6      	b.n	800f546 <HAL_DMA_IRQHandler+0x4e2>
 800f198:	4a6f      	ldr	r2, [pc, #444]	; (800f358 <HAL_DMA_IRQHandler+0x2f4>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d100      	bne.n	800f1a0 <HAL_DMA_IRQHandler+0x13c>
 800f19e:	e1d5      	b.n	800f54c <HAL_DMA_IRQHandler+0x4e8>
 800f1a0:	4a66      	ldr	r2, [pc, #408]	; (800f33c <HAL_DMA_IRQHandler+0x2d8>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d100      	bne.n	800f1a8 <HAL_DMA_IRQHandler+0x144>
 800f1a6:	e1d4      	b.n	800f552 <HAL_DMA_IRQHandler+0x4ee>
 800f1a8:	4a6c      	ldr	r2, [pc, #432]	; (800f35c <HAL_DMA_IRQHandler+0x2f8>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d100      	bne.n	800f1b0 <HAL_DMA_IRQHandler+0x14c>
 800f1ae:	e1d3      	b.n	800f558 <HAL_DMA_IRQHandler+0x4f4>
 800f1b0:	4a6b      	ldr	r2, [pc, #428]	; (800f360 <HAL_DMA_IRQHandler+0x2fc>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d100      	bne.n	800f1b8 <HAL_DMA_IRQHandler+0x154>
 800f1b6:	e1d1      	b.n	800f55c <HAL_DMA_IRQHandler+0x4f8>
 800f1b8:	4a6a      	ldr	r2, [pc, #424]	; (800f364 <HAL_DMA_IRQHandler+0x300>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d100      	bne.n	800f1c0 <HAL_DMA_IRQHandler+0x15c>
 800f1be:	e1cf      	b.n	800f560 <HAL_DMA_IRQHandler+0x4fc>
 800f1c0:	4a69      	ldr	r2, [pc, #420]	; (800f368 <HAL_DMA_IRQHandler+0x304>)
 800f1c2:	189a      	adds	r2, r3, r2
 800f1c4:	4250      	negs	r0, r2
 800f1c6:	4142      	adcs	r2, r0
 800f1c8:	4252      	negs	r2, r2
 800f1ca:	486a      	ldr	r0, [pc, #424]	; (800f374 <HAL_DMA_IRQHandler+0x310>)
 800f1cc:	4002      	ands	r2, r0
 800f1ce:	2080      	movs	r0, #128	; 0x80
 800f1d0:	02c0      	lsls	r0, r0, #11
 800f1d2:	4684      	mov	ip, r0
 800f1d4:	4462      	add	r2, ip
 800f1d6:	e169      	b.n	800f4ac <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f1d8:	2280      	movs	r2, #128	; 0x80
 800f1da:	e7c4      	b.n	800f166 <HAL_DMA_IRQHandler+0x102>
 800f1dc:	2280      	movs	r2, #128	; 0x80
 800f1de:	0112      	lsls	r2, r2, #4
 800f1e0:	e7c1      	b.n	800f166 <HAL_DMA_IRQHandler+0x102>
 800f1e2:	2280      	movs	r2, #128	; 0x80
 800f1e4:	0212      	lsls	r2, r2, #8
 800f1e6:	e7be      	b.n	800f166 <HAL_DMA_IRQHandler+0x102>
 800f1e8:	2280      	movs	r2, #128	; 0x80
 800f1ea:	0312      	lsls	r2, r2, #12
 800f1ec:	e7bb      	b.n	800f166 <HAL_DMA_IRQHandler+0x102>
 800f1ee:	2280      	movs	r2, #128	; 0x80
 800f1f0:	0412      	lsls	r2, r2, #16
 800f1f2:	e7b8      	b.n	800f166 <HAL_DMA_IRQHandler+0x102>
 800f1f4:	2280      	movs	r2, #128	; 0x80
 800f1f6:	0512      	lsls	r2, r2, #20
 800f1f8:	e7b5      	b.n	800f166 <HAL_DMA_IRQHandler+0x102>
 800f1fa:	2208      	movs	r2, #8
 800f1fc:	e7b3      	b.n	800f166 <HAL_DMA_IRQHandler+0x102>
 800f1fe:	2280      	movs	r2, #128	; 0x80
 800f200:	e7b1      	b.n	800f166 <HAL_DMA_IRQHandler+0x102>
 800f202:	2280      	movs	r2, #128	; 0x80
 800f204:	0112      	lsls	r2, r2, #4
 800f206:	e7ae      	b.n	800f166 <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	2108      	movs	r1, #8
 800f20c:	438a      	bics	r2, r1
 800f20e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f210:	6823      	ldr	r3, [r4, #0]
 800f212:	4a4a      	ldr	r2, [pc, #296]	; (800f33c <HAL_DMA_IRQHandler+0x2d8>)
 800f214:	4293      	cmp	r3, r2
 800f216:	d800      	bhi.n	800f21a <HAL_DMA_IRQHandler+0x1b6>
 800f218:	e0ae      	b.n	800f378 <HAL_DMA_IRQHandler+0x314>
 800f21a:	4a4a      	ldr	r2, [pc, #296]	; (800f344 <HAL_DMA_IRQHandler+0x2e0>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d027      	beq.n	800f270 <HAL_DMA_IRQHandler+0x20c>
 800f220:	4a49      	ldr	r2, [pc, #292]	; (800f348 <HAL_DMA_IRQHandler+0x2e4>)
 800f222:	4293      	cmp	r3, r2
 800f224:	d071      	beq.n	800f30a <HAL_DMA_IRQHandler+0x2a6>
 800f226:	4a49      	ldr	r2, [pc, #292]	; (800f34c <HAL_DMA_IRQHandler+0x2e8>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d070      	beq.n	800f30e <HAL_DMA_IRQHandler+0x2aa>
 800f22c:	4a48      	ldr	r2, [pc, #288]	; (800f350 <HAL_DMA_IRQHandler+0x2ec>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d070      	beq.n	800f314 <HAL_DMA_IRQHandler+0x2b0>
 800f232:	4a48      	ldr	r2, [pc, #288]	; (800f354 <HAL_DMA_IRQHandler+0x2f0>)
 800f234:	4293      	cmp	r3, r2
 800f236:	d070      	beq.n	800f31a <HAL_DMA_IRQHandler+0x2b6>
 800f238:	4a47      	ldr	r2, [pc, #284]	; (800f358 <HAL_DMA_IRQHandler+0x2f4>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d070      	beq.n	800f320 <HAL_DMA_IRQHandler+0x2bc>
 800f23e:	4a3f      	ldr	r2, [pc, #252]	; (800f33c <HAL_DMA_IRQHandler+0x2d8>)
 800f240:	4293      	cmp	r3, r2
 800f242:	d070      	beq.n	800f326 <HAL_DMA_IRQHandler+0x2c2>
 800f244:	4a45      	ldr	r2, [pc, #276]	; (800f35c <HAL_DMA_IRQHandler+0x2f8>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d070      	beq.n	800f32c <HAL_DMA_IRQHandler+0x2c8>
 800f24a:	4a45      	ldr	r2, [pc, #276]	; (800f360 <HAL_DMA_IRQHandler+0x2fc>)
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d06f      	beq.n	800f330 <HAL_DMA_IRQHandler+0x2cc>
 800f250:	4a44      	ldr	r2, [pc, #272]	; (800f364 <HAL_DMA_IRQHandler+0x300>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d06e      	beq.n	800f334 <HAL_DMA_IRQHandler+0x2d0>
 800f256:	4a44      	ldr	r2, [pc, #272]	; (800f368 <HAL_DMA_IRQHandler+0x304>)
 800f258:	4694      	mov	ip, r2
 800f25a:	4463      	add	r3, ip
 800f25c:	425a      	negs	r2, r3
 800f25e:	4153      	adcs	r3, r2
 800f260:	425b      	negs	r3, r3
 800f262:	4a42      	ldr	r2, [pc, #264]	; (800f36c <HAL_DMA_IRQHandler+0x308>)
 800f264:	4013      	ands	r3, r2
 800f266:	2280      	movs	r2, #128	; 0x80
 800f268:	0312      	lsls	r2, r2, #12
 800f26a:	4694      	mov	ip, r2
 800f26c:	4463      	add	r3, ip
 800f26e:	e000      	b.n	800f272 <HAL_DMA_IRQHandler+0x20e>
 800f270:	2308      	movs	r3, #8
 800f272:	4a33      	ldr	r2, [pc, #204]	; (800f340 <HAL_DMA_IRQHandler+0x2dc>)
 800f274:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800f276:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f278:	2201      	movs	r2, #1
 800f27a:	4313      	orrs	r3, r2
 800f27c:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800f27e:	2321      	movs	r3, #33	; 0x21
 800f280:	3203      	adds	r2, #3
 800f282:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 800f284:	3b01      	subs	r3, #1
 800f286:	2200      	movs	r2, #0
 800f288:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f28a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d001      	beq.n	800f294 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 800f290:	0020      	movs	r0, r4
 800f292:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f294:	6823      	ldr	r3, [r4, #0]
 800f296:	4a29      	ldr	r2, [pc, #164]	; (800f33c <HAL_DMA_IRQHandler+0x2d8>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d800      	bhi.n	800f29e <HAL_DMA_IRQHandler+0x23a>
 800f29c:	e766      	b.n	800f16c <HAL_DMA_IRQHandler+0x108>
 800f29e:	4a28      	ldr	r2, [pc, #160]	; (800f340 <HAL_DMA_IRQHandler+0x2dc>)
 800f2a0:	6811      	ldr	r1, [r2, #0]
 800f2a2:	4a28      	ldr	r2, [pc, #160]	; (800f344 <HAL_DMA_IRQHandler+0x2e0>)
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d100      	bne.n	800f2aa <HAL_DMA_IRQHandler+0x246>
 800f2a8:	e0ad      	b.n	800f406 <HAL_DMA_IRQHandler+0x3a2>
 800f2aa:	4a27      	ldr	r2, [pc, #156]	; (800f348 <HAL_DMA_IRQHandler+0x2e4>)
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	d100      	bne.n	800f2b2 <HAL_DMA_IRQHandler+0x24e>
 800f2b0:	e0e3      	b.n	800f47a <HAL_DMA_IRQHandler+0x416>
 800f2b2:	4a26      	ldr	r2, [pc, #152]	; (800f34c <HAL_DMA_IRQHandler+0x2e8>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d100      	bne.n	800f2ba <HAL_DMA_IRQHandler+0x256>
 800f2b8:	e0e1      	b.n	800f47e <HAL_DMA_IRQHandler+0x41a>
 800f2ba:	4a25      	ldr	r2, [pc, #148]	; (800f350 <HAL_DMA_IRQHandler+0x2ec>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d100      	bne.n	800f2c2 <HAL_DMA_IRQHandler+0x25e>
 800f2c0:	e0e0      	b.n	800f484 <HAL_DMA_IRQHandler+0x420>
 800f2c2:	4a24      	ldr	r2, [pc, #144]	; (800f354 <HAL_DMA_IRQHandler+0x2f0>)
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d100      	bne.n	800f2ca <HAL_DMA_IRQHandler+0x266>
 800f2c8:	e0df      	b.n	800f48a <HAL_DMA_IRQHandler+0x426>
 800f2ca:	4a23      	ldr	r2, [pc, #140]	; (800f358 <HAL_DMA_IRQHandler+0x2f4>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d100      	bne.n	800f2d2 <HAL_DMA_IRQHandler+0x26e>
 800f2d0:	e0de      	b.n	800f490 <HAL_DMA_IRQHandler+0x42c>
 800f2d2:	4a1a      	ldr	r2, [pc, #104]	; (800f33c <HAL_DMA_IRQHandler+0x2d8>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d100      	bne.n	800f2da <HAL_DMA_IRQHandler+0x276>
 800f2d8:	e0dd      	b.n	800f496 <HAL_DMA_IRQHandler+0x432>
 800f2da:	4a20      	ldr	r2, [pc, #128]	; (800f35c <HAL_DMA_IRQHandler+0x2f8>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d100      	bne.n	800f2e2 <HAL_DMA_IRQHandler+0x27e>
 800f2e0:	e0dc      	b.n	800f49c <HAL_DMA_IRQHandler+0x438>
 800f2e2:	4a1f      	ldr	r2, [pc, #124]	; (800f360 <HAL_DMA_IRQHandler+0x2fc>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d100      	bne.n	800f2ea <HAL_DMA_IRQHandler+0x286>
 800f2e8:	e0da      	b.n	800f4a0 <HAL_DMA_IRQHandler+0x43c>
 800f2ea:	4a1e      	ldr	r2, [pc, #120]	; (800f364 <HAL_DMA_IRQHandler+0x300>)
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	d100      	bne.n	800f2f2 <HAL_DMA_IRQHandler+0x28e>
 800f2f0:	e0d8      	b.n	800f4a4 <HAL_DMA_IRQHandler+0x440>
 800f2f2:	4a1d      	ldr	r2, [pc, #116]	; (800f368 <HAL_DMA_IRQHandler+0x304>)
 800f2f4:	189a      	adds	r2, r3, r2
 800f2f6:	4250      	negs	r0, r2
 800f2f8:	4142      	adcs	r2, r0
 800f2fa:	4252      	negs	r2, r2
 800f2fc:	481d      	ldr	r0, [pc, #116]	; (800f374 <HAL_DMA_IRQHandler+0x310>)
 800f2fe:	4002      	ands	r2, r0
 800f300:	2080      	movs	r0, #128	; 0x80
 800f302:	02c0      	lsls	r0, r0, #11
 800f304:	4684      	mov	ip, r0
 800f306:	4462      	add	r2, ip
 800f308:	e07e      	b.n	800f408 <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f30a:	2380      	movs	r3, #128	; 0x80
 800f30c:	e7b1      	b.n	800f272 <HAL_DMA_IRQHandler+0x20e>
 800f30e:	2380      	movs	r3, #128	; 0x80
 800f310:	011b      	lsls	r3, r3, #4
 800f312:	e7ae      	b.n	800f272 <HAL_DMA_IRQHandler+0x20e>
 800f314:	2380      	movs	r3, #128	; 0x80
 800f316:	021b      	lsls	r3, r3, #8
 800f318:	e7ab      	b.n	800f272 <HAL_DMA_IRQHandler+0x20e>
 800f31a:	2380      	movs	r3, #128	; 0x80
 800f31c:	031b      	lsls	r3, r3, #12
 800f31e:	e7a8      	b.n	800f272 <HAL_DMA_IRQHandler+0x20e>
 800f320:	2380      	movs	r3, #128	; 0x80
 800f322:	041b      	lsls	r3, r3, #16
 800f324:	e7a5      	b.n	800f272 <HAL_DMA_IRQHandler+0x20e>
 800f326:	2380      	movs	r3, #128	; 0x80
 800f328:	051b      	lsls	r3, r3, #20
 800f32a:	e7a2      	b.n	800f272 <HAL_DMA_IRQHandler+0x20e>
 800f32c:	2308      	movs	r3, #8
 800f32e:	e7a0      	b.n	800f272 <HAL_DMA_IRQHandler+0x20e>
 800f330:	2380      	movs	r3, #128	; 0x80
 800f332:	e79e      	b.n	800f272 <HAL_DMA_IRQHandler+0x20e>
 800f334:	2380      	movs	r3, #128	; 0x80
 800f336:	011b      	lsls	r3, r3, #4
 800f338:	e79b      	b.n	800f272 <HAL_DMA_IRQHandler+0x20e>
 800f33a:	46c0      	nop			; (mov r8, r8)
 800f33c:	40020080 	.word	0x40020080
 800f340:	40020400 	.word	0x40020400
 800f344:	40020008 	.word	0x40020008
 800f348:	4002001c 	.word	0x4002001c
 800f34c:	40020030 	.word	0x40020030
 800f350:	40020044 	.word	0x40020044
 800f354:	40020058 	.word	0x40020058
 800f358:	4002006c 	.word	0x4002006c
 800f35c:	40020408 	.word	0x40020408
 800f360:	4002041c 	.word	0x4002041c
 800f364:	40020430 	.word	0x40020430
 800f368:	bffdfbbc 	.word	0xbffdfbbc
 800f36c:	fff88000 	.word	0xfff88000
 800f370:	40020000 	.word	0x40020000
 800f374:	fffc4000 	.word	0xfffc4000
 800f378:	4aaa      	ldr	r2, [pc, #680]	; (800f624 <HAL_DMA_IRQHandler+0x5c0>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d027      	beq.n	800f3ce <HAL_DMA_IRQHandler+0x36a>
 800f37e:	4aaa      	ldr	r2, [pc, #680]	; (800f628 <HAL_DMA_IRQHandler+0x5c4>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d028      	beq.n	800f3d6 <HAL_DMA_IRQHandler+0x372>
 800f384:	4aa9      	ldr	r2, [pc, #676]	; (800f62c <HAL_DMA_IRQHandler+0x5c8>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d027      	beq.n	800f3da <HAL_DMA_IRQHandler+0x376>
 800f38a:	4aa9      	ldr	r2, [pc, #676]	; (800f630 <HAL_DMA_IRQHandler+0x5cc>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d027      	beq.n	800f3e0 <HAL_DMA_IRQHandler+0x37c>
 800f390:	4aa8      	ldr	r2, [pc, #672]	; (800f634 <HAL_DMA_IRQHandler+0x5d0>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d027      	beq.n	800f3e6 <HAL_DMA_IRQHandler+0x382>
 800f396:	4aa8      	ldr	r2, [pc, #672]	; (800f638 <HAL_DMA_IRQHandler+0x5d4>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	d027      	beq.n	800f3ec <HAL_DMA_IRQHandler+0x388>
 800f39c:	4aa7      	ldr	r2, [pc, #668]	; (800f63c <HAL_DMA_IRQHandler+0x5d8>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d027      	beq.n	800f3f2 <HAL_DMA_IRQHandler+0x38e>
 800f3a2:	4aa7      	ldr	r2, [pc, #668]	; (800f640 <HAL_DMA_IRQHandler+0x5dc>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d027      	beq.n	800f3f8 <HAL_DMA_IRQHandler+0x394>
 800f3a8:	4aa6      	ldr	r2, [pc, #664]	; (800f644 <HAL_DMA_IRQHandler+0x5e0>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d026      	beq.n	800f3fc <HAL_DMA_IRQHandler+0x398>
 800f3ae:	4aa6      	ldr	r2, [pc, #664]	; (800f648 <HAL_DMA_IRQHandler+0x5e4>)
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d025      	beq.n	800f400 <HAL_DMA_IRQHandler+0x39c>
 800f3b4:	4aa5      	ldr	r2, [pc, #660]	; (800f64c <HAL_DMA_IRQHandler+0x5e8>)
 800f3b6:	4694      	mov	ip, r2
 800f3b8:	4463      	add	r3, ip
 800f3ba:	425a      	negs	r2, r3
 800f3bc:	4153      	adcs	r3, r2
 800f3be:	425b      	negs	r3, r3
 800f3c0:	4aa3      	ldr	r2, [pc, #652]	; (800f650 <HAL_DMA_IRQHandler+0x5ec>)
 800f3c2:	4013      	ands	r3, r2
 800f3c4:	2280      	movs	r2, #128	; 0x80
 800f3c6:	0312      	lsls	r2, r2, #12
 800f3c8:	4694      	mov	ip, r2
 800f3ca:	4463      	add	r3, ip
 800f3cc:	e000      	b.n	800f3d0 <HAL_DMA_IRQHandler+0x36c>
 800f3ce:	2308      	movs	r3, #8
 800f3d0:	4aa0      	ldr	r2, [pc, #640]	; (800f654 <HAL_DMA_IRQHandler+0x5f0>)
 800f3d2:	6053      	str	r3, [r2, #4]
 800f3d4:	e74f      	b.n	800f276 <HAL_DMA_IRQHandler+0x212>
 800f3d6:	2380      	movs	r3, #128	; 0x80
 800f3d8:	e7fa      	b.n	800f3d0 <HAL_DMA_IRQHandler+0x36c>
 800f3da:	2380      	movs	r3, #128	; 0x80
 800f3dc:	011b      	lsls	r3, r3, #4
 800f3de:	e7f7      	b.n	800f3d0 <HAL_DMA_IRQHandler+0x36c>
 800f3e0:	2380      	movs	r3, #128	; 0x80
 800f3e2:	021b      	lsls	r3, r3, #8
 800f3e4:	e7f4      	b.n	800f3d0 <HAL_DMA_IRQHandler+0x36c>
 800f3e6:	2380      	movs	r3, #128	; 0x80
 800f3e8:	031b      	lsls	r3, r3, #12
 800f3ea:	e7f1      	b.n	800f3d0 <HAL_DMA_IRQHandler+0x36c>
 800f3ec:	2380      	movs	r3, #128	; 0x80
 800f3ee:	041b      	lsls	r3, r3, #16
 800f3f0:	e7ee      	b.n	800f3d0 <HAL_DMA_IRQHandler+0x36c>
 800f3f2:	2380      	movs	r3, #128	; 0x80
 800f3f4:	051b      	lsls	r3, r3, #20
 800f3f6:	e7eb      	b.n	800f3d0 <HAL_DMA_IRQHandler+0x36c>
 800f3f8:	2308      	movs	r3, #8
 800f3fa:	e7e9      	b.n	800f3d0 <HAL_DMA_IRQHandler+0x36c>
 800f3fc:	2380      	movs	r3, #128	; 0x80
 800f3fe:	e7e7      	b.n	800f3d0 <HAL_DMA_IRQHandler+0x36c>
 800f400:	2380      	movs	r3, #128	; 0x80
 800f402:	011b      	lsls	r3, r3, #4
 800f404:	e7e4      	b.n	800f3d0 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f406:	2204      	movs	r2, #4
 800f408:	420a      	tst	r2, r1
 800f40a:	d152      	bne.n	800f4b2 <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f40c:	6821      	ldr	r1, [r4, #0]
 800f40e:	4b92      	ldr	r3, [pc, #584]	; (800f658 <HAL_DMA_IRQHandler+0x5f4>)
 800f410:	6818      	ldr	r0, [r3, #0]
 800f412:	4a84      	ldr	r2, [pc, #528]	; (800f624 <HAL_DMA_IRQHandler+0x5c0>)
 800f414:	4291      	cmp	r1, r2
 800f416:	d100      	bne.n	800f41a <HAL_DMA_IRQHandler+0x3b6>
 800f418:	e16b      	b.n	800f6f2 <HAL_DMA_IRQHandler+0x68e>
 800f41a:	4a83      	ldr	r2, [pc, #524]	; (800f628 <HAL_DMA_IRQHandler+0x5c4>)
 800f41c:	4291      	cmp	r1, r2
 800f41e:	d100      	bne.n	800f422 <HAL_DMA_IRQHandler+0x3be>
 800f420:	e1aa      	b.n	800f778 <HAL_DMA_IRQHandler+0x714>
 800f422:	4a82      	ldr	r2, [pc, #520]	; (800f62c <HAL_DMA_IRQHandler+0x5c8>)
 800f424:	4291      	cmp	r1, r2
 800f426:	d100      	bne.n	800f42a <HAL_DMA_IRQHandler+0x3c6>
 800f428:	e1a8      	b.n	800f77c <HAL_DMA_IRQHandler+0x718>
 800f42a:	4a81      	ldr	r2, [pc, #516]	; (800f630 <HAL_DMA_IRQHandler+0x5cc>)
 800f42c:	4291      	cmp	r1, r2
 800f42e:	d100      	bne.n	800f432 <HAL_DMA_IRQHandler+0x3ce>
 800f430:	e1a7      	b.n	800f782 <HAL_DMA_IRQHandler+0x71e>
 800f432:	4b80      	ldr	r3, [pc, #512]	; (800f634 <HAL_DMA_IRQHandler+0x5d0>)
 800f434:	4299      	cmp	r1, r3
 800f436:	d100      	bne.n	800f43a <HAL_DMA_IRQHandler+0x3d6>
 800f438:	e1a6      	b.n	800f788 <HAL_DMA_IRQHandler+0x724>
 800f43a:	4b7f      	ldr	r3, [pc, #508]	; (800f638 <HAL_DMA_IRQHandler+0x5d4>)
 800f43c:	4299      	cmp	r1, r3
 800f43e:	d100      	bne.n	800f442 <HAL_DMA_IRQHandler+0x3de>
 800f440:	e1a5      	b.n	800f78e <HAL_DMA_IRQHandler+0x72a>
 800f442:	4b7e      	ldr	r3, [pc, #504]	; (800f63c <HAL_DMA_IRQHandler+0x5d8>)
 800f444:	4299      	cmp	r1, r3
 800f446:	d100      	bne.n	800f44a <HAL_DMA_IRQHandler+0x3e6>
 800f448:	e1a4      	b.n	800f794 <HAL_DMA_IRQHandler+0x730>
 800f44a:	4b7d      	ldr	r3, [pc, #500]	; (800f640 <HAL_DMA_IRQHandler+0x5dc>)
 800f44c:	4299      	cmp	r1, r3
 800f44e:	d100      	bne.n	800f452 <HAL_DMA_IRQHandler+0x3ee>
 800f450:	e1a3      	b.n	800f79a <HAL_DMA_IRQHandler+0x736>
 800f452:	4b7c      	ldr	r3, [pc, #496]	; (800f644 <HAL_DMA_IRQHandler+0x5e0>)
 800f454:	4299      	cmp	r1, r3
 800f456:	d100      	bne.n	800f45a <HAL_DMA_IRQHandler+0x3f6>
 800f458:	e1a1      	b.n	800f79e <HAL_DMA_IRQHandler+0x73a>
 800f45a:	4b7b      	ldr	r3, [pc, #492]	; (800f648 <HAL_DMA_IRQHandler+0x5e4>)
 800f45c:	4299      	cmp	r1, r3
 800f45e:	d100      	bne.n	800f462 <HAL_DMA_IRQHandler+0x3fe>
 800f460:	e19f      	b.n	800f7a2 <HAL_DMA_IRQHandler+0x73e>
 800f462:	4b7a      	ldr	r3, [pc, #488]	; (800f64c <HAL_DMA_IRQHandler+0x5e8>)
 800f464:	18ca      	adds	r2, r1, r3
 800f466:	4253      	negs	r3, r2
 800f468:	415a      	adcs	r2, r3
 800f46a:	4252      	negs	r2, r2
 800f46c:	4b7b      	ldr	r3, [pc, #492]	; (800f65c <HAL_DMA_IRQHandler+0x5f8>)
 800f46e:	4013      	ands	r3, r2
 800f470:	2280      	movs	r2, #128	; 0x80
 800f472:	0292      	lsls	r2, r2, #10
 800f474:	4694      	mov	ip, r2
 800f476:	4463      	add	r3, ip
 800f478:	e13c      	b.n	800f6f4 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f47a:	2240      	movs	r2, #64	; 0x40
 800f47c:	e7c4      	b.n	800f408 <HAL_DMA_IRQHandler+0x3a4>
 800f47e:	2280      	movs	r2, #128	; 0x80
 800f480:	00d2      	lsls	r2, r2, #3
 800f482:	e7c1      	b.n	800f408 <HAL_DMA_IRQHandler+0x3a4>
 800f484:	2280      	movs	r2, #128	; 0x80
 800f486:	01d2      	lsls	r2, r2, #7
 800f488:	e7be      	b.n	800f408 <HAL_DMA_IRQHandler+0x3a4>
 800f48a:	2280      	movs	r2, #128	; 0x80
 800f48c:	02d2      	lsls	r2, r2, #11
 800f48e:	e7bb      	b.n	800f408 <HAL_DMA_IRQHandler+0x3a4>
 800f490:	2280      	movs	r2, #128	; 0x80
 800f492:	03d2      	lsls	r2, r2, #15
 800f494:	e7b8      	b.n	800f408 <HAL_DMA_IRQHandler+0x3a4>
 800f496:	2280      	movs	r2, #128	; 0x80
 800f498:	04d2      	lsls	r2, r2, #19
 800f49a:	e7b5      	b.n	800f408 <HAL_DMA_IRQHandler+0x3a4>
 800f49c:	2204      	movs	r2, #4
 800f49e:	e7b3      	b.n	800f408 <HAL_DMA_IRQHandler+0x3a4>
 800f4a0:	2240      	movs	r2, #64	; 0x40
 800f4a2:	e7b1      	b.n	800f408 <HAL_DMA_IRQHandler+0x3a4>
 800f4a4:	2280      	movs	r2, #128	; 0x80
 800f4a6:	00d2      	lsls	r2, r2, #3
 800f4a8:	e7ae      	b.n	800f408 <HAL_DMA_IRQHandler+0x3a4>
 800f4aa:	2204      	movs	r2, #4
 800f4ac:	420a      	tst	r2, r1
 800f4ae:	d100      	bne.n	800f4b2 <HAL_DMA_IRQHandler+0x44e>
 800f4b0:	e208      	b.n	800f8c4 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	0752      	lsls	r2, r2, #29
 800f4b6:	d561      	bpl.n	800f57c <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	0692      	lsls	r2, r2, #26
 800f4bc:	d403      	bmi.n	800f4c6 <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	2104      	movs	r1, #4
 800f4c2:	438a      	bics	r2, r1
 800f4c4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	4a5c      	ldr	r2, [pc, #368]	; (800f63c <HAL_DMA_IRQHandler+0x5d8>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d800      	bhi.n	800f4d0 <HAL_DMA_IRQHandler+0x46c>
 800f4ce:	e0c9      	b.n	800f664 <HAL_DMA_IRQHandler+0x600>
 800f4d0:	4a54      	ldr	r2, [pc, #336]	; (800f624 <HAL_DMA_IRQHandler+0x5c0>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d047      	beq.n	800f566 <HAL_DMA_IRQHandler+0x502>
 800f4d6:	4a54      	ldr	r2, [pc, #336]	; (800f628 <HAL_DMA_IRQHandler+0x5c4>)
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d100      	bne.n	800f4de <HAL_DMA_IRQHandler+0x47a>
 800f4dc:	e089      	b.n	800f5f2 <HAL_DMA_IRQHandler+0x58e>
 800f4de:	4a53      	ldr	r2, [pc, #332]	; (800f62c <HAL_DMA_IRQHandler+0x5c8>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d100      	bne.n	800f4e6 <HAL_DMA_IRQHandler+0x482>
 800f4e4:	e087      	b.n	800f5f6 <HAL_DMA_IRQHandler+0x592>
 800f4e6:	4a52      	ldr	r2, [pc, #328]	; (800f630 <HAL_DMA_IRQHandler+0x5cc>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d100      	bne.n	800f4ee <HAL_DMA_IRQHandler+0x48a>
 800f4ec:	e086      	b.n	800f5fc <HAL_DMA_IRQHandler+0x598>
 800f4ee:	4a51      	ldr	r2, [pc, #324]	; (800f634 <HAL_DMA_IRQHandler+0x5d0>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d100      	bne.n	800f4f6 <HAL_DMA_IRQHandler+0x492>
 800f4f4:	e085      	b.n	800f602 <HAL_DMA_IRQHandler+0x59e>
 800f4f6:	4a50      	ldr	r2, [pc, #320]	; (800f638 <HAL_DMA_IRQHandler+0x5d4>)
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d100      	bne.n	800f4fe <HAL_DMA_IRQHandler+0x49a>
 800f4fc:	e084      	b.n	800f608 <HAL_DMA_IRQHandler+0x5a4>
 800f4fe:	4a4f      	ldr	r2, [pc, #316]	; (800f63c <HAL_DMA_IRQHandler+0x5d8>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d100      	bne.n	800f506 <HAL_DMA_IRQHandler+0x4a2>
 800f504:	e083      	b.n	800f60e <HAL_DMA_IRQHandler+0x5aa>
 800f506:	4a4e      	ldr	r2, [pc, #312]	; (800f640 <HAL_DMA_IRQHandler+0x5dc>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d100      	bne.n	800f50e <HAL_DMA_IRQHandler+0x4aa>
 800f50c:	e082      	b.n	800f614 <HAL_DMA_IRQHandler+0x5b0>
 800f50e:	4a4d      	ldr	r2, [pc, #308]	; (800f644 <HAL_DMA_IRQHandler+0x5e0>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d100      	bne.n	800f516 <HAL_DMA_IRQHandler+0x4b2>
 800f514:	e080      	b.n	800f618 <HAL_DMA_IRQHandler+0x5b4>
 800f516:	4a4c      	ldr	r2, [pc, #304]	; (800f648 <HAL_DMA_IRQHandler+0x5e4>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d07f      	beq.n	800f61c <HAL_DMA_IRQHandler+0x5b8>
 800f51c:	4a4b      	ldr	r2, [pc, #300]	; (800f64c <HAL_DMA_IRQHandler+0x5e8>)
 800f51e:	4694      	mov	ip, r2
 800f520:	4463      	add	r3, ip
 800f522:	425a      	negs	r2, r3
 800f524:	4153      	adcs	r3, r2
 800f526:	425b      	negs	r3, r3
 800f528:	4a4d      	ldr	r2, [pc, #308]	; (800f660 <HAL_DMA_IRQHandler+0x5fc>)
 800f52a:	4013      	ands	r3, r2
 800f52c:	2280      	movs	r2, #128	; 0x80
 800f52e:	02d2      	lsls	r2, r2, #11
 800f530:	4694      	mov	ip, r2
 800f532:	4463      	add	r3, ip
 800f534:	e018      	b.n	800f568 <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f536:	2240      	movs	r2, #64	; 0x40
 800f538:	e7b8      	b.n	800f4ac <HAL_DMA_IRQHandler+0x448>
 800f53a:	2280      	movs	r2, #128	; 0x80
 800f53c:	00d2      	lsls	r2, r2, #3
 800f53e:	e7b5      	b.n	800f4ac <HAL_DMA_IRQHandler+0x448>
 800f540:	2280      	movs	r2, #128	; 0x80
 800f542:	01d2      	lsls	r2, r2, #7
 800f544:	e7b2      	b.n	800f4ac <HAL_DMA_IRQHandler+0x448>
 800f546:	2280      	movs	r2, #128	; 0x80
 800f548:	02d2      	lsls	r2, r2, #11
 800f54a:	e7af      	b.n	800f4ac <HAL_DMA_IRQHandler+0x448>
 800f54c:	2280      	movs	r2, #128	; 0x80
 800f54e:	03d2      	lsls	r2, r2, #15
 800f550:	e7ac      	b.n	800f4ac <HAL_DMA_IRQHandler+0x448>
 800f552:	2280      	movs	r2, #128	; 0x80
 800f554:	04d2      	lsls	r2, r2, #19
 800f556:	e7a9      	b.n	800f4ac <HAL_DMA_IRQHandler+0x448>
 800f558:	2204      	movs	r2, #4
 800f55a:	e7a7      	b.n	800f4ac <HAL_DMA_IRQHandler+0x448>
 800f55c:	2240      	movs	r2, #64	; 0x40
 800f55e:	e7a5      	b.n	800f4ac <HAL_DMA_IRQHandler+0x448>
 800f560:	2280      	movs	r2, #128	; 0x80
 800f562:	00d2      	lsls	r2, r2, #3
 800f564:	e7a2      	b.n	800f4ac <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f566:	2304      	movs	r3, #4
 800f568:	4a3b      	ldr	r2, [pc, #236]	; (800f658 <HAL_DMA_IRQHandler+0x5f4>)
 800f56a:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800f56c:	2321      	movs	r3, #33	; 0x21
 800f56e:	2211      	movs	r2, #17
 800f570:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f572:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f574:	2b00      	cmp	r3, #0
 800f576:	d001      	beq.n	800f57c <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 800f578:	0020      	movs	r0, r4
 800f57a:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f57c:	6821      	ldr	r1, [r4, #0]
 800f57e:	4b2f      	ldr	r3, [pc, #188]	; (800f63c <HAL_DMA_IRQHandler+0x5d8>)
 800f580:	4299      	cmp	r1, r3
 800f582:	d900      	bls.n	800f586 <HAL_DMA_IRQHandler+0x522>
 800f584:	e743      	b.n	800f40e <HAL_DMA_IRQHandler+0x3aa>
 800f586:	4b33      	ldr	r3, [pc, #204]	; (800f654 <HAL_DMA_IRQHandler+0x5f0>)
 800f588:	6818      	ldr	r0, [r3, #0]
 800f58a:	4a26      	ldr	r2, [pc, #152]	; (800f624 <HAL_DMA_IRQHandler+0x5c0>)
 800f58c:	4291      	cmp	r1, r2
 800f58e:	d100      	bne.n	800f592 <HAL_DMA_IRQHandler+0x52e>
 800f590:	e10a      	b.n	800f7a8 <HAL_DMA_IRQHandler+0x744>
 800f592:	4a25      	ldr	r2, [pc, #148]	; (800f628 <HAL_DMA_IRQHandler+0x5c4>)
 800f594:	4291      	cmp	r1, r2
 800f596:	d100      	bne.n	800f59a <HAL_DMA_IRQHandler+0x536>
 800f598:	e10c      	b.n	800f7b4 <HAL_DMA_IRQHandler+0x750>
 800f59a:	4a24      	ldr	r2, [pc, #144]	; (800f62c <HAL_DMA_IRQHandler+0x5c8>)
 800f59c:	4291      	cmp	r1, r2
 800f59e:	d100      	bne.n	800f5a2 <HAL_DMA_IRQHandler+0x53e>
 800f5a0:	e10a      	b.n	800f7b8 <HAL_DMA_IRQHandler+0x754>
 800f5a2:	4a23      	ldr	r2, [pc, #140]	; (800f630 <HAL_DMA_IRQHandler+0x5cc>)
 800f5a4:	4291      	cmp	r1, r2
 800f5a6:	d100      	bne.n	800f5aa <HAL_DMA_IRQHandler+0x546>
 800f5a8:	e109      	b.n	800f7be <HAL_DMA_IRQHandler+0x75a>
 800f5aa:	4b22      	ldr	r3, [pc, #136]	; (800f634 <HAL_DMA_IRQHandler+0x5d0>)
 800f5ac:	4299      	cmp	r1, r3
 800f5ae:	d100      	bne.n	800f5b2 <HAL_DMA_IRQHandler+0x54e>
 800f5b0:	e108      	b.n	800f7c4 <HAL_DMA_IRQHandler+0x760>
 800f5b2:	4b21      	ldr	r3, [pc, #132]	; (800f638 <HAL_DMA_IRQHandler+0x5d4>)
 800f5b4:	4299      	cmp	r1, r3
 800f5b6:	d100      	bne.n	800f5ba <HAL_DMA_IRQHandler+0x556>
 800f5b8:	e107      	b.n	800f7ca <HAL_DMA_IRQHandler+0x766>
 800f5ba:	4b20      	ldr	r3, [pc, #128]	; (800f63c <HAL_DMA_IRQHandler+0x5d8>)
 800f5bc:	4299      	cmp	r1, r3
 800f5be:	d100      	bne.n	800f5c2 <HAL_DMA_IRQHandler+0x55e>
 800f5c0:	e106      	b.n	800f7d0 <HAL_DMA_IRQHandler+0x76c>
 800f5c2:	4b1f      	ldr	r3, [pc, #124]	; (800f640 <HAL_DMA_IRQHandler+0x5dc>)
 800f5c4:	4299      	cmp	r1, r3
 800f5c6:	d100      	bne.n	800f5ca <HAL_DMA_IRQHandler+0x566>
 800f5c8:	e105      	b.n	800f7d6 <HAL_DMA_IRQHandler+0x772>
 800f5ca:	4b1e      	ldr	r3, [pc, #120]	; (800f644 <HAL_DMA_IRQHandler+0x5e0>)
 800f5cc:	4299      	cmp	r1, r3
 800f5ce:	d100      	bne.n	800f5d2 <HAL_DMA_IRQHandler+0x56e>
 800f5d0:	e103      	b.n	800f7da <HAL_DMA_IRQHandler+0x776>
 800f5d2:	4b1d      	ldr	r3, [pc, #116]	; (800f648 <HAL_DMA_IRQHandler+0x5e4>)
 800f5d4:	4299      	cmp	r1, r3
 800f5d6:	d100      	bne.n	800f5da <HAL_DMA_IRQHandler+0x576>
 800f5d8:	e101      	b.n	800f7de <HAL_DMA_IRQHandler+0x77a>
 800f5da:	4b1c      	ldr	r3, [pc, #112]	; (800f64c <HAL_DMA_IRQHandler+0x5e8>)
 800f5dc:	18ca      	adds	r2, r1, r3
 800f5de:	4253      	negs	r3, r2
 800f5e0:	415a      	adcs	r2, r3
 800f5e2:	4252      	negs	r2, r2
 800f5e4:	4b1d      	ldr	r3, [pc, #116]	; (800f65c <HAL_DMA_IRQHandler+0x5f8>)
 800f5e6:	4013      	ands	r3, r2
 800f5e8:	2280      	movs	r2, #128	; 0x80
 800f5ea:	0292      	lsls	r2, r2, #10
 800f5ec:	4694      	mov	ip, r2
 800f5ee:	4463      	add	r3, ip
 800f5f0:	e0db      	b.n	800f7aa <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f5f2:	2340      	movs	r3, #64	; 0x40
 800f5f4:	e7b8      	b.n	800f568 <HAL_DMA_IRQHandler+0x504>
 800f5f6:	2380      	movs	r3, #128	; 0x80
 800f5f8:	00db      	lsls	r3, r3, #3
 800f5fa:	e7b5      	b.n	800f568 <HAL_DMA_IRQHandler+0x504>
 800f5fc:	2380      	movs	r3, #128	; 0x80
 800f5fe:	01db      	lsls	r3, r3, #7
 800f600:	e7b2      	b.n	800f568 <HAL_DMA_IRQHandler+0x504>
 800f602:	2380      	movs	r3, #128	; 0x80
 800f604:	02db      	lsls	r3, r3, #11
 800f606:	e7af      	b.n	800f568 <HAL_DMA_IRQHandler+0x504>
 800f608:	2380      	movs	r3, #128	; 0x80
 800f60a:	03db      	lsls	r3, r3, #15
 800f60c:	e7ac      	b.n	800f568 <HAL_DMA_IRQHandler+0x504>
 800f60e:	2380      	movs	r3, #128	; 0x80
 800f610:	04db      	lsls	r3, r3, #19
 800f612:	e7a9      	b.n	800f568 <HAL_DMA_IRQHandler+0x504>
 800f614:	2304      	movs	r3, #4
 800f616:	e7a7      	b.n	800f568 <HAL_DMA_IRQHandler+0x504>
 800f618:	2340      	movs	r3, #64	; 0x40
 800f61a:	e7a5      	b.n	800f568 <HAL_DMA_IRQHandler+0x504>
 800f61c:	2380      	movs	r3, #128	; 0x80
 800f61e:	00db      	lsls	r3, r3, #3
 800f620:	e7a2      	b.n	800f568 <HAL_DMA_IRQHandler+0x504>
 800f622:	46c0      	nop			; (mov r8, r8)
 800f624:	40020008 	.word	0x40020008
 800f628:	4002001c 	.word	0x4002001c
 800f62c:	40020030 	.word	0x40020030
 800f630:	40020044 	.word	0x40020044
 800f634:	40020058 	.word	0x40020058
 800f638:	4002006c 	.word	0x4002006c
 800f63c:	40020080 	.word	0x40020080
 800f640:	40020408 	.word	0x40020408
 800f644:	4002041c 	.word	0x4002041c
 800f648:	40020430 	.word	0x40020430
 800f64c:	bffdfbbc 	.word	0xbffdfbbc
 800f650:	fff88000 	.word	0xfff88000
 800f654:	40020000 	.word	0x40020000
 800f658:	40020400 	.word	0x40020400
 800f65c:	fffe2000 	.word	0xfffe2000
 800f660:	fffc4000 	.word	0xfffc4000
 800f664:	4a9b      	ldr	r2, [pc, #620]	; (800f8d4 <HAL_DMA_IRQHandler+0x870>)
 800f666:	4293      	cmp	r3, r2
 800f668:	d027      	beq.n	800f6ba <HAL_DMA_IRQHandler+0x656>
 800f66a:	4a9b      	ldr	r2, [pc, #620]	; (800f8d8 <HAL_DMA_IRQHandler+0x874>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d028      	beq.n	800f6c2 <HAL_DMA_IRQHandler+0x65e>
 800f670:	4a9a      	ldr	r2, [pc, #616]	; (800f8dc <HAL_DMA_IRQHandler+0x878>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d027      	beq.n	800f6c6 <HAL_DMA_IRQHandler+0x662>
 800f676:	4a9a      	ldr	r2, [pc, #616]	; (800f8e0 <HAL_DMA_IRQHandler+0x87c>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d027      	beq.n	800f6cc <HAL_DMA_IRQHandler+0x668>
 800f67c:	4a99      	ldr	r2, [pc, #612]	; (800f8e4 <HAL_DMA_IRQHandler+0x880>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d027      	beq.n	800f6d2 <HAL_DMA_IRQHandler+0x66e>
 800f682:	4a99      	ldr	r2, [pc, #612]	; (800f8e8 <HAL_DMA_IRQHandler+0x884>)
 800f684:	4293      	cmp	r3, r2
 800f686:	d027      	beq.n	800f6d8 <HAL_DMA_IRQHandler+0x674>
 800f688:	4a98      	ldr	r2, [pc, #608]	; (800f8ec <HAL_DMA_IRQHandler+0x888>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d027      	beq.n	800f6de <HAL_DMA_IRQHandler+0x67a>
 800f68e:	4a98      	ldr	r2, [pc, #608]	; (800f8f0 <HAL_DMA_IRQHandler+0x88c>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d027      	beq.n	800f6e4 <HAL_DMA_IRQHandler+0x680>
 800f694:	4a97      	ldr	r2, [pc, #604]	; (800f8f4 <HAL_DMA_IRQHandler+0x890>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d026      	beq.n	800f6e8 <HAL_DMA_IRQHandler+0x684>
 800f69a:	4a97      	ldr	r2, [pc, #604]	; (800f8f8 <HAL_DMA_IRQHandler+0x894>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d025      	beq.n	800f6ec <HAL_DMA_IRQHandler+0x688>
 800f6a0:	4a96      	ldr	r2, [pc, #600]	; (800f8fc <HAL_DMA_IRQHandler+0x898>)
 800f6a2:	4694      	mov	ip, r2
 800f6a4:	4463      	add	r3, ip
 800f6a6:	425a      	negs	r2, r3
 800f6a8:	4153      	adcs	r3, r2
 800f6aa:	425b      	negs	r3, r3
 800f6ac:	4a94      	ldr	r2, [pc, #592]	; (800f900 <HAL_DMA_IRQHandler+0x89c>)
 800f6ae:	4013      	ands	r3, r2
 800f6b0:	2280      	movs	r2, #128	; 0x80
 800f6b2:	02d2      	lsls	r2, r2, #11
 800f6b4:	4694      	mov	ip, r2
 800f6b6:	4463      	add	r3, ip
 800f6b8:	e000      	b.n	800f6bc <HAL_DMA_IRQHandler+0x658>
 800f6ba:	2304      	movs	r3, #4
 800f6bc:	4a91      	ldr	r2, [pc, #580]	; (800f904 <HAL_DMA_IRQHandler+0x8a0>)
 800f6be:	6053      	str	r3, [r2, #4]
 800f6c0:	e754      	b.n	800f56c <HAL_DMA_IRQHandler+0x508>
 800f6c2:	2340      	movs	r3, #64	; 0x40
 800f6c4:	e7fa      	b.n	800f6bc <HAL_DMA_IRQHandler+0x658>
 800f6c6:	2380      	movs	r3, #128	; 0x80
 800f6c8:	00db      	lsls	r3, r3, #3
 800f6ca:	e7f7      	b.n	800f6bc <HAL_DMA_IRQHandler+0x658>
 800f6cc:	2380      	movs	r3, #128	; 0x80
 800f6ce:	01db      	lsls	r3, r3, #7
 800f6d0:	e7f4      	b.n	800f6bc <HAL_DMA_IRQHandler+0x658>
 800f6d2:	2380      	movs	r3, #128	; 0x80
 800f6d4:	02db      	lsls	r3, r3, #11
 800f6d6:	e7f1      	b.n	800f6bc <HAL_DMA_IRQHandler+0x658>
 800f6d8:	2380      	movs	r3, #128	; 0x80
 800f6da:	03db      	lsls	r3, r3, #15
 800f6dc:	e7ee      	b.n	800f6bc <HAL_DMA_IRQHandler+0x658>
 800f6de:	2380      	movs	r3, #128	; 0x80
 800f6e0:	04db      	lsls	r3, r3, #19
 800f6e2:	e7eb      	b.n	800f6bc <HAL_DMA_IRQHandler+0x658>
 800f6e4:	2304      	movs	r3, #4
 800f6e6:	e7e9      	b.n	800f6bc <HAL_DMA_IRQHandler+0x658>
 800f6e8:	2340      	movs	r3, #64	; 0x40
 800f6ea:	e7e7      	b.n	800f6bc <HAL_DMA_IRQHandler+0x658>
 800f6ec:	2380      	movs	r3, #128	; 0x80
 800f6ee:	00db      	lsls	r3, r3, #3
 800f6f0:	e7e4      	b.n	800f6bc <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f6f2:	2302      	movs	r3, #2
 800f6f4:	4003      	ands	r3, r0
 800f6f6:	1e5a      	subs	r2, r3, #1
 800f6f8:	4193      	sbcs	r3, r2
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d100      	bne.n	800f702 <HAL_DMA_IRQHandler+0x69e>
 800f700:	e080      	b.n	800f804 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f702:	680b      	ldr	r3, [r1, #0]
 800f704:	079b      	lsls	r3, r3, #30
 800f706:	d57d      	bpl.n	800f804 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800f708:	680b      	ldr	r3, [r1, #0]
 800f70a:	069b      	lsls	r3, r3, #26
 800f70c:	d403      	bmi.n	800f716 <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800f70e:	680b      	ldr	r3, [r1, #0]
 800f710:	2202      	movs	r2, #2
 800f712:	4393      	bics	r3, r2
 800f714:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f716:	6823      	ldr	r3, [r4, #0]
 800f718:	4a74      	ldr	r2, [pc, #464]	; (800f8ec <HAL_DMA_IRQHandler+0x888>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d800      	bhi.n	800f720 <HAL_DMA_IRQHandler+0x6bc>
 800f71e:	e08a      	b.n	800f836 <HAL_DMA_IRQHandler+0x7d2>
 800f720:	4a6c      	ldr	r2, [pc, #432]	; (800f8d4 <HAL_DMA_IRQHandler+0x870>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d05e      	beq.n	800f7e4 <HAL_DMA_IRQHandler+0x780>
 800f726:	4a6c      	ldr	r2, [pc, #432]	; (800f8d8 <HAL_DMA_IRQHandler+0x874>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d100      	bne.n	800f72e <HAL_DMA_IRQHandler+0x6ca>
 800f72c:	e06b      	b.n	800f806 <HAL_DMA_IRQHandler+0x7a2>
 800f72e:	4a6b      	ldr	r2, [pc, #428]	; (800f8dc <HAL_DMA_IRQHandler+0x878>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d06a      	beq.n	800f80a <HAL_DMA_IRQHandler+0x7a6>
 800f734:	4a6a      	ldr	r2, [pc, #424]	; (800f8e0 <HAL_DMA_IRQHandler+0x87c>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d06a      	beq.n	800f810 <HAL_DMA_IRQHandler+0x7ac>
 800f73a:	4a6a      	ldr	r2, [pc, #424]	; (800f8e4 <HAL_DMA_IRQHandler+0x880>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d06a      	beq.n	800f816 <HAL_DMA_IRQHandler+0x7b2>
 800f740:	4a69      	ldr	r2, [pc, #420]	; (800f8e8 <HAL_DMA_IRQHandler+0x884>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d06a      	beq.n	800f81c <HAL_DMA_IRQHandler+0x7b8>
 800f746:	4a69      	ldr	r2, [pc, #420]	; (800f8ec <HAL_DMA_IRQHandler+0x888>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d06a      	beq.n	800f822 <HAL_DMA_IRQHandler+0x7be>
 800f74c:	4a68      	ldr	r2, [pc, #416]	; (800f8f0 <HAL_DMA_IRQHandler+0x88c>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d06a      	beq.n	800f828 <HAL_DMA_IRQHandler+0x7c4>
 800f752:	4a68      	ldr	r2, [pc, #416]	; (800f8f4 <HAL_DMA_IRQHandler+0x890>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d069      	beq.n	800f82c <HAL_DMA_IRQHandler+0x7c8>
 800f758:	4a67      	ldr	r2, [pc, #412]	; (800f8f8 <HAL_DMA_IRQHandler+0x894>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d068      	beq.n	800f830 <HAL_DMA_IRQHandler+0x7cc>
 800f75e:	4a67      	ldr	r2, [pc, #412]	; (800f8fc <HAL_DMA_IRQHandler+0x898>)
 800f760:	4694      	mov	ip, r2
 800f762:	4463      	add	r3, ip
 800f764:	425a      	negs	r2, r3
 800f766:	4153      	adcs	r3, r2
 800f768:	425b      	negs	r3, r3
 800f76a:	4a67      	ldr	r2, [pc, #412]	; (800f908 <HAL_DMA_IRQHandler+0x8a4>)
 800f76c:	4013      	ands	r3, r2
 800f76e:	2280      	movs	r2, #128	; 0x80
 800f770:	0292      	lsls	r2, r2, #10
 800f772:	4694      	mov	ip, r2
 800f774:	4463      	add	r3, ip
 800f776:	e036      	b.n	800f7e6 <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f778:	2320      	movs	r3, #32
 800f77a:	e7bb      	b.n	800f6f4 <HAL_DMA_IRQHandler+0x690>
 800f77c:	2380      	movs	r3, #128	; 0x80
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	e7b8      	b.n	800f6f4 <HAL_DMA_IRQHandler+0x690>
 800f782:	2380      	movs	r3, #128	; 0x80
 800f784:	019b      	lsls	r3, r3, #6
 800f786:	e7b5      	b.n	800f6f4 <HAL_DMA_IRQHandler+0x690>
 800f788:	2380      	movs	r3, #128	; 0x80
 800f78a:	029b      	lsls	r3, r3, #10
 800f78c:	e7b2      	b.n	800f6f4 <HAL_DMA_IRQHandler+0x690>
 800f78e:	2380      	movs	r3, #128	; 0x80
 800f790:	039b      	lsls	r3, r3, #14
 800f792:	e7af      	b.n	800f6f4 <HAL_DMA_IRQHandler+0x690>
 800f794:	2380      	movs	r3, #128	; 0x80
 800f796:	049b      	lsls	r3, r3, #18
 800f798:	e7ac      	b.n	800f6f4 <HAL_DMA_IRQHandler+0x690>
 800f79a:	2302      	movs	r3, #2
 800f79c:	e7aa      	b.n	800f6f4 <HAL_DMA_IRQHandler+0x690>
 800f79e:	2320      	movs	r3, #32
 800f7a0:	e7a8      	b.n	800f6f4 <HAL_DMA_IRQHandler+0x690>
 800f7a2:	2380      	movs	r3, #128	; 0x80
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	e7a5      	b.n	800f6f4 <HAL_DMA_IRQHandler+0x690>
 800f7a8:	2302      	movs	r3, #2
 800f7aa:	4003      	ands	r3, r0
 800f7ac:	1e5a      	subs	r2, r3, #1
 800f7ae:	4193      	sbcs	r3, r2
 800f7b0:	b2db      	uxtb	r3, r3
 800f7b2:	e7a3      	b.n	800f6fc <HAL_DMA_IRQHandler+0x698>
 800f7b4:	2320      	movs	r3, #32
 800f7b6:	e7f8      	b.n	800f7aa <HAL_DMA_IRQHandler+0x746>
 800f7b8:	2380      	movs	r3, #128	; 0x80
 800f7ba:	009b      	lsls	r3, r3, #2
 800f7bc:	e7f5      	b.n	800f7aa <HAL_DMA_IRQHandler+0x746>
 800f7be:	2380      	movs	r3, #128	; 0x80
 800f7c0:	019b      	lsls	r3, r3, #6
 800f7c2:	e7f2      	b.n	800f7aa <HAL_DMA_IRQHandler+0x746>
 800f7c4:	2380      	movs	r3, #128	; 0x80
 800f7c6:	029b      	lsls	r3, r3, #10
 800f7c8:	e7ef      	b.n	800f7aa <HAL_DMA_IRQHandler+0x746>
 800f7ca:	2380      	movs	r3, #128	; 0x80
 800f7cc:	039b      	lsls	r3, r3, #14
 800f7ce:	e7ec      	b.n	800f7aa <HAL_DMA_IRQHandler+0x746>
 800f7d0:	2380      	movs	r3, #128	; 0x80
 800f7d2:	049b      	lsls	r3, r3, #18
 800f7d4:	e7e9      	b.n	800f7aa <HAL_DMA_IRQHandler+0x746>
 800f7d6:	2302      	movs	r3, #2
 800f7d8:	e7e7      	b.n	800f7aa <HAL_DMA_IRQHandler+0x746>
 800f7da:	2320      	movs	r3, #32
 800f7dc:	e7e5      	b.n	800f7aa <HAL_DMA_IRQHandler+0x746>
 800f7de:	2380      	movs	r3, #128	; 0x80
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	e7e2      	b.n	800f7aa <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f7e4:	2302      	movs	r3, #2
 800f7e6:	4a49      	ldr	r2, [pc, #292]	; (800f90c <HAL_DMA_IRQHandler+0x8a8>)
 800f7e8:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800f7ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f7ec:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 800f7ee:	2321      	movs	r3, #33	; 0x21
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 800f7f4:	3b01      	subs	r3, #1
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f7fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d001      	beq.n	800f804 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 800f800:	0020      	movs	r0, r4
 800f802:	4798      	blx	r3
}  
 800f804:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f806:	2320      	movs	r3, #32
 800f808:	e7ed      	b.n	800f7e6 <HAL_DMA_IRQHandler+0x782>
 800f80a:	2380      	movs	r3, #128	; 0x80
 800f80c:	009b      	lsls	r3, r3, #2
 800f80e:	e7ea      	b.n	800f7e6 <HAL_DMA_IRQHandler+0x782>
 800f810:	2380      	movs	r3, #128	; 0x80
 800f812:	019b      	lsls	r3, r3, #6
 800f814:	e7e7      	b.n	800f7e6 <HAL_DMA_IRQHandler+0x782>
 800f816:	2380      	movs	r3, #128	; 0x80
 800f818:	029b      	lsls	r3, r3, #10
 800f81a:	e7e4      	b.n	800f7e6 <HAL_DMA_IRQHandler+0x782>
 800f81c:	2380      	movs	r3, #128	; 0x80
 800f81e:	039b      	lsls	r3, r3, #14
 800f820:	e7e1      	b.n	800f7e6 <HAL_DMA_IRQHandler+0x782>
 800f822:	2380      	movs	r3, #128	; 0x80
 800f824:	049b      	lsls	r3, r3, #18
 800f826:	e7de      	b.n	800f7e6 <HAL_DMA_IRQHandler+0x782>
 800f828:	2302      	movs	r3, #2
 800f82a:	e7dc      	b.n	800f7e6 <HAL_DMA_IRQHandler+0x782>
 800f82c:	2320      	movs	r3, #32
 800f82e:	e7da      	b.n	800f7e6 <HAL_DMA_IRQHandler+0x782>
 800f830:	2380      	movs	r3, #128	; 0x80
 800f832:	009b      	lsls	r3, r3, #2
 800f834:	e7d7      	b.n	800f7e6 <HAL_DMA_IRQHandler+0x782>
 800f836:	4a27      	ldr	r2, [pc, #156]	; (800f8d4 <HAL_DMA_IRQHandler+0x870>)
 800f838:	4293      	cmp	r3, r2
 800f83a:	d027      	beq.n	800f88c <HAL_DMA_IRQHandler+0x828>
 800f83c:	4a26      	ldr	r2, [pc, #152]	; (800f8d8 <HAL_DMA_IRQHandler+0x874>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d028      	beq.n	800f894 <HAL_DMA_IRQHandler+0x830>
 800f842:	4a26      	ldr	r2, [pc, #152]	; (800f8dc <HAL_DMA_IRQHandler+0x878>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d027      	beq.n	800f898 <HAL_DMA_IRQHandler+0x834>
 800f848:	4a25      	ldr	r2, [pc, #148]	; (800f8e0 <HAL_DMA_IRQHandler+0x87c>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d027      	beq.n	800f89e <HAL_DMA_IRQHandler+0x83a>
 800f84e:	4a25      	ldr	r2, [pc, #148]	; (800f8e4 <HAL_DMA_IRQHandler+0x880>)
 800f850:	4293      	cmp	r3, r2
 800f852:	d027      	beq.n	800f8a4 <HAL_DMA_IRQHandler+0x840>
 800f854:	4a24      	ldr	r2, [pc, #144]	; (800f8e8 <HAL_DMA_IRQHandler+0x884>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d027      	beq.n	800f8aa <HAL_DMA_IRQHandler+0x846>
 800f85a:	4a24      	ldr	r2, [pc, #144]	; (800f8ec <HAL_DMA_IRQHandler+0x888>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d027      	beq.n	800f8b0 <HAL_DMA_IRQHandler+0x84c>
 800f860:	4a23      	ldr	r2, [pc, #140]	; (800f8f0 <HAL_DMA_IRQHandler+0x88c>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d027      	beq.n	800f8b6 <HAL_DMA_IRQHandler+0x852>
 800f866:	4a23      	ldr	r2, [pc, #140]	; (800f8f4 <HAL_DMA_IRQHandler+0x890>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d026      	beq.n	800f8ba <HAL_DMA_IRQHandler+0x856>
 800f86c:	4a22      	ldr	r2, [pc, #136]	; (800f8f8 <HAL_DMA_IRQHandler+0x894>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d025      	beq.n	800f8be <HAL_DMA_IRQHandler+0x85a>
 800f872:	4a22      	ldr	r2, [pc, #136]	; (800f8fc <HAL_DMA_IRQHandler+0x898>)
 800f874:	4694      	mov	ip, r2
 800f876:	4463      	add	r3, ip
 800f878:	425a      	negs	r2, r3
 800f87a:	4153      	adcs	r3, r2
 800f87c:	425b      	negs	r3, r3
 800f87e:	4a22      	ldr	r2, [pc, #136]	; (800f908 <HAL_DMA_IRQHandler+0x8a4>)
 800f880:	4013      	ands	r3, r2
 800f882:	2280      	movs	r2, #128	; 0x80
 800f884:	0292      	lsls	r2, r2, #10
 800f886:	4694      	mov	ip, r2
 800f888:	4463      	add	r3, ip
 800f88a:	e000      	b.n	800f88e <HAL_DMA_IRQHandler+0x82a>
 800f88c:	2302      	movs	r3, #2
 800f88e:	4a1d      	ldr	r2, [pc, #116]	; (800f904 <HAL_DMA_IRQHandler+0x8a0>)
 800f890:	6053      	str	r3, [r2, #4]
 800f892:	e7aa      	b.n	800f7ea <HAL_DMA_IRQHandler+0x786>
 800f894:	2320      	movs	r3, #32
 800f896:	e7fa      	b.n	800f88e <HAL_DMA_IRQHandler+0x82a>
 800f898:	2380      	movs	r3, #128	; 0x80
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	e7f7      	b.n	800f88e <HAL_DMA_IRQHandler+0x82a>
 800f89e:	2380      	movs	r3, #128	; 0x80
 800f8a0:	019b      	lsls	r3, r3, #6
 800f8a2:	e7f4      	b.n	800f88e <HAL_DMA_IRQHandler+0x82a>
 800f8a4:	2380      	movs	r3, #128	; 0x80
 800f8a6:	029b      	lsls	r3, r3, #10
 800f8a8:	e7f1      	b.n	800f88e <HAL_DMA_IRQHandler+0x82a>
 800f8aa:	2380      	movs	r3, #128	; 0x80
 800f8ac:	039b      	lsls	r3, r3, #14
 800f8ae:	e7ee      	b.n	800f88e <HAL_DMA_IRQHandler+0x82a>
 800f8b0:	2380      	movs	r3, #128	; 0x80
 800f8b2:	049b      	lsls	r3, r3, #18
 800f8b4:	e7eb      	b.n	800f88e <HAL_DMA_IRQHandler+0x82a>
 800f8b6:	2302      	movs	r3, #2
 800f8b8:	e7e9      	b.n	800f88e <HAL_DMA_IRQHandler+0x82a>
 800f8ba:	2320      	movs	r3, #32
 800f8bc:	e7e7      	b.n	800f88e <HAL_DMA_IRQHandler+0x82a>
 800f8be:	2380      	movs	r3, #128	; 0x80
 800f8c0:	009b      	lsls	r3, r3, #2
 800f8c2:	e7e4      	b.n	800f88e <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f8c4:	6821      	ldr	r1, [r4, #0]
 800f8c6:	e65e      	b.n	800f586 <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	0712      	lsls	r2, r2, #28
 800f8cc:	d500      	bpl.n	800f8d0 <HAL_DMA_IRQHandler+0x86c>
 800f8ce:	e49b      	b.n	800f208 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f8d0:	6823      	ldr	r3, [r4, #0]
 800f8d2:	e44b      	b.n	800f16c <HAL_DMA_IRQHandler+0x108>
 800f8d4:	40020008 	.word	0x40020008
 800f8d8:	4002001c 	.word	0x4002001c
 800f8dc:	40020030 	.word	0x40020030
 800f8e0:	40020044 	.word	0x40020044
 800f8e4:	40020058 	.word	0x40020058
 800f8e8:	4002006c 	.word	0x4002006c
 800f8ec:	40020080 	.word	0x40020080
 800f8f0:	40020408 	.word	0x40020408
 800f8f4:	4002041c 	.word	0x4002041c
 800f8f8:	40020430 	.word	0x40020430
 800f8fc:	bffdfbbc 	.word	0xbffdfbbc
 800f900:	fffc4000 	.word	0xfffc4000
 800f904:	40020000 	.word	0x40020000
 800f908:	fffe2000 	.word	0xfffe2000
 800f90c:	40020400 	.word	0x40020400

0800f910 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800f910:	4b0a      	ldr	r3, [pc, #40]	; (800f93c <FLASH_SetErrorCode+0x2c>)
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	06db      	lsls	r3, r3, #27
 800f916:	d504      	bpl.n	800f922 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f918:	4a09      	ldr	r2, [pc, #36]	; (800f940 <FLASH_SetErrorCode+0x30>)
 800f91a:	69d3      	ldr	r3, [r2, #28]
 800f91c:	2102      	movs	r1, #2
 800f91e:	430b      	orrs	r3, r1
 800f920:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800f922:	4b06      	ldr	r3, [pc, #24]	; (800f93c <FLASH_SetErrorCode+0x2c>)
 800f924:	68db      	ldr	r3, [r3, #12]
 800f926:	075b      	lsls	r3, r3, #29
 800f928:	d504      	bpl.n	800f934 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800f92a:	4a05      	ldr	r2, [pc, #20]	; (800f940 <FLASH_SetErrorCode+0x30>)
 800f92c:	69d3      	ldr	r3, [r2, #28]
 800f92e:	2101      	movs	r1, #1
 800f930:	430b      	orrs	r3, r1
 800f932:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 800f934:	4b01      	ldr	r3, [pc, #4]	; (800f93c <FLASH_SetErrorCode+0x2c>)
 800f936:	2214      	movs	r2, #20
 800f938:	60da      	str	r2, [r3, #12]
}  
 800f93a:	4770      	bx	lr
 800f93c:	40022000 	.word	0x40022000
 800f940:	200065f8 	.word	0x200065f8

0800f944 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800f944:	4b05      	ldr	r3, [pc, #20]	; (800f95c <HAL_FLASH_Unlock+0x18>)
 800f946:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 800f948:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800f94a:	061b      	lsls	r3, r3, #24
 800f94c:	d505      	bpl.n	800f95a <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f94e:	4b03      	ldr	r3, [pc, #12]	; (800f95c <HAL_FLASH_Unlock+0x18>)
 800f950:	4a03      	ldr	r2, [pc, #12]	; (800f960 <HAL_FLASH_Unlock+0x1c>)
 800f952:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f954:	4a03      	ldr	r2, [pc, #12]	; (800f964 <HAL_FLASH_Unlock+0x20>)
 800f956:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 800f958:	2000      	movs	r0, #0
}
 800f95a:	4770      	bx	lr
 800f95c:	40022000 	.word	0x40022000
 800f960:	45670123 	.word	0x45670123
 800f964:	cdef89ab 	.word	0xcdef89ab

0800f968 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800f968:	4a03      	ldr	r2, [pc, #12]	; (800f978 <HAL_FLASH_Lock+0x10>)
 800f96a:	6913      	ldr	r3, [r2, #16]
 800f96c:	2180      	movs	r1, #128	; 0x80
 800f96e:	430b      	orrs	r3, r1
 800f970:	6113      	str	r3, [r2, #16]
}
 800f972:	2000      	movs	r0, #0
 800f974:	4770      	bx	lr
 800f976:	46c0      	nop			; (mov r8, r8)
 800f978:	40022000 	.word	0x40022000

0800f97c <FLASH_WaitForLastOperation>:
{
 800f97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f97e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800f980:	f7ff f928 	bl	800ebd4 <HAL_GetTick>
 800f984:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800f986:	4e13      	ldr	r6, [pc, #76]	; (800f9d4 <FLASH_WaitForLastOperation+0x58>)
 800f988:	2501      	movs	r5, #1
 800f98a:	68f3      	ldr	r3, [r6, #12]
 800f98c:	421d      	tst	r5, r3
 800f98e:	d00a      	beq.n	800f9a6 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 800f990:	1c63      	adds	r3, r4, #1
 800f992:	d0fa      	beq.n	800f98a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800f994:	2c00      	cmp	r4, #0
 800f996:	d01a      	beq.n	800f9ce <FLASH_WaitForLastOperation+0x52>
 800f998:	f7ff f91c 	bl	800ebd4 <HAL_GetTick>
 800f99c:	1bc0      	subs	r0, r0, r7
 800f99e:	42a0      	cmp	r0, r4
 800f9a0:	d9f3      	bls.n	800f98a <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 800f9a2:	2003      	movs	r0, #3
 800f9a4:	e012      	b.n	800f9cc <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800f9a6:	4b0b      	ldr	r3, [pc, #44]	; (800f9d4 <FLASH_WaitForLastOperation+0x58>)
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	069b      	lsls	r3, r3, #26
 800f9ac:	d502      	bpl.n	800f9b4 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f9ae:	4b09      	ldr	r3, [pc, #36]	; (800f9d4 <FLASH_WaitForLastOperation+0x58>)
 800f9b0:	2220      	movs	r2, #32
 800f9b2:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800f9b4:	4b07      	ldr	r3, [pc, #28]	; (800f9d4 <FLASH_WaitForLastOperation+0x58>)
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	06db      	lsls	r3, r3, #27
 800f9ba:	d404      	bmi.n	800f9c6 <FLASH_WaitForLastOperation+0x4a>
 800f9bc:	4b05      	ldr	r3, [pc, #20]	; (800f9d4 <FLASH_WaitForLastOperation+0x58>)
 800f9be:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 800f9c0:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800f9c2:	075b      	lsls	r3, r3, #29
 800f9c4:	d502      	bpl.n	800f9cc <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 800f9c6:	f7ff ffa3 	bl	800f910 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800f9ca:	2001      	movs	r0, #1
}
 800f9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800f9ce:	2003      	movs	r0, #3
 800f9d0:	e7fc      	b.n	800f9cc <FLASH_WaitForLastOperation+0x50>
 800f9d2:	46c0      	nop			; (mov r8, r8)
 800f9d4:	40022000 	.word	0x40022000

0800f9d8 <HAL_FLASH_Program>:
{
 800f9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9da:	46de      	mov	lr, fp
 800f9dc:	4657      	mov	r7, sl
 800f9de:	464e      	mov	r6, r9
 800f9e0:	4645      	mov	r5, r8
 800f9e2:	b5e0      	push	{r5, r6, r7, lr}
 800f9e4:	b083      	sub	sp, #12
 800f9e6:	0004      	movs	r4, r0
 800f9e8:	000e      	movs	r6, r1
 800f9ea:	9201      	str	r2, [sp, #4]
 800f9ec:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 800f9ee:	4b2a      	ldr	r3, [pc, #168]	; (800fa98 <HAL_FLASH_Program+0xc0>)
 800f9f0:	7e1b      	ldrb	r3, [r3, #24]
 800f9f2:	2b01      	cmp	r3, #1
 800f9f4:	d04b      	beq.n	800fa8e <HAL_FLASH_Program+0xb6>
 800f9f6:	4b28      	ldr	r3, [pc, #160]	; (800fa98 <HAL_FLASH_Program+0xc0>)
 800f9f8:	2201      	movs	r2, #1
 800f9fa:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f9fc:	4827      	ldr	r0, [pc, #156]	; (800fa9c <HAL_FLASH_Program+0xc4>)
 800f9fe:	f7ff ffbd 	bl	800f97c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800fa02:	2800      	cmp	r0, #0
 800fa04:	d139      	bne.n	800fa7a <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800fa06:	2c01      	cmp	r4, #1
 800fa08:	d043      	beq.n	800fa92 <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 800fa0a:	3c02      	subs	r4, #2
 800fa0c:	4263      	negs	r3, r4
 800fa0e:	415c      	adcs	r4, r3
 800fa10:	4264      	negs	r4, r4
 800fa12:	2301      	movs	r3, #1
 800fa14:	439c      	bics	r4, r3
 800fa16:	46a0      	mov	r8, r4
 800fa18:	3303      	adds	r3, #3
 800fa1a:	469c      	mov	ip, r3
 800fa1c:	44e0      	add	r8, ip
{
 800fa1e:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fa20:	4b1d      	ldr	r3, [pc, #116]	; (800fa98 <HAL_FLASH_Program+0xc0>)
 800fa22:	469b      	mov	fp, r3
 800fa24:	2300      	movs	r3, #0
 800fa26:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800fa28:	4c1d      	ldr	r4, [pc, #116]	; (800faa0 <HAL_FLASH_Program+0xc8>)
 800fa2a:	e01e      	b.n	800fa6a <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 800fa2c:	2220      	movs	r2, #32
 800fa2e:	1ad2      	subs	r2, r2, r3
 800fa30:	4649      	mov	r1, r9
 800fa32:	4091      	lsls	r1, r2
 800fa34:	000a      	movs	r2, r1
 800fa36:	9901      	ldr	r1, [sp, #4]
 800fa38:	40d9      	lsrs	r1, r3
 800fa3a:	000b      	movs	r3, r1
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fa40:	465a      	mov	r2, fp
 800fa42:	4651      	mov	r1, sl
 800fa44:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800fa46:	6922      	ldr	r2, [r4, #16]
 800fa48:	2701      	movs	r7, #1
 800fa4a:	433a      	orrs	r2, r7
 800fa4c:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 800fa4e:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fa50:	4812      	ldr	r0, [pc, #72]	; (800fa9c <HAL_FLASH_Program+0xc4>)
 800fa52:	f7ff ff93 	bl	800f97c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800fa56:	6923      	ldr	r3, [r4, #16]
 800fa58:	43bb      	bics	r3, r7
 800fa5a:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	d10c      	bne.n	800fa7a <HAL_FLASH_Program+0xa2>
 800fa60:	3501      	adds	r5, #1
 800fa62:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 800fa64:	b2eb      	uxtb	r3, r5
 800fa66:	4598      	cmp	r8, r3
 800fa68:	d907      	bls.n	800fa7a <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 800fa6a:	012b      	lsls	r3, r5, #4
 800fa6c:	2220      	movs	r2, #32
 800fa6e:	4252      	negs	r2, r2
 800fa70:	189a      	adds	r2, r3, r2
 800fa72:	d4db      	bmi.n	800fa2c <HAL_FLASH_Program+0x54>
 800fa74:	464b      	mov	r3, r9
 800fa76:	40d3      	lsrs	r3, r2
 800fa78:	e7e1      	b.n	800fa3e <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 800fa7a:	4b07      	ldr	r3, [pc, #28]	; (800fa98 <HAL_FLASH_Program+0xc0>)
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	761a      	strb	r2, [r3, #24]
}
 800fa80:	b003      	add	sp, #12
 800fa82:	bc3c      	pop	{r2, r3, r4, r5}
 800fa84:	4690      	mov	r8, r2
 800fa86:	4699      	mov	r9, r3
 800fa88:	46a2      	mov	sl, r4
 800fa8a:	46ab      	mov	fp, r5
 800fa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800fa8e:	2002      	movs	r0, #2
 800fa90:	e7f6      	b.n	800fa80 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 800fa92:	2301      	movs	r3, #1
 800fa94:	4698      	mov	r8, r3
 800fa96:	e7c2      	b.n	800fa1e <HAL_FLASH_Program+0x46>
 800fa98:	200065f8 	.word	0x200065f8
 800fa9c:	0000c350 	.word	0x0000c350
 800faa0:	40022000 	.word	0x40022000

0800faa4 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800faa4:	4b06      	ldr	r3, [pc, #24]	; (800fac0 <FLASH_MassErase+0x1c>)
 800faa6:	2200      	movs	r2, #0
 800faa8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800faaa:	4b06      	ldr	r3, [pc, #24]	; (800fac4 <FLASH_MassErase+0x20>)
 800faac:	691a      	ldr	r2, [r3, #16]
 800faae:	2104      	movs	r1, #4
 800fab0:	430a      	orrs	r2, r1
 800fab2:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800fab4:	691a      	ldr	r2, [r3, #16]
 800fab6:	313c      	adds	r1, #60	; 0x3c
 800fab8:	430a      	orrs	r2, r1
 800faba:	611a      	str	r2, [r3, #16]
}
 800fabc:	4770      	bx	lr
 800fabe:	46c0      	nop			; (mov r8, r8)
 800fac0:	200065f8 	.word	0x200065f8
 800fac4:	40022000 	.word	0x40022000

0800fac8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fac8:	4b06      	ldr	r3, [pc, #24]	; (800fae4 <FLASH_PageErase+0x1c>)
 800faca:	2200      	movs	r2, #0
 800facc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800face:	4b06      	ldr	r3, [pc, #24]	; (800fae8 <FLASH_PageErase+0x20>)
 800fad0:	691a      	ldr	r2, [r3, #16]
 800fad2:	2102      	movs	r1, #2
 800fad4:	430a      	orrs	r2, r1
 800fad6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800fad8:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800fada:	691a      	ldr	r2, [r3, #16]
 800fadc:	313e      	adds	r1, #62	; 0x3e
 800fade:	430a      	orrs	r2, r1
 800fae0:	611a      	str	r2, [r3, #16]
}
 800fae2:	4770      	bx	lr
 800fae4:	200065f8 	.word	0x200065f8
 800fae8:	40022000 	.word	0x40022000

0800faec <HAL_FLASHEx_Erase>:
{
 800faec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faee:	46c6      	mov	lr, r8
 800faf0:	b500      	push	{lr}
 800faf2:	0006      	movs	r6, r0
 800faf4:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800faf6:	4b2a      	ldr	r3, [pc, #168]	; (800fba0 <HAL_FLASHEx_Erase+0xb4>)
 800faf8:	7e1b      	ldrb	r3, [r3, #24]
 800fafa:	2b01      	cmp	r3, #1
 800fafc:	d04d      	beq.n	800fb9a <HAL_FLASHEx_Erase+0xae>
 800fafe:	4b28      	ldr	r3, [pc, #160]	; (800fba0 <HAL_FLASHEx_Erase+0xb4>)
 800fb00:	2201      	movs	r2, #1
 800fb02:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800fb04:	6803      	ldr	r3, [r0, #0]
 800fb06:	2b01      	cmp	r3, #1
 800fb08:	d029      	beq.n	800fb5e <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800fb0a:	4826      	ldr	r0, [pc, #152]	; (800fba4 <HAL_FLASHEx_Erase+0xb8>)
 800fb0c:	f7ff ff36 	bl	800f97c <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 800fb10:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800fb12:	2800      	cmp	r0, #0
 800fb14:	d129      	bne.n	800fb6a <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 800fb16:	2301      	movs	r3, #1
 800fb18:	425b      	negs	r3, r3
 800fb1a:	4642      	mov	r2, r8
 800fb1c:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 800fb1e:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 800fb20:	68b3      	ldr	r3, [r6, #8]
 800fb22:	02db      	lsls	r3, r3, #11
 800fb24:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 800fb26:	429c      	cmp	r4, r3
 800fb28:	d235      	bcs.n	800fb96 <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800fb2a:	4f1f      	ldr	r7, [pc, #124]	; (800fba8 <HAL_FLASHEx_Erase+0xbc>)
 800fb2c:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 800fb2e:	0020      	movs	r0, r4
 800fb30:	f7ff ffca 	bl	800fac8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fb34:	481b      	ldr	r0, [pc, #108]	; (800fba4 <HAL_FLASHEx_Erase+0xb8>)
 800fb36:	f7ff ff21 	bl	800f97c <FLASH_WaitForLastOperation>
 800fb3a:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	43ab      	bics	r3, r5
 800fb40:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 800fb42:	2800      	cmp	r0, #0
 800fb44:	d124      	bne.n	800fb90 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 800fb46:	2380      	movs	r3, #128	; 0x80
 800fb48:	011b      	lsls	r3, r3, #4
 800fb4a:	469c      	mov	ip, r3
 800fb4c:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 800fb4e:	68b3      	ldr	r3, [r6, #8]
 800fb50:	02db      	lsls	r3, r3, #11
 800fb52:	6871      	ldr	r1, [r6, #4]
 800fb54:	468c      	mov	ip, r1
 800fb56:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 800fb58:	42a3      	cmp	r3, r4
 800fb5a:	d8e8      	bhi.n	800fb2e <HAL_FLASHEx_Erase+0x42>
 800fb5c:	e005      	b.n	800fb6a <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800fb5e:	4811      	ldr	r0, [pc, #68]	; (800fba4 <HAL_FLASHEx_Erase+0xb8>)
 800fb60:	f7ff ff0c 	bl	800f97c <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 800fb64:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d006      	beq.n	800fb78 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 800fb6a:	4b0d      	ldr	r3, [pc, #52]	; (800fba0 <HAL_FLASHEx_Erase+0xb4>)
 800fb6c:	2100      	movs	r1, #0
 800fb6e:	7619      	strb	r1, [r3, #24]
}
 800fb70:	0010      	movs	r0, r2
 800fb72:	bc04      	pop	{r2}
 800fb74:	4690      	mov	r8, r2
 800fb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 800fb78:	f7ff ff94 	bl	800faa4 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fb7c:	4809      	ldr	r0, [pc, #36]	; (800fba4 <HAL_FLASHEx_Erase+0xb8>)
 800fb7e:	f7ff fefd 	bl	800f97c <FLASH_WaitForLastOperation>
 800fb82:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800fb84:	4908      	ldr	r1, [pc, #32]	; (800fba8 <HAL_FLASHEx_Erase+0xbc>)
 800fb86:	690b      	ldr	r3, [r1, #16]
 800fb88:	2004      	movs	r0, #4
 800fb8a:	4383      	bics	r3, r0
 800fb8c:	610b      	str	r3, [r1, #16]
 800fb8e:	e7ec      	b.n	800fb6a <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 800fb90:	4643      	mov	r3, r8
 800fb92:	601c      	str	r4, [r3, #0]
            break;
 800fb94:	e7e9      	b.n	800fb6a <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 800fb96:	2201      	movs	r2, #1
 800fb98:	e7e7      	b.n	800fb6a <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 800fb9a:	2202      	movs	r2, #2
 800fb9c:	e7e8      	b.n	800fb70 <HAL_FLASHEx_Erase+0x84>
 800fb9e:	46c0      	nop			; (mov r8, r8)
 800fba0:	200065f8 	.word	0x200065f8
 800fba4:	0000c350 	.word	0x0000c350
 800fba8:	40022000 	.word	0x40022000

0800fbac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800fbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbae:	46de      	mov	lr, fp
 800fbb0:	4657      	mov	r7, sl
 800fbb2:	464e      	mov	r6, r9
 800fbb4:	4645      	mov	r5, r8
 800fbb6:	b5e0      	push	{r5, r6, r7, lr}
 800fbb8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 800fbba:	680a      	ldr	r2, [r1, #0]
 800fbbc:	2a00      	cmp	r2, #0
 800fbbe:	d100      	bne.n	800fbc2 <HAL_GPIO_Init+0x16>
 800fbc0:	e0bf      	b.n	800fd42 <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 800fbc2:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 800fbc4:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800fbc6:	2410      	movs	r4, #16
 800fbc8:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800fbca:	3c0d      	subs	r4, #13
 800fbcc:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800fbce:	2480      	movs	r4, #128	; 0x80
 800fbd0:	0564      	lsls	r4, r4, #21
 800fbd2:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800fbd4:	4c5e      	ldr	r4, [pc, #376]	; (800fd50 <HAL_GPIO_Init+0x1a4>)
 800fbd6:	1904      	adds	r4, r0, r4
 800fbd8:	1e65      	subs	r5, r4, #1
 800fbda:	41ac      	sbcs	r4, r5
 800fbdc:	3404      	adds	r4, #4
 800fbde:	46a1      	mov	r9, r4
 800fbe0:	e03b      	b.n	800fc5a <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 800fbe2:	08dc      	lsrs	r4, r3, #3
 800fbe4:	00a4      	lsls	r4, r4, #2
 800fbe6:	1904      	adds	r4, r0, r4
 800fbe8:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 800fbea:	2507      	movs	r5, #7
 800fbec:	401d      	ands	r5, r3
 800fbee:	00ad      	lsls	r5, r5, #2
 800fbf0:	220f      	movs	r2, #15
 800fbf2:	40aa      	lsls	r2, r5
 800fbf4:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 800fbf6:	690a      	ldr	r2, [r1, #16]
 800fbf8:	40aa      	lsls	r2, r5
 800fbfa:	0015      	movs	r5, r2
 800fbfc:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 800fbfe:	6225      	str	r5, [r4, #32]
 800fc00:	e035      	b.n	800fc6e <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800fc02:	2500      	movs	r5, #0
 800fc04:	465a      	mov	r2, fp
 800fc06:	4095      	lsls	r5, r2
 800fc08:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800fc0a:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fc0c:	4c51      	ldr	r4, [pc, #324]	; (800fd54 <HAL_GPIO_Init+0x1a8>)
 800fc0e:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800fc10:	9a01      	ldr	r2, [sp, #4]
 800fc12:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800fc14:	684a      	ldr	r2, [r1, #4]
 800fc16:	03d2      	lsls	r2, r2, #15
 800fc18:	d500      	bpl.n	800fc1c <HAL_GPIO_Init+0x70>
 800fc1a:	e086      	b.n	800fd2a <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800fc1c:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 800fc1e:	4f4d      	ldr	r7, [pc, #308]	; (800fd54 <HAL_GPIO_Init+0x1a8>)
 800fc20:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 800fc22:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800fc24:	684a      	ldr	r2, [r1, #4]
 800fc26:	0392      	lsls	r2, r2, #14
 800fc28:	d500      	bpl.n	800fc2c <HAL_GPIO_Init+0x80>
 800fc2a:	e081      	b.n	800fd30 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800fc2c:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 800fc2e:	4f49      	ldr	r7, [pc, #292]	; (800fd54 <HAL_GPIO_Init+0x1a8>)
 800fc30:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fc32:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800fc34:	684a      	ldr	r2, [r1, #4]
 800fc36:	02d2      	lsls	r2, r2, #11
 800fc38:	d47d      	bmi.n	800fd36 <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800fc3a:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 800fc3c:	4f45      	ldr	r7, [pc, #276]	; (800fd54 <HAL_GPIO_Init+0x1a8>)
 800fc3e:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 800fc40:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800fc42:	684a      	ldr	r2, [r1, #4]
 800fc44:	0292      	lsls	r2, r2, #10
 800fc46:	d479      	bmi.n	800fd3c <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800fc48:	0022      	movs	r2, r4
 800fc4a:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 800fc4c:	4c41      	ldr	r4, [pc, #260]	; (800fd54 <HAL_GPIO_Init+0x1a8>)
 800fc4e:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 800fc50:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 800fc52:	680a      	ldr	r2, [r1, #0]
 800fc54:	0014      	movs	r4, r2
 800fc56:	40dc      	lsrs	r4, r3
 800fc58:	d073      	beq.n	800fd42 <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 800fc5a:	0034      	movs	r4, r6
 800fc5c:	409c      	lsls	r4, r3
 800fc5e:	4022      	ands	r2, r4
 800fc60:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 800fc62:	d0f5      	beq.n	800fc50 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800fc64:	684c      	ldr	r4, [r1, #4]
 800fc66:	4642      	mov	r2, r8
 800fc68:	4394      	bics	r4, r2
 800fc6a:	2c02      	cmp	r4, #2
 800fc6c:	d0b9      	beq.n	800fbe2 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 800fc6e:	6804      	ldr	r4, [r0, #0]
 800fc70:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800fc72:	4665      	mov	r5, ip
 800fc74:	40bd      	lsls	r5, r7
 800fc76:	43ed      	mvns	r5, r5
 800fc78:	402c      	ands	r4, r5
 800fc7a:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800fc7c:	684c      	ldr	r4, [r1, #4]
 800fc7e:	4662      	mov	r2, ip
 800fc80:	4014      	ands	r4, r2
 800fc82:	40bc      	lsls	r4, r7
 800fc84:	465a      	mov	r2, fp
 800fc86:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 800fc88:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fc8a:	684c      	ldr	r4, [r1, #4]
 800fc8c:	4642      	mov	r2, r8
 800fc8e:	4394      	bics	r4, r2
 800fc90:	3c01      	subs	r4, #1
 800fc92:	2c01      	cmp	r4, #1
 800fc94:	d813      	bhi.n	800fcbe <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 800fc96:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800fc98:	402c      	ands	r4, r5
 800fc9a:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800fc9c:	68cc      	ldr	r4, [r1, #12]
 800fc9e:	40bc      	lsls	r4, r7
 800fca0:	465a      	mov	r2, fp
 800fca2:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 800fca4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800fca6:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800fca8:	0032      	movs	r2, r6
 800fcaa:	409a      	lsls	r2, r3
 800fcac:	4394      	bics	r4, r2
 800fcae:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800fcb0:	684a      	ldr	r2, [r1, #4]
 800fcb2:	0914      	lsrs	r4, r2, #4
 800fcb4:	4034      	ands	r4, r6
 800fcb6:	409c      	lsls	r4, r3
 800fcb8:	465a      	mov	r2, fp
 800fcba:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 800fcbc:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800fcbe:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800fcc0:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800fcc2:	688d      	ldr	r5, [r1, #8]
 800fcc4:	40bd      	lsls	r5, r7
 800fcc6:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 800fcc8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800fcca:	684a      	ldr	r2, [r1, #4]
 800fccc:	4654      	mov	r4, sl
 800fcce:	4222      	tst	r2, r4
 800fcd0:	d0be      	beq.n	800fc50 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fcd2:	4c21      	ldr	r4, [pc, #132]	; (800fd58 <HAL_GPIO_Init+0x1ac>)
 800fcd4:	69a5      	ldr	r5, [r4, #24]
 800fcd6:	4335      	orrs	r5, r6
 800fcd8:	61a5      	str	r5, [r4, #24]
 800fcda:	69a4      	ldr	r4, [r4, #24]
 800fcdc:	4034      	ands	r4, r6
 800fcde:	9403      	str	r4, [sp, #12]
 800fce0:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800fce2:	089c      	lsrs	r4, r3, #2
 800fce4:	00a4      	lsls	r4, r4, #2
 800fce6:	4a1d      	ldr	r2, [pc, #116]	; (800fd5c <HAL_GPIO_Init+0x1b0>)
 800fce8:	4693      	mov	fp, r2
 800fcea:	445c      	add	r4, fp
 800fcec:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800fcee:	4667      	mov	r7, ip
 800fcf0:	401f      	ands	r7, r3
 800fcf2:	00ba      	lsls	r2, r7, #2
 800fcf4:	4693      	mov	fp, r2
 800fcf6:	270f      	movs	r7, #15
 800fcf8:	4097      	lsls	r7, r2
 800fcfa:	43bd      	bics	r5, r7
 800fcfc:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800fcfe:	2590      	movs	r5, #144	; 0x90
 800fd00:	05ed      	lsls	r5, r5, #23
 800fd02:	42a8      	cmp	r0, r5
 800fd04:	d100      	bne.n	800fd08 <HAL_GPIO_Init+0x15c>
 800fd06:	e77c      	b.n	800fc02 <HAL_GPIO_Init+0x56>
 800fd08:	4d15      	ldr	r5, [pc, #84]	; (800fd60 <HAL_GPIO_Init+0x1b4>)
 800fd0a:	42a8      	cmp	r0, r5
 800fd0c:	d007      	beq.n	800fd1e <HAL_GPIO_Init+0x172>
 800fd0e:	4d15      	ldr	r5, [pc, #84]	; (800fd64 <HAL_GPIO_Init+0x1b8>)
 800fd10:	42a8      	cmp	r0, r5
 800fd12:	d006      	beq.n	800fd22 <HAL_GPIO_Init+0x176>
 800fd14:	4d14      	ldr	r5, [pc, #80]	; (800fd68 <HAL_GPIO_Init+0x1bc>)
 800fd16:	42a8      	cmp	r0, r5
 800fd18:	d005      	beq.n	800fd26 <HAL_GPIO_Init+0x17a>
 800fd1a:	464d      	mov	r5, r9
 800fd1c:	e772      	b.n	800fc04 <HAL_GPIO_Init+0x58>
 800fd1e:	0035      	movs	r5, r6
 800fd20:	e770      	b.n	800fc04 <HAL_GPIO_Init+0x58>
 800fd22:	2502      	movs	r5, #2
 800fd24:	e76e      	b.n	800fc04 <HAL_GPIO_Init+0x58>
 800fd26:	4665      	mov	r5, ip
 800fd28:	e76c      	b.n	800fc04 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 800fd2a:	9a01      	ldr	r2, [sp, #4]
 800fd2c:	4314      	orrs	r4, r2
 800fd2e:	e776      	b.n	800fc1e <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 800fd30:	9a01      	ldr	r2, [sp, #4]
 800fd32:	4314      	orrs	r4, r2
 800fd34:	e77b      	b.n	800fc2e <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 800fd36:	9a01      	ldr	r2, [sp, #4]
 800fd38:	4314      	orrs	r4, r2
 800fd3a:	e77f      	b.n	800fc3c <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 800fd3c:	9a01      	ldr	r2, [sp, #4]
 800fd3e:	4322      	orrs	r2, r4
 800fd40:	e784      	b.n	800fc4c <HAL_GPIO_Init+0xa0>
  } 
}
 800fd42:	b005      	add	sp, #20
 800fd44:	bc3c      	pop	{r2, r3, r4, r5}
 800fd46:	4690      	mov	r8, r2
 800fd48:	4699      	mov	r9, r3
 800fd4a:	46a2      	mov	sl, r4
 800fd4c:	46ab      	mov	fp, r5
 800fd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd50:	b7fff000 	.word	0xb7fff000
 800fd54:	40010400 	.word	0x40010400
 800fd58:	40021000 	.word	0x40021000
 800fd5c:	40010000 	.word	0x40010000
 800fd60:	48000400 	.word	0x48000400
 800fd64:	48000800 	.word	0x48000800
 800fd68:	48000c00 	.word	0x48000c00

0800fd6c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800fd6c:	6900      	ldr	r0, [r0, #16]
 800fd6e:	4008      	ands	r0, r1
 800fd70:	1e41      	subs	r1, r0, #1
 800fd72:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800fd74:	b2c0      	uxtb	r0, r0
  }
 800fd76:	4770      	bx	lr

0800fd78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800fd78:	2a00      	cmp	r2, #0
 800fd7a:	d101      	bne.n	800fd80 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800fd7c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800fd7e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800fd80:	6181      	str	r1, [r0, #24]
 800fd82:	e7fc      	b.n	800fd7e <HAL_GPIO_WritePin+0x6>

0800fd84 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800fd84:	6943      	ldr	r3, [r0, #20]
 800fd86:	4059      	eors	r1, r3
 800fd88:	6141      	str	r1, [r0, #20]
}
 800fd8a:	4770      	bx	lr

0800fd8c <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 800fd8c:	4770      	bx	lr
	...

0800fd90 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 800fd90:	4a03      	ldr	r2, [pc, #12]	; (800fda0 <HAL_PWR_EnableBkUpAccess+0x10>)
 800fd92:	6811      	ldr	r1, [r2, #0]
 800fd94:	2380      	movs	r3, #128	; 0x80
 800fd96:	005b      	lsls	r3, r3, #1
 800fd98:	430b      	orrs	r3, r1
 800fd9a:	6013      	str	r3, [r2, #0]
}
 800fd9c:	4770      	bx	lr
 800fd9e:	46c0      	nop			; (mov r8, r8)
 800fda0:	40007000 	.word	0x40007000

0800fda4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fda6:	46c6      	mov	lr, r8
 800fda8:	b500      	push	{lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fdae:	6803      	ldr	r3, [r0, #0]
 800fdb0:	07db      	lsls	r3, r3, #31
 800fdb2:	d538      	bpl.n	800fe26 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800fdb4:	4bbd      	ldr	r3, [pc, #756]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fdb6:	685a      	ldr	r2, [r3, #4]
 800fdb8:	230c      	movs	r3, #12
 800fdba:	4013      	ands	r3, r2
 800fdbc:	2b04      	cmp	r3, #4
 800fdbe:	d02a      	beq.n	800fe16 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800fdc0:	4bba      	ldr	r3, [pc, #744]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fdc2:	685a      	ldr	r2, [r3, #4]
 800fdc4:	230c      	movs	r3, #12
 800fdc6:	4013      	ands	r3, r2
 800fdc8:	2b08      	cmp	r3, #8
 800fdca:	d108      	bne.n	800fdde <HAL_RCC_OscConfig+0x3a>
 800fdcc:	4bb7      	ldr	r3, [pc, #732]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	22c0      	movs	r2, #192	; 0xc0
 800fdd2:	0252      	lsls	r2, r2, #9
 800fdd4:	4013      	ands	r3, r2
 800fdd6:	2280      	movs	r2, #128	; 0x80
 800fdd8:	0252      	lsls	r2, r2, #9
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d01b      	beq.n	800fe16 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800fdde:	4bb3      	ldr	r3, [pc, #716]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	49b3      	ldr	r1, [pc, #716]	; (80100b0 <HAL_RCC_OscConfig+0x30c>)
 800fde4:	400a      	ands	r2, r1
 800fde6:	601a      	str	r2, [r3, #0]
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	49b2      	ldr	r1, [pc, #712]	; (80100b4 <HAL_RCC_OscConfig+0x310>)
 800fdec:	400a      	ands	r2, r1
 800fdee:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fdf0:	f7fe fef0 	bl	800ebd4 <HAL_GetTick>
 800fdf4:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fdf6:	4ead      	ldr	r6, [pc, #692]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fdf8:	2580      	movs	r5, #128	; 0x80
 800fdfa:	02ad      	lsls	r5, r5, #10
 800fdfc:	6833      	ldr	r3, [r6, #0]
 800fdfe:	422b      	tst	r3, r5
 800fe00:	d039      	beq.n	800fe76 <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fe02:	f7fe fee7 	bl	800ebd4 <HAL_GetTick>
 800fe06:	1bc0      	subs	r0, r0, r7
 800fe08:	2864      	cmp	r0, #100	; 0x64
 800fe0a:	d9f7      	bls.n	800fdfc <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 800fe0c:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 800fe0e:	b002      	add	sp, #8
 800fe10:	bc04      	pop	{r2}
 800fe12:	4690      	mov	r8, r2
 800fe14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fe16:	4ba5      	ldr	r3, [pc, #660]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	039b      	lsls	r3, r3, #14
 800fe1c:	d503      	bpl.n	800fe26 <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 800fe1e:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fe20:	6863      	ldr	r3, [r4, #4]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d0f3      	beq.n	800fe0e <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fe26:	6823      	ldr	r3, [r4, #0]
 800fe28:	079b      	lsls	r3, r3, #30
 800fe2a:	d400      	bmi.n	800fe2e <HAL_RCC_OscConfig+0x8a>
 800fe2c:	e08d      	b.n	800ff4a <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800fe2e:	4b9f      	ldr	r3, [pc, #636]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	220c      	movs	r2, #12
 800fe34:	421a      	tst	r2, r3
 800fe36:	d077      	beq.n	800ff28 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800fe38:	4b9c      	ldr	r3, [pc, #624]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fe3a:	685a      	ldr	r2, [r3, #4]
 800fe3c:	230c      	movs	r3, #12
 800fe3e:	4013      	ands	r3, r2
 800fe40:	2b08      	cmp	r3, #8
 800fe42:	d068      	beq.n	800ff16 <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fe44:	68e3      	ldr	r3, [r4, #12]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d100      	bne.n	800fe4c <HAL_RCC_OscConfig+0xa8>
 800fe4a:	e0a1      	b.n	800ff90 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 800fe4c:	4a97      	ldr	r2, [pc, #604]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fe4e:	6813      	ldr	r3, [r2, #0]
 800fe50:	2101      	movs	r1, #1
 800fe52:	430b      	orrs	r3, r1
 800fe54:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800fe56:	f7fe febd 	bl	800ebd4 <HAL_GetTick>
 800fe5a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fe5c:	4e93      	ldr	r6, [pc, #588]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fe5e:	2502      	movs	r5, #2
 800fe60:	6833      	ldr	r3, [r6, #0]
 800fe62:	421d      	tst	r5, r3
 800fe64:	d000      	beq.n	800fe68 <HAL_RCC_OscConfig+0xc4>
 800fe66:	e08a      	b.n	800ff7e <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fe68:	f7fe feb4 	bl	800ebd4 <HAL_GetTick>
 800fe6c:	1bc0      	subs	r0, r0, r7
 800fe6e:	2864      	cmp	r0, #100	; 0x64
 800fe70:	d9f6      	bls.n	800fe60 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 800fe72:	2003      	movs	r0, #3
 800fe74:	e7cb      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fe76:	6863      	ldr	r3, [r4, #4]
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d00b      	beq.n	800fe94 <HAL_RCC_OscConfig+0xf0>
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d122      	bne.n	800fec6 <HAL_RCC_OscConfig+0x122>
 800fe80:	4b8a      	ldr	r3, [pc, #552]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	498a      	ldr	r1, [pc, #552]	; (80100b0 <HAL_RCC_OscConfig+0x30c>)
 800fe86:	400a      	ands	r2, r1
 800fe88:	601a      	str	r2, [r3, #0]
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	4989      	ldr	r1, [pc, #548]	; (80100b4 <HAL_RCC_OscConfig+0x310>)
 800fe8e:	400a      	ands	r2, r1
 800fe90:	601a      	str	r2, [r3, #0]
 800fe92:	e005      	b.n	800fea0 <HAL_RCC_OscConfig+0xfc>
 800fe94:	4a85      	ldr	r2, [pc, #532]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fe96:	6811      	ldr	r1, [r2, #0]
 800fe98:	2380      	movs	r3, #128	; 0x80
 800fe9a:	025b      	lsls	r3, r3, #9
 800fe9c:	430b      	orrs	r3, r1
 800fe9e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fea0:	6863      	ldr	r3, [r4, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d027      	beq.n	800fef6 <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 800fea6:	f7fe fe95 	bl	800ebd4 <HAL_GetTick>
 800feaa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800feac:	4e7f      	ldr	r6, [pc, #508]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800feae:	2580      	movs	r5, #128	; 0x80
 800feb0:	02ad      	lsls	r5, r5, #10
 800feb2:	6833      	ldr	r3, [r6, #0]
 800feb4:	422b      	tst	r3, r5
 800feb6:	d1b6      	bne.n	800fe26 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800feb8:	f7fe fe8c 	bl	800ebd4 <HAL_GetTick>
 800febc:	1bc0      	subs	r0, r0, r7
 800febe:	2864      	cmp	r0, #100	; 0x64
 800fec0:	d9f7      	bls.n	800feb2 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 800fec2:	2003      	movs	r0, #3
 800fec4:	e7a3      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fec6:	2b05      	cmp	r3, #5
 800fec8:	d009      	beq.n	800fede <HAL_RCC_OscConfig+0x13a>
 800feca:	4b78      	ldr	r3, [pc, #480]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fecc:	681a      	ldr	r2, [r3, #0]
 800fece:	4978      	ldr	r1, [pc, #480]	; (80100b0 <HAL_RCC_OscConfig+0x30c>)
 800fed0:	400a      	ands	r2, r1
 800fed2:	601a      	str	r2, [r3, #0]
 800fed4:	681a      	ldr	r2, [r3, #0]
 800fed6:	4977      	ldr	r1, [pc, #476]	; (80100b4 <HAL_RCC_OscConfig+0x310>)
 800fed8:	400a      	ands	r2, r1
 800feda:	601a      	str	r2, [r3, #0]
 800fedc:	e7e0      	b.n	800fea0 <HAL_RCC_OscConfig+0xfc>
 800fede:	4b73      	ldr	r3, [pc, #460]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fee0:	6819      	ldr	r1, [r3, #0]
 800fee2:	2280      	movs	r2, #128	; 0x80
 800fee4:	02d2      	lsls	r2, r2, #11
 800fee6:	430a      	orrs	r2, r1
 800fee8:	601a      	str	r2, [r3, #0]
 800feea:	6819      	ldr	r1, [r3, #0]
 800feec:	2280      	movs	r2, #128	; 0x80
 800feee:	0252      	lsls	r2, r2, #9
 800fef0:	430a      	orrs	r2, r1
 800fef2:	601a      	str	r2, [r3, #0]
 800fef4:	e7d4      	b.n	800fea0 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 800fef6:	f7fe fe6d 	bl	800ebd4 <HAL_GetTick>
 800fefa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fefc:	4e6b      	ldr	r6, [pc, #428]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fefe:	2580      	movs	r5, #128	; 0x80
 800ff00:	02ad      	lsls	r5, r5, #10
 800ff02:	6833      	ldr	r3, [r6, #0]
 800ff04:	422b      	tst	r3, r5
 800ff06:	d08e      	beq.n	800fe26 <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ff08:	f7fe fe64 	bl	800ebd4 <HAL_GetTick>
 800ff0c:	1bc0      	subs	r0, r0, r7
 800ff0e:	2864      	cmp	r0, #100	; 0x64
 800ff10:	d9f7      	bls.n	800ff02 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 800ff12:	2003      	movs	r0, #3
 800ff14:	e77b      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800ff16:	4b65      	ldr	r3, [pc, #404]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	22c0      	movs	r2, #192	; 0xc0
 800ff1c:	0252      	lsls	r2, r2, #9
 800ff1e:	4013      	ands	r3, r2
 800ff20:	2280      	movs	r2, #128	; 0x80
 800ff22:	0212      	lsls	r2, r2, #8
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d18d      	bne.n	800fe44 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ff28:	4b60      	ldr	r3, [pc, #384]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	079b      	lsls	r3, r3, #30
 800ff2e:	d504      	bpl.n	800ff3a <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 800ff30:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ff32:	68e3      	ldr	r3, [r4, #12]
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d000      	beq.n	800ff3a <HAL_RCC_OscConfig+0x196>
 800ff38:	e769      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ff3a:	495c      	ldr	r1, [pc, #368]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800ff3c:	680a      	ldr	r2, [r1, #0]
 800ff3e:	6923      	ldr	r3, [r4, #16]
 800ff40:	00db      	lsls	r3, r3, #3
 800ff42:	20f8      	movs	r0, #248	; 0xf8
 800ff44:	4382      	bics	r2, r0
 800ff46:	4313      	orrs	r3, r2
 800ff48:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ff4a:	6823      	ldr	r3, [r4, #0]
 800ff4c:	071b      	lsls	r3, r3, #28
 800ff4e:	d547      	bpl.n	800ffe0 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ff50:	6a23      	ldr	r3, [r4, #32]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d030      	beq.n	800ffb8 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 800ff56:	4a55      	ldr	r2, [pc, #340]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800ff58:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800ff5a:	2101      	movs	r1, #1
 800ff5c:	430b      	orrs	r3, r1
 800ff5e:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 800ff60:	f7fe fe38 	bl	800ebd4 <HAL_GetTick>
 800ff64:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ff66:	4e51      	ldr	r6, [pc, #324]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800ff68:	2502      	movs	r5, #2
 800ff6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ff6c:	421d      	tst	r5, r3
 800ff6e:	d137      	bne.n	800ffe0 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ff70:	f7fe fe30 	bl	800ebd4 <HAL_GetTick>
 800ff74:	1bc0      	subs	r0, r0, r7
 800ff76:	2864      	cmp	r0, #100	; 0x64
 800ff78:	d9f7      	bls.n	800ff6a <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 800ff7a:	2003      	movs	r0, #3
 800ff7c:	e747      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ff7e:	494b      	ldr	r1, [pc, #300]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800ff80:	680a      	ldr	r2, [r1, #0]
 800ff82:	6923      	ldr	r3, [r4, #16]
 800ff84:	00db      	lsls	r3, r3, #3
 800ff86:	20f8      	movs	r0, #248	; 0xf8
 800ff88:	4382      	bics	r2, r0
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	600b      	str	r3, [r1, #0]
 800ff8e:	e7dc      	b.n	800ff4a <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 800ff90:	4a46      	ldr	r2, [pc, #280]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800ff92:	6813      	ldr	r3, [r2, #0]
 800ff94:	2101      	movs	r1, #1
 800ff96:	438b      	bics	r3, r1
 800ff98:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ff9a:	f7fe fe1b 	bl	800ebd4 <HAL_GetTick>
 800ff9e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ffa0:	4e42      	ldr	r6, [pc, #264]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800ffa2:	2502      	movs	r5, #2
 800ffa4:	6833      	ldr	r3, [r6, #0]
 800ffa6:	421d      	tst	r5, r3
 800ffa8:	d0cf      	beq.n	800ff4a <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ffaa:	f7fe fe13 	bl	800ebd4 <HAL_GetTick>
 800ffae:	1bc0      	subs	r0, r0, r7
 800ffb0:	2864      	cmp	r0, #100	; 0x64
 800ffb2:	d9f7      	bls.n	800ffa4 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 800ffb4:	2003      	movs	r0, #3
 800ffb6:	e72a      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 800ffb8:	4a3c      	ldr	r2, [pc, #240]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800ffba:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800ffbc:	2101      	movs	r1, #1
 800ffbe:	438b      	bics	r3, r1
 800ffc0:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 800ffc2:	f7fe fe07 	bl	800ebd4 <HAL_GetTick>
 800ffc6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ffc8:	4e38      	ldr	r6, [pc, #224]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800ffca:	2502      	movs	r5, #2
 800ffcc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ffce:	421d      	tst	r5, r3
 800ffd0:	d006      	beq.n	800ffe0 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ffd2:	f7fe fdff 	bl	800ebd4 <HAL_GetTick>
 800ffd6:	1bc0      	subs	r0, r0, r7
 800ffd8:	2864      	cmp	r0, #100	; 0x64
 800ffda:	d9f7      	bls.n	800ffcc <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 800ffdc:	2003      	movs	r0, #3
 800ffde:	e716      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ffe0:	6823      	ldr	r3, [r4, #0]
 800ffe2:	075b      	lsls	r3, r3, #29
 800ffe4:	d442      	bmi.n	801006c <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800ffe6:	6823      	ldr	r3, [r4, #0]
 800ffe8:	06db      	lsls	r3, r3, #27
 800ffea:	d512      	bpl.n	8010012 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800ffec:	6963      	ldr	r3, [r4, #20]
 800ffee:	2b01      	cmp	r3, #1
 800fff0:	d100      	bne.n	800fff4 <HAL_RCC_OscConfig+0x250>
 800fff2:	e0ce      	b.n	8010192 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800fff4:	3305      	adds	r3, #5
 800fff6:	d000      	beq.n	800fffa <HAL_RCC_OscConfig+0x256>
 800fff8:	e0ec      	b.n	80101d4 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 800fffa:	4a2c      	ldr	r2, [pc, #176]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 800fffc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800fffe:	2104      	movs	r1, #4
 8010000:	438b      	bics	r3, r1
 8010002:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010004:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8010006:	69a3      	ldr	r3, [r4, #24]
 8010008:	00db      	lsls	r3, r3, #3
 801000a:	20f8      	movs	r0, #248	; 0xf8
 801000c:	4381      	bics	r1, r0
 801000e:	430b      	orrs	r3, r1
 8010010:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010012:	6823      	ldr	r3, [r4, #0]
 8010014:	069b      	lsls	r3, r3, #26
 8010016:	d400      	bmi.n	801001a <HAL_RCC_OscConfig+0x276>
 8010018:	e106      	b.n	8010228 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801001a:	4b24      	ldr	r3, [pc, #144]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 801001c:	685a      	ldr	r2, [r3, #4]
 801001e:	230c      	movs	r3, #12
 8010020:	4013      	ands	r3, r2
 8010022:	2b0c      	cmp	r3, #12
 8010024:	d100      	bne.n	8010028 <HAL_RCC_OscConfig+0x284>
 8010026:	e0f6      	b.n	8010216 <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010028:	4b20      	ldr	r3, [pc, #128]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 801002a:	685a      	ldr	r2, [r3, #4]
 801002c:	230c      	movs	r3, #12
 801002e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010030:	2b08      	cmp	r3, #8
 8010032:	d100      	bne.n	8010036 <HAL_RCC_OscConfig+0x292>
 8010034:	e0e7      	b.n	8010206 <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010036:	69e3      	ldr	r3, [r4, #28]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d100      	bne.n	801003e <HAL_RCC_OscConfig+0x29a>
 801003c:	e116      	b.n	801026c <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 801003e:	4a1b      	ldr	r2, [pc, #108]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 8010040:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8010042:	2380      	movs	r3, #128	; 0x80
 8010044:	025b      	lsls	r3, r3, #9
 8010046:	430b      	orrs	r3, r1
 8010048:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801004a:	f7fe fdc3 	bl	800ebd4 <HAL_GetTick>
 801004e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010050:	4e16      	ldr	r6, [pc, #88]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 8010052:	2580      	movs	r5, #128	; 0x80
 8010054:	026d      	lsls	r5, r5, #9
 8010056:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8010058:	422b      	tst	r3, r5
 801005a:	d000      	beq.n	801005e <HAL_RCC_OscConfig+0x2ba>
 801005c:	e0e4      	b.n	8010228 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801005e:	f7fe fdb9 	bl	800ebd4 <HAL_GetTick>
 8010062:	1bc0      	subs	r0, r0, r7
 8010064:	2864      	cmp	r0, #100	; 0x64
 8010066:	d9f6      	bls.n	8010056 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8010068:	2003      	movs	r0, #3
 801006a:	e6d0      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 801006c:	4a0f      	ldr	r2, [pc, #60]	; (80100ac <HAL_RCC_OscConfig+0x308>)
 801006e:	69d1      	ldr	r1, [r2, #28]
 8010070:	2080      	movs	r0, #128	; 0x80
 8010072:	0540      	lsls	r0, r0, #21
 8010074:	4301      	orrs	r1, r0
 8010076:	61d1      	str	r1, [r2, #28]
 8010078:	69d3      	ldr	r3, [r2, #28]
 801007a:	4003      	ands	r3, r0
 801007c:	9301      	str	r3, [sp, #4]
 801007e:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010080:	4a0d      	ldr	r2, [pc, #52]	; (80100b8 <HAL_RCC_OscConfig+0x314>)
 8010082:	6811      	ldr	r1, [r2, #0]
 8010084:	2380      	movs	r3, #128	; 0x80
 8010086:	005b      	lsls	r3, r3, #1
 8010088:	430b      	orrs	r3, r1
 801008a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 801008c:	f7fe fda2 	bl	800ebd4 <HAL_GetTick>
 8010090:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010092:	4e09      	ldr	r6, [pc, #36]	; (80100b8 <HAL_RCC_OscConfig+0x314>)
 8010094:	2580      	movs	r5, #128	; 0x80
 8010096:	006d      	lsls	r5, r5, #1
 8010098:	6833      	ldr	r3, [r6, #0]
 801009a:	422b      	tst	r3, r5
 801009c:	d10e      	bne.n	80100bc <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801009e:	f7fe fd99 	bl	800ebd4 <HAL_GetTick>
 80100a2:	1bc0      	subs	r0, r0, r7
 80100a4:	2864      	cmp	r0, #100	; 0x64
 80100a6:	d9f7      	bls.n	8010098 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 80100a8:	2003      	movs	r0, #3
 80100aa:	e6b0      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
 80100ac:	40021000 	.word	0x40021000
 80100b0:	fffeffff 	.word	0xfffeffff
 80100b4:	fffbffff 	.word	0xfffbffff
 80100b8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80100bc:	4b95      	ldr	r3, [pc, #596]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 80100be:	6a1a      	ldr	r2, [r3, #32]
 80100c0:	2101      	movs	r1, #1
 80100c2:	438a      	bics	r2, r1
 80100c4:	621a      	str	r2, [r3, #32]
 80100c6:	6a1a      	ldr	r2, [r3, #32]
 80100c8:	3103      	adds	r1, #3
 80100ca:	438a      	bics	r2, r1
 80100cc:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80100ce:	f7fe fd81 	bl	800ebd4 <HAL_GetTick>
 80100d2:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80100d4:	4e8f      	ldr	r6, [pc, #572]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 80100d6:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80100d8:	4f8f      	ldr	r7, [pc, #572]	; (8010318 <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80100da:	6a33      	ldr	r3, [r6, #32]
 80100dc:	421d      	tst	r5, r3
 80100de:	d007      	beq.n	80100f0 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80100e0:	f7fe fd78 	bl	800ebd4 <HAL_GetTick>
 80100e4:	4643      	mov	r3, r8
 80100e6:	1ac0      	subs	r0, r0, r3
 80100e8:	42b8      	cmp	r0, r7
 80100ea:	d9f6      	bls.n	80100da <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 80100ec:	2003      	movs	r0, #3
 80100ee:	e68e      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80100f0:	68a3      	ldr	r3, [r4, #8]
 80100f2:	2b01      	cmp	r3, #1
 80100f4:	d00b      	beq.n	801010e <HAL_RCC_OscConfig+0x36a>
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d123      	bne.n	8010142 <HAL_RCC_OscConfig+0x39e>
 80100fa:	4b86      	ldr	r3, [pc, #536]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 80100fc:	6a1a      	ldr	r2, [r3, #32]
 80100fe:	2101      	movs	r1, #1
 8010100:	438a      	bics	r2, r1
 8010102:	621a      	str	r2, [r3, #32]
 8010104:	6a1a      	ldr	r2, [r3, #32]
 8010106:	3103      	adds	r1, #3
 8010108:	438a      	bics	r2, r1
 801010a:	621a      	str	r2, [r3, #32]
 801010c:	e004      	b.n	8010118 <HAL_RCC_OscConfig+0x374>
 801010e:	4a81      	ldr	r2, [pc, #516]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 8010110:	6a13      	ldr	r3, [r2, #32]
 8010112:	2101      	movs	r1, #1
 8010114:	430b      	orrs	r3, r1
 8010116:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8010118:	68a3      	ldr	r3, [r4, #8]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d027      	beq.n	801016e <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 801011e:	f7fe fd59 	bl	800ebd4 <HAL_GetTick>
 8010122:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010124:	4e7b      	ldr	r6, [pc, #492]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 8010126:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010128:	4f7b      	ldr	r7, [pc, #492]	; (8010318 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801012a:	6a33      	ldr	r3, [r6, #32]
 801012c:	421d      	tst	r5, r3
 801012e:	d000      	beq.n	8010132 <HAL_RCC_OscConfig+0x38e>
 8010130:	e759      	b.n	800ffe6 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010132:	f7fe fd4f 	bl	800ebd4 <HAL_GetTick>
 8010136:	4643      	mov	r3, r8
 8010138:	1ac0      	subs	r0, r0, r3
 801013a:	42b8      	cmp	r0, r7
 801013c:	d9f5      	bls.n	801012a <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 801013e:	2003      	movs	r0, #3
 8010140:	e665      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010142:	2b05      	cmp	r3, #5
 8010144:	d009      	beq.n	801015a <HAL_RCC_OscConfig+0x3b6>
 8010146:	4b73      	ldr	r3, [pc, #460]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 8010148:	6a1a      	ldr	r2, [r3, #32]
 801014a:	2101      	movs	r1, #1
 801014c:	438a      	bics	r2, r1
 801014e:	621a      	str	r2, [r3, #32]
 8010150:	6a1a      	ldr	r2, [r3, #32]
 8010152:	3103      	adds	r1, #3
 8010154:	438a      	bics	r2, r1
 8010156:	621a      	str	r2, [r3, #32]
 8010158:	e7de      	b.n	8010118 <HAL_RCC_OscConfig+0x374>
 801015a:	4b6e      	ldr	r3, [pc, #440]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 801015c:	6a1a      	ldr	r2, [r3, #32]
 801015e:	2104      	movs	r1, #4
 8010160:	430a      	orrs	r2, r1
 8010162:	621a      	str	r2, [r3, #32]
 8010164:	6a1a      	ldr	r2, [r3, #32]
 8010166:	3903      	subs	r1, #3
 8010168:	430a      	orrs	r2, r1
 801016a:	621a      	str	r2, [r3, #32]
 801016c:	e7d4      	b.n	8010118 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 801016e:	f7fe fd31 	bl	800ebd4 <HAL_GetTick>
 8010172:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010174:	4e67      	ldr	r6, [pc, #412]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 8010176:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010178:	4f67      	ldr	r7, [pc, #412]	; (8010318 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801017a:	6a33      	ldr	r3, [r6, #32]
 801017c:	421d      	tst	r5, r3
 801017e:	d100      	bne.n	8010182 <HAL_RCC_OscConfig+0x3de>
 8010180:	e731      	b.n	800ffe6 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010182:	f7fe fd27 	bl	800ebd4 <HAL_GetTick>
 8010186:	4643      	mov	r3, r8
 8010188:	1ac0      	subs	r0, r0, r3
 801018a:	42b8      	cmp	r0, r7
 801018c:	d9f5      	bls.n	801017a <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 801018e:	2003      	movs	r0, #3
 8010190:	e63d      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8010192:	4b60      	ldr	r3, [pc, #384]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 8010194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010196:	2104      	movs	r1, #4
 8010198:	430a      	orrs	r2, r1
 801019a:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 801019c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801019e:	3903      	subs	r1, #3
 80101a0:	430a      	orrs	r2, r1
 80101a2:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80101a4:	f7fe fd16 	bl	800ebd4 <HAL_GetTick>
 80101a8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80101aa:	4e5a      	ldr	r6, [pc, #360]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 80101ac:	2502      	movs	r5, #2
 80101ae:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80101b0:	421d      	tst	r5, r3
 80101b2:	d106      	bne.n	80101c2 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80101b4:	f7fe fd0e 	bl	800ebd4 <HAL_GetTick>
 80101b8:	1bc0      	subs	r0, r0, r7
 80101ba:	2864      	cmp	r0, #100	; 0x64
 80101bc:	d9f7      	bls.n	80101ae <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 80101be:	2003      	movs	r0, #3
 80101c0:	e625      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80101c2:	4954      	ldr	r1, [pc, #336]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 80101c4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80101c6:	69a3      	ldr	r3, [r4, #24]
 80101c8:	00db      	lsls	r3, r3, #3
 80101ca:	20f8      	movs	r0, #248	; 0xf8
 80101cc:	4382      	bics	r2, r0
 80101ce:	4313      	orrs	r3, r2
 80101d0:	634b      	str	r3, [r1, #52]	; 0x34
 80101d2:	e71e      	b.n	8010012 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80101d4:	4b4f      	ldr	r3, [pc, #316]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 80101d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101d8:	2104      	movs	r1, #4
 80101da:	430a      	orrs	r2, r1
 80101dc:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80101de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101e0:	3903      	subs	r1, #3
 80101e2:	438a      	bics	r2, r1
 80101e4:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80101e6:	f7fe fcf5 	bl	800ebd4 <HAL_GetTick>
 80101ea:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80101ec:	4e49      	ldr	r6, [pc, #292]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 80101ee:	2502      	movs	r5, #2
 80101f0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80101f2:	421d      	tst	r5, r3
 80101f4:	d100      	bne.n	80101f8 <HAL_RCC_OscConfig+0x454>
 80101f6:	e70c      	b.n	8010012 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80101f8:	f7fe fcec 	bl	800ebd4 <HAL_GetTick>
 80101fc:	1bc0      	subs	r0, r0, r7
 80101fe:	2864      	cmp	r0, #100	; 0x64
 8010200:	d9f6      	bls.n	80101f0 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 8010202:	2003      	movs	r0, #3
 8010204:	e603      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010206:	4b43      	ldr	r3, [pc, #268]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	22c0      	movs	r2, #192	; 0xc0
 801020c:	0252      	lsls	r2, r2, #9
 801020e:	4013      	ands	r3, r2
 8010210:	4293      	cmp	r3, r2
 8010212:	d000      	beq.n	8010216 <HAL_RCC_OscConfig+0x472>
 8010214:	e70f      	b.n	8010036 <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8010216:	4b3f      	ldr	r3, [pc, #252]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 8010218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801021a:	03db      	lsls	r3, r3, #15
 801021c:	d504      	bpl.n	8010228 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 801021e:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8010220:	69e3      	ldr	r3, [r4, #28]
 8010222:	2b01      	cmp	r3, #1
 8010224:	d000      	beq.n	8010228 <HAL_RCC_OscConfig+0x484>
 8010226:	e5f2      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010228:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 801022a:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801022c:	2b00      	cmp	r3, #0
 801022e:	d100      	bne.n	8010232 <HAL_RCC_OscConfig+0x48e>
 8010230:	e5ed      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010232:	4a38      	ldr	r2, [pc, #224]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 8010234:	6851      	ldr	r1, [r2, #4]
 8010236:	220c      	movs	r2, #12
 8010238:	400a      	ands	r2, r1
 801023a:	2a08      	cmp	r2, #8
 801023c:	d068      	beq.n	8010310 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801023e:	2b02      	cmp	r3, #2
 8010240:	d029      	beq.n	8010296 <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 8010242:	4a34      	ldr	r2, [pc, #208]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 8010244:	6813      	ldr	r3, [r2, #0]
 8010246:	4935      	ldr	r1, [pc, #212]	; (801031c <HAL_RCC_OscConfig+0x578>)
 8010248:	400b      	ands	r3, r1
 801024a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801024c:	f7fe fcc2 	bl	800ebd4 <HAL_GetTick>
 8010250:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010252:	4d30      	ldr	r5, [pc, #192]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 8010254:	2480      	movs	r4, #128	; 0x80
 8010256:	04a4      	lsls	r4, r4, #18
 8010258:	682b      	ldr	r3, [r5, #0]
 801025a:	4223      	tst	r3, r4
 801025c:	d056      	beq.n	801030c <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801025e:	f7fe fcb9 	bl	800ebd4 <HAL_GetTick>
 8010262:	1b80      	subs	r0, r0, r6
 8010264:	2864      	cmp	r0, #100	; 0x64
 8010266:	d9f7      	bls.n	8010258 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8010268:	2003      	movs	r0, #3
 801026a:	e5d0      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 801026c:	4a29      	ldr	r2, [pc, #164]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 801026e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8010270:	492b      	ldr	r1, [pc, #172]	; (8010320 <HAL_RCC_OscConfig+0x57c>)
 8010272:	400b      	ands	r3, r1
 8010274:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8010276:	f7fe fcad 	bl	800ebd4 <HAL_GetTick>
 801027a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 801027c:	4e25      	ldr	r6, [pc, #148]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 801027e:	2580      	movs	r5, #128	; 0x80
 8010280:	026d      	lsls	r5, r5, #9
 8010282:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8010284:	422b      	tst	r3, r5
 8010286:	d0cf      	beq.n	8010228 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010288:	f7fe fca4 	bl	800ebd4 <HAL_GetTick>
 801028c:	1bc0      	subs	r0, r0, r7
 801028e:	2864      	cmp	r0, #100	; 0x64
 8010290:	d9f7      	bls.n	8010282 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8010292:	2003      	movs	r0, #3
 8010294:	e5bb      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8010296:	4a1f      	ldr	r2, [pc, #124]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 8010298:	6813      	ldr	r3, [r2, #0]
 801029a:	4920      	ldr	r1, [pc, #128]	; (801031c <HAL_RCC_OscConfig+0x578>)
 801029c:	400b      	ands	r3, r1
 801029e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80102a0:	f7fe fc98 	bl	800ebd4 <HAL_GetTick>
 80102a4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80102a6:	4e1b      	ldr	r6, [pc, #108]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 80102a8:	2580      	movs	r5, #128	; 0x80
 80102aa:	04ad      	lsls	r5, r5, #18
 80102ac:	6833      	ldr	r3, [r6, #0]
 80102ae:	422b      	tst	r3, r5
 80102b0:	d006      	beq.n	80102c0 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80102b2:	f7fe fc8f 	bl	800ebd4 <HAL_GetTick>
 80102b6:	1bc0      	subs	r0, r0, r7
 80102b8:	2864      	cmp	r0, #100	; 0x64
 80102ba:	d9f7      	bls.n	80102ac <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 80102bc:	2003      	movs	r0, #3
 80102be:	e5a6      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80102c0:	4b14      	ldr	r3, [pc, #80]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 80102c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102c4:	210f      	movs	r1, #15
 80102c6:	438a      	bics	r2, r1
 80102c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80102ca:	430a      	orrs	r2, r1
 80102cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80102ce:	6859      	ldr	r1, [r3, #4]
 80102d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80102d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80102d4:	4302      	orrs	r2, r0
 80102d6:	4813      	ldr	r0, [pc, #76]	; (8010324 <HAL_RCC_OscConfig+0x580>)
 80102d8:	4001      	ands	r1, r0
 80102da:	430a      	orrs	r2, r1
 80102dc:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80102de:	6819      	ldr	r1, [r3, #0]
 80102e0:	2280      	movs	r2, #128	; 0x80
 80102e2:	0452      	lsls	r2, r2, #17
 80102e4:	430a      	orrs	r2, r1
 80102e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80102e8:	f7fe fc74 	bl	800ebd4 <HAL_GetTick>
 80102ec:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80102ee:	4d09      	ldr	r5, [pc, #36]	; (8010314 <HAL_RCC_OscConfig+0x570>)
 80102f0:	2480      	movs	r4, #128	; 0x80
 80102f2:	04a4      	lsls	r4, r4, #18
 80102f4:	682b      	ldr	r3, [r5, #0]
 80102f6:	4223      	tst	r3, r4
 80102f8:	d106      	bne.n	8010308 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80102fa:	f7fe fc6b 	bl	800ebd4 <HAL_GetTick>
 80102fe:	1b80      	subs	r0, r0, r6
 8010300:	2864      	cmp	r0, #100	; 0x64
 8010302:	d9f7      	bls.n	80102f4 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8010304:	2003      	movs	r0, #3
 8010306:	e582      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8010308:	2000      	movs	r0, #0
 801030a:	e580      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
 801030c:	2000      	movs	r0, #0
 801030e:	e57e      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 8010310:	2001      	movs	r0, #1
 8010312:	e57c      	b.n	800fe0e <HAL_RCC_OscConfig+0x6a>
 8010314:	40021000 	.word	0x40021000
 8010318:	00001388 	.word	0x00001388
 801031c:	feffffff 	.word	0xfeffffff
 8010320:	fffeffff 	.word	0xfffeffff
 8010324:	ffc27fff 	.word	0xffc27fff

08010328 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801032a:	46ce      	mov	lr, r9
 801032c:	4647      	mov	r7, r8
 801032e:	b580      	push	{r7, lr}
 8010330:	0005      	movs	r5, r0
 8010332:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010334:	4b95      	ldr	r3, [pc, #596]	; (801058c <HAL_RCC_ClockConfig+0x264>)
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	2301      	movs	r3, #1
 801033a:	4013      	ands	r3, r2
 801033c:	428b      	cmp	r3, r1
 801033e:	d300      	bcc.n	8010342 <HAL_RCC_ClockConfig+0x1a>
 8010340:	e089      	b.n	8010456 <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010342:	4992      	ldr	r1, [pc, #584]	; (801058c <HAL_RCC_ClockConfig+0x264>)
 8010344:	680b      	ldr	r3, [r1, #0]
 8010346:	2201      	movs	r2, #1
 8010348:	4393      	bics	r3, r2
 801034a:	4323      	orrs	r3, r4
 801034c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801034e:	680b      	ldr	r3, [r1, #0]
 8010350:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8010352:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010354:	42a2      	cmp	r2, r4
 8010356:	d003      	beq.n	8010360 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8010358:	bc0c      	pop	{r2, r3}
 801035a:	4690      	mov	r8, r2
 801035c:	4699      	mov	r9, r3
 801035e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010360:	682b      	ldr	r3, [r5, #0]
 8010362:	079b      	lsls	r3, r3, #30
 8010364:	d506      	bpl.n	8010374 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010366:	4a8a      	ldr	r2, [pc, #552]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 8010368:	6853      	ldr	r3, [r2, #4]
 801036a:	21f0      	movs	r1, #240	; 0xf0
 801036c:	438b      	bics	r3, r1
 801036e:	68a9      	ldr	r1, [r5, #8]
 8010370:	430b      	orrs	r3, r1
 8010372:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010374:	682b      	ldr	r3, [r5, #0]
 8010376:	07db      	lsls	r3, r3, #31
 8010378:	d400      	bmi.n	801037c <HAL_RCC_ClockConfig+0x54>
 801037a:	e0f7      	b.n	801056c <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801037c:	686b      	ldr	r3, [r5, #4]
 801037e:	2b01      	cmp	r3, #1
 8010380:	d009      	beq.n	8010396 <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010382:	2b02      	cmp	r3, #2
 8010384:	d02b      	beq.n	80103de <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010386:	2b03      	cmp	r3, #3
 8010388:	d02f      	beq.n	80103ea <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801038a:	4a81      	ldr	r2, [pc, #516]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 801038c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801038e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010390:	0792      	lsls	r2, r2, #30
 8010392:	d405      	bmi.n	80103a0 <HAL_RCC_ClockConfig+0x78>
 8010394:	e7e0      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010396:	4a7e      	ldr	r2, [pc, #504]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 8010398:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801039a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801039c:	0392      	lsls	r2, r2, #14
 801039e:	d5db      	bpl.n	8010358 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80103a0:	497b      	ldr	r1, [pc, #492]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 80103a2:	684a      	ldr	r2, [r1, #4]
 80103a4:	2003      	movs	r0, #3
 80103a6:	4382      	bics	r2, r0
 80103a8:	4313      	orrs	r3, r2
 80103aa:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 80103ac:	f7fe fc12 	bl	800ebd4 <HAL_GetTick>
 80103b0:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80103b2:	686b      	ldr	r3, [r5, #4]
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d01e      	beq.n	80103f6 <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80103b8:	2b02      	cmp	r3, #2
 80103ba:	d02c      	beq.n	8010416 <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80103bc:	2b03      	cmp	r3, #3
 80103be:	d03a      	beq.n	8010436 <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80103c0:	4f73      	ldr	r7, [pc, #460]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 80103c2:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80103c4:	4b73      	ldr	r3, [pc, #460]	; (8010594 <HAL_RCC_ClockConfig+0x26c>)
 80103c6:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	421e      	tst	r6, r3
 80103cc:	d100      	bne.n	80103d0 <HAL_RCC_ClockConfig+0xa8>
 80103ce:	e0cd      	b.n	801056c <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80103d0:	f7fe fc00 	bl	800ebd4 <HAL_GetTick>
 80103d4:	1b00      	subs	r0, r0, r4
 80103d6:	4540      	cmp	r0, r8
 80103d8:	d9f6      	bls.n	80103c8 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 80103da:	2003      	movs	r0, #3
 80103dc:	e7bc      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80103de:	4a6c      	ldr	r2, [pc, #432]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 80103e0:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80103e2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80103e4:	0192      	lsls	r2, r2, #6
 80103e6:	d4db      	bmi.n	80103a0 <HAL_RCC_ClockConfig+0x78>
 80103e8:	e7b6      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80103ea:	4a69      	ldr	r2, [pc, #420]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 80103ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80103ee:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80103f0:	03d2      	lsls	r2, r2, #15
 80103f2:	d4d5      	bmi.n	80103a0 <HAL_RCC_ClockConfig+0x78>
 80103f4:	e7b0      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80103f6:	4f66      	ldr	r7, [pc, #408]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 80103f8:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80103fa:	4b66      	ldr	r3, [pc, #408]	; (8010594 <HAL_RCC_ClockConfig+0x26c>)
 80103fc:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	4033      	ands	r3, r6
 8010402:	2b04      	cmp	r3, #4
 8010404:	d100      	bne.n	8010408 <HAL_RCC_ClockConfig+0xe0>
 8010406:	e0b1      	b.n	801056c <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010408:	f7fe fbe4 	bl	800ebd4 <HAL_GetTick>
 801040c:	1b00      	subs	r0, r0, r4
 801040e:	4540      	cmp	r0, r8
 8010410:	d9f5      	bls.n	80103fe <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 8010412:	2003      	movs	r0, #3
 8010414:	e7a0      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010416:	4f5e      	ldr	r7, [pc, #376]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 8010418:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801041a:	4b5e      	ldr	r3, [pc, #376]	; (8010594 <HAL_RCC_ClockConfig+0x26c>)
 801041c:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	4033      	ands	r3, r6
 8010422:	2b08      	cmp	r3, #8
 8010424:	d100      	bne.n	8010428 <HAL_RCC_ClockConfig+0x100>
 8010426:	e0a1      	b.n	801056c <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010428:	f7fe fbd4 	bl	800ebd4 <HAL_GetTick>
 801042c:	1b00      	subs	r0, r0, r4
 801042e:	4540      	cmp	r0, r8
 8010430:	d9f5      	bls.n	801041e <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 8010432:	2003      	movs	r0, #3
 8010434:	e790      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010436:	4f56      	ldr	r7, [pc, #344]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 8010438:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801043a:	4b56      	ldr	r3, [pc, #344]	; (8010594 <HAL_RCC_ClockConfig+0x26c>)
 801043c:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	4033      	ands	r3, r6
 8010442:	2b0c      	cmp	r3, #12
 8010444:	d100      	bne.n	8010448 <HAL_RCC_ClockConfig+0x120>
 8010446:	e091      	b.n	801056c <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010448:	f7fe fbc4 	bl	800ebd4 <HAL_GetTick>
 801044c:	1b00      	subs	r0, r0, r4
 801044e:	4540      	cmp	r0, r8
 8010450:	d9f5      	bls.n	801043e <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 8010452:	2003      	movs	r0, #3
 8010454:	e780      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010456:	6803      	ldr	r3, [r0, #0]
 8010458:	079b      	lsls	r3, r3, #30
 801045a:	d506      	bpl.n	801046a <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801045c:	4a4c      	ldr	r2, [pc, #304]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 801045e:	6853      	ldr	r3, [r2, #4]
 8010460:	21f0      	movs	r1, #240	; 0xf0
 8010462:	438b      	bics	r3, r1
 8010464:	6881      	ldr	r1, [r0, #8]
 8010466:	430b      	orrs	r3, r1
 8010468:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801046a:	682b      	ldr	r3, [r5, #0]
 801046c:	07db      	lsls	r3, r3, #31
 801046e:	d571      	bpl.n	8010554 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010470:	686b      	ldr	r3, [r5, #4]
 8010472:	2b01      	cmp	r3, #1
 8010474:	d009      	beq.n	801048a <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010476:	2b02      	cmp	r3, #2
 8010478:	d02d      	beq.n	80104d6 <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801047a:	2b03      	cmp	r3, #3
 801047c:	d031      	beq.n	80104e2 <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801047e:	4a44      	ldr	r2, [pc, #272]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 8010480:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010482:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010484:	0792      	lsls	r2, r2, #30
 8010486:	d406      	bmi.n	8010496 <HAL_RCC_ClockConfig+0x16e>
 8010488:	e766      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801048a:	4a41      	ldr	r2, [pc, #260]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 801048c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801048e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010490:	0392      	lsls	r2, r2, #14
 8010492:	d400      	bmi.n	8010496 <HAL_RCC_ClockConfig+0x16e>
 8010494:	e760      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010496:	493e      	ldr	r1, [pc, #248]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 8010498:	684a      	ldr	r2, [r1, #4]
 801049a:	2003      	movs	r0, #3
 801049c:	4382      	bics	r2, r0
 801049e:	4313      	orrs	r3, r2
 80104a0:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 80104a2:	f7fe fb97 	bl	800ebd4 <HAL_GetTick>
 80104a6:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80104a8:	686b      	ldr	r3, [r5, #4]
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d01f      	beq.n	80104ee <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80104ae:	2b02      	cmp	r3, #2
 80104b0:	d02e      	beq.n	8010510 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80104b2:	2b03      	cmp	r3, #3
 80104b4:	d03d      	beq.n	8010532 <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80104b6:	4b36      	ldr	r3, [pc, #216]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 80104b8:	4698      	mov	r8, r3
 80104ba:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80104bc:	4b35      	ldr	r3, [pc, #212]	; (8010594 <HAL_RCC_ClockConfig+0x26c>)
 80104be:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80104c0:	4643      	mov	r3, r8
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	421f      	tst	r7, r3
 80104c6:	d045      	beq.n	8010554 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80104c8:	f7fe fb84 	bl	800ebd4 <HAL_GetTick>
 80104cc:	1b80      	subs	r0, r0, r6
 80104ce:	4548      	cmp	r0, r9
 80104d0:	d9f6      	bls.n	80104c0 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 80104d2:	2003      	movs	r0, #3
 80104d4:	e740      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80104d6:	4a2e      	ldr	r2, [pc, #184]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 80104d8:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80104da:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80104dc:	0192      	lsls	r2, r2, #6
 80104de:	d4da      	bmi.n	8010496 <HAL_RCC_ClockConfig+0x16e>
 80104e0:	e73a      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80104e2:	4a2b      	ldr	r2, [pc, #172]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 80104e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80104e6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80104e8:	03d2      	lsls	r2, r2, #15
 80104ea:	d4d4      	bmi.n	8010496 <HAL_RCC_ClockConfig+0x16e>
 80104ec:	e734      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80104ee:	4b28      	ldr	r3, [pc, #160]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 80104f0:	4698      	mov	r8, r3
 80104f2:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80104f4:	4b27      	ldr	r3, [pc, #156]	; (8010594 <HAL_RCC_ClockConfig+0x26c>)
 80104f6:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80104f8:	4643      	mov	r3, r8
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	403b      	ands	r3, r7
 80104fe:	2b04      	cmp	r3, #4
 8010500:	d028      	beq.n	8010554 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010502:	f7fe fb67 	bl	800ebd4 <HAL_GetTick>
 8010506:	1b80      	subs	r0, r0, r6
 8010508:	4548      	cmp	r0, r9
 801050a:	d9f5      	bls.n	80104f8 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 801050c:	2003      	movs	r0, #3
 801050e:	e723      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010510:	4b1f      	ldr	r3, [pc, #124]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 8010512:	4698      	mov	r8, r3
 8010514:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010516:	4b1f      	ldr	r3, [pc, #124]	; (8010594 <HAL_RCC_ClockConfig+0x26c>)
 8010518:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801051a:	4643      	mov	r3, r8
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	403b      	ands	r3, r7
 8010520:	2b08      	cmp	r3, #8
 8010522:	d017      	beq.n	8010554 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010524:	f7fe fb56 	bl	800ebd4 <HAL_GetTick>
 8010528:	1b80      	subs	r0, r0, r6
 801052a:	4548      	cmp	r0, r9
 801052c:	d9f5      	bls.n	801051a <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 801052e:	2003      	movs	r0, #3
 8010530:	e712      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010532:	4b17      	ldr	r3, [pc, #92]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 8010534:	4698      	mov	r8, r3
 8010536:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010538:	4b16      	ldr	r3, [pc, #88]	; (8010594 <HAL_RCC_ClockConfig+0x26c>)
 801053a:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801053c:	4643      	mov	r3, r8
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	403b      	ands	r3, r7
 8010542:	2b0c      	cmp	r3, #12
 8010544:	d006      	beq.n	8010554 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010546:	f7fe fb45 	bl	800ebd4 <HAL_GetTick>
 801054a:	1b80      	subs	r0, r0, r6
 801054c:	4548      	cmp	r0, r9
 801054e:	d9f5      	bls.n	801053c <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 8010550:	2003      	movs	r0, #3
 8010552:	e701      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010554:	490d      	ldr	r1, [pc, #52]	; (801058c <HAL_RCC_ClockConfig+0x264>)
 8010556:	680b      	ldr	r3, [r1, #0]
 8010558:	2201      	movs	r2, #1
 801055a:	4393      	bics	r3, r2
 801055c:	4323      	orrs	r3, r4
 801055e:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010560:	680b      	ldr	r3, [r1, #0]
 8010562:	401a      	ands	r2, r3
      return HAL_ERROR;
 8010564:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010566:	42a2      	cmp	r2, r4
 8010568:	d000      	beq.n	801056c <HAL_RCC_ClockConfig+0x244>
 801056a:	e6f5      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801056c:	682b      	ldr	r3, [r5, #0]
 801056e:	075b      	lsls	r3, r3, #29
 8010570:	d506      	bpl.n	8010580 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8010572:	4a07      	ldr	r2, [pc, #28]	; (8010590 <HAL_RCC_ClockConfig+0x268>)
 8010574:	6853      	ldr	r3, [r2, #4]
 8010576:	4908      	ldr	r1, [pc, #32]	; (8010598 <HAL_RCC_ClockConfig+0x270>)
 8010578:	400b      	ands	r3, r1
 801057a:	68e9      	ldr	r1, [r5, #12]
 801057c:	430b      	orrs	r3, r1
 801057e:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8010580:	2000      	movs	r0, #0
 8010582:	f7fe fafd 	bl	800eb80 <HAL_InitTick>
  return HAL_OK;
 8010586:	2000      	movs	r0, #0
 8010588:	e6e6      	b.n	8010358 <HAL_RCC_ClockConfig+0x30>
 801058a:	46c0      	nop			; (mov r8, r8)
 801058c:	40022000 	.word	0x40022000
 8010590:	40021000 	.word	0x40021000
 8010594:	00001388 	.word	0x00001388
 8010598:	fffff8ff 	.word	0xfffff8ff

0801059c <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801059c:	b530      	push	{r4, r5, lr}
 801059e:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 80105a0:	aa04      	add	r2, sp, #16
 80105a2:	4b21      	ldr	r3, [pc, #132]	; (8010628 <HAL_RCC_GetSysClockFreq+0x8c>)
 80105a4:	0018      	movs	r0, r3
 80105a6:	c832      	ldmia	r0!, {r1, r4, r5}
 80105a8:	c232      	stmia	r2!, {r1, r4, r5}
 80105aa:	0011      	movs	r1, r2
 80105ac:	6802      	ldr	r2, [r0, #0]
 80105ae:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 80105b0:	466a      	mov	r2, sp
 80105b2:	3310      	adds	r3, #16
 80105b4:	cb13      	ldmia	r3!, {r0, r1, r4}
 80105b6:	c213      	stmia	r2!, {r0, r1, r4}
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80105bc:	4b1b      	ldr	r3, [pc, #108]	; (801062c <HAL_RCC_GetSysClockFreq+0x90>)
 80105be:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80105c0:	200c      	movs	r0, #12
 80105c2:	4018      	ands	r0, r3
 80105c4:	2808      	cmp	r0, #8
 80105c6:	d00a      	beq.n	80105de <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80105c8:	380c      	subs	r0, #12
 80105ca:	4243      	negs	r3, r0
 80105cc:	4158      	adcs	r0, r3
 80105ce:	4240      	negs	r0, r0
 80105d0:	4b17      	ldr	r3, [pc, #92]	; (8010630 <HAL_RCC_GetSysClockFreq+0x94>)
 80105d2:	4018      	ands	r0, r3
 80105d4:	4b17      	ldr	r3, [pc, #92]	; (8010634 <HAL_RCC_GetSysClockFreq+0x98>)
 80105d6:	469c      	mov	ip, r3
 80105d8:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80105da:	b009      	add	sp, #36	; 0x24
 80105dc:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80105de:	0c99      	lsrs	r1, r3, #18
 80105e0:	220f      	movs	r2, #15
 80105e2:	4011      	ands	r1, r2
 80105e4:	a804      	add	r0, sp, #16
 80105e6:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80105e8:	4910      	ldr	r1, [pc, #64]	; (801062c <HAL_RCC_GetSysClockFreq+0x90>)
 80105ea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80105ec:	400a      	ands	r2, r1
 80105ee:	4669      	mov	r1, sp
 80105f0:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80105f2:	22c0      	movs	r2, #192	; 0xc0
 80105f4:	0252      	lsls	r2, r2, #9
 80105f6:	4013      	ands	r3, r2
 80105f8:	2280      	movs	r2, #128	; 0x80
 80105fa:	0252      	lsls	r2, r2, #9
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d008      	beq.n	8010612 <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8010600:	22c0      	movs	r2, #192	; 0xc0
 8010602:	0252      	lsls	r2, r2, #9
 8010604:	4293      	cmp	r3, r2
 8010606:	d009      	beq.n	801061c <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8010608:	480a      	ldr	r0, [pc, #40]	; (8010634 <HAL_RCC_GetSysClockFreq+0x98>)
 801060a:	f7ef fd97 	bl	800013c <__udivsi3>
 801060e:	4360      	muls	r0, r4
 8010610:	e7e3      	b.n	80105da <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8010612:	4808      	ldr	r0, [pc, #32]	; (8010634 <HAL_RCC_GetSysClockFreq+0x98>)
 8010614:	f7ef fd92 	bl	800013c <__udivsi3>
 8010618:	4360      	muls	r0, r4
 801061a:	e7de      	b.n	80105da <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 801061c:	4806      	ldr	r0, [pc, #24]	; (8010638 <HAL_RCC_GetSysClockFreq+0x9c>)
 801061e:	f7ef fd8d 	bl	800013c <__udivsi3>
 8010622:	4360      	muls	r0, r4
 8010624:	e7d9      	b.n	80105da <HAL_RCC_GetSysClockFreq+0x3e>
 8010626:	46c0      	nop			; (mov r8, r8)
 8010628:	08016344 	.word	0x08016344
 801062c:	40021000 	.word	0x40021000
 8010630:	02625a00 	.word	0x02625a00
 8010634:	007a1200 	.word	0x007a1200
 8010638:	02dc6c00 	.word	0x02dc6c00

0801063c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801063c:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 801063e:	f7ff ffad 	bl	801059c <HAL_RCC_GetSysClockFreq>
 8010642:	4b05      	ldr	r3, [pc, #20]	; (8010658 <HAL_RCC_GetHCLKFreq+0x1c>)
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	061b      	lsls	r3, r3, #24
 8010648:	0f1b      	lsrs	r3, r3, #28
 801064a:	4a04      	ldr	r2, [pc, #16]	; (801065c <HAL_RCC_GetHCLKFreq+0x20>)
 801064c:	5cd3      	ldrb	r3, [r2, r3]
 801064e:	40d8      	lsrs	r0, r3
 8010650:	4b03      	ldr	r3, [pc, #12]	; (8010660 <HAL_RCC_GetHCLKFreq+0x24>)
 8010652:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8010654:	bd10      	pop	{r4, pc}
 8010656:	46c0      	nop			; (mov r8, r8)
 8010658:	40021000 	.word	0x40021000
 801065c:	08019ac4 	.word	0x08019ac4
 8010660:	2000004c 	.word	0x2000004c

08010664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010664:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8010666:	f7ff ffe9 	bl	801063c <HAL_RCC_GetHCLKFreq>
 801066a:	4b04      	ldr	r3, [pc, #16]	; (801067c <HAL_RCC_GetPCLK1Freq+0x18>)
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	055b      	lsls	r3, r3, #21
 8010670:	0f5b      	lsrs	r3, r3, #29
 8010672:	4a03      	ldr	r2, [pc, #12]	; (8010680 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8010674:	5cd3      	ldrb	r3, [r2, r3]
 8010676:	40d8      	lsrs	r0, r3
}    
 8010678:	bd10      	pop	{r4, pc}
 801067a:	46c0      	nop			; (mov r8, r8)
 801067c:	40021000 	.word	0x40021000
 8010680:	08019ac4 	.word	0x08019ac4

08010684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010686:	46c6      	mov	lr, r8
 8010688:	b500      	push	{lr}
 801068a:	b082      	sub	sp, #8
 801068c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801068e:	6803      	ldr	r3, [r0, #0]
 8010690:	03db      	lsls	r3, r3, #15
 8010692:	d507      	bpl.n	80106a4 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010694:	4b43      	ldr	r3, [pc, #268]	; (80107a4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010696:	6a1b      	ldr	r3, [r3, #32]
 8010698:	6842      	ldr	r2, [r0, #4]
 801069a:	4053      	eors	r3, r2
 801069c:	22c0      	movs	r2, #192	; 0xc0
 801069e:	0092      	lsls	r2, r2, #2
 80106a0:	4213      	tst	r3, r2
 80106a2:	d136      	bne.n	8010712 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80106a4:	6823      	ldr	r3, [r4, #0]
 80106a6:	07db      	lsls	r3, r3, #31
 80106a8:	d506      	bpl.n	80106b8 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80106aa:	4a3e      	ldr	r2, [pc, #248]	; (80107a4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80106ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80106ae:	2103      	movs	r1, #3
 80106b0:	438b      	bics	r3, r1
 80106b2:	68a1      	ldr	r1, [r4, #8]
 80106b4:	430b      	orrs	r3, r1
 80106b6:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80106b8:	6823      	ldr	r3, [r4, #0]
 80106ba:	079b      	lsls	r3, r3, #30
 80106bc:	d506      	bpl.n	80106cc <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80106be:	4a39      	ldr	r2, [pc, #228]	; (80107a4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80106c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80106c2:	4939      	ldr	r1, [pc, #228]	; (80107a8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80106c4:	400b      	ands	r3, r1
 80106c6:	68e1      	ldr	r1, [r4, #12]
 80106c8:	430b      	orrs	r3, r1
 80106ca:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80106cc:	6823      	ldr	r3, [r4, #0]
 80106ce:	035b      	lsls	r3, r3, #13
 80106d0:	d506      	bpl.n	80106e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80106d2:	4a34      	ldr	r2, [pc, #208]	; (80107a4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80106d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80106d6:	4935      	ldr	r1, [pc, #212]	; (80107ac <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80106d8:	400b      	ands	r3, r1
 80106da:	6921      	ldr	r1, [r4, #16]
 80106dc:	430b      	orrs	r3, r1
 80106de:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80106e0:	6823      	ldr	r3, [r4, #0]
 80106e2:	069b      	lsls	r3, r3, #26
 80106e4:	d506      	bpl.n	80106f4 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80106e6:	4a2f      	ldr	r2, [pc, #188]	; (80107a4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80106e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80106ea:	2110      	movs	r1, #16
 80106ec:	438b      	bics	r3, r1
 80106ee:	6961      	ldr	r1, [r4, #20]
 80106f0:	430b      	orrs	r3, r1
 80106f2:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80106f4:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80106f6:	6823      	ldr	r3, [r4, #0]
 80106f8:	055b      	lsls	r3, r3, #21
 80106fa:	d506      	bpl.n	801070a <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80106fc:	4a29      	ldr	r2, [pc, #164]	; (80107a4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80106fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010700:	2140      	movs	r1, #64	; 0x40
 8010702:	438b      	bics	r3, r1
 8010704:	69a1      	ldr	r1, [r4, #24]
 8010706:	430b      	orrs	r3, r1
 8010708:	6313      	str	r3, [r2, #48]	; 0x30
}
 801070a:	b002      	add	sp, #8
 801070c:	bc04      	pop	{r2}
 801070e:	4690      	mov	r8, r2
 8010710:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8010712:	4a24      	ldr	r2, [pc, #144]	; (80107a4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010714:	69d1      	ldr	r1, [r2, #28]
 8010716:	2080      	movs	r0, #128	; 0x80
 8010718:	0540      	lsls	r0, r0, #21
 801071a:	4301      	orrs	r1, r0
 801071c:	61d1      	str	r1, [r2, #28]
 801071e:	69d3      	ldr	r3, [r2, #28]
 8010720:	4003      	ands	r3, r0
 8010722:	9301      	str	r3, [sp, #4]
 8010724:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010726:	4a22      	ldr	r2, [pc, #136]	; (80107b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8010728:	6811      	ldr	r1, [r2, #0]
 801072a:	2380      	movs	r3, #128	; 0x80
 801072c:	005b      	lsls	r3, r3, #1
 801072e:	430b      	orrs	r3, r1
 8010730:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8010732:	f7fe fa4f 	bl	800ebd4 <HAL_GetTick>
 8010736:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8010738:	4e1d      	ldr	r6, [pc, #116]	; (80107b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 801073a:	2580      	movs	r5, #128	; 0x80
 801073c:	006d      	lsls	r5, r5, #1
 801073e:	6833      	ldr	r3, [r6, #0]
 8010740:	422b      	tst	r3, r5
 8010742:	d106      	bne.n	8010752 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010744:	f7fe fa46 	bl	800ebd4 <HAL_GetTick>
 8010748:	1bc0      	subs	r0, r0, r7
 801074a:	2864      	cmp	r0, #100	; 0x64
 801074c:	d9f7      	bls.n	801073e <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 801074e:	2003      	movs	r0, #3
 8010750:	e7db      	b.n	801070a <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010752:	4b14      	ldr	r3, [pc, #80]	; (80107a4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010754:	6a18      	ldr	r0, [r3, #32]
 8010756:	4a17      	ldr	r2, [pc, #92]	; (80107b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8010758:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 801075a:	6a1d      	ldr	r5, [r3, #32]
 801075c:	2180      	movs	r1, #128	; 0x80
 801075e:	0249      	lsls	r1, r1, #9
 8010760:	4329      	orrs	r1, r5
 8010762:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010764:	6a19      	ldr	r1, [r3, #32]
 8010766:	4d14      	ldr	r5, [pc, #80]	; (80107b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8010768:	4029      	ands	r1, r5
 801076a:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 801076c:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 801076e:	0783      	lsls	r3, r0, #30
 8010770:	d407      	bmi.n	8010782 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8010772:	4a0c      	ldr	r2, [pc, #48]	; (80107a4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010774:	6a13      	ldr	r3, [r2, #32]
 8010776:	490f      	ldr	r1, [pc, #60]	; (80107b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8010778:	400b      	ands	r3, r1
 801077a:	6861      	ldr	r1, [r4, #4]
 801077c:	430b      	orrs	r3, r1
 801077e:	6213      	str	r3, [r2, #32]
 8010780:	e790      	b.n	80106a4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8010782:	f7fe fa27 	bl	800ebd4 <HAL_GetTick>
 8010786:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010788:	4e06      	ldr	r6, [pc, #24]	; (80107a4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801078a:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801078c:	4f0b      	ldr	r7, [pc, #44]	; (80107bc <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801078e:	6a33      	ldr	r3, [r6, #32]
 8010790:	421d      	tst	r5, r3
 8010792:	d1ee      	bne.n	8010772 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010794:	f7fe fa1e 	bl	800ebd4 <HAL_GetTick>
 8010798:	4643      	mov	r3, r8
 801079a:	1ac0      	subs	r0, r0, r3
 801079c:	42b8      	cmp	r0, r7
 801079e:	d9f6      	bls.n	801078e <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 80107a0:	2003      	movs	r0, #3
 80107a2:	e7b2      	b.n	801070a <HAL_RCCEx_PeriphCLKConfig+0x86>
 80107a4:	40021000 	.word	0x40021000
 80107a8:	fffcffff 	.word	0xfffcffff
 80107ac:	fff3ffff 	.word	0xfff3ffff
 80107b0:	40007000 	.word	0x40007000
 80107b4:	fffffcff 	.word	0xfffffcff
 80107b8:	fffeffff 	.word	0xfffeffff
 80107bc:	00001388 	.word	0x00001388

080107c0 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 80107c0:	4770      	bx	lr

080107c2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80107c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107c4:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80107c6:	6802      	ldr	r2, [r0, #0]
 80107c8:	68d3      	ldr	r3, [r2, #12]
 80107ca:	21a0      	movs	r1, #160	; 0xa0
 80107cc:	438b      	bics	r3, r1
 80107ce:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80107d0:	f7fe fa00 	bl	800ebd4 <HAL_GetTick>
 80107d4:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80107d6:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80107d8:	26fa      	movs	r6, #250	; 0xfa
 80107da:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80107dc:	6823      	ldr	r3, [r4, #0]
 80107de:	68db      	ldr	r3, [r3, #12]
 80107e0:	421d      	tst	r5, r3
 80107e2:	d106      	bne.n	80107f2 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80107e4:	f7fe f9f6 	bl	800ebd4 <HAL_GetTick>
 80107e8:	1bc0      	subs	r0, r0, r7
 80107ea:	42b0      	cmp	r0, r6
 80107ec:	d9f6      	bls.n	80107dc <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 80107ee:	2003      	movs	r0, #3
 80107f0:	e000      	b.n	80107f4 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 80107f2:	2000      	movs	r0, #0
}
 80107f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080107f6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80107f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107f8:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80107fa:	6803      	ldr	r3, [r0, #0]
 80107fc:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80107fe:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010800:	0652      	lsls	r2, r2, #25
 8010802:	d500      	bpl.n	8010806 <RTC_EnterInitMode+0x10>
}
 8010804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8010806:	2201      	movs	r2, #1
 8010808:	4252      	negs	r2, r2
 801080a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 801080c:	f7fe f9e2 	bl	800ebd4 <HAL_GetTick>
 8010810:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010812:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010814:	26fa      	movs	r6, #250	; 0xfa
 8010816:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010818:	6823      	ldr	r3, [r4, #0]
 801081a:	68db      	ldr	r3, [r3, #12]
 801081c:	421d      	tst	r5, r3
 801081e:	d106      	bne.n	801082e <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010820:	f7fe f9d8 	bl	800ebd4 <HAL_GetTick>
 8010824:	1bc0      	subs	r0, r0, r7
 8010826:	42b0      	cmp	r0, r6
 8010828:	d9f6      	bls.n	8010818 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 801082a:	2003      	movs	r0, #3
 801082c:	e7ea      	b.n	8010804 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 801082e:	2000      	movs	r0, #0
 8010830:	e7e8      	b.n	8010804 <RTC_EnterInitMode+0xe>
	...

08010834 <HAL_RTC_Init>:
{
 8010834:	b570      	push	{r4, r5, r6, lr}
 8010836:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8010838:	d046      	beq.n	80108c8 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801083a:	7f43      	ldrb	r3, [r0, #29]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d038      	beq.n	80108b2 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8010840:	2302      	movs	r3, #2
 8010842:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010844:	6823      	ldr	r3, [r4, #0]
 8010846:	22ca      	movs	r2, #202	; 0xca
 8010848:	625a      	str	r2, [r3, #36]	; 0x24
 801084a:	6823      	ldr	r3, [r4, #0]
 801084c:	3a77      	subs	r2, #119	; 0x77
 801084e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8010850:	0020      	movs	r0, r4
 8010852:	f7ff ffd0 	bl	80107f6 <RTC_EnterInitMode>
 8010856:	2800      	cmp	r0, #0
 8010858:	d12f      	bne.n	80108ba <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801085a:	6822      	ldr	r2, [r4, #0]
 801085c:	6893      	ldr	r3, [r2, #8]
 801085e:	491b      	ldr	r1, [pc, #108]	; (80108cc <HAL_RTC_Init+0x98>)
 8010860:	400b      	ands	r3, r1
 8010862:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010864:	6822      	ldr	r2, [r4, #0]
 8010866:	6891      	ldr	r1, [r2, #8]
 8010868:	6863      	ldr	r3, [r4, #4]
 801086a:	6925      	ldr	r5, [r4, #16]
 801086c:	432b      	orrs	r3, r5
 801086e:	6965      	ldr	r5, [r4, #20]
 8010870:	432b      	orrs	r3, r5
 8010872:	430b      	orrs	r3, r1
 8010874:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010876:	6823      	ldr	r3, [r4, #0]
 8010878:	68e2      	ldr	r2, [r4, #12]
 801087a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 801087c:	6822      	ldr	r2, [r4, #0]
 801087e:	6911      	ldr	r1, [r2, #16]
 8010880:	68a3      	ldr	r3, [r4, #8]
 8010882:	041b      	lsls	r3, r3, #16
 8010884:	430b      	orrs	r3, r1
 8010886:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8010888:	6822      	ldr	r2, [r4, #0]
 801088a:	68d3      	ldr	r3, [r2, #12]
 801088c:	2180      	movs	r1, #128	; 0x80
 801088e:	438b      	bics	r3, r1
 8010890:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8010892:	6822      	ldr	r2, [r4, #0]
 8010894:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010896:	490e      	ldr	r1, [pc, #56]	; (80108d0 <HAL_RTC_Init+0x9c>)
 8010898:	400b      	ands	r3, r1
 801089a:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 801089c:	6822      	ldr	r2, [r4, #0]
 801089e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80108a0:	69a1      	ldr	r1, [r4, #24]
 80108a2:	430b      	orrs	r3, r1
 80108a4:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80108a6:	6823      	ldr	r3, [r4, #0]
 80108a8:	22ff      	movs	r2, #255	; 0xff
 80108aa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80108ac:	2301      	movs	r3, #1
 80108ae:	7763      	strb	r3, [r4, #29]
}
 80108b0:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80108b2:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80108b4:	f7ff ff84 	bl	80107c0 <HAL_RTC_MspInit>
 80108b8:	e7c2      	b.n	8010840 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80108ba:	6823      	ldr	r3, [r4, #0]
 80108bc:	22ff      	movs	r2, #255	; 0xff
 80108be:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80108c0:	2304      	movs	r3, #4
 80108c2:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80108c4:	2001      	movs	r0, #1
 80108c6:	e7f3      	b.n	80108b0 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 80108c8:	2001      	movs	r0, #1
 80108ca:	e7f1      	b.n	80108b0 <HAL_RTC_Init+0x7c>
 80108cc:	ff8fffbf 	.word	0xff8fffbf
 80108d0:	fffbffff 	.word	0xfffbffff

080108d4 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 80108d4:	2809      	cmp	r0, #9
 80108d6:	d909      	bls.n	80108ec <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 80108d8:	2300      	movs	r3, #0
  {
    bcdhigh++;
 80108da:	3301      	adds	r3, #1
    Value -= 10;
 80108dc:	380a      	subs	r0, #10
 80108de:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80108e0:	2809      	cmp	r0, #9
 80108e2:	d8fa      	bhi.n	80108da <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80108e4:	011b      	lsls	r3, r3, #4
 80108e6:	4318      	orrs	r0, r3
 80108e8:	b2c0      	uxtb	r0, r0
}
 80108ea:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 80108ec:	2300      	movs	r3, #0
 80108ee:	e7f9      	b.n	80108e4 <RTC_ByteToBcd2+0x10>

080108f0 <HAL_RTC_SetTime>:
{
 80108f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108f2:	46c6      	mov	lr, r8
 80108f4:	b500      	push	{lr}
 80108f6:	0004      	movs	r4, r0
 80108f8:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80108fa:	7f03      	ldrb	r3, [r0, #28]
 80108fc:	2b01      	cmp	r3, #1
 80108fe:	d100      	bne.n	8010902 <HAL_RTC_SetTime+0x12>
 8010900:	e075      	b.n	80109ee <HAL_RTC_SetTime+0xfe>
 8010902:	2301      	movs	r3, #1
 8010904:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010906:	3301      	adds	r3, #1
 8010908:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 801090a:	2a00      	cmp	r2, #0
 801090c:	d144      	bne.n	8010998 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801090e:	6803      	ldr	r3, [r0, #0]
 8010910:	689b      	ldr	r3, [r3, #8]
 8010912:	065b      	lsls	r3, r3, #25
 8010914:	d401      	bmi.n	801091a <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8010916:	2300      	movs	r3, #0
 8010918:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801091a:	7830      	ldrb	r0, [r6, #0]
 801091c:	f7ff ffda 	bl	80108d4 <RTC_ByteToBcd2>
 8010920:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8010922:	7870      	ldrb	r0, [r6, #1]
 8010924:	f7ff ffd6 	bl	80108d4 <RTC_ByteToBcd2>
 8010928:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 801092a:	78b0      	ldrb	r0, [r6, #2]
 801092c:	f7ff ffd2 	bl	80108d4 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8010930:	7a35      	ldrb	r5, [r6, #8]
 8010932:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8010934:	4305      	orrs	r5, r0
 8010936:	4643      	mov	r3, r8
 8010938:	0418      	lsls	r0, r3, #16
 801093a:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 801093c:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801093e:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010940:	6823      	ldr	r3, [r4, #0]
 8010942:	22ca      	movs	r2, #202	; 0xca
 8010944:	625a      	str	r2, [r3, #36]	; 0x24
 8010946:	6823      	ldr	r3, [r4, #0]
 8010948:	3a77      	subs	r2, #119	; 0x77
 801094a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801094c:	0020      	movs	r0, r4
 801094e:	f7ff ff52 	bl	80107f6 <RTC_EnterInitMode>
 8010952:	1e07      	subs	r7, r0, #0
 8010954:	d131      	bne.n	80109ba <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010956:	6823      	ldr	r3, [r4, #0]
 8010958:	4826      	ldr	r0, [pc, #152]	; (80109f4 <HAL_RTC_SetTime+0x104>)
 801095a:	4005      	ands	r5, r0
 801095c:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 801095e:	6822      	ldr	r2, [r4, #0]
 8010960:	6893      	ldr	r3, [r2, #8]
 8010962:	4925      	ldr	r1, [pc, #148]	; (80109f8 <HAL_RTC_SetTime+0x108>)
 8010964:	400b      	ands	r3, r1
 8010966:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010968:	6822      	ldr	r2, [r4, #0]
 801096a:	6891      	ldr	r1, [r2, #8]
 801096c:	68f3      	ldr	r3, [r6, #12]
 801096e:	6930      	ldr	r0, [r6, #16]
 8010970:	4303      	orrs	r3, r0
 8010972:	430b      	orrs	r3, r1
 8010974:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8010976:	6822      	ldr	r2, [r4, #0]
 8010978:	68d3      	ldr	r3, [r2, #12]
 801097a:	2180      	movs	r1, #128	; 0x80
 801097c:	438b      	bics	r3, r1
 801097e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8010980:	6823      	ldr	r3, [r4, #0]
 8010982:	689b      	ldr	r3, [r3, #8]
 8010984:	069b      	lsls	r3, r3, #26
 8010986:	d524      	bpl.n	80109d2 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010988:	6823      	ldr	r3, [r4, #0]
 801098a:	22ff      	movs	r2, #255	; 0xff
 801098c:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 801098e:	2301      	movs	r3, #1
 8010990:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8010992:	2300      	movs	r3, #0
 8010994:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8010996:	e018      	b.n	80109ca <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8010998:	6803      	ldr	r3, [r0, #0]
 801099a:	689b      	ldr	r3, [r3, #8]
 801099c:	065b      	lsls	r3, r3, #25
 801099e:	d401      	bmi.n	80109a4 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 80109a0:	2300      	movs	r3, #0
 80109a2:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80109a4:	7835      	ldrb	r5, [r6, #0]
 80109a6:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80109a8:	7870      	ldrb	r0, [r6, #1]
 80109aa:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80109ac:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 80109ae:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80109b0:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 80109b2:	7a30      	ldrb	r0, [r6, #8]
 80109b4:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80109b6:	4305      	orrs	r5, r0
 80109b8:	e7c2      	b.n	8010940 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80109ba:	6823      	ldr	r3, [r4, #0]
 80109bc:	22ff      	movs	r2, #255	; 0xff
 80109be:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80109c0:	2304      	movs	r3, #4
 80109c2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80109c4:	2300      	movs	r3, #0
 80109c6:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80109c8:	2701      	movs	r7, #1
}
 80109ca:	0038      	movs	r0, r7
 80109cc:	bc04      	pop	{r2}
 80109ce:	4690      	mov	r8, r2
 80109d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80109d2:	0020      	movs	r0, r4
 80109d4:	f7ff fef5 	bl	80107c2 <HAL_RTC_WaitForSynchro>
 80109d8:	2800      	cmp	r0, #0
 80109da:	d0d5      	beq.n	8010988 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80109dc:	6823      	ldr	r3, [r4, #0]
 80109de:	22ff      	movs	r2, #255	; 0xff
 80109e0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80109e2:	2304      	movs	r3, #4
 80109e4:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80109e6:	2300      	movs	r3, #0
 80109e8:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80109ea:	2701      	movs	r7, #1
 80109ec:	e7ed      	b.n	80109ca <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 80109ee:	2702      	movs	r7, #2
 80109f0:	e7eb      	b.n	80109ca <HAL_RTC_SetTime+0xda>
 80109f2:	46c0      	nop			; (mov r8, r8)
 80109f4:	007f7f7f 	.word	0x007f7f7f
 80109f8:	fffbffff 	.word	0xfffbffff

080109fc <HAL_RTC_SetDate>:
{
 80109fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109fe:	46c6      	mov	lr, r8
 8010a00:	b500      	push	{lr}
 8010a02:	0004      	movs	r4, r0
 8010a04:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8010a06:	7f03      	ldrb	r3, [r0, #28]
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	d03a      	beq.n	8010a82 <HAL_RTC_SetDate+0x86>
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8010a10:	3301      	adds	r3, #1
 8010a12:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8010a14:	2a00      	cmp	r2, #0
 8010a16:	d136      	bne.n	8010a86 <HAL_RTC_SetDate+0x8a>
 8010a18:	784b      	ldrb	r3, [r1, #1]
 8010a1a:	06da      	lsls	r2, r3, #27
 8010a1c:	d503      	bpl.n	8010a26 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8010a1e:	2210      	movs	r2, #16
 8010a20:	4393      	bics	r3, r2
 8010a22:	330a      	adds	r3, #10
 8010a24:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8010a26:	78f0      	ldrb	r0, [r6, #3]
 8010a28:	f7ff ff54 	bl	80108d4 <RTC_ByteToBcd2>
 8010a2c:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8010a2e:	7870      	ldrb	r0, [r6, #1]
 8010a30:	f7ff ff50 	bl	80108d4 <RTC_ByteToBcd2>
 8010a34:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8010a36:	78b0      	ldrb	r0, [r6, #2]
 8010a38:	f7ff ff4c 	bl	80108d4 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8010a3c:	7835      	ldrb	r5, [r6, #0]
 8010a3e:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8010a40:	4305      	orrs	r5, r0
 8010a42:	4643      	mov	r3, r8
 8010a44:	0418      	lsls	r0, r3, #16
 8010a46:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8010a48:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8010a4a:	433d      	orrs	r5, r7
 8010a4c:	e025      	b.n	8010a9a <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8010a4e:	6823      	ldr	r3, [r4, #0]
 8010a50:	22ff      	movs	r2, #255	; 0xff
 8010a52:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010a54:	2304      	movs	r3, #4
 8010a56:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8010a58:	2300      	movs	r3, #0
 8010a5a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8010a5c:	2601      	movs	r6, #1
}
 8010a5e:	0030      	movs	r0, r6
 8010a60:	bc04      	pop	{r2}
 8010a62:	4690      	mov	r8, r2
 8010a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010a66:	0020      	movs	r0, r4
 8010a68:	f7ff feab 	bl	80107c2 <HAL_RTC_WaitForSynchro>
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	d02c      	beq.n	8010aca <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8010a70:	6823      	ldr	r3, [r4, #0]
 8010a72:	22ff      	movs	r2, #255	; 0xff
 8010a74:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8010a76:	2304      	movs	r3, #4
 8010a78:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8010a7e:	2601      	movs	r6, #1
 8010a80:	e7ed      	b.n	8010a5e <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8010a82:	2602      	movs	r6, #2
 8010a84:	e7eb      	b.n	8010a5e <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8010a86:	78cd      	ldrb	r5, [r1, #3]
 8010a88:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8010a8a:	7848      	ldrb	r0, [r1, #1]
 8010a8c:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8010a8e:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8010a90:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8010a92:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8010a94:	7808      	ldrb	r0, [r1, #0]
 8010a96:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8010a98:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010a9a:	6823      	ldr	r3, [r4, #0]
 8010a9c:	22ca      	movs	r2, #202	; 0xca
 8010a9e:	625a      	str	r2, [r3, #36]	; 0x24
 8010aa0:	6823      	ldr	r3, [r4, #0]
 8010aa2:	3a77      	subs	r2, #119	; 0x77
 8010aa4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8010aa6:	0020      	movs	r0, r4
 8010aa8:	f7ff fea5 	bl	80107f6 <RTC_EnterInitMode>
 8010aac:	1e06      	subs	r6, r0, #0
 8010aae:	d1ce      	bne.n	8010a4e <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010ab0:	6823      	ldr	r3, [r4, #0]
 8010ab2:	480a      	ldr	r0, [pc, #40]	; (8010adc <HAL_RTC_SetDate+0xe0>)
 8010ab4:	4005      	ands	r5, r0
 8010ab6:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8010ab8:	6822      	ldr	r2, [r4, #0]
 8010aba:	68d3      	ldr	r3, [r2, #12]
 8010abc:	2180      	movs	r1, #128	; 0x80
 8010abe:	438b      	bics	r3, r1
 8010ac0:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8010ac2:	6823      	ldr	r3, [r4, #0]
 8010ac4:	689b      	ldr	r3, [r3, #8]
 8010ac6:	069b      	lsls	r3, r3, #26
 8010ac8:	d5cd      	bpl.n	8010a66 <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8010aca:	6823      	ldr	r3, [r4, #0]
 8010acc:	22ff      	movs	r2, #255	; 0xff
 8010ace:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8010ad8:	e7c1      	b.n	8010a5e <HAL_RTC_SetDate+0x62>
 8010ada:	46c0      	nop			; (mov r8, r8)
 8010adc:	00ffff3f 	.word	0x00ffff3f

08010ae0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8010ae0:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010ae2:	0900      	lsrs	r0, r0, #4
 8010ae4:	0083      	lsls	r3, r0, #2
 8010ae6:	181b      	adds	r3, r3, r0
 8010ae8:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010aea:	200f      	movs	r0, #15
 8010aec:	4010      	ands	r0, r2
 8010aee:	1818      	adds	r0, r3, r0
 8010af0:	b2c0      	uxtb	r0, r0
}
 8010af2:	4770      	bx	lr

08010af4 <HAL_RTC_GetTime>:
{
 8010af4:	b570      	push	{r4, r5, r6, lr}
 8010af6:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010af8:	6803      	ldr	r3, [r0, #0]
 8010afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010afc:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8010afe:	6803      	ldr	r3, [r0, #0]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	490e      	ldr	r1, [pc, #56]	; (8010b3c <HAL_RTC_GetTime+0x48>)
 8010b04:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010b06:	0c19      	lsrs	r1, r3, #16
 8010b08:	203f      	movs	r0, #63	; 0x3f
 8010b0a:	4008      	ands	r0, r1
 8010b0c:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010b0e:	0a1e      	lsrs	r6, r3, #8
 8010b10:	b2f6      	uxtb	r6, r6
 8010b12:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010b14:	b2dc      	uxtb	r4, r3
 8010b16:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8010b18:	2340      	movs	r3, #64	; 0x40
 8010b1a:	400b      	ands	r3, r1
 8010b1c:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8010b1e:	2a00      	cmp	r2, #0
 8010b20:	d10a      	bne.n	8010b38 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010b22:	f7ff ffdd 	bl	8010ae0 <RTC_Bcd2ToByte>
 8010b26:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010b28:	0030      	movs	r0, r6
 8010b2a:	f7ff ffd9 	bl	8010ae0 <RTC_Bcd2ToByte>
 8010b2e:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8010b30:	0020      	movs	r0, r4
 8010b32:	f7ff ffd5 	bl	8010ae0 <RTC_Bcd2ToByte>
 8010b36:	70a8      	strb	r0, [r5, #2]
}
 8010b38:	2000      	movs	r0, #0
 8010b3a:	bd70      	pop	{r4, r5, r6, pc}
 8010b3c:	007f7f7f 	.word	0x007f7f7f

08010b40 <HAL_RTC_GetDate>:
{
 8010b40:	b570      	push	{r4, r5, r6, lr}
 8010b42:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8010b44:	6803      	ldr	r3, [r0, #0]
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	490d      	ldr	r1, [pc, #52]	; (8010b80 <HAL_RTC_GetDate+0x40>)
 8010b4a:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8010b4c:	0c18      	lsrs	r0, r3, #16
 8010b4e:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010b50:	04dd      	lsls	r5, r3, #19
 8010b52:	0eed      	lsrs	r5, r5, #27
 8010b54:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8010b56:	b2de      	uxtb	r6, r3
 8010b58:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8010b5a:	041b      	lsls	r3, r3, #16
 8010b5c:	0f5b      	lsrs	r3, r3, #29
 8010b5e:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8010b60:	2a00      	cmp	r2, #0
 8010b62:	d10a      	bne.n	8010b7a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010b64:	f7ff ffbc 	bl	8010ae0 <RTC_Bcd2ToByte>
 8010b68:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8010b6a:	0028      	movs	r0, r5
 8010b6c:	f7ff ffb8 	bl	8010ae0 <RTC_Bcd2ToByte>
 8010b70:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8010b72:	0030      	movs	r0, r6
 8010b74:	f7ff ffb4 	bl	8010ae0 <RTC_Bcd2ToByte>
 8010b78:	70a0      	strb	r0, [r4, #2]
}
 8010b7a:	2000      	movs	r0, #0
 8010b7c:	bd70      	pop	{r4, r5, r6, pc}
 8010b7e:	46c0      	nop			; (mov r8, r8)
 8010b80:	00ffff3f 	.word	0x00ffff3f

08010b84 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8010b84:	6803      	ldr	r3, [r0, #0]
 8010b86:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8010b88:	0089      	lsls	r1, r1, #2
 8010b8a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8010b8c:	600a      	str	r2, [r1, #0]
}
 8010b8e:	4770      	bx	lr

08010b90 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8010b90:	6803      	ldr	r3, [r0, #0]
 8010b92:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8010b94:	0089      	lsls	r1, r1, #2
 8010b96:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8010b98:	6808      	ldr	r0, [r1, #0]
}
 8010b9a:	4770      	bx	lr

08010b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010b9c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b9e:	6a03      	ldr	r3, [r0, #32]
 8010ba0:	2201      	movs	r2, #1
 8010ba2:	4393      	bics	r3, r2
 8010ba4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ba6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ba8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010baa:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010bac:	2573      	movs	r5, #115	; 0x73
 8010bae:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010bb0:	680d      	ldr	r5, [r1, #0]
 8010bb2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010bb4:	2502      	movs	r5, #2
 8010bb6:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010bb8:	688d      	ldr	r5, [r1, #8]
 8010bba:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010bbc:	4d19      	ldr	r5, [pc, #100]	; (8010c24 <TIM_OC1_SetConfig+0x88>)
 8010bbe:	42a8      	cmp	r0, r5
 8010bc0:	d00f      	beq.n	8010be2 <TIM_OC1_SetConfig+0x46>
 8010bc2:	4d19      	ldr	r5, [pc, #100]	; (8010c28 <TIM_OC1_SetConfig+0x8c>)
 8010bc4:	42a8      	cmp	r0, r5
 8010bc6:	d01e      	beq.n	8010c06 <TIM_OC1_SetConfig+0x6a>
 8010bc8:	4d18      	ldr	r5, [pc, #96]	; (8010c2c <TIM_OC1_SetConfig+0x90>)
 8010bca:	42a8      	cmp	r0, r5
 8010bcc:	d022      	beq.n	8010c14 <TIM_OC1_SetConfig+0x78>
 8010bce:	4d18      	ldr	r5, [pc, #96]	; (8010c30 <TIM_OC1_SetConfig+0x94>)
 8010bd0:	42a8      	cmp	r0, r5
 8010bd2:	d112      	bne.n	8010bfa <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010bd4:	2508      	movs	r5, #8
 8010bd6:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010bd8:	68cd      	ldr	r5, [r1, #12]
 8010bda:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010bdc:	2504      	movs	r5, #4
 8010bde:	43ab      	bics	r3, r5
 8010be0:	e005      	b.n	8010bee <TIM_OC1_SetConfig+0x52>
    tmpccer &= ~TIM_CCER_CC1NP;
 8010be2:	2508      	movs	r5, #8
 8010be4:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 8010be6:	68cd      	ldr	r5, [r1, #12]
 8010be8:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8010bea:	2504      	movs	r5, #4
 8010bec:	43ab      	bics	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010bee:	4d11      	ldr	r5, [pc, #68]	; (8010c34 <TIM_OC1_SetConfig+0x98>)
 8010bf0:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010bf2:	694d      	ldr	r5, [r1, #20]
 8010bf4:	698e      	ldr	r6, [r1, #24]
 8010bf6:	4335      	orrs	r5, r6
 8010bf8:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010bfa:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010bfc:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010bfe:	684a      	ldr	r2, [r1, #4]
 8010c00:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c02:	6203      	str	r3, [r0, #32]
}
 8010c04:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 8010c06:	2508      	movs	r5, #8
 8010c08:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 8010c0a:	68cd      	ldr	r5, [r1, #12]
 8010c0c:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8010c0e:	2504      	movs	r5, #4
 8010c10:	43ab      	bics	r3, r5
 8010c12:	e7ec      	b.n	8010bee <TIM_OC1_SetConfig+0x52>
    tmpccer &= ~TIM_CCER_CC1NP;
 8010c14:	2508      	movs	r5, #8
 8010c16:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 8010c18:	68cd      	ldr	r5, [r1, #12]
 8010c1a:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8010c1c:	2504      	movs	r5, #4
 8010c1e:	43ab      	bics	r3, r5
 8010c20:	e7e5      	b.n	8010bee <TIM_OC1_SetConfig+0x52>
 8010c22:	46c0      	nop			; (mov r8, r8)
 8010c24:	40012c00 	.word	0x40012c00
 8010c28:	40014000 	.word	0x40014000
 8010c2c:	40014400 	.word	0x40014400
 8010c30:	40014800 	.word	0x40014800
 8010c34:	fffffcff 	.word	0xfffffcff

08010c38 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010c38:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010c3a:	6a03      	ldr	r3, [r0, #32]
 8010c3c:	4a17      	ldr	r2, [pc, #92]	; (8010c9c <TIM_OC3_SetConfig+0x64>)
 8010c3e:	4013      	ands	r3, r2
 8010c40:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c44:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010c46:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010c48:	2473      	movs	r4, #115	; 0x73
 8010c4a:	43a5      	bics	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010c4c:	680c      	ldr	r4, [r1, #0]
 8010c4e:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010c50:	4c13      	ldr	r4, [pc, #76]	; (8010ca0 <TIM_OC3_SetConfig+0x68>)
 8010c52:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8010c54:	688c      	ldr	r4, [r1, #8]
 8010c56:	0224      	lsls	r4, r4, #8
 8010c58:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010c5a:	4c12      	ldr	r4, [pc, #72]	; (8010ca4 <TIM_OC3_SetConfig+0x6c>)
 8010c5c:	42a0      	cmp	r0, r4
 8010c5e:	d009      	beq.n	8010c74 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8010c60:	4c11      	ldr	r4, [pc, #68]	; (8010ca8 <TIM_OC3_SetConfig+0x70>)
 8010c62:	42a0      	cmp	r0, r4
 8010c64:	d00d      	beq.n	8010c82 <TIM_OC3_SetConfig+0x4a>
 8010c66:	4c11      	ldr	r4, [pc, #68]	; (8010cac <TIM_OC3_SetConfig+0x74>)
 8010c68:	42a0      	cmp	r0, r4
 8010c6a:	d00a      	beq.n	8010c82 <TIM_OC3_SetConfig+0x4a>
 8010c6c:	4c10      	ldr	r4, [pc, #64]	; (8010cb0 <TIM_OC3_SetConfig+0x78>)
 8010c6e:	42a0      	cmp	r0, r4
 8010c70:	d10e      	bne.n	8010c90 <TIM_OC3_SetConfig+0x58>
 8010c72:	e006      	b.n	8010c82 <TIM_OC3_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC3NP;
 8010c74:	4c0f      	ldr	r4, [pc, #60]	; (8010cb4 <TIM_OC3_SetConfig+0x7c>)
 8010c76:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8010c78:	68cb      	ldr	r3, [r1, #12]
 8010c7a:	021b      	lsls	r3, r3, #8
 8010c7c:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8010c7e:	4c0e      	ldr	r4, [pc, #56]	; (8010cb8 <TIM_OC3_SetConfig+0x80>)
 8010c80:	4023      	ands	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010c82:	4c0e      	ldr	r4, [pc, #56]	; (8010cbc <TIM_OC3_SetConfig+0x84>)
 8010c84:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8010c86:	698a      	ldr	r2, [r1, #24]
 8010c88:	694e      	ldr	r6, [r1, #20]
 8010c8a:	4332      	orrs	r2, r6
 8010c8c:	0112      	lsls	r2, r2, #4
 8010c8e:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c90:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010c92:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010c94:	684a      	ldr	r2, [r1, #4]
 8010c96:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c98:	6203      	str	r3, [r0, #32]
}
 8010c9a:	bd70      	pop	{r4, r5, r6, pc}
 8010c9c:	fffffeff 	.word	0xfffffeff
 8010ca0:	fffffdff 	.word	0xfffffdff
 8010ca4:	40012c00 	.word	0x40012c00
 8010ca8:	40014000 	.word	0x40014000
 8010cac:	40014400 	.word	0x40014400
 8010cb0:	40014800 	.word	0x40014800
 8010cb4:	fffff7ff 	.word	0xfffff7ff
 8010cb8:	fffffbff 	.word	0xfffffbff
 8010cbc:	ffffcfff 	.word	0xffffcfff

08010cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010cc0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010cc2:	6a03      	ldr	r3, [r0, #32]
 8010cc4:	4a13      	ldr	r2, [pc, #76]	; (8010d14 <TIM_OC4_SetConfig+0x54>)
 8010cc6:	4013      	ands	r3, r2
 8010cc8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010cca:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ccc:	6843      	ldr	r3, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010cce:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010cd0:	4d11      	ldr	r5, [pc, #68]	; (8010d18 <TIM_OC4_SetConfig+0x58>)
 8010cd2:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8010cd4:	680d      	ldr	r5, [r1, #0]
 8010cd6:	022d      	lsls	r5, r5, #8
 8010cd8:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010cda:	4d10      	ldr	r5, [pc, #64]	; (8010d1c <TIM_OC4_SetConfig+0x5c>)
 8010cdc:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8010cde:	688a      	ldr	r2, [r1, #8]
 8010ce0:	0312      	lsls	r2, r2, #12
 8010ce2:	432a      	orrs	r2, r5

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8010ce4:	4d0e      	ldr	r5, [pc, #56]	; (8010d20 <TIM_OC4_SetConfig+0x60>)
 8010ce6:	42a8      	cmp	r0, r5
 8010ce8:	d008      	beq.n	8010cfc <TIM_OC4_SetConfig+0x3c>
 8010cea:	4d0e      	ldr	r5, [pc, #56]	; (8010d24 <TIM_OC4_SetConfig+0x64>)
 8010cec:	42a8      	cmp	r0, r5
 8010cee:	d005      	beq.n	8010cfc <TIM_OC4_SetConfig+0x3c>
 8010cf0:	4d0d      	ldr	r5, [pc, #52]	; (8010d28 <TIM_OC4_SetConfig+0x68>)
 8010cf2:	42a8      	cmp	r0, r5
 8010cf4:	d002      	beq.n	8010cfc <TIM_OC4_SetConfig+0x3c>
 8010cf6:	4d0d      	ldr	r5, [pc, #52]	; (8010d2c <TIM_OC4_SetConfig+0x6c>)
 8010cf8:	42a8      	cmp	r0, r5
 8010cfa:	d104      	bne.n	8010d06 <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010cfc:	4d0c      	ldr	r5, [pc, #48]	; (8010d30 <TIM_OC4_SetConfig+0x70>)
 8010cfe:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8010d00:	694d      	ldr	r5, [r1, #20]
 8010d02:	01ad      	lsls	r5, r5, #6
 8010d04:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d06:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010d08:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010d0a:	684b      	ldr	r3, [r1, #4]
 8010d0c:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d0e:	6202      	str	r2, [r0, #32]
}
 8010d10:	bd30      	pop	{r4, r5, pc}
 8010d12:	46c0      	nop			; (mov r8, r8)
 8010d14:	ffffefff 	.word	0xffffefff
 8010d18:	ffff8cff 	.word	0xffff8cff
 8010d1c:	ffffdfff 	.word	0xffffdfff
 8010d20:	40012c00 	.word	0x40012c00
 8010d24:	40014000 	.word	0x40014000
 8010d28:	40014400 	.word	0x40014400
 8010d2c:	40014800 	.word	0x40014800
 8010d30:	ffffbfff 	.word	0xffffbfff

08010d34 <HAL_TIM_Base_MspInit>:
}
 8010d34:	4770      	bx	lr

08010d36 <HAL_TIM_Base_Start>:
{
 8010d36:	b510      	push	{r4, lr}
  htim->State= HAL_TIM_STATE_BUSY;
 8010d38:	2239      	movs	r2, #57	; 0x39
 8010d3a:	2302      	movs	r3, #2
 8010d3c:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8010d3e:	6804      	ldr	r4, [r0, #0]
 8010d40:	6823      	ldr	r3, [r4, #0]
 8010d42:	2101      	movs	r1, #1
 8010d44:	430b      	orrs	r3, r1
 8010d46:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 8010d48:	5481      	strb	r1, [r0, r2]
}
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	bd10      	pop	{r4, pc}
	...

08010d50 <HAL_TIM_Base_Stop>:
  htim->State= HAL_TIM_STATE_BUSY;
 8010d50:	2339      	movs	r3, #57	; 0x39
 8010d52:	2202      	movs	r2, #2
 8010d54:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 8010d56:	6803      	ldr	r3, [r0, #0]
 8010d58:	6a19      	ldr	r1, [r3, #32]
 8010d5a:	4a08      	ldr	r2, [pc, #32]	; (8010d7c <HAL_TIM_Base_Stop+0x2c>)
 8010d5c:	4211      	tst	r1, r2
 8010d5e:	d107      	bne.n	8010d70 <HAL_TIM_Base_Stop+0x20>
 8010d60:	6a19      	ldr	r1, [r3, #32]
 8010d62:	4a07      	ldr	r2, [pc, #28]	; (8010d80 <HAL_TIM_Base_Stop+0x30>)
 8010d64:	4211      	tst	r1, r2
 8010d66:	d103      	bne.n	8010d70 <HAL_TIM_Base_Stop+0x20>
 8010d68:	681a      	ldr	r2, [r3, #0]
 8010d6a:	2101      	movs	r1, #1
 8010d6c:	438a      	bics	r2, r1
 8010d6e:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8010d70:	2339      	movs	r3, #57	; 0x39
 8010d72:	2201      	movs	r2, #1
 8010d74:	54c2      	strb	r2, [r0, r3]
}
 8010d76:	2000      	movs	r0, #0
 8010d78:	4770      	bx	lr
 8010d7a:	46c0      	nop			; (mov r8, r8)
 8010d7c:	00001111 	.word	0x00001111
 8010d80:	00000444 	.word	0x00000444

08010d84 <HAL_TIM_PWM_MspInit>:
}
 8010d84:	4770      	bx	lr
	...

08010d88 <HAL_TIM_ConfigClockSource>:
{
 8010d88:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8010d8a:	2338      	movs	r3, #56	; 0x38
 8010d8c:	5cc3      	ldrb	r3, [r0, r3]
 8010d8e:	2b01      	cmp	r3, #1
 8010d90:	d100      	bne.n	8010d94 <HAL_TIM_ConfigClockSource+0xc>
 8010d92:	e0cb      	b.n	8010f2c <HAL_TIM_ConfigClockSource+0x1a4>
 8010d94:	2338      	movs	r3, #56	; 0x38
 8010d96:	2201      	movs	r2, #1
 8010d98:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8010d9a:	3301      	adds	r3, #1
 8010d9c:	3201      	adds	r2, #1
 8010d9e:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8010da0:	6802      	ldr	r2, [r0, #0]
 8010da2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010da4:	4c62      	ldr	r4, [pc, #392]	; (8010f30 <HAL_TIM_ConfigClockSource+0x1a8>)
 8010da6:	4023      	ands	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 8010da8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8010daa:	680b      	ldr	r3, [r1, #0]
 8010dac:	2b40      	cmp	r3, #64	; 0x40
 8010dae:	d100      	bne.n	8010db2 <HAL_TIM_ConfigClockSource+0x2a>
 8010db0:	e092      	b.n	8010ed8 <HAL_TIM_ConfigClockSource+0x150>
 8010db2:	d922      	bls.n	8010dfa <HAL_TIM_ConfigClockSource+0x72>
 8010db4:	2b70      	cmp	r3, #112	; 0x70
 8010db6:	d063      	beq.n	8010e80 <HAL_TIM_ConfigClockSource+0xf8>
 8010db8:	d83a      	bhi.n	8010e30 <HAL_TIM_ConfigClockSource+0xa8>
 8010dba:	2b50      	cmp	r3, #80	; 0x50
 8010dbc:	d100      	bne.n	8010dc0 <HAL_TIM_ConfigClockSource+0x38>
 8010dbe:	e071      	b.n	8010ea4 <HAL_TIM_ConfigClockSource+0x11c>
 8010dc0:	2b60      	cmp	r3, #96	; 0x60
 8010dc2:	d155      	bne.n	8010e70 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010dc4:	6803      	ldr	r3, [r0, #0]
 8010dc6:	684a      	ldr	r2, [r1, #4]
 8010dc8:	68c9      	ldr	r1, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010dca:	6a1c      	ldr	r4, [r3, #32]
 8010dcc:	2510      	movs	r5, #16
 8010dce:	43ac      	bics	r4, r5
 8010dd0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010dd2:	699d      	ldr	r5, [r3, #24]
  tmpccer = TIMx->CCER;
 8010dd4:	6a1c      	ldr	r4, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010dd6:	4e57      	ldr	r6, [pc, #348]	; (8010f34 <HAL_TIM_ConfigClockSource+0x1ac>)
 8010dd8:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12);
 8010dda:	0309      	lsls	r1, r1, #12
 8010ddc:	4329      	orrs	r1, r5

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010dde:	25a0      	movs	r5, #160	; 0xa0
 8010de0:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4);
 8010de2:	0112      	lsls	r2, r2, #4
 8010de4:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010de6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8010de8:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010dea:	6802      	ldr	r2, [r0, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8010dec:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8010dee:	2170      	movs	r1, #112	; 0x70
 8010df0:	438b      	bics	r3, r1
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8010df2:	3909      	subs	r1, #9
 8010df4:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8010df6:	6093      	str	r3, [r2, #8]
 8010df8:	e03a      	b.n	8010e70 <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 8010dfa:	2b10      	cmp	r3, #16
 8010dfc:	d100      	bne.n	8010e00 <HAL_TIM_ConfigClockSource+0x78>
 8010dfe:	e085      	b.n	8010f0c <HAL_TIM_ConfigClockSource+0x184>
 8010e00:	d90c      	bls.n	8010e1c <HAL_TIM_ConfigClockSource+0x94>
 8010e02:	2b20      	cmp	r3, #32
 8010e04:	d100      	bne.n	8010e08 <HAL_TIM_ConfigClockSource+0x80>
 8010e06:	e089      	b.n	8010f1c <HAL_TIM_ConfigClockSource+0x194>
 8010e08:	2b30      	cmp	r3, #48	; 0x30
 8010e0a:	d131      	bne.n	8010e70 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8010e0c:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 8010e0e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8010e10:	2170      	movs	r1, #112	; 0x70
 8010e12:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8010e14:	3939      	subs	r1, #57	; 0x39
 8010e16:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8010e18:	6093      	str	r3, [r2, #8]
 8010e1a:	e029      	b.n	8010e70 <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d127      	bne.n	8010e70 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8010e20:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 8010e22:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8010e24:	2170      	movs	r1, #112	; 0x70
 8010e26:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8010e28:	3969      	subs	r1, #105	; 0x69
 8010e2a:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8010e2c:	6093      	str	r3, [r2, #8]
 8010e2e:	e01f      	b.n	8010e70 <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 8010e30:	2280      	movs	r2, #128	; 0x80
 8010e32:	0152      	lsls	r2, r2, #5
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d016      	beq.n	8010e66 <HAL_TIM_ConfigClockSource+0xde>
 8010e38:	2280      	movs	r2, #128	; 0x80
 8010e3a:	0192      	lsls	r2, r2, #6
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d117      	bne.n	8010e70 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ETR_SetConfig(htim->Instance,
 8010e40:	6804      	ldr	r4, [r0, #0]
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8010e42:	68a3      	ldr	r3, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010e44:	4a3c      	ldr	r2, [pc, #240]	; (8010f38 <HAL_TIM_ConfigClockSource+0x1b0>)
 8010e46:	401a      	ands	r2, r3

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8010e48:	688b      	ldr	r3, [r1, #8]
 8010e4a:	684d      	ldr	r5, [r1, #4]
 8010e4c:	432b      	orrs	r3, r5
 8010e4e:	68c9      	ldr	r1, [r1, #12]
 8010e50:	0209      	lsls	r1, r1, #8
 8010e52:	430b      	orrs	r3, r1
 8010e54:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010e56:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010e58:	6802      	ldr	r2, [r0, #0]
 8010e5a:	6891      	ldr	r1, [r2, #8]
 8010e5c:	2380      	movs	r3, #128	; 0x80
 8010e5e:	01db      	lsls	r3, r3, #7
 8010e60:	430b      	orrs	r3, r1
 8010e62:	6093      	str	r3, [r2, #8]
    break;
 8010e64:	e004      	b.n	8010e70 <HAL_TIM_ConfigClockSource+0xe8>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8010e66:	6802      	ldr	r2, [r0, #0]
 8010e68:	6893      	ldr	r3, [r2, #8]
 8010e6a:	2107      	movs	r1, #7
 8010e6c:	438b      	bics	r3, r1
 8010e6e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8010e70:	2339      	movs	r3, #57	; 0x39
 8010e72:	2201      	movs	r2, #1
 8010e74:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8010e76:	3b01      	subs	r3, #1
 8010e78:	2200      	movs	r2, #0
 8010e7a:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8010e7c:	2000      	movs	r0, #0
}
 8010e7e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8010e80:	6804      	ldr	r4, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 8010e82:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010e84:	4a2c      	ldr	r2, [pc, #176]	; (8010f38 <HAL_TIM_ConfigClockSource+0x1b0>)
 8010e86:	401a      	ands	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8010e88:	688b      	ldr	r3, [r1, #8]
 8010e8a:	684d      	ldr	r5, [r1, #4]
 8010e8c:	432b      	orrs	r3, r5
 8010e8e:	68c9      	ldr	r1, [r1, #12]
 8010e90:	0209      	lsls	r1, r1, #8
 8010e92:	430b      	orrs	r3, r1
 8010e94:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8010e96:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8010e98:	6802      	ldr	r2, [r0, #0]
 8010e9a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010e9c:	2177      	movs	r1, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010e9e:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8010ea0:	6093      	str	r3, [r2, #8]
    break;
 8010ea2:	e7e5      	b.n	8010e70 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ea4:	6803      	ldr	r3, [r0, #0]
 8010ea6:	684c      	ldr	r4, [r1, #4]
 8010ea8:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8010eaa:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010eac:	6a1d      	ldr	r5, [r3, #32]
 8010eae:	2601      	movs	r6, #1
 8010eb0:	43b5      	bics	r5, r6
 8010eb2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010eb4:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010eb6:	36ef      	adds	r6, #239	; 0xef
 8010eb8:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 8010eba:	0112      	lsls	r2, r2, #4
 8010ebc:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010ebe:	250a      	movs	r5, #10
 8010ec0:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8010ec2:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8010ec4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010ec6:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010ec8:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 8010eca:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8010ecc:	2170      	movs	r1, #112	; 0x70
 8010ece:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8010ed0:	3919      	subs	r1, #25
 8010ed2:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8010ed4:	6093      	str	r3, [r2, #8]
 8010ed6:	e7cb      	b.n	8010e70 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ed8:	6803      	ldr	r3, [r0, #0]
 8010eda:	684c      	ldr	r4, [r1, #4]
 8010edc:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8010ede:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ee0:	6a1d      	ldr	r5, [r3, #32]
 8010ee2:	2601      	movs	r6, #1
 8010ee4:	43b5      	bics	r5, r6
 8010ee6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010ee8:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010eea:	36ef      	adds	r6, #239	; 0xef
 8010eec:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 8010eee:	0112      	lsls	r2, r2, #4
 8010ef0:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010ef2:	250a      	movs	r5, #10
 8010ef4:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8010ef6:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8010ef8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010efa:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010efc:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 8010efe:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8010f00:	2170      	movs	r1, #112	; 0x70
 8010f02:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8010f04:	3929      	subs	r1, #41	; 0x29
 8010f06:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8010f08:	6093      	str	r3, [r2, #8]
 8010f0a:	e7b1      	b.n	8010e70 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8010f0c:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 8010f0e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8010f10:	2170      	movs	r1, #112	; 0x70
 8010f12:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8010f14:	3959      	subs	r1, #89	; 0x59
 8010f16:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8010f18:	6093      	str	r3, [r2, #8]
 8010f1a:	e7a9      	b.n	8010e70 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8010f1c:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 8010f1e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8010f20:	2170      	movs	r1, #112	; 0x70
 8010f22:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8010f24:	3949      	subs	r1, #73	; 0x49
 8010f26:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8010f28:	6093      	str	r3, [r2, #8]
 8010f2a:	e7a1      	b.n	8010e70 <HAL_TIM_ConfigClockSource+0xe8>
  __HAL_LOCK(htim);
 8010f2c:	2002      	movs	r0, #2
 8010f2e:	e7a6      	b.n	8010e7e <HAL_TIM_ConfigClockSource+0xf6>
 8010f30:	ffff0088 	.word	0xffff0088
 8010f34:	ffff0fff 	.word	0xffff0fff
 8010f38:	ffff00ff 	.word	0xffff00ff

08010f3c <HAL_TIM_PeriodElapsedCallback>:
}
 8010f3c:	4770      	bx	lr

08010f3e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8010f3e:	4770      	bx	lr

08010f40 <HAL_TIM_IC_CaptureCallback>:
}
 8010f40:	4770      	bx	lr

08010f42 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8010f42:	4770      	bx	lr

08010f44 <HAL_TIM_TriggerCallback>:
}
 8010f44:	4770      	bx	lr

08010f46 <HAL_TIM_IRQHandler>:
{
 8010f46:	b510      	push	{r4, lr}
 8010f48:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010f4a:	6803      	ldr	r3, [r0, #0]
 8010f4c:	691a      	ldr	r2, [r3, #16]
 8010f4e:	0792      	lsls	r2, r2, #30
 8010f50:	d50f      	bpl.n	8010f72 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8010f52:	68da      	ldr	r2, [r3, #12]
 8010f54:	0792      	lsls	r2, r2, #30
 8010f56:	d50c      	bpl.n	8010f72 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010f58:	2203      	movs	r2, #3
 8010f5a:	4252      	negs	r2, r2
 8010f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f5e:	2301      	movs	r3, #1
 8010f60:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8010f62:	6803      	ldr	r3, [r0, #0]
 8010f64:	699b      	ldr	r3, [r3, #24]
 8010f66:	079b      	lsls	r3, r3, #30
 8010f68:	d063      	beq.n	8011032 <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 8010f6a:	f7ff ffe9 	bl	8010f40 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010f72:	6823      	ldr	r3, [r4, #0]
 8010f74:	691a      	ldr	r2, [r3, #16]
 8010f76:	0752      	lsls	r2, r2, #29
 8010f78:	d512      	bpl.n	8010fa0 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8010f7a:	68da      	ldr	r2, [r3, #12]
 8010f7c:	0752      	lsls	r2, r2, #29
 8010f7e:	d50f      	bpl.n	8010fa0 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010f80:	2205      	movs	r2, #5
 8010f82:	4252      	negs	r2, r2
 8010f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f86:	2302      	movs	r3, #2
 8010f88:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8010f8a:	6823      	ldr	r3, [r4, #0]
 8010f8c:	699a      	ldr	r2, [r3, #24]
 8010f8e:	23c0      	movs	r3, #192	; 0xc0
 8010f90:	009b      	lsls	r3, r3, #2
 8010f92:	421a      	tst	r2, r3
 8010f94:	d053      	beq.n	801103e <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8010f96:	0020      	movs	r0, r4
 8010f98:	f7ff ffd2 	bl	8010f40 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010fa0:	6823      	ldr	r3, [r4, #0]
 8010fa2:	691a      	ldr	r2, [r3, #16]
 8010fa4:	0712      	lsls	r2, r2, #28
 8010fa6:	d510      	bpl.n	8010fca <HAL_TIM_IRQHandler+0x84>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8010fa8:	68da      	ldr	r2, [r3, #12]
 8010faa:	0712      	lsls	r2, r2, #28
 8010fac:	d50d      	bpl.n	8010fca <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010fae:	2209      	movs	r2, #9
 8010fb0:	4252      	negs	r2, r2
 8010fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010fb4:	2304      	movs	r3, #4
 8010fb6:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8010fb8:	6823      	ldr	r3, [r4, #0]
 8010fba:	69db      	ldr	r3, [r3, #28]
 8010fbc:	079b      	lsls	r3, r3, #30
 8010fbe:	d045      	beq.n	801104c <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8010fc0:	0020      	movs	r0, r4
 8010fc2:	f7ff ffbd 	bl	8010f40 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010fca:	6823      	ldr	r3, [r4, #0]
 8010fcc:	691a      	ldr	r2, [r3, #16]
 8010fce:	06d2      	lsls	r2, r2, #27
 8010fd0:	d512      	bpl.n	8010ff8 <HAL_TIM_IRQHandler+0xb2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8010fd2:	68da      	ldr	r2, [r3, #12]
 8010fd4:	06d2      	lsls	r2, r2, #27
 8010fd6:	d50f      	bpl.n	8010ff8 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010fd8:	2211      	movs	r2, #17
 8010fda:	4252      	negs	r2, r2
 8010fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010fde:	2308      	movs	r3, #8
 8010fe0:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8010fe2:	6823      	ldr	r3, [r4, #0]
 8010fe4:	69da      	ldr	r2, [r3, #28]
 8010fe6:	23c0      	movs	r3, #192	; 0xc0
 8010fe8:	009b      	lsls	r3, r3, #2
 8010fea:	421a      	tst	r2, r3
 8010fec:	d035      	beq.n	801105a <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8010fee:	0020      	movs	r0, r4
 8010ff0:	f7ff ffa6 	bl	8010f40 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010ff8:	6823      	ldr	r3, [r4, #0]
 8010ffa:	691a      	ldr	r2, [r3, #16]
 8010ffc:	07d2      	lsls	r2, r2, #31
 8010ffe:	d502      	bpl.n	8011006 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8011000:	68da      	ldr	r2, [r3, #12]
 8011002:	07d2      	lsls	r2, r2, #31
 8011004:	d430      	bmi.n	8011068 <HAL_TIM_IRQHandler+0x122>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011006:	6823      	ldr	r3, [r4, #0]
 8011008:	691a      	ldr	r2, [r3, #16]
 801100a:	0612      	lsls	r2, r2, #24
 801100c:	d502      	bpl.n	8011014 <HAL_TIM_IRQHandler+0xce>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 801100e:	68da      	ldr	r2, [r3, #12]
 8011010:	0612      	lsls	r2, r2, #24
 8011012:	d430      	bmi.n	8011076 <HAL_TIM_IRQHandler+0x130>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011014:	6823      	ldr	r3, [r4, #0]
 8011016:	691a      	ldr	r2, [r3, #16]
 8011018:	0652      	lsls	r2, r2, #25
 801101a:	d502      	bpl.n	8011022 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 801101c:	68da      	ldr	r2, [r3, #12]
 801101e:	0652      	lsls	r2, r2, #25
 8011020:	d430      	bmi.n	8011084 <HAL_TIM_IRQHandler+0x13e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011022:	6823      	ldr	r3, [r4, #0]
 8011024:	691a      	ldr	r2, [r3, #16]
 8011026:	0692      	lsls	r2, r2, #26
 8011028:	d502      	bpl.n	8011030 <HAL_TIM_IRQHandler+0xea>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 801102a:	68da      	ldr	r2, [r3, #12]
 801102c:	0692      	lsls	r2, r2, #26
 801102e:	d430      	bmi.n	8011092 <HAL_TIM_IRQHandler+0x14c>
}
 8011030:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011032:	f7ff ff84 	bl	8010f3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011036:	0020      	movs	r0, r4
 8011038:	f7ff ff83 	bl	8010f42 <HAL_TIM_PWM_PulseFinishedCallback>
 801103c:	e797      	b.n	8010f6e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801103e:	0020      	movs	r0, r4
 8011040:	f7ff ff7d 	bl	8010f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011044:	0020      	movs	r0, r4
 8011046:	f7ff ff7c 	bl	8010f42 <HAL_TIM_PWM_PulseFinishedCallback>
 801104a:	e7a7      	b.n	8010f9c <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801104c:	0020      	movs	r0, r4
 801104e:	f7ff ff76 	bl	8010f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011052:	0020      	movs	r0, r4
 8011054:	f7ff ff75 	bl	8010f42 <HAL_TIM_PWM_PulseFinishedCallback>
 8011058:	e7b5      	b.n	8010fc6 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801105a:	0020      	movs	r0, r4
 801105c:	f7ff ff6f 	bl	8010f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011060:	0020      	movs	r0, r4
 8011062:	f7ff ff6e 	bl	8010f42 <HAL_TIM_PWM_PulseFinishedCallback>
 8011066:	e7c5      	b.n	8010ff4 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011068:	2202      	movs	r2, #2
 801106a:	4252      	negs	r2, r2
 801106c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801106e:	0020      	movs	r0, r4
 8011070:	f7ff ff64 	bl	8010f3c <HAL_TIM_PeriodElapsedCallback>
 8011074:	e7c7      	b.n	8011006 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011076:	2281      	movs	r2, #129	; 0x81
 8011078:	4252      	negs	r2, r2
 801107a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801107c:	0020      	movs	r0, r4
 801107e:	f000 f9d0 	bl	8011422 <HAL_TIMEx_BreakCallback>
 8011082:	e7c7      	b.n	8011014 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011084:	2241      	movs	r2, #65	; 0x41
 8011086:	4252      	negs	r2, r2
 8011088:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801108a:	0020      	movs	r0, r4
 801108c:	f7ff ff5a 	bl	8010f44 <HAL_TIM_TriggerCallback>
 8011090:	e7c7      	b.n	8011022 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011092:	2221      	movs	r2, #33	; 0x21
 8011094:	4252      	negs	r2, r2
 8011096:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8011098:	0020      	movs	r0, r4
 801109a:	f000 f9c1 	bl	8011420 <HAL_TIMEx_CommutationCallback>
}
 801109e:	e7c7      	b.n	8011030 <HAL_TIM_IRQHandler+0xea>

080110a0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80110a0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80110a2:	4a36      	ldr	r2, [pc, #216]	; (801117c <TIM_Base_SetConfig+0xdc>)
 80110a4:	4290      	cmp	r0, r2
 80110a6:	d022      	beq.n	80110ee <TIM_Base_SetConfig+0x4e>
 80110a8:	2280      	movs	r2, #128	; 0x80
 80110aa:	05d2      	lsls	r2, r2, #23
 80110ac:	4290      	cmp	r0, r2
 80110ae:	d014      	beq.n	80110da <TIM_Base_SetConfig+0x3a>
 80110b0:	4a33      	ldr	r2, [pc, #204]	; (8011180 <TIM_Base_SetConfig+0xe0>)
 80110b2:	4290      	cmp	r0, r2
 80110b4:	d016      	beq.n	80110e4 <TIM_Base_SetConfig+0x44>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80110b6:	4a33      	ldr	r2, [pc, #204]	; (8011184 <TIM_Base_SetConfig+0xe4>)
 80110b8:	4290      	cmp	r0, r2
 80110ba:	d040      	beq.n	801113e <TIM_Base_SetConfig+0x9e>
 80110bc:	4a32      	ldr	r2, [pc, #200]	; (8011188 <TIM_Base_SetConfig+0xe8>)
 80110be:	4290      	cmp	r0, r2
 80110c0:	d047      	beq.n	8011152 <TIM_Base_SetConfig+0xb2>
 80110c2:	4a32      	ldr	r2, [pc, #200]	; (801118c <TIM_Base_SetConfig+0xec>)
 80110c4:	4290      	cmp	r0, r2
 80110c6:	d04e      	beq.n	8011166 <TIM_Base_SetConfig+0xc6>
 80110c8:	4a31      	ldr	r2, [pc, #196]	; (8011190 <TIM_Base_SetConfig+0xf0>)
 80110ca:	4290      	cmp	r0, r2
 80110cc:	d02d      	beq.n	801112a <TIM_Base_SetConfig+0x8a>
  TIMx->CR1 = tmpcr1;
 80110ce:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80110d0:	688b      	ldr	r3, [r1, #8]
 80110d2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80110d4:	680b      	ldr	r3, [r1, #0]
 80110d6:	6283      	str	r3, [r0, #40]	; 0x28
 80110d8:	e024      	b.n	8011124 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80110da:	2270      	movs	r2, #112	; 0x70
 80110dc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80110de:	684a      	ldr	r2, [r1, #4]
 80110e0:	4313      	orrs	r3, r2
 80110e2:	e008      	b.n	80110f6 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80110e4:	2270      	movs	r2, #112	; 0x70
 80110e6:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80110e8:	684a      	ldr	r2, [r1, #4]
 80110ea:	4313      	orrs	r3, r2
 80110ec:	e003      	b.n	80110f6 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80110ee:	2270      	movs	r2, #112	; 0x70
 80110f0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80110f2:	684a      	ldr	r2, [r1, #4]
 80110f4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80110f6:	4a27      	ldr	r2, [pc, #156]	; (8011194 <TIM_Base_SetConfig+0xf4>)
 80110f8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80110fa:	68ca      	ldr	r2, [r1, #12]
 80110fc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80110fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011100:	688b      	ldr	r3, [r1, #8]
 8011102:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011104:	680b      	ldr	r3, [r1, #0]
 8011106:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011108:	4b1c      	ldr	r3, [pc, #112]	; (801117c <TIM_Base_SetConfig+0xdc>)
 801110a:	4298      	cmp	r0, r3
 801110c:	d008      	beq.n	8011120 <TIM_Base_SetConfig+0x80>
 801110e:	4b1e      	ldr	r3, [pc, #120]	; (8011188 <TIM_Base_SetConfig+0xe8>)
 8011110:	4298      	cmp	r0, r3
 8011112:	d005      	beq.n	8011120 <TIM_Base_SetConfig+0x80>
 8011114:	4b1d      	ldr	r3, [pc, #116]	; (801118c <TIM_Base_SetConfig+0xec>)
 8011116:	4298      	cmp	r0, r3
 8011118:	d002      	beq.n	8011120 <TIM_Base_SetConfig+0x80>
 801111a:	4b1d      	ldr	r3, [pc, #116]	; (8011190 <TIM_Base_SetConfig+0xf0>)
 801111c:	4298      	cmp	r0, r3
 801111e:	d101      	bne.n	8011124 <TIM_Base_SetConfig+0x84>
    TIMx->RCR = Structure->RepetitionCounter;
 8011120:	690b      	ldr	r3, [r1, #16]
 8011122:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8011124:	2301      	movs	r3, #1
 8011126:	6143      	str	r3, [r0, #20]
}
 8011128:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 801112a:	4a1a      	ldr	r2, [pc, #104]	; (8011194 <TIM_Base_SetConfig+0xf4>)
 801112c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801112e:	68ca      	ldr	r2, [r1, #12]
 8011130:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011132:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011134:	688b      	ldr	r3, [r1, #8]
 8011136:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011138:	680b      	ldr	r3, [r1, #0]
 801113a:	6283      	str	r3, [r0, #40]	; 0x28
 801113c:	e7f0      	b.n	8011120 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 801113e:	4a15      	ldr	r2, [pc, #84]	; (8011194 <TIM_Base_SetConfig+0xf4>)
 8011140:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011142:	68ca      	ldr	r2, [r1, #12]
 8011144:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011146:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011148:	688b      	ldr	r3, [r1, #8]
 801114a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801114c:	680b      	ldr	r3, [r1, #0]
 801114e:	6283      	str	r3, [r0, #40]	; 0x28
 8011150:	e7e8      	b.n	8011124 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011152:	4a10      	ldr	r2, [pc, #64]	; (8011194 <TIM_Base_SetConfig+0xf4>)
 8011154:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011156:	68ca      	ldr	r2, [r1, #12]
 8011158:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801115a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801115c:	688b      	ldr	r3, [r1, #8]
 801115e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011160:	680b      	ldr	r3, [r1, #0]
 8011162:	6283      	str	r3, [r0, #40]	; 0x28
 8011164:	e7dc      	b.n	8011120 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011166:	4a0b      	ldr	r2, [pc, #44]	; (8011194 <TIM_Base_SetConfig+0xf4>)
 8011168:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801116a:	68ca      	ldr	r2, [r1, #12]
 801116c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801116e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011170:	688b      	ldr	r3, [r1, #8]
 8011172:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011174:	680b      	ldr	r3, [r1, #0]
 8011176:	6283      	str	r3, [r0, #40]	; 0x28
 8011178:	e7d2      	b.n	8011120 <TIM_Base_SetConfig+0x80>
 801117a:	46c0      	nop			; (mov r8, r8)
 801117c:	40012c00 	.word	0x40012c00
 8011180:	40000400 	.word	0x40000400
 8011184:	40002000 	.word	0x40002000
 8011188:	40014000 	.word	0x40014000
 801118c:	40014400 	.word	0x40014400
 8011190:	40014800 	.word	0x40014800
 8011194:	fffffcff 	.word	0xfffffcff

08011198 <HAL_TIM_Base_Init>:
{
 8011198:	b570      	push	{r4, r5, r6, lr}
 801119a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 801119c:	d014      	beq.n	80111c8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801119e:	2339      	movs	r3, #57	; 0x39
 80111a0:	5cc3      	ldrb	r3, [r0, r3]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d00a      	beq.n	80111bc <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80111a6:	2539      	movs	r5, #57	; 0x39
 80111a8:	2302      	movs	r3, #2
 80111aa:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80111ac:	1d21      	adds	r1, r4, #4
 80111ae:	6820      	ldr	r0, [r4, #0]
 80111b0:	f7ff ff76 	bl	80110a0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80111b4:	2301      	movs	r3, #1
 80111b6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80111b8:	2000      	movs	r0, #0
}
 80111ba:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80111bc:	3338      	adds	r3, #56	; 0x38
 80111be:	2200      	movs	r2, #0
 80111c0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80111c2:	f7ff fdb7 	bl	8010d34 <HAL_TIM_Base_MspInit>
 80111c6:	e7ee      	b.n	80111a6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80111c8:	2001      	movs	r0, #1
 80111ca:	e7f6      	b.n	80111ba <HAL_TIM_Base_Init+0x22>

080111cc <HAL_TIM_PWM_Init>:
{
 80111cc:	b570      	push	{r4, r5, r6, lr}
 80111ce:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80111d0:	d014      	beq.n	80111fc <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80111d2:	2339      	movs	r3, #57	; 0x39
 80111d4:	5cc3      	ldrb	r3, [r0, r3]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d00a      	beq.n	80111f0 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80111da:	2539      	movs	r5, #57	; 0x39
 80111dc:	2302      	movs	r3, #2
 80111de:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80111e0:	1d21      	adds	r1, r4, #4
 80111e2:	6820      	ldr	r0, [r4, #0]
 80111e4:	f7ff ff5c 	bl	80110a0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80111e8:	2301      	movs	r3, #1
 80111ea:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80111ec:	2000      	movs	r0, #0
}
 80111ee:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80111f0:	3338      	adds	r3, #56	; 0x38
 80111f2:	2200      	movs	r2, #0
 80111f4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80111f6:	f7ff fdc5 	bl	8010d84 <HAL_TIM_PWM_MspInit>
 80111fa:	e7ee      	b.n	80111da <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 80111fc:	2001      	movs	r0, #1
 80111fe:	e7f6      	b.n	80111ee <HAL_TIM_PWM_Init+0x22>

08011200 <TIM_OC2_SetConfig>:
{
 8011200:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011202:	6a03      	ldr	r3, [r0, #32]
 8011204:	2210      	movs	r2, #16
 8011206:	4393      	bics	r3, r2
 8011208:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 801120a:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 801120c:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 801120e:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011210:	4c15      	ldr	r4, [pc, #84]	; (8011268 <TIM_OC2_SetConfig+0x68>)
 8011212:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8011214:	680c      	ldr	r4, [r1, #0]
 8011216:	0224      	lsls	r4, r4, #8
 8011218:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 801121a:	2420      	movs	r4, #32
 801121c:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4);
 801121e:	688c      	ldr	r4, [r1, #8]
 8011220:	0124      	lsls	r4, r4, #4
 8011222:	4322      	orrs	r2, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011224:	4c11      	ldr	r4, [pc, #68]	; (801126c <TIM_OC2_SetConfig+0x6c>)
 8011226:	42a0      	cmp	r0, r4
 8011228:	d009      	beq.n	801123e <TIM_OC2_SetConfig+0x3e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 801122a:	4c11      	ldr	r4, [pc, #68]	; (8011270 <TIM_OC2_SetConfig+0x70>)
 801122c:	42a0      	cmp	r0, r4
 801122e:	d00e      	beq.n	801124e <TIM_OC2_SetConfig+0x4e>
 8011230:	4c10      	ldr	r4, [pc, #64]	; (8011274 <TIM_OC2_SetConfig+0x74>)
 8011232:	42a0      	cmp	r0, r4
 8011234:	d00b      	beq.n	801124e <TIM_OC2_SetConfig+0x4e>
 8011236:	4c10      	ldr	r4, [pc, #64]	; (8011278 <TIM_OC2_SetConfig+0x78>)
 8011238:	42a0      	cmp	r0, r4
 801123a:	d10f      	bne.n	801125c <TIM_OC2_SetConfig+0x5c>
 801123c:	e007      	b.n	801124e <TIM_OC2_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC2NP;
 801123e:	2480      	movs	r4, #128	; 0x80
 8011240:	43a2      	bics	r2, r4
 8011242:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8011244:	68ca      	ldr	r2, [r1, #12]
 8011246:	0112      	lsls	r2, r2, #4
 8011248:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 801124a:	2440      	movs	r4, #64	; 0x40
 801124c:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801124e:	4c0b      	ldr	r4, [pc, #44]	; (801127c <TIM_OC2_SetConfig+0x7c>)
 8011250:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8011252:	698b      	ldr	r3, [r1, #24]
 8011254:	694e      	ldr	r6, [r1, #20]
 8011256:	4333      	orrs	r3, r6
 8011258:	009b      	lsls	r3, r3, #2
 801125a:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 801125c:	6043      	str	r3, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 801125e:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8011260:	684b      	ldr	r3, [r1, #4]
 8011262:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8011264:	6202      	str	r2, [r0, #32]
}
 8011266:	bd70      	pop	{r4, r5, r6, pc}
 8011268:	ffff8cff 	.word	0xffff8cff
 801126c:	40012c00 	.word	0x40012c00
 8011270:	40014000 	.word	0x40014000
 8011274:	40014400 	.word	0x40014400
 8011278:	40014800 	.word	0x40014800
 801127c:	fffff3ff 	.word	0xfffff3ff

08011280 <HAL_TIM_PWM_ConfigChannel>:
{
 8011280:	b570      	push	{r4, r5, r6, lr}
 8011282:	0004      	movs	r4, r0
 8011284:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8011286:	2338      	movs	r3, #56	; 0x38
 8011288:	5cc3      	ldrb	r3, [r0, r3]
 801128a:	2b01      	cmp	r3, #1
 801128c:	d069      	beq.n	8011362 <HAL_TIM_PWM_ConfigChannel+0xe2>
 801128e:	2338      	movs	r3, #56	; 0x38
 8011290:	2101      	movs	r1, #1
 8011292:	54c1      	strb	r1, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8011294:	3301      	adds	r3, #1
 8011296:	3101      	adds	r1, #1
 8011298:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 801129a:	2a04      	cmp	r2, #4
 801129c:	d037      	beq.n	801130e <HAL_TIM_PWM_ConfigChannel+0x8e>
 801129e:	d919      	bls.n	80112d4 <HAL_TIM_PWM_ConfigChannel+0x54>
 80112a0:	2a08      	cmp	r2, #8
 80112a2:	d04a      	beq.n	801133a <HAL_TIM_PWM_ConfigChannel+0xba>
 80112a4:	2a0c      	cmp	r2, #12
 80112a6:	d12a      	bne.n	80112fe <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80112a8:	0029      	movs	r1, r5
 80112aa:	6800      	ldr	r0, [r0, #0]
 80112ac:	f7ff fd08 	bl	8010cc0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80112b0:	6822      	ldr	r2, [r4, #0]
 80112b2:	69d1      	ldr	r1, [r2, #28]
 80112b4:	2380      	movs	r3, #128	; 0x80
 80112b6:	011b      	lsls	r3, r3, #4
 80112b8:	430b      	orrs	r3, r1
 80112ba:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80112bc:	6822      	ldr	r2, [r4, #0]
 80112be:	69d3      	ldr	r3, [r2, #28]
 80112c0:	4929      	ldr	r1, [pc, #164]	; (8011368 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 80112c2:	400b      	ands	r3, r1
 80112c4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80112c6:	6822      	ldr	r2, [r4, #0]
 80112c8:	69d1      	ldr	r1, [r2, #28]
 80112ca:	692b      	ldr	r3, [r5, #16]
 80112cc:	021b      	lsls	r3, r3, #8
 80112ce:	430b      	orrs	r3, r1
 80112d0:	61d3      	str	r3, [r2, #28]
    break;
 80112d2:	e014      	b.n	80112fe <HAL_TIM_PWM_ConfigChannel+0x7e>
  switch (Channel)
 80112d4:	2a00      	cmp	r2, #0
 80112d6:	d112      	bne.n	80112fe <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80112d8:	0029      	movs	r1, r5
 80112da:	6800      	ldr	r0, [r0, #0]
 80112dc:	f7ff fc5e 	bl	8010b9c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80112e0:	6822      	ldr	r2, [r4, #0]
 80112e2:	6993      	ldr	r3, [r2, #24]
 80112e4:	2108      	movs	r1, #8
 80112e6:	430b      	orrs	r3, r1
 80112e8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80112ea:	6822      	ldr	r2, [r4, #0]
 80112ec:	6993      	ldr	r3, [r2, #24]
 80112ee:	3904      	subs	r1, #4
 80112f0:	438b      	bics	r3, r1
 80112f2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80112f4:	6822      	ldr	r2, [r4, #0]
 80112f6:	6993      	ldr	r3, [r2, #24]
 80112f8:	6929      	ldr	r1, [r5, #16]
 80112fa:	430b      	orrs	r3, r1
 80112fc:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80112fe:	2339      	movs	r3, #57	; 0x39
 8011300:	2201      	movs	r2, #1
 8011302:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8011304:	3b01      	subs	r3, #1
 8011306:	2200      	movs	r2, #0
 8011308:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 801130a:	2000      	movs	r0, #0
}
 801130c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801130e:	0029      	movs	r1, r5
 8011310:	6800      	ldr	r0, [r0, #0]
 8011312:	f7ff ff75 	bl	8011200 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011316:	6822      	ldr	r2, [r4, #0]
 8011318:	6991      	ldr	r1, [r2, #24]
 801131a:	2380      	movs	r3, #128	; 0x80
 801131c:	011b      	lsls	r3, r3, #4
 801131e:	430b      	orrs	r3, r1
 8011320:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011322:	6822      	ldr	r2, [r4, #0]
 8011324:	6993      	ldr	r3, [r2, #24]
 8011326:	4910      	ldr	r1, [pc, #64]	; (8011368 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8011328:	400b      	ands	r3, r1
 801132a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 801132c:	6822      	ldr	r2, [r4, #0]
 801132e:	6991      	ldr	r1, [r2, #24]
 8011330:	692b      	ldr	r3, [r5, #16]
 8011332:	021b      	lsls	r3, r3, #8
 8011334:	430b      	orrs	r3, r1
 8011336:	6193      	str	r3, [r2, #24]
    break;
 8011338:	e7e1      	b.n	80112fe <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801133a:	0029      	movs	r1, r5
 801133c:	6800      	ldr	r0, [r0, #0]
 801133e:	f7ff fc7b 	bl	8010c38 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011342:	6822      	ldr	r2, [r4, #0]
 8011344:	69d3      	ldr	r3, [r2, #28]
 8011346:	2108      	movs	r1, #8
 8011348:	430b      	orrs	r3, r1
 801134a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801134c:	6822      	ldr	r2, [r4, #0]
 801134e:	69d3      	ldr	r3, [r2, #28]
 8011350:	3904      	subs	r1, #4
 8011352:	438b      	bics	r3, r1
 8011354:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011356:	6822      	ldr	r2, [r4, #0]
 8011358:	69d3      	ldr	r3, [r2, #28]
 801135a:	6929      	ldr	r1, [r5, #16]
 801135c:	430b      	orrs	r3, r1
 801135e:	61d3      	str	r3, [r2, #28]
    break;
 8011360:	e7cd      	b.n	80112fe <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 8011362:	2002      	movs	r0, #2
 8011364:	e7d2      	b.n	801130c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8011366:	46c0      	nop			; (mov r8, r8)
 8011368:	fffffbff 	.word	0xfffffbff

0801136c <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801136c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801136e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8011370:	2401      	movs	r4, #1
 8011372:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8011374:	43a3      	bics	r3, r4
 8011376:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8011378:	6a03      	ldr	r3, [r0, #32]
 801137a:	408a      	lsls	r2, r1
 801137c:	431a      	orrs	r2, r3
 801137e:	6202      	str	r2, [r0, #32]
}
 8011380:	bd10      	pop	{r4, pc}
	...

08011384 <HAL_TIM_PWM_Start>:
{
 8011384:	b510      	push	{r4, lr}
 8011386:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011388:	2201      	movs	r2, #1
 801138a:	6800      	ldr	r0, [r0, #0]
 801138c:	f7ff ffee 	bl	801136c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011390:	6823      	ldr	r3, [r4, #0]
 8011392:	4a0c      	ldr	r2, [pc, #48]	; (80113c4 <HAL_TIM_PWM_Start+0x40>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d008      	beq.n	80113aa <HAL_TIM_PWM_Start+0x26>
 8011398:	4a0b      	ldr	r2, [pc, #44]	; (80113c8 <HAL_TIM_PWM_Start+0x44>)
 801139a:	4293      	cmp	r3, r2
 801139c:	d005      	beq.n	80113aa <HAL_TIM_PWM_Start+0x26>
 801139e:	4a0b      	ldr	r2, [pc, #44]	; (80113cc <HAL_TIM_PWM_Start+0x48>)
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d002      	beq.n	80113aa <HAL_TIM_PWM_Start+0x26>
 80113a4:	4a0a      	ldr	r2, [pc, #40]	; (80113d0 <HAL_TIM_PWM_Start+0x4c>)
 80113a6:	4293      	cmp	r3, r2
 80113a8:	d104      	bne.n	80113b4 <HAL_TIM_PWM_Start+0x30>
    __HAL_TIM_MOE_ENABLE(htim);
 80113aa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80113ac:	2280      	movs	r2, #128	; 0x80
 80113ae:	0212      	lsls	r2, r2, #8
 80113b0:	430a      	orrs	r2, r1
 80113b2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80113b4:	6822      	ldr	r2, [r4, #0]
 80113b6:	6813      	ldr	r3, [r2, #0]
 80113b8:	2101      	movs	r1, #1
 80113ba:	430b      	orrs	r3, r1
 80113bc:	6013      	str	r3, [r2, #0]
}
 80113be:	2000      	movs	r0, #0
 80113c0:	bd10      	pop	{r4, pc}
 80113c2:	46c0      	nop			; (mov r8, r8)
 80113c4:	40012c00 	.word	0x40012c00
 80113c8:	40014000 	.word	0x40014000
 80113cc:	40014400 	.word	0x40014400
 80113d0:	40014800 	.word	0x40014800

080113d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80113d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80113d6:	2338      	movs	r3, #56	; 0x38
 80113d8:	5cc3      	ldrb	r3, [r0, r3]
 80113da:	2b01      	cmp	r3, #1
 80113dc:	d01e      	beq.n	801141c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80113de:	2238      	movs	r2, #56	; 0x38
 80113e0:	2501      	movs	r5, #1
 80113e2:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80113e4:	2439      	movs	r4, #57	; 0x39
 80113e6:	2302      	movs	r3, #2
 80113e8:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80113ea:	6806      	ldr	r6, [r0, #0]
 80113ec:	6873      	ldr	r3, [r6, #4]
 80113ee:	2770      	movs	r7, #112	; 0x70
 80113f0:	43bb      	bics	r3, r7
 80113f2:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80113f4:	6806      	ldr	r6, [r0, #0]
 80113f6:	6873      	ldr	r3, [r6, #4]
 80113f8:	680f      	ldr	r7, [r1, #0]
 80113fa:	433b      	orrs	r3, r7
 80113fc:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80113fe:	6806      	ldr	r6, [r0, #0]
 8011400:	68b3      	ldr	r3, [r6, #8]
 8011402:	2780      	movs	r7, #128	; 0x80
 8011404:	43bb      	bics	r3, r7
 8011406:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011408:	6806      	ldr	r6, [r0, #0]
 801140a:	68b3      	ldr	r3, [r6, #8]
 801140c:	6849      	ldr	r1, [r1, #4]
 801140e:	430b      	orrs	r3, r1
 8011410:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8011412:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8011414:	2300      	movs	r3, #0
 8011416:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8011418:	2000      	movs	r0, #0
}
 801141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 801141c:	2002      	movs	r0, #2
 801141e:	e7fc      	b.n	801141a <HAL_TIMEx_MasterConfigSynchronization+0x46>

08011420 <HAL_TIMEx_CommutationCallback>:
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8011420:	4770      	bx	lr

08011422 <HAL_TIMEx_BreakCallback>:
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011422:	4770      	bx	lr

08011424 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8011424:	4770      	bx	lr

08011426 <HAL_UART_DeInit>:
{
 8011426:	b570      	push	{r4, r5, r6, lr}
 8011428:	0004      	movs	r4, r0
    return HAL_ERROR;
 801142a:	2001      	movs	r0, #1
  if(huart == NULL)
 801142c:	2c00      	cmp	r4, #0
 801142e:	d016      	beq.n	801145e <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8011430:	2669      	movs	r6, #105	; 0x69
 8011432:	2302      	movs	r3, #2
 8011434:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8011436:	6822      	ldr	r2, [r4, #0]
 8011438:	6813      	ldr	r3, [r2, #0]
 801143a:	2101      	movs	r1, #1
 801143c:	438b      	bics	r3, r1
 801143e:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8011440:	6823      	ldr	r3, [r4, #0]
 8011442:	2500      	movs	r5, #0
 8011444:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8011446:	6823      	ldr	r3, [r4, #0]
 8011448:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 801144a:	6823      	ldr	r3, [r4, #0]
 801144c:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 801144e:	0020      	movs	r0, r4
 8011450:	f7ff ffe8 	bl	8011424 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011454:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8011456:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8011458:	2368      	movs	r3, #104	; 0x68
 801145a:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 801145c:	2000      	movs	r0, #0
}
 801145e:	bd70      	pop	{r4, r5, r6, pc}

08011460 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011460:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011462:	2369      	movs	r3, #105	; 0x69
 8011464:	5cc3      	ldrb	r3, [r0, r3]
 8011466:	2b01      	cmp	r3, #1
 8011468:	d004      	beq.n	8011474 <HAL_UART_Transmit_IT+0x14>
 801146a:	2369      	movs	r3, #105	; 0x69
 801146c:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801146e:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011470:	2c22      	cmp	r4, #34	; 0x22
 8011472:	d127      	bne.n	80114c4 <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8011474:	2900      	cmp	r1, #0
 8011476:	d02b      	beq.n	80114d0 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8011478:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 801147a:	2a00      	cmp	r2, #0
 801147c:	d022      	beq.n	80114c4 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 801147e:	3367      	adds	r3, #103	; 0x67
 8011480:	5cc3      	ldrb	r3, [r0, r3]
 8011482:	2b01      	cmp	r3, #1
 8011484:	d026      	beq.n	80114d4 <HAL_UART_Transmit_IT+0x74>
 8011486:	2368      	movs	r3, #104	; 0x68
 8011488:	2401      	movs	r4, #1
 801148a:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 801148c:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 801148e:	3b18      	subs	r3, #24
 8011490:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8011492:	3302      	adds	r3, #2
 8011494:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011496:	2300      	movs	r3, #0
 8011498:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801149a:	3369      	adds	r3, #105	; 0x69
 801149c:	5cc3      	ldrb	r3, [r0, r3]
 801149e:	2b22      	cmp	r3, #34	; 0x22
 80114a0:	d012      	beq.n	80114c8 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80114a2:	2369      	movs	r3, #105	; 0x69
 80114a4:	2212      	movs	r2, #18
 80114a6:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80114a8:	6802      	ldr	r2, [r0, #0]
 80114aa:	6893      	ldr	r3, [r2, #8]
 80114ac:	2101      	movs	r1, #1
 80114ae:	430b      	orrs	r3, r1
 80114b0:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 80114b2:	2368      	movs	r3, #104	; 0x68
 80114b4:	2200      	movs	r2, #0
 80114b6:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80114b8:	6802      	ldr	r2, [r0, #0]
 80114ba:	6813      	ldr	r3, [r2, #0]
 80114bc:	317f      	adds	r1, #127	; 0x7f
 80114be:	430b      	orrs	r3, r1
 80114c0:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80114c2:	2300      	movs	r3, #0
  }
}
 80114c4:	0018      	movs	r0, r3
 80114c6:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80114c8:	3347      	adds	r3, #71	; 0x47
 80114ca:	2232      	movs	r2, #50	; 0x32
 80114cc:	54c2      	strb	r2, [r0, r3]
 80114ce:	e7eb      	b.n	80114a8 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 80114d0:	2301      	movs	r3, #1
 80114d2:	e7f7      	b.n	80114c4 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 80114d4:	2302      	movs	r3, #2
 80114d6:	e7f5      	b.n	80114c4 <HAL_UART_Transmit_IT+0x64>

080114d8 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80114d8:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80114da:	2369      	movs	r3, #105	; 0x69
 80114dc:	5cc3      	ldrb	r3, [r0, r3]
 80114de:	2b01      	cmp	r3, #1
 80114e0:	d004      	beq.n	80114ec <HAL_UART_Receive_IT+0x14>
 80114e2:	2369      	movs	r3, #105	; 0x69
 80114e4:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80114e6:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80114e8:	2c12      	cmp	r4, #18
 80114ea:	d14e      	bne.n	801158a <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 80114ec:	2900      	cmp	r1, #0
 80114ee:	d05d      	beq.n	80115ac <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 80114f0:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 80114f2:	2a00      	cmp	r2, #0
 80114f4:	d049      	beq.n	801158a <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 80114f6:	3367      	adds	r3, #103	; 0x67
 80114f8:	5cc3      	ldrb	r3, [r0, r3]
 80114fa:	2b01      	cmp	r3, #1
 80114fc:	d058      	beq.n	80115b0 <HAL_UART_Receive_IT+0xd8>
 80114fe:	2368      	movs	r3, #104	; 0x68
 8011500:	2401      	movs	r4, #1
 8011502:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 8011504:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8011506:	3b10      	subs	r3, #16
 8011508:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 801150a:	3302      	adds	r3, #2
 801150c:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 801150e:	6883      	ldr	r3, [r0, #8]
 8011510:	2280      	movs	r2, #128	; 0x80
 8011512:	0152      	lsls	r2, r2, #5
 8011514:	4293      	cmp	r3, r2
 8011516:	d008      	beq.n	801152a <HAL_UART_Receive_IT+0x52>
 8011518:	2b00      	cmp	r3, #0
 801151a:	d115      	bne.n	8011548 <HAL_UART_Receive_IT+0x70>
 801151c:	6903      	ldr	r3, [r0, #16]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d10e      	bne.n	8011540 <HAL_UART_Receive_IT+0x68>
 8011522:	335c      	adds	r3, #92	; 0x5c
 8011524:	22ff      	movs	r2, #255	; 0xff
 8011526:	52c2      	strh	r2, [r0, r3]
 8011528:	e012      	b.n	8011550 <HAL_UART_Receive_IT+0x78>
 801152a:	6903      	ldr	r3, [r0, #16]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d103      	bne.n	8011538 <HAL_UART_Receive_IT+0x60>
 8011530:	335c      	adds	r3, #92	; 0x5c
 8011532:	4a20      	ldr	r2, [pc, #128]	; (80115b4 <HAL_UART_Receive_IT+0xdc>)
 8011534:	52c2      	strh	r2, [r0, r3]
 8011536:	e00b      	b.n	8011550 <HAL_UART_Receive_IT+0x78>
 8011538:	235c      	movs	r3, #92	; 0x5c
 801153a:	22ff      	movs	r2, #255	; 0xff
 801153c:	52c2      	strh	r2, [r0, r3]
 801153e:	e007      	b.n	8011550 <HAL_UART_Receive_IT+0x78>
 8011540:	235c      	movs	r3, #92	; 0x5c
 8011542:	227f      	movs	r2, #127	; 0x7f
 8011544:	52c2      	strh	r2, [r0, r3]
 8011546:	e003      	b.n	8011550 <HAL_UART_Receive_IT+0x78>
 8011548:	2280      	movs	r2, #128	; 0x80
 801154a:	0552      	lsls	r2, r2, #21
 801154c:	4293      	cmp	r3, r2
 801154e:	d01e      	beq.n	801158e <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011550:	2300      	movs	r3, #0
 8011552:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011554:	3369      	adds	r3, #105	; 0x69
 8011556:	5cc3      	ldrb	r3, [r0, r3]
 8011558:	2b12      	cmp	r3, #18
 801155a:	d023      	beq.n	80115a4 <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801155c:	2369      	movs	r3, #105	; 0x69
 801155e:	2222      	movs	r2, #34	; 0x22
 8011560:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011562:	6802      	ldr	r2, [r0, #0]
 8011564:	6811      	ldr	r1, [r2, #0]
 8011566:	2380      	movs	r3, #128	; 0x80
 8011568:	005b      	lsls	r3, r3, #1
 801156a:	430b      	orrs	r3, r1
 801156c:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801156e:	6802      	ldr	r2, [r0, #0]
 8011570:	6893      	ldr	r3, [r2, #8]
 8011572:	2101      	movs	r1, #1
 8011574:	430b      	orrs	r3, r1
 8011576:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8011578:	2368      	movs	r3, #104	; 0x68
 801157a:	2200      	movs	r2, #0
 801157c:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801157e:	6802      	ldr	r2, [r0, #0]
 8011580:	6813      	ldr	r3, [r2, #0]
 8011582:	311f      	adds	r1, #31
 8011584:	430b      	orrs	r3, r1
 8011586:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8011588:	2300      	movs	r3, #0
  }
}
 801158a:	0018      	movs	r0, r3
 801158c:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 801158e:	6903      	ldr	r3, [r0, #16]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d103      	bne.n	801159c <HAL_UART_Receive_IT+0xc4>
 8011594:	335c      	adds	r3, #92	; 0x5c
 8011596:	227f      	movs	r2, #127	; 0x7f
 8011598:	52c2      	strh	r2, [r0, r3]
 801159a:	e7d9      	b.n	8011550 <HAL_UART_Receive_IT+0x78>
 801159c:	235c      	movs	r3, #92	; 0x5c
 801159e:	223f      	movs	r2, #63	; 0x3f
 80115a0:	52c2      	strh	r2, [r0, r3]
 80115a2:	e7d5      	b.n	8011550 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80115a4:	3357      	adds	r3, #87	; 0x57
 80115a6:	2232      	movs	r2, #50	; 0x32
 80115a8:	54c2      	strb	r2, [r0, r3]
 80115aa:	e7da      	b.n	8011562 <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 80115ac:	2301      	movs	r3, #1
 80115ae:	e7ec      	b.n	801158a <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 80115b0:	2302      	movs	r3, #2
 80115b2:	e7ea      	b.n	801158a <HAL_UART_Receive_IT+0xb2>
 80115b4:	000001ff 	.word	0x000001ff

080115b8 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80115b8:	b510      	push	{r4, lr}
 80115ba:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80115bc:	2369      	movs	r3, #105	; 0x69
 80115be:	5cc3      	ldrb	r3, [r0, r3]
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	d004      	beq.n	80115ce <HAL_UART_Transmit_DMA+0x16>
 80115c4:	2369      	movs	r3, #105	; 0x69
 80115c6:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80115c8:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80115ca:	2b22      	cmp	r3, #34	; 0x22
 80115cc:	d134      	bne.n	8011638 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 80115ce:	2900      	cmp	r1, #0
 80115d0:	d037      	beq.n	8011642 <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 80115d2:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80115d4:	2a00      	cmp	r2, #0
 80115d6:	d02f      	beq.n	8011638 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 80115d8:	2368      	movs	r3, #104	; 0x68
 80115da:	5ce3      	ldrb	r3, [r4, r3]
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d032      	beq.n	8011646 <HAL_UART_Transmit_DMA+0x8e>
 80115e0:	2368      	movs	r3, #104	; 0x68
 80115e2:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 80115e4:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80115e6:	3b18      	subs	r3, #24
 80115e8:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80115ea:	3302      	adds	r3, #2
 80115ec:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115ee:	2300      	movs	r3, #0
 80115f0:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80115f2:	3369      	adds	r3, #105	; 0x69
 80115f4:	5ce3      	ldrb	r3, [r4, r3]
 80115f6:	2b22      	cmp	r3, #34	; 0x22
 80115f8:	d01f      	beq.n	801163a <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80115fa:	2369      	movs	r3, #105	; 0x69
 80115fc:	2012      	movs	r0, #18
 80115fe:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011600:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011602:	4812      	ldr	r0, [pc, #72]	; (801164c <HAL_UART_Transmit_DMA+0x94>)
 8011604:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011606:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011608:	4811      	ldr	r0, [pc, #68]	; (8011650 <HAL_UART_Transmit_DMA+0x98>)
 801160a:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 801160c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801160e:	4811      	ldr	r0, [pc, #68]	; (8011654 <HAL_UART_Transmit_DMA+0x9c>)
 8011610:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8011612:	6820      	ldr	r0, [r4, #0]
 8011614:	3028      	adds	r0, #40	; 0x28
 8011616:	0013      	movs	r3, r2
 8011618:	0002      	movs	r2, r0
 801161a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801161c:	f7fd fcc4 	bl	800efa8 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011620:	6823      	ldr	r3, [r4, #0]
 8011622:	2240      	movs	r2, #64	; 0x40
 8011624:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8011626:	6822      	ldr	r2, [r4, #0]
 8011628:	6893      	ldr	r3, [r2, #8]
 801162a:	2180      	movs	r1, #128	; 0x80
 801162c:	430b      	orrs	r3, r1
 801162e:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8011630:	2368      	movs	r3, #104	; 0x68
 8011632:	2200      	movs	r2, #0
 8011634:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8011636:	2000      	movs	r0, #0
  }
}
 8011638:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801163a:	3347      	adds	r3, #71	; 0x47
 801163c:	3031      	adds	r0, #49	; 0x31
 801163e:	54e0      	strb	r0, [r4, r3]
 8011640:	e7de      	b.n	8011600 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8011642:	2001      	movs	r0, #1
 8011644:	e7f8      	b.n	8011638 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8011646:	2002      	movs	r0, #2
 8011648:	e7f6      	b.n	8011638 <HAL_UART_Transmit_DMA+0x80>
 801164a:	46c0      	nop			; (mov r8, r8)
 801164c:	080116f1 	.word	0x080116f1
 8011650:	08011723 	.word	0x08011723
 8011654:	08011773 	.word	0x08011773

08011658 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011658:	b510      	push	{r4, lr}
 801165a:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801165c:	2069      	movs	r0, #105	; 0x69
 801165e:	5c20      	ldrb	r0, [r4, r0]
 8011660:	2801      	cmp	r0, #1
 8011662:	d004      	beq.n	801166e <HAL_UART_Receive_DMA+0x16>
 8011664:	2369      	movs	r3, #105	; 0x69
 8011666:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011668:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801166a:	2b12      	cmp	r3, #18
 801166c:	d130      	bne.n	80116d0 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 801166e:	2900      	cmp	r1, #0
 8011670:	d033      	beq.n	80116da <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 8011672:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011674:	2a00      	cmp	r2, #0
 8011676:	d02b      	beq.n	80116d0 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8011678:	2368      	movs	r3, #104	; 0x68
 801167a:	5ce3      	ldrb	r3, [r4, r3]
 801167c:	2b01      	cmp	r3, #1
 801167e:	d02e      	beq.n	80116de <HAL_UART_Receive_DMA+0x86>
 8011680:	2368      	movs	r3, #104	; 0x68
 8011682:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8011684:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8011686:	3b10      	subs	r3, #16
 8011688:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801168a:	2300      	movs	r3, #0
 801168c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801168e:	3369      	adds	r3, #105	; 0x69
 8011690:	5ce3      	ldrb	r3, [r4, r3]
 8011692:	2b12      	cmp	r3, #18
 8011694:	d01d      	beq.n	80116d2 <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011696:	2369      	movs	r3, #105	; 0x69
 8011698:	2022      	movs	r0, #34	; 0x22
 801169a:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801169c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801169e:	4811      	ldr	r0, [pc, #68]	; (80116e4 <HAL_UART_Receive_DMA+0x8c>)
 80116a0:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80116a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116a4:	4810      	ldr	r0, [pc, #64]	; (80116e8 <HAL_UART_Receive_DMA+0x90>)
 80116a6:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80116a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116aa:	4810      	ldr	r0, [pc, #64]	; (80116ec <HAL_UART_Receive_DMA+0x94>)
 80116ac:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80116ae:	6820      	ldr	r0, [r4, #0]
 80116b0:	3024      	adds	r0, #36	; 0x24
 80116b2:	0013      	movs	r3, r2
 80116b4:	000a      	movs	r2, r1
 80116b6:	0001      	movs	r1, r0
 80116b8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80116ba:	f7fd fc75 	bl	800efa8 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80116be:	6822      	ldr	r2, [r4, #0]
 80116c0:	6893      	ldr	r3, [r2, #8]
 80116c2:	2140      	movs	r1, #64	; 0x40
 80116c4:	430b      	orrs	r3, r1
 80116c6:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 80116c8:	2368      	movs	r3, #104	; 0x68
 80116ca:	2200      	movs	r2, #0
 80116cc:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80116ce:	2000      	movs	r0, #0
  }
}
 80116d0:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80116d2:	3357      	adds	r3, #87	; 0x57
 80116d4:	3031      	adds	r0, #49	; 0x31
 80116d6:	54e0      	strb	r0, [r4, r3]
 80116d8:	e7e0      	b.n	801169c <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 80116da:	2001      	movs	r0, #1
 80116dc:	e7f8      	b.n	80116d0 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 80116de:	2002      	movs	r0, #2
 80116e0:	e7f6      	b.n	80116d0 <HAL_UART_Receive_DMA+0x78>
 80116e2:	46c0      	nop			; (mov r8, r8)
 80116e4:	0801172d 	.word	0x0801172d
 80116e8:	08011769 	.word	0x08011769
 80116ec:	08011773 	.word	0x08011773

080116f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80116f0:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80116f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80116f4:	6802      	ldr	r2, [r0, #0]
 80116f6:	6812      	ldr	r2, [r2, #0]
 80116f8:	0692      	lsls	r2, r2, #26
 80116fa:	d40d      	bmi.n	8011718 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 80116fc:	2252      	movs	r2, #82	; 0x52
 80116fe:	2100      	movs	r1, #0
 8011700:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8011702:	6819      	ldr	r1, [r3, #0]
 8011704:	688a      	ldr	r2, [r1, #8]
 8011706:	2080      	movs	r0, #128	; 0x80
 8011708:	4382      	bics	r2, r0
 801170a:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801170c:	681a      	ldr	r2, [r3, #0]
 801170e:	6813      	ldr	r3, [r2, #0]
 8011710:	2140      	movs	r1, #64	; 0x40
 8011712:	430b      	orrs	r3, r1
 8011714:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8011716:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8011718:	0018      	movs	r0, r3
 801171a:	f7fc fafd 	bl	800dd18 <HAL_UART_TxCpltCallback>
}
 801171e:	e7fa      	b.n	8011716 <UART_DMATransmitCplt+0x26>

08011720 <HAL_UART_TxHalfCpltCallback>:
}
 8011720:	4770      	bx	lr

08011722 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011722:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8011724:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011726:	f7ff fffb 	bl	8011720 <HAL_UART_TxHalfCpltCallback>
}
 801172a:	bd10      	pop	{r4, pc}

0801172c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801172c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801172e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011730:	6802      	ldr	r2, [r0, #0]
 8011732:	6812      	ldr	r2, [r2, #0]
 8011734:	0692      	lsls	r2, r2, #26
 8011736:	d40e      	bmi.n	8011756 <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8011738:	225a      	movs	r2, #90	; 0x5a
 801173a:	2100      	movs	r1, #0
 801173c:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 801173e:	6819      	ldr	r1, [r3, #0]
 8011740:	688a      	ldr	r2, [r1, #8]
 8011742:	2040      	movs	r0, #64	; 0x40
 8011744:	4382      	bics	r2, r0
 8011746:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011748:	2269      	movs	r2, #105	; 0x69
 801174a:	5c9a      	ldrb	r2, [r3, r2]
 801174c:	2a32      	cmp	r2, #50	; 0x32
 801174e:	d006      	beq.n	801175e <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8011750:	2269      	movs	r2, #105	; 0x69
 8011752:	2101      	movs	r1, #1
 8011754:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8011756:	0018      	movs	r0, r3
 8011758:	f7fc fb1c 	bl	800dd94 <HAL_UART_RxCpltCallback>
}
 801175c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801175e:	3237      	adds	r2, #55	; 0x37
 8011760:	2112      	movs	r1, #18
 8011762:	5499      	strb	r1, [r3, r2]
 8011764:	e7f7      	b.n	8011756 <UART_DMAReceiveCplt+0x2a>

08011766 <HAL_UART_RxHalfCpltCallback>:
}
 8011766:	4770      	bx	lr

08011768 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011768:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801176a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801176c:	f7ff fffb 	bl	8011766 <HAL_UART_RxHalfCpltCallback>
}
 8011770:	bd10      	pop	{r4, pc}

08011772 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011772:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011774:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8011776:	2300      	movs	r3, #0
 8011778:	225a      	movs	r2, #90	; 0x5a
 801177a:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 801177c:	3a08      	subs	r2, #8
 801177e:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8011780:	3369      	adds	r3, #105	; 0x69
 8011782:	3a51      	subs	r2, #81	; 0x51
 8011784:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011786:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8011788:	320f      	adds	r2, #15
 801178a:	4313      	orrs	r3, r2
 801178c:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 801178e:	f7fc fadb 	bl	800dd48 <HAL_UART_ErrorCallback>
}
 8011792:	bd10      	pop	{r4, pc}

08011794 <UART_SetConfig>:
{
 8011794:	b570      	push	{r4, r5, r6, lr}
 8011796:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8011798:	6801      	ldr	r1, [r0, #0]
 801179a:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801179c:	6883      	ldr	r3, [r0, #8]
 801179e:	6900      	ldr	r0, [r0, #16]
 80117a0:	4303      	orrs	r3, r0
 80117a2:	6960      	ldr	r0, [r4, #20]
 80117a4:	4303      	orrs	r3, r0
 80117a6:	69e0      	ldr	r0, [r4, #28]
 80117a8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80117aa:	487e      	ldr	r0, [pc, #504]	; (80119a4 <UART_SetConfig+0x210>)
 80117ac:	4002      	ands	r2, r0
 80117ae:	4313      	orrs	r3, r2
 80117b0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80117b2:	6822      	ldr	r2, [r4, #0]
 80117b4:	6853      	ldr	r3, [r2, #4]
 80117b6:	497c      	ldr	r1, [pc, #496]	; (80119a8 <UART_SetConfig+0x214>)
 80117b8:	400b      	ands	r3, r1
 80117ba:	68e1      	ldr	r1, [r4, #12]
 80117bc:	430b      	orrs	r3, r1
 80117be:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80117c0:	6821      	ldr	r1, [r4, #0]
 80117c2:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80117c4:	69a3      	ldr	r3, [r4, #24]
 80117c6:	6a20      	ldr	r0, [r4, #32]
 80117c8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80117ca:	4878      	ldr	r0, [pc, #480]	; (80119ac <UART_SetConfig+0x218>)
 80117cc:	4002      	ands	r2, r0
 80117ce:	4313      	orrs	r3, r2
 80117d0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80117d2:	6825      	ldr	r5, [r4, #0]
 80117d4:	4b76      	ldr	r3, [pc, #472]	; (80119b0 <UART_SetConfig+0x21c>)
 80117d6:	429d      	cmp	r5, r3
 80117d8:	d022      	beq.n	8011820 <UART_SetConfig+0x8c>
 80117da:	4b76      	ldr	r3, [pc, #472]	; (80119b4 <UART_SetConfig+0x220>)
 80117dc:	429d      	cmp	r5, r3
 80117de:	d034      	beq.n	801184a <UART_SetConfig+0xb6>
 80117e0:	4b75      	ldr	r3, [pc, #468]	; (80119b8 <UART_SetConfig+0x224>)
 80117e2:	429d      	cmp	r5, r3
 80117e4:	d100      	bne.n	80117e8 <UART_SetConfig+0x54>
 80117e6:	e06b      	b.n	80118c0 <UART_SetConfig+0x12c>
 80117e8:	4b74      	ldr	r3, [pc, #464]	; (80119bc <UART_SetConfig+0x228>)
 80117ea:	429d      	cmp	r5, r3
 80117ec:	d100      	bne.n	80117f0 <UART_SetConfig+0x5c>
 80117ee:	e08e      	b.n	801190e <UART_SetConfig+0x17a>
 80117f0:	4b73      	ldr	r3, [pc, #460]	; (80119c0 <UART_SetConfig+0x22c>)
 80117f2:	429d      	cmp	r5, r3
 80117f4:	d100      	bne.n	80117f8 <UART_SetConfig+0x64>
 80117f6:	e08a      	b.n	801190e <UART_SetConfig+0x17a>
 80117f8:	4b72      	ldr	r3, [pc, #456]	; (80119c4 <UART_SetConfig+0x230>)
 80117fa:	429d      	cmp	r5, r3
 80117fc:	d100      	bne.n	8011800 <UART_SetConfig+0x6c>
 80117fe:	e086      	b.n	801190e <UART_SetConfig+0x17a>
 8011800:	4b71      	ldr	r3, [pc, #452]	; (80119c8 <UART_SetConfig+0x234>)
 8011802:	429d      	cmp	r5, r3
 8011804:	d100      	bne.n	8011808 <UART_SetConfig+0x74>
 8011806:	e082      	b.n	801190e <UART_SetConfig+0x17a>
 8011808:	4b70      	ldr	r3, [pc, #448]	; (80119cc <UART_SetConfig+0x238>)
 801180a:	429d      	cmp	r5, r3
 801180c:	d100      	bne.n	8011810 <UART_SetConfig+0x7c>
 801180e:	e07e      	b.n	801190e <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011810:	2380      	movs	r3, #128	; 0x80
 8011812:	021b      	lsls	r3, r3, #8
 8011814:	69e2      	ldr	r2, [r4, #28]
 8011816:	429a      	cmp	r2, r3
 8011818:	d100      	bne.n	801181c <UART_SetConfig+0x88>
 801181a:	e072      	b.n	8011902 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 801181c:	2001      	movs	r0, #1
 801181e:	e04e      	b.n	80118be <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011820:	4b6b      	ldr	r3, [pc, #428]	; (80119d0 <UART_SetConfig+0x23c>)
 8011822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011824:	2303      	movs	r3, #3
 8011826:	4013      	ands	r3, r2
 8011828:	2b01      	cmp	r3, #1
 801182a:	d100      	bne.n	801182e <UART_SetConfig+0x9a>
 801182c:	e09a      	b.n	8011964 <UART_SetConfig+0x1d0>
 801182e:	2b00      	cmp	r3, #0
 8011830:	d02f      	beq.n	8011892 <UART_SetConfig+0xfe>
 8011832:	2b02      	cmp	r3, #2
 8011834:	d100      	bne.n	8011838 <UART_SetConfig+0xa4>
 8011836:	e0a5      	b.n	8011984 <UART_SetConfig+0x1f0>
 8011838:	2b03      	cmp	r3, #3
 801183a:	d01a      	beq.n	8011872 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801183c:	2380      	movs	r3, #128	; 0x80
 801183e:	021b      	lsls	r3, r3, #8
 8011840:	69e2      	ldr	r2, [r4, #28]
 8011842:	429a      	cmp	r2, r3
 8011844:	d060      	beq.n	8011908 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 8011846:	2001      	movs	r0, #1
 8011848:	e039      	b.n	80118be <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801184a:	4b61      	ldr	r3, [pc, #388]	; (80119d0 <UART_SetConfig+0x23c>)
 801184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801184e:	22c0      	movs	r2, #192	; 0xc0
 8011850:	0292      	lsls	r2, r2, #10
 8011852:	4013      	ands	r3, r2
 8011854:	2280      	movs	r2, #128	; 0x80
 8011856:	0252      	lsls	r2, r2, #9
 8011858:	4293      	cmp	r3, r2
 801185a:	d100      	bne.n	801185e <UART_SetConfig+0xca>
 801185c:	e082      	b.n	8011964 <UART_SetConfig+0x1d0>
 801185e:	d916      	bls.n	801188e <UART_SetConfig+0xfa>
 8011860:	2280      	movs	r2, #128	; 0x80
 8011862:	0292      	lsls	r2, r2, #10
 8011864:	4293      	cmp	r3, r2
 8011866:	d100      	bne.n	801186a <UART_SetConfig+0xd6>
 8011868:	e08c      	b.n	8011984 <UART_SetConfig+0x1f0>
 801186a:	22c0      	movs	r2, #192	; 0xc0
 801186c:	0292      	lsls	r2, r2, #10
 801186e:	4293      	cmp	r3, r2
 8011870:	d1e4      	bne.n	801183c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011872:	2380      	movs	r3, #128	; 0x80
 8011874:	021b      	lsls	r3, r3, #8
 8011876:	69e2      	ldr	r2, [r4, #28]
 8011878:	429a      	cmp	r2, r3
 801187a:	d038      	beq.n	80118ee <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 801187c:	6861      	ldr	r1, [r4, #4]
 801187e:	4855      	ldr	r0, [pc, #340]	; (80119d4 <UART_SetConfig+0x240>)
 8011880:	f7ee fc5c 	bl	800013c <__udivsi3>
 8011884:	0400      	lsls	r0, r0, #16
 8011886:	0c00      	lsrs	r0, r0, #16
 8011888:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801188a:	2000      	movs	r0, #0
        break;
 801188c:	e017      	b.n	80118be <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801188e:	2b00      	cmp	r3, #0
 8011890:	d1d4      	bne.n	801183c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011892:	2380      	movs	r3, #128	; 0x80
 8011894:	021b      	lsls	r3, r3, #8
 8011896:	69e2      	ldr	r2, [r4, #28]
 8011898:	429a      	cmp	r2, r3
 801189a:	d13d      	bne.n	8011918 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801189c:	f7fe fee2 	bl	8010664 <HAL_RCC_GetPCLK1Freq>
 80118a0:	0040      	lsls	r0, r0, #1
 80118a2:	6861      	ldr	r1, [r4, #4]
 80118a4:	f7ee fc4a 	bl	800013c <__udivsi3>
 80118a8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80118aa:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80118ac:	220f      	movs	r2, #15
 80118ae:	0019      	movs	r1, r3
 80118b0:	4391      	bics	r1, r2
 80118b2:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 80118b4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80118b6:	071b      	lsls	r3, r3, #28
 80118b8:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80118ba:	4313      	orrs	r3, r2
 80118bc:	60cb      	str	r3, [r1, #12]
}
 80118be:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80118c0:	4b43      	ldr	r3, [pc, #268]	; (80119d0 <UART_SetConfig+0x23c>)
 80118c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118c4:	22c0      	movs	r2, #192	; 0xc0
 80118c6:	0312      	lsls	r2, r2, #12
 80118c8:	4013      	ands	r3, r2
 80118ca:	2280      	movs	r2, #128	; 0x80
 80118cc:	02d2      	lsls	r2, r2, #11
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d02d      	beq.n	801192e <UART_SetConfig+0x19a>
 80118d2:	d913      	bls.n	80118fc <UART_SetConfig+0x168>
 80118d4:	2280      	movs	r2, #128	; 0x80
 80118d6:	0312      	lsls	r2, r2, #12
 80118d8:	4293      	cmp	r3, r2
 80118da:	d036      	beq.n	801194a <UART_SetConfig+0x1b6>
 80118dc:	22c0      	movs	r2, #192	; 0xc0
 80118de:	0312      	lsls	r2, r2, #12
 80118e0:	4293      	cmp	r3, r2
 80118e2:	d1ab      	bne.n	801183c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80118e4:	2380      	movs	r3, #128	; 0x80
 80118e6:	021b      	lsls	r3, r3, #8
 80118e8:	69e2      	ldr	r2, [r4, #28]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d1c6      	bne.n	801187c <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80118ee:	6861      	ldr	r1, [r4, #4]
 80118f0:	4839      	ldr	r0, [pc, #228]	; (80119d8 <UART_SetConfig+0x244>)
 80118f2:	f7ee fc23 	bl	800013c <__udivsi3>
 80118f6:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80118f8:	2000      	movs	r0, #0
        break;
 80118fa:	e7d7      	b.n	80118ac <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d0c8      	beq.n	8011892 <UART_SetConfig+0xfe>
 8011900:	e79c      	b.n	801183c <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 8011902:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8011904:	2300      	movs	r3, #0
 8011906:	e7d1      	b.n	80118ac <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8011908:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 801190a:	2300      	movs	r3, #0
 801190c:	e7ce      	b.n	80118ac <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801190e:	2380      	movs	r3, #128	; 0x80
 8011910:	021b      	lsls	r3, r3, #8
 8011912:	69e2      	ldr	r2, [r4, #28]
 8011914:	429a      	cmp	r2, r3
 8011916:	d0c1      	beq.n	801189c <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8011918:	f7fe fea4 	bl	8010664 <HAL_RCC_GetPCLK1Freq>
 801191c:	6825      	ldr	r5, [r4, #0]
 801191e:	6861      	ldr	r1, [r4, #4]
 8011920:	f7ee fc0c 	bl	800013c <__udivsi3>
 8011924:	0400      	lsls	r0, r0, #16
 8011926:	0c00      	lsrs	r0, r0, #16
 8011928:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801192a:	2000      	movs	r0, #0
  return ret;
 801192c:	e7c7      	b.n	80118be <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801192e:	2380      	movs	r3, #128	; 0x80
 8011930:	021b      	lsls	r3, r3, #8
 8011932:	69e2      	ldr	r2, [r4, #28]
 8011934:	429a      	cmp	r2, r3
 8011936:	d11a      	bne.n	801196e <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8011938:	f7fe fe30 	bl	801059c <HAL_RCC_GetSysClockFreq>
 801193c:	0040      	lsls	r0, r0, #1
 801193e:	6861      	ldr	r1, [r4, #4]
 8011940:	f7ee fbfc 	bl	800013c <__udivsi3>
 8011944:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8011946:	2000      	movs	r0, #0
        break;
 8011948:	e7b0      	b.n	80118ac <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801194a:	2380      	movs	r3, #128	; 0x80
 801194c:	021b      	lsls	r3, r3, #8
 801194e:	69e2      	ldr	r2, [r4, #28]
 8011950:	429a      	cmp	r2, r3
 8011952:	d11c      	bne.n	801198e <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8011954:	6861      	ldr	r1, [r4, #4]
 8011956:	2080      	movs	r0, #128	; 0x80
 8011958:	0240      	lsls	r0, r0, #9
 801195a:	f7ee fbef 	bl	800013c <__udivsi3>
 801195e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8011960:	2000      	movs	r0, #0
        break;
 8011962:	e7a3      	b.n	80118ac <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011964:	2380      	movs	r3, #128	; 0x80
 8011966:	021b      	lsls	r3, r3, #8
 8011968:	69e2      	ldr	r2, [r4, #28]
 801196a:	429a      	cmp	r2, r3
 801196c:	d0e4      	beq.n	8011938 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801196e:	f7fe fe15 	bl	801059c <HAL_RCC_GetSysClockFreq>
 8011972:	6825      	ldr	r5, [r4, #0]
 8011974:	6861      	ldr	r1, [r4, #4]
 8011976:	f7ee fbe1 	bl	800013c <__udivsi3>
 801197a:	0400      	lsls	r0, r0, #16
 801197c:	0c00      	lsrs	r0, r0, #16
 801197e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8011980:	2000      	movs	r0, #0
        break;
 8011982:	e79c      	b.n	80118be <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011984:	2380      	movs	r3, #128	; 0x80
 8011986:	021b      	lsls	r3, r3, #8
 8011988:	69e2      	ldr	r2, [r4, #28]
 801198a:	429a      	cmp	r2, r3
 801198c:	d0e2      	beq.n	8011954 <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 801198e:	6861      	ldr	r1, [r4, #4]
 8011990:	2080      	movs	r0, #128	; 0x80
 8011992:	0200      	lsls	r0, r0, #8
 8011994:	f7ee fbd2 	bl	800013c <__udivsi3>
 8011998:	0400      	lsls	r0, r0, #16
 801199a:	0c00      	lsrs	r0, r0, #16
 801199c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801199e:	2000      	movs	r0, #0
        break;
 80119a0:	e78d      	b.n	80118be <UART_SetConfig+0x12a>
 80119a2:	46c0      	nop			; (mov r8, r8)
 80119a4:	efff69f3 	.word	0xefff69f3
 80119a8:	ffffcfff 	.word	0xffffcfff
 80119ac:	fffff4ff 	.word	0xfffff4ff
 80119b0:	40013800 	.word	0x40013800
 80119b4:	40004400 	.word	0x40004400
 80119b8:	40004800 	.word	0x40004800
 80119bc:	40004c00 	.word	0x40004c00
 80119c0:	40005000 	.word	0x40005000
 80119c4:	40011400 	.word	0x40011400
 80119c8:	40011800 	.word	0x40011800
 80119cc:	40011c00 	.word	0x40011c00
 80119d0:	40021000 	.word	0x40021000
 80119d4:	007a1200 	.word	0x007a1200
 80119d8:	00f42400 	.word	0x00f42400

080119dc <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80119dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80119de:	07db      	lsls	r3, r3, #31
 80119e0:	d506      	bpl.n	80119f0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80119e2:	6802      	ldr	r2, [r0, #0]
 80119e4:	6853      	ldr	r3, [r2, #4]
 80119e6:	492c      	ldr	r1, [pc, #176]	; (8011a98 <UART_AdvFeatureConfig+0xbc>)
 80119e8:	400b      	ands	r3, r1
 80119ea:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80119ec:	430b      	orrs	r3, r1
 80119ee:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80119f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80119f2:	079b      	lsls	r3, r3, #30
 80119f4:	d506      	bpl.n	8011a04 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80119f6:	6802      	ldr	r2, [r0, #0]
 80119f8:	6853      	ldr	r3, [r2, #4]
 80119fa:	4928      	ldr	r1, [pc, #160]	; (8011a9c <UART_AdvFeatureConfig+0xc0>)
 80119fc:	400b      	ands	r3, r1
 80119fe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8011a00:	430b      	orrs	r3, r1
 8011a02:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011a04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011a06:	075b      	lsls	r3, r3, #29
 8011a08:	d506      	bpl.n	8011a18 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011a0a:	6802      	ldr	r2, [r0, #0]
 8011a0c:	6853      	ldr	r3, [r2, #4]
 8011a0e:	4924      	ldr	r1, [pc, #144]	; (8011aa0 <UART_AdvFeatureConfig+0xc4>)
 8011a10:	400b      	ands	r3, r1
 8011a12:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8011a14:	430b      	orrs	r3, r1
 8011a16:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011a18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011a1a:	071b      	lsls	r3, r3, #28
 8011a1c:	d506      	bpl.n	8011a2c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011a1e:	6802      	ldr	r2, [r0, #0]
 8011a20:	6853      	ldr	r3, [r2, #4]
 8011a22:	4920      	ldr	r1, [pc, #128]	; (8011aa4 <UART_AdvFeatureConfig+0xc8>)
 8011a24:	400b      	ands	r3, r1
 8011a26:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8011a28:	430b      	orrs	r3, r1
 8011a2a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011a2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011a2e:	06db      	lsls	r3, r3, #27
 8011a30:	d506      	bpl.n	8011a40 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011a32:	6802      	ldr	r2, [r0, #0]
 8011a34:	6893      	ldr	r3, [r2, #8]
 8011a36:	491c      	ldr	r1, [pc, #112]	; (8011aa8 <UART_AdvFeatureConfig+0xcc>)
 8011a38:	400b      	ands	r3, r1
 8011a3a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8011a3c:	430b      	orrs	r3, r1
 8011a3e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011a40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011a42:	069b      	lsls	r3, r3, #26
 8011a44:	d506      	bpl.n	8011a54 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011a46:	6802      	ldr	r2, [r0, #0]
 8011a48:	6893      	ldr	r3, [r2, #8]
 8011a4a:	4918      	ldr	r1, [pc, #96]	; (8011aac <UART_AdvFeatureConfig+0xd0>)
 8011a4c:	400b      	ands	r3, r1
 8011a4e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8011a50:	430b      	orrs	r3, r1
 8011a52:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011a54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011a56:	065b      	lsls	r3, r3, #25
 8011a58:	d50b      	bpl.n	8011a72 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011a5a:	6802      	ldr	r2, [r0, #0]
 8011a5c:	6853      	ldr	r3, [r2, #4]
 8011a5e:	4914      	ldr	r1, [pc, #80]	; (8011ab0 <UART_AdvFeatureConfig+0xd4>)
 8011a60:	400b      	ands	r3, r1
 8011a62:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8011a64:	430b      	orrs	r3, r1
 8011a66:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011a68:	2380      	movs	r3, #128	; 0x80
 8011a6a:	035b      	lsls	r3, r3, #13
 8011a6c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d00a      	beq.n	8011a88 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011a74:	061b      	lsls	r3, r3, #24
 8011a76:	d506      	bpl.n	8011a86 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a78:	6802      	ldr	r2, [r0, #0]
 8011a7a:	6853      	ldr	r3, [r2, #4]
 8011a7c:	490d      	ldr	r1, [pc, #52]	; (8011ab4 <UART_AdvFeatureConfig+0xd8>)
 8011a7e:	400b      	ands	r3, r1
 8011a80:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8011a82:	430b      	orrs	r3, r1
 8011a84:	6053      	str	r3, [r2, #4]
}
 8011a86:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011a88:	6802      	ldr	r2, [r0, #0]
 8011a8a:	6853      	ldr	r3, [r2, #4]
 8011a8c:	490a      	ldr	r1, [pc, #40]	; (8011ab8 <UART_AdvFeatureConfig+0xdc>)
 8011a8e:	400b      	ands	r3, r1
 8011a90:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8011a92:	430b      	orrs	r3, r1
 8011a94:	6053      	str	r3, [r2, #4]
 8011a96:	e7ec      	b.n	8011a72 <UART_AdvFeatureConfig+0x96>
 8011a98:	fffdffff 	.word	0xfffdffff
 8011a9c:	fffeffff 	.word	0xfffeffff
 8011aa0:	fffbffff 	.word	0xfffbffff
 8011aa4:	ffff7fff 	.word	0xffff7fff
 8011aa8:	ffffefff 	.word	0xffffefff
 8011aac:	ffffdfff 	.word	0xffffdfff
 8011ab0:	ffefffff 	.word	0xffefffff
 8011ab4:	fff7ffff 	.word	0xfff7ffff
 8011ab8:	ff9fffff 	.word	0xff9fffff

08011abc <UART_WaitOnFlagUntilTimeout>:
{
 8011abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011abe:	46c6      	mov	lr, r8
 8011ac0:	b500      	push	{lr}
 8011ac2:	0006      	movs	r6, r0
 8011ac4:	000c      	movs	r4, r1
 8011ac6:	0017      	movs	r7, r2
 8011ac8:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8011aca:	f7fd f883 	bl	800ebd4 <HAL_GetTick>
 8011ace:	4680      	mov	r8, r0
  if(Status == RESET)
 8011ad0:	2f00      	cmp	r7, #0
 8011ad2:	d029      	beq.n	8011b28 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8011ad4:	6832      	ldr	r2, [r6, #0]
 8011ad6:	69d3      	ldr	r3, [r2, #28]
 8011ad8:	4023      	ands	r3, r4
 8011ada:	42a3      	cmp	r3, r4
 8011adc:	d152      	bne.n	8011b84 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8011ade:	1c6b      	adds	r3, r5, #1
 8011ae0:	d0f9      	beq.n	8011ad6 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011ae2:	2d00      	cmp	r5, #0
 8011ae4:	d005      	beq.n	8011af2 <UART_WaitOnFlagUntilTimeout+0x36>
 8011ae6:	f7fd f875 	bl	800ebd4 <HAL_GetTick>
 8011aea:	4643      	mov	r3, r8
 8011aec:	1ac0      	subs	r0, r0, r3
 8011aee:	42a8      	cmp	r0, r5
 8011af0:	d9f0      	bls.n	8011ad4 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011af2:	6832      	ldr	r2, [r6, #0]
 8011af4:	6813      	ldr	r3, [r2, #0]
 8011af6:	2180      	movs	r1, #128	; 0x80
 8011af8:	438b      	bics	r3, r1
 8011afa:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011afc:	6832      	ldr	r2, [r6, #0]
 8011afe:	6813      	ldr	r3, [r2, #0]
 8011b00:	3960      	subs	r1, #96	; 0x60
 8011b02:	438b      	bics	r3, r1
 8011b04:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011b06:	6832      	ldr	r2, [r6, #0]
 8011b08:	6813      	ldr	r3, [r2, #0]
 8011b0a:	491f      	ldr	r1, [pc, #124]	; (8011b88 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8011b0c:	400b      	ands	r3, r1
 8011b0e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011b10:	6831      	ldr	r1, [r6, #0]
 8011b12:	688b      	ldr	r3, [r1, #8]
 8011b14:	2201      	movs	r2, #1
 8011b16:	4393      	bics	r3, r2
 8011b18:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8011b1a:	2369      	movs	r3, #105	; 0x69
 8011b1c:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8011b1e:	3b01      	subs	r3, #1
 8011b20:	2200      	movs	r2, #0
 8011b22:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8011b24:	2003      	movs	r0, #3
 8011b26:	e02a      	b.n	8011b7e <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8011b28:	6832      	ldr	r2, [r6, #0]
 8011b2a:	69d3      	ldr	r3, [r2, #28]
 8011b2c:	4023      	ands	r3, r4
 8011b2e:	42a3      	cmp	r3, r4
 8011b30:	d024      	beq.n	8011b7c <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8011b32:	1c6b      	adds	r3, r5, #1
 8011b34:	d0f9      	beq.n	8011b2a <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011b36:	2d00      	cmp	r5, #0
 8011b38:	d005      	beq.n	8011b46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8011b3a:	f7fd f84b 	bl	800ebd4 <HAL_GetTick>
 8011b3e:	4643      	mov	r3, r8
 8011b40:	1ac0      	subs	r0, r0, r3
 8011b42:	42a8      	cmp	r0, r5
 8011b44:	d9f0      	bls.n	8011b28 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011b46:	6832      	ldr	r2, [r6, #0]
 8011b48:	6813      	ldr	r3, [r2, #0]
 8011b4a:	2180      	movs	r1, #128	; 0x80
 8011b4c:	438b      	bics	r3, r1
 8011b4e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011b50:	6832      	ldr	r2, [r6, #0]
 8011b52:	6813      	ldr	r3, [r2, #0]
 8011b54:	3960      	subs	r1, #96	; 0x60
 8011b56:	438b      	bics	r3, r1
 8011b58:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011b5a:	6832      	ldr	r2, [r6, #0]
 8011b5c:	6813      	ldr	r3, [r2, #0]
 8011b5e:	490a      	ldr	r1, [pc, #40]	; (8011b88 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8011b60:	400b      	ands	r3, r1
 8011b62:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011b64:	6831      	ldr	r1, [r6, #0]
 8011b66:	688b      	ldr	r3, [r1, #8]
 8011b68:	2201      	movs	r2, #1
 8011b6a:	4393      	bics	r3, r2
 8011b6c:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8011b6e:	2369      	movs	r3, #105	; 0x69
 8011b70:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8011b72:	3b01      	subs	r3, #1
 8011b74:	2200      	movs	r2, #0
 8011b76:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8011b78:	2003      	movs	r0, #3
 8011b7a:	e000      	b.n	8011b7e <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8011b7c:	2000      	movs	r0, #0
}
 8011b7e:	bc04      	pop	{r2}
 8011b80:	4690      	mov	r8, r2
 8011b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8011b84:	2000      	movs	r0, #0
 8011b86:	e7fa      	b.n	8011b7e <UART_WaitOnFlagUntilTimeout+0xc2>
 8011b88:	fffffeff 	.word	0xfffffeff

08011b8c <HAL_UART_Transmit>:
{
 8011b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b8e:	b083      	sub	sp, #12
 8011b90:	0004      	movs	r4, r0
 8011b92:	000e      	movs	r6, r1
 8011b94:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011b96:	2369      	movs	r3, #105	; 0x69
 8011b98:	5cc3      	ldrb	r3, [r0, r3]
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	d004      	beq.n	8011ba8 <HAL_UART_Transmit+0x1c>
 8011b9e:	2369      	movs	r3, #105	; 0x69
 8011ba0:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8011ba2:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011ba4:	2b22      	cmp	r3, #34	; 0x22
 8011ba6:	d153      	bne.n	8011c50 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8011ba8:	2e00      	cmp	r6, #0
 8011baa:	d050      	beq.n	8011c4e <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 8011bac:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011bae:	2a00      	cmp	r2, #0
 8011bb0:	d04e      	beq.n	8011c50 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8011bb2:	2368      	movs	r3, #104	; 0x68
 8011bb4:	5ce3      	ldrb	r3, [r4, r3]
 8011bb6:	2b01      	cmp	r3, #1
 8011bb8:	d04c      	beq.n	8011c54 <HAL_UART_Transmit+0xc8>
 8011bba:	2368      	movs	r3, #104	; 0x68
 8011bbc:	2101      	movs	r1, #1
 8011bbe:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011bc4:	3369      	adds	r3, #105	; 0x69
 8011bc6:	5ce3      	ldrb	r3, [r4, r3]
 8011bc8:	2b22      	cmp	r3, #34	; 0x22
 8011bca:	d008      	beq.n	8011bde <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011bcc:	2369      	movs	r3, #105	; 0x69
 8011bce:	2112      	movs	r1, #18
 8011bd0:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8011bd2:	2350      	movs	r3, #80	; 0x50
 8011bd4:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 8011bd6:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011bd8:	2580      	movs	r5, #128	; 0x80
 8011bda:	016d      	lsls	r5, r5, #5
 8011bdc:	e00a      	b.n	8011bf4 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011bde:	3347      	adds	r3, #71	; 0x47
 8011be0:	3131      	adds	r1, #49	; 0x31
 8011be2:	54e1      	strb	r1, [r4, r3]
 8011be4:	e7f5      	b.n	8011bd2 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8011be6:	7833      	ldrb	r3, [r6, #0]
 8011be8:	6822      	ldr	r2, [r4, #0]
 8011bea:	8513      	strh	r3, [r2, #40]	; 0x28
 8011bec:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 8011bee:	5be2      	ldrh	r2, [r4, r7]
 8011bf0:	2a00      	cmp	r2, #0
 8011bf2:	d016      	beq.n	8011c22 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8011bf4:	3a01      	subs	r2, #1
 8011bf6:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8011bf8:	9b01      	ldr	r3, [sp, #4]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	2180      	movs	r1, #128	; 0x80
 8011bfe:	0020      	movs	r0, r4
 8011c00:	f7ff ff5c 	bl	8011abc <UART_WaitOnFlagUntilTimeout>
 8011c04:	2800      	cmp	r0, #0
 8011c06:	d127      	bne.n	8011c58 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c08:	68a3      	ldr	r3, [r4, #8]
 8011c0a:	42ab      	cmp	r3, r5
 8011c0c:	d1eb      	bne.n	8011be6 <HAL_UART_Transmit+0x5a>
 8011c0e:	6923      	ldr	r3, [r4, #16]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d1e8      	bne.n	8011be6 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011c14:	8833      	ldrh	r3, [r6, #0]
 8011c16:	05db      	lsls	r3, r3, #23
 8011c18:	0ddb      	lsrs	r3, r3, #23
 8011c1a:	6822      	ldr	r2, [r4, #0]
 8011c1c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8011c1e:	3602      	adds	r6, #2
 8011c20:	e7e5      	b.n	8011bee <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8011c22:	9b01      	ldr	r3, [sp, #4]
 8011c24:	2140      	movs	r1, #64	; 0x40
 8011c26:	0020      	movs	r0, r4
 8011c28:	f7ff ff48 	bl	8011abc <UART_WaitOnFlagUntilTimeout>
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	d115      	bne.n	8011c5c <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011c30:	2369      	movs	r3, #105	; 0x69
 8011c32:	5ce3      	ldrb	r3, [r4, r3]
 8011c34:	2b32      	cmp	r3, #50	; 0x32
 8011c36:	d006      	beq.n	8011c46 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8011c38:	2369      	movs	r3, #105	; 0x69
 8011c3a:	2201      	movs	r2, #1
 8011c3c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8011c3e:	2368      	movs	r3, #104	; 0x68
 8011c40:	2200      	movs	r2, #0
 8011c42:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8011c44:	e004      	b.n	8011c50 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011c46:	3337      	adds	r3, #55	; 0x37
 8011c48:	2222      	movs	r2, #34	; 0x22
 8011c4a:	54e2      	strb	r2, [r4, r3]
 8011c4c:	e7f7      	b.n	8011c3e <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 8011c4e:	2001      	movs	r0, #1
}
 8011c50:	b003      	add	sp, #12
 8011c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8011c54:	2002      	movs	r0, #2
 8011c56:	e7fb      	b.n	8011c50 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8011c58:	2003      	movs	r0, #3
 8011c5a:	e7f9      	b.n	8011c50 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8011c5c:	2003      	movs	r0, #3
 8011c5e:	e7f7      	b.n	8011c50 <HAL_UART_Transmit+0xc4>

08011c60 <UART_CheckIdleState>:
{
 8011c60:	b510      	push	{r4, lr}
 8011c62:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c64:	2300      	movs	r3, #0
 8011c66:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011c68:	6803      	ldr	r3, [r0, #0]
 8011c6a:	4a18      	ldr	r2, [pc, #96]	; (8011ccc <UART_CheckIdleState+0x6c>)
 8011c6c:	4293      	cmp	r3, r2
 8011c6e:	d005      	beq.n	8011c7c <UART_CheckIdleState+0x1c>
 8011c70:	4a17      	ldr	r2, [pc, #92]	; (8011cd0 <UART_CheckIdleState+0x70>)
 8011c72:	4293      	cmp	r3, r2
 8011c74:	d002      	beq.n	8011c7c <UART_CheckIdleState+0x1c>
 8011c76:	4a17      	ldr	r2, [pc, #92]	; (8011cd4 <UART_CheckIdleState+0x74>)
 8011c78:	4293      	cmp	r3, r2
 8011c7a:	d106      	bne.n	8011c8a <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	071b      	lsls	r3, r3, #28
 8011c80:	d40b      	bmi.n	8011c9a <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011c82:	6823      	ldr	r3, [r4, #0]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	075b      	lsls	r3, r3, #29
 8011c88:	d413      	bmi.n	8011cb2 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8011c8a:	2369      	movs	r3, #105	; 0x69
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8011c90:	3b01      	subs	r3, #1
 8011c92:	2200      	movs	r2, #0
 8011c94:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8011c96:	2000      	movs	r0, #0
}
 8011c98:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011c9a:	23fa      	movs	r3, #250	; 0xfa
 8011c9c:	2180      	movs	r1, #128	; 0x80
 8011c9e:	009b      	lsls	r3, r3, #2
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	0389      	lsls	r1, r1, #14
 8011ca4:	0020      	movs	r0, r4
 8011ca6:	f7ff ff09 	bl	8011abc <UART_WaitOnFlagUntilTimeout>
 8011caa:	2800      	cmp	r0, #0
 8011cac:	d0e9      	beq.n	8011c82 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8011cae:	2003      	movs	r0, #3
 8011cb0:	e7f2      	b.n	8011c98 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011cb2:	23fa      	movs	r3, #250	; 0xfa
 8011cb4:	2180      	movs	r1, #128	; 0x80
 8011cb6:	009b      	lsls	r3, r3, #2
 8011cb8:	2200      	movs	r2, #0
 8011cba:	03c9      	lsls	r1, r1, #15
 8011cbc:	0020      	movs	r0, r4
 8011cbe:	f7ff fefd 	bl	8011abc <UART_WaitOnFlagUntilTimeout>
 8011cc2:	2800      	cmp	r0, #0
 8011cc4:	d0e1      	beq.n	8011c8a <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8011cc6:	2003      	movs	r0, #3
 8011cc8:	e7e6      	b.n	8011c98 <UART_CheckIdleState+0x38>
 8011cca:	46c0      	nop			; (mov r8, r8)
 8011ccc:	40013800 	.word	0x40013800
 8011cd0:	40004400 	.word	0x40004400
 8011cd4:	40004800 	.word	0x40004800

08011cd8 <HAL_UART_Init>:
{
 8011cd8:	b510      	push	{r4, lr}
 8011cda:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8011cdc:	d030      	beq.n	8011d40 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8011cde:	2369      	movs	r3, #105	; 0x69
 8011ce0:	5cc3      	ldrb	r3, [r0, r3]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d022      	beq.n	8011d2c <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8011ce6:	2369      	movs	r3, #105	; 0x69
 8011ce8:	2202      	movs	r2, #2
 8011cea:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8011cec:	6822      	ldr	r2, [r4, #0]
 8011cee:	6813      	ldr	r3, [r2, #0]
 8011cf0:	2101      	movs	r1, #1
 8011cf2:	438b      	bics	r3, r1
 8011cf4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011cf6:	0020      	movs	r0, r4
 8011cf8:	f7ff fd4c 	bl	8011794 <UART_SetConfig>
 8011cfc:	2801      	cmp	r0, #1
 8011cfe:	d014      	beq.n	8011d2a <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d118      	bne.n	8011d38 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011d06:	6822      	ldr	r2, [r4, #0]
 8011d08:	6853      	ldr	r3, [r2, #4]
 8011d0a:	490e      	ldr	r1, [pc, #56]	; (8011d44 <HAL_UART_Init+0x6c>)
 8011d0c:	400b      	ands	r3, r1
 8011d0e:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8011d10:	6822      	ldr	r2, [r4, #0]
 8011d12:	6893      	ldr	r3, [r2, #8]
 8011d14:	212a      	movs	r1, #42	; 0x2a
 8011d16:	438b      	bics	r3, r1
 8011d18:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8011d1a:	6822      	ldr	r2, [r4, #0]
 8011d1c:	6813      	ldr	r3, [r2, #0]
 8011d1e:	3929      	subs	r1, #41	; 0x29
 8011d20:	430b      	orrs	r3, r1
 8011d22:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8011d24:	0020      	movs	r0, r4
 8011d26:	f7ff ff9b 	bl	8011c60 <UART_CheckIdleState>
}
 8011d2a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8011d2c:	3368      	adds	r3, #104	; 0x68
 8011d2e:	2200      	movs	r2, #0
 8011d30:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8011d32:	f7fc f8ff 	bl	800df34 <HAL_UART_MspInit>
 8011d36:	e7d6      	b.n	8011ce6 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8011d38:	0020      	movs	r0, r4
 8011d3a:	f7ff fe4f 	bl	80119dc <UART_AdvFeatureConfig>
 8011d3e:	e7e2      	b.n	8011d06 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8011d40:	2001      	movs	r0, #1
 8011d42:	e7f2      	b.n	8011d2a <HAL_UART_Init+0x52>
 8011d44:	ffffb7ff 	.word	0xffffb7ff

08011d48 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011d48:	2369      	movs	r3, #105	; 0x69
 8011d4a:	5cc3      	ldrb	r3, [r0, r3]
 8011d4c:	2b12      	cmp	r3, #18
 8011d4e:	d004      	beq.n	8011d5a <UART_Transmit_IT+0x12>
 8011d50:	2369      	movs	r3, #105	; 0x69
 8011d52:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8011d54:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011d56:	2a32      	cmp	r2, #50	; 0x32
 8011d58:	d113      	bne.n	8011d82 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8011d5a:	2352      	movs	r3, #82	; 0x52
 8011d5c:	5ac3      	ldrh	r3, [r0, r3]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d011      	beq.n	8011d86 <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011d62:	2380      	movs	r3, #128	; 0x80
 8011d64:	015b      	lsls	r3, r3, #5
 8011d66:	6882      	ldr	r2, [r0, #8]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d018      	beq.n	8011d9e <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8011d6c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011d6e:	1c5a      	adds	r2, r3, #1
 8011d70:	64c2      	str	r2, [r0, #76]	; 0x4c
 8011d72:	781b      	ldrb	r3, [r3, #0]
 8011d74:	6802      	ldr	r2, [r0, #0]
 8011d76:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8011d78:	2252      	movs	r2, #82	; 0x52
 8011d7a:	5a83      	ldrh	r3, [r0, r2]
 8011d7c:	3b01      	subs	r3, #1
 8011d7e:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8011d80:	2300      	movs	r3, #0
  }
}
 8011d82:	0018      	movs	r0, r3
 8011d84:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011d86:	6802      	ldr	r2, [r0, #0]
 8011d88:	6813      	ldr	r3, [r2, #0]
 8011d8a:	2180      	movs	r1, #128	; 0x80
 8011d8c:	438b      	bics	r3, r1
 8011d8e:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011d90:	6802      	ldr	r2, [r0, #0]
 8011d92:	6813      	ldr	r3, [r2, #0]
 8011d94:	3940      	subs	r1, #64	; 0x40
 8011d96:	430b      	orrs	r3, r1
 8011d98:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	e7f1      	b.n	8011d82 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011d9e:	6903      	ldr	r3, [r0, #16]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d1e3      	bne.n	8011d6c <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011da4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011da6:	881b      	ldrh	r3, [r3, #0]
 8011da8:	05db      	lsls	r3, r3, #23
 8011daa:	0ddb      	lsrs	r3, r3, #23
 8011dac:	6802      	ldr	r2, [r0, #0]
 8011dae:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8011db0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011db2:	3302      	adds	r3, #2
 8011db4:	64c3      	str	r3, [r0, #76]	; 0x4c
 8011db6:	e7df      	b.n	8011d78 <UART_Transmit_IT+0x30>

08011db8 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011db8:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011dba:	6802      	ldr	r2, [r0, #0]
 8011dbc:	6813      	ldr	r3, [r2, #0]
 8011dbe:	2140      	movs	r1, #64	; 0x40
 8011dc0:	438b      	bics	r3, r1
 8011dc2:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011dc4:	2369      	movs	r3, #105	; 0x69
 8011dc6:	5cc3      	ldrb	r3, [r0, r3]
 8011dc8:	2b32      	cmp	r3, #50	; 0x32
 8011dca:	d00a      	beq.n	8011de2 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011dcc:	6801      	ldr	r1, [r0, #0]
 8011dce:	688b      	ldr	r3, [r1, #8]
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	4393      	bics	r3, r2
 8011dd4:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8011dd6:	2369      	movs	r3, #105	; 0x69
 8011dd8:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8011dda:	f7fb ff9d 	bl	800dd18 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8011dde:	2000      	movs	r0, #0
 8011de0:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8011de2:	3337      	adds	r3, #55	; 0x37
 8011de4:	2222      	movs	r2, #34	; 0x22
 8011de6:	54c2      	strb	r2, [r0, r3]
 8011de8:	e7f7      	b.n	8011dda <UART_EndTransmit_IT+0x22>
	...

08011dec <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011dec:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011dee:	2369      	movs	r3, #105	; 0x69
 8011df0:	5cc3      	ldrb	r3, [r0, r3]
 8011df2:	2b22      	cmp	r3, #34	; 0x22
 8011df4:	d004      	beq.n	8011e00 <UART_Receive_IT+0x14>
 8011df6:	2369      	movs	r3, #105	; 0x69
 8011df8:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011dfa:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011dfc:	2b32      	cmp	r3, #50	; 0x32
 8011dfe:	d12d      	bne.n	8011e5c <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 8011e00:	235c      	movs	r3, #92	; 0x5c
 8011e02:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e04:	2280      	movs	r2, #128	; 0x80
 8011e06:	0152      	lsls	r2, r2, #5
 8011e08:	6883      	ldr	r3, [r0, #8]
 8011e0a:	4293      	cmp	r3, r2
 8011e0c:	d028      	beq.n	8011e60 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8011e0e:	6803      	ldr	r3, [r0, #0]
 8011e10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011e12:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8011e14:	1c54      	adds	r4, r2, #1
 8011e16:	6544      	str	r4, [r0, #84]	; 0x54
 8011e18:	400b      	ands	r3, r1
 8011e1a:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8011e1c:	225a      	movs	r2, #90	; 0x5a
 8011e1e:	5a83      	ldrh	r3, [r0, r2]
 8011e20:	3b01      	subs	r3, #1
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8011e26:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d117      	bne.n	8011e5c <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011e2c:	6802      	ldr	r2, [r0, #0]
 8011e2e:	6813      	ldr	r3, [r2, #0]
 8011e30:	2120      	movs	r1, #32
 8011e32:	438b      	bics	r3, r1
 8011e34:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011e36:	2369      	movs	r3, #105	; 0x69
 8011e38:	5cc3      	ldrb	r3, [r0, r3]
 8011e3a:	2b32      	cmp	r3, #50	; 0x32
 8011e3c:	d01c      	beq.n	8011e78 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011e3e:	6802      	ldr	r2, [r0, #0]
 8011e40:	6813      	ldr	r3, [r2, #0]
 8011e42:	490f      	ldr	r1, [pc, #60]	; (8011e80 <UART_Receive_IT+0x94>)
 8011e44:	400b      	ands	r3, r1
 8011e46:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011e48:	6801      	ldr	r1, [r0, #0]
 8011e4a:	688b      	ldr	r3, [r1, #8]
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	4393      	bics	r3, r2
 8011e50:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 8011e52:	2369      	movs	r3, #105	; 0x69
 8011e54:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 8011e56:	f7fb ff9d 	bl	800dd94 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8011e5a:	2200      	movs	r2, #0
  }
}
 8011e5c:	0010      	movs	r0, r2
 8011e5e:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e60:	6903      	ldr	r3, [r0, #16]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d1d3      	bne.n	8011e0e <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8011e66:	6803      	ldr	r3, [r0, #0]
 8011e68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011e6a:	400b      	ands	r3, r1
 8011e6c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8011e6e:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8011e70:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8011e72:	3302      	adds	r3, #2
 8011e74:	6543      	str	r3, [r0, #84]	; 0x54
 8011e76:	e7d1      	b.n	8011e1c <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8011e78:	3337      	adds	r3, #55	; 0x37
 8011e7a:	2212      	movs	r2, #18
 8011e7c:	54c2      	strb	r2, [r0, r3]
 8011e7e:	e7ea      	b.n	8011e56 <UART_Receive_IT+0x6a>
 8011e80:	fffffeff 	.word	0xfffffeff

08011e84 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8011e84:	4770      	bx	lr

08011e86 <HAL_UART_IRQHandler>:
{
 8011e86:	b510      	push	{r4, lr}
 8011e88:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011e8a:	6803      	ldr	r3, [r0, #0]
 8011e8c:	69da      	ldr	r2, [r3, #28]
 8011e8e:	07d2      	lsls	r2, r2, #31
 8011e90:	d509      	bpl.n	8011ea6 <HAL_UART_IRQHandler+0x20>
 8011e92:	681a      	ldr	r2, [r3, #0]
 8011e94:	05d2      	lsls	r2, r2, #23
 8011e96:	d506      	bpl.n	8011ea6 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8011e98:	2201      	movs	r2, #1
 8011e9a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011e9c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8011e9e:	4313      	orrs	r3, r2
 8011ea0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011ea2:	2369      	movs	r3, #105	; 0x69
 8011ea4:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011ea6:	6823      	ldr	r3, [r4, #0]
 8011ea8:	69da      	ldr	r2, [r3, #28]
 8011eaa:	0792      	lsls	r2, r2, #30
 8011eac:	d50b      	bpl.n	8011ec6 <HAL_UART_IRQHandler+0x40>
 8011eae:	689a      	ldr	r2, [r3, #8]
 8011eb0:	07d2      	lsls	r2, r2, #31
 8011eb2:	d508      	bpl.n	8011ec6 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8011eb4:	2202      	movs	r2, #2
 8011eb6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011eb8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011eba:	3202      	adds	r2, #2
 8011ebc:	4313      	orrs	r3, r2
 8011ebe:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011ec0:	2369      	movs	r3, #105	; 0x69
 8011ec2:	3a03      	subs	r2, #3
 8011ec4:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011ec6:	6823      	ldr	r3, [r4, #0]
 8011ec8:	69da      	ldr	r2, [r3, #28]
 8011eca:	0752      	lsls	r2, r2, #29
 8011ecc:	d50b      	bpl.n	8011ee6 <HAL_UART_IRQHandler+0x60>
 8011ece:	689a      	ldr	r2, [r3, #8]
 8011ed0:	07d2      	lsls	r2, r2, #31
 8011ed2:	d508      	bpl.n	8011ee6 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8011ed4:	2204      	movs	r2, #4
 8011ed6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011ed8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011eda:	3a02      	subs	r2, #2
 8011edc:	4313      	orrs	r3, r2
 8011ede:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011ee0:	2369      	movs	r3, #105	; 0x69
 8011ee2:	3a01      	subs	r2, #1
 8011ee4:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011ee6:	6823      	ldr	r3, [r4, #0]
 8011ee8:	69da      	ldr	r2, [r3, #28]
 8011eea:	0712      	lsls	r2, r2, #28
 8011eec:	d50a      	bpl.n	8011f04 <HAL_UART_IRQHandler+0x7e>
 8011eee:	689a      	ldr	r2, [r3, #8]
 8011ef0:	07d2      	lsls	r2, r2, #31
 8011ef2:	d507      	bpl.n	8011f04 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8011ef4:	2208      	movs	r2, #8
 8011ef6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011ef8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011efa:	4313      	orrs	r3, r2
 8011efc:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011efe:	2369      	movs	r3, #105	; 0x69
 8011f00:	3a07      	subs	r2, #7
 8011f02:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f04:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d11c      	bne.n	8011f44 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8011f0a:	6823      	ldr	r3, [r4, #0]
 8011f0c:	69da      	ldr	r2, [r3, #28]
 8011f0e:	02d2      	lsls	r2, r2, #11
 8011f10:	d502      	bpl.n	8011f18 <HAL_UART_IRQHandler+0x92>
 8011f12:	689a      	ldr	r2, [r3, #8]
 8011f14:	0252      	lsls	r2, r2, #9
 8011f16:	d419      	bmi.n	8011f4c <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8011f18:	6823      	ldr	r3, [r4, #0]
 8011f1a:	69da      	ldr	r2, [r3, #28]
 8011f1c:	0692      	lsls	r2, r2, #26
 8011f1e:	d502      	bpl.n	8011f26 <HAL_UART_IRQHandler+0xa0>
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	069b      	lsls	r3, r3, #26
 8011f24:	d41c      	bmi.n	8011f60 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8011f26:	6823      	ldr	r3, [r4, #0]
 8011f28:	69da      	ldr	r2, [r3, #28]
 8011f2a:	0612      	lsls	r2, r2, #24
 8011f2c:	d502      	bpl.n	8011f34 <HAL_UART_IRQHandler+0xae>
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	061b      	lsls	r3, r3, #24
 8011f32:	d41e      	bmi.n	8011f72 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8011f34:	6823      	ldr	r3, [r4, #0]
 8011f36:	69da      	ldr	r2, [r3, #28]
 8011f38:	0652      	lsls	r2, r2, #25
 8011f3a:	d502      	bpl.n	8011f42 <HAL_UART_IRQHandler+0xbc>
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	065b      	lsls	r3, r3, #25
 8011f40:	d41b      	bmi.n	8011f7a <HAL_UART_IRQHandler+0xf4>
}
 8011f42:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8011f44:	0020      	movs	r0, r4
 8011f46:	f7fb feff 	bl	800dd48 <HAL_UART_ErrorCallback>
 8011f4a:	e7de      	b.n	8011f0a <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8011f4c:	2280      	movs	r2, #128	; 0x80
 8011f4e:	0352      	lsls	r2, r2, #13
 8011f50:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8011f52:	2369      	movs	r3, #105	; 0x69
 8011f54:	2201      	movs	r2, #1
 8011f56:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8011f58:	0020      	movs	r0, r4
 8011f5a:	f7ff ff93 	bl	8011e84 <HAL_UARTEx_WakeupCallback>
 8011f5e:	e7db      	b.n	8011f18 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8011f60:	0020      	movs	r0, r4
 8011f62:	f7ff ff43 	bl	8011dec <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011f66:	6822      	ldr	r2, [r4, #0]
 8011f68:	6993      	ldr	r3, [r2, #24]
 8011f6a:	2108      	movs	r1, #8
 8011f6c:	430b      	orrs	r3, r1
 8011f6e:	6193      	str	r3, [r2, #24]
 8011f70:	e7d9      	b.n	8011f26 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8011f72:	0020      	movs	r0, r4
 8011f74:	f7ff fee8 	bl	8011d48 <UART_Transmit_IT>
 8011f78:	e7dc      	b.n	8011f34 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8011f7a:	0020      	movs	r0, r4
 8011f7c:	f7ff ff1c 	bl	8011db8 <UART_EndTransmit_IT>
}
 8011f80:	e7df      	b.n	8011f42 <HAL_UART_IRQHandler+0xbc>

08011f82 <main>:
/* Private function prototypes -----------------------------------------------*/

/* Main functions ------------------------------------------------------------*/

int main(void)
{
 8011f82:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8011f84:	f7fc fe0e 	bl	800eba4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8011f88:	f7f2 fa34 	bl	80043f4 <SystemClock_Config>

  /* Initialize all user peripherals */

	/* Initialize BitzOS */
	BOS_Init();
 8011f8c:	f7f6 fd9a 	bl	8008ac4 <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8011f90:	f7f9 f92a 	bl	800b1e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8011f94:	f7fc f9d8 	bl	800e348 <osKernelStart>
 8011f98:	e7fe      	b.n	8011f98 <main+0x16>

08011f9a <UserTask>:

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void * argument)
{
 8011f9a:	e7fe      	b.n	8011f9a <UserTask>

08011f9c <atof>:
 8011f9c:	b510      	push	{r4, lr}
 8011f9e:	2100      	movs	r1, #0
 8011fa0:	f001 f82a 	bl	8012ff8 <strtod>
 8011fa4:	bd10      	pop	{r4, pc}

08011fa6 <atoi>:
 8011fa6:	b510      	push	{r4, lr}
 8011fa8:	220a      	movs	r2, #10
 8011faa:	2100      	movs	r1, #0
 8011fac:	f001 f90e 	bl	80131cc <strtol>
 8011fb0:	bd10      	pop	{r4, pc}

08011fb2 <atol>:
 8011fb2:	b510      	push	{r4, lr}
 8011fb4:	220a      	movs	r2, #10
 8011fb6:	2100      	movs	r1, #0
 8011fb8:	f001 f908 	bl	80131cc <strtol>
 8011fbc:	bd10      	pop	{r4, pc}
	...

08011fc0 <__libc_init_array>:
 8011fc0:	b570      	push	{r4, r5, r6, lr}
 8011fc2:	2600      	movs	r6, #0
 8011fc4:	4d0c      	ldr	r5, [pc, #48]	; (8011ff8 <__libc_init_array+0x38>)
 8011fc6:	4c0d      	ldr	r4, [pc, #52]	; (8011ffc <__libc_init_array+0x3c>)
 8011fc8:	1b64      	subs	r4, r4, r5
 8011fca:	10a4      	asrs	r4, r4, #2
 8011fcc:	42a6      	cmp	r6, r4
 8011fce:	d109      	bne.n	8011fe4 <__libc_init_array+0x24>
 8011fd0:	2600      	movs	r6, #0
 8011fd2:	f002 fb87 	bl	80146e4 <_init>
 8011fd6:	4d0a      	ldr	r5, [pc, #40]	; (8012000 <__libc_init_array+0x40>)
 8011fd8:	4c0a      	ldr	r4, [pc, #40]	; (8012004 <__libc_init_array+0x44>)
 8011fda:	1b64      	subs	r4, r4, r5
 8011fdc:	10a4      	asrs	r4, r4, #2
 8011fde:	42a6      	cmp	r6, r4
 8011fe0:	d105      	bne.n	8011fee <__libc_init_array+0x2e>
 8011fe2:	bd70      	pop	{r4, r5, r6, pc}
 8011fe4:	00b3      	lsls	r3, r6, #2
 8011fe6:	58eb      	ldr	r3, [r5, r3]
 8011fe8:	4798      	blx	r3
 8011fea:	3601      	adds	r6, #1
 8011fec:	e7ee      	b.n	8011fcc <__libc_init_array+0xc>
 8011fee:	00b3      	lsls	r3, r6, #2
 8011ff0:	58eb      	ldr	r3, [r5, r3]
 8011ff2:	4798      	blx	r3
 8011ff4:	3601      	adds	r6, #1
 8011ff6:	e7f2      	b.n	8011fde <__libc_init_array+0x1e>
 8011ff8:	08019d78 	.word	0x08019d78
 8011ffc:	08019d78 	.word	0x08019d78
 8012000:	08019d78 	.word	0x08019d78
 8012004:	08019d7c 	.word	0x08019d7c

08012008 <__locale_ctype_ptr_l>:
 8012008:	30ec      	adds	r0, #236	; 0xec
 801200a:	6800      	ldr	r0, [r0, #0]
 801200c:	4770      	bx	lr
	...

08012010 <__locale_ctype_ptr>:
 8012010:	4b04      	ldr	r3, [pc, #16]	; (8012024 <__locale_ctype_ptr+0x14>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	6a1b      	ldr	r3, [r3, #32]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d100      	bne.n	801201c <__locale_ctype_ptr+0xc>
 801201a:	4b03      	ldr	r3, [pc, #12]	; (8012028 <__locale_ctype_ptr+0x18>)
 801201c:	33ec      	adds	r3, #236	; 0xec
 801201e:	6818      	ldr	r0, [r3, #0]
 8012020:	4770      	bx	lr
 8012022:	46c0      	nop			; (mov r8, r8)
 8012024:	20000060 	.word	0x20000060
 8012028:	200000c4 	.word	0x200000c4

0801202c <malloc>:
 801202c:	b510      	push	{r4, lr}
 801202e:	4b03      	ldr	r3, [pc, #12]	; (801203c <malloc+0x10>)
 8012030:	0001      	movs	r1, r0
 8012032:	6818      	ldr	r0, [r3, #0]
 8012034:	f000 f88a 	bl	801214c <_malloc_r>
 8012038:	bd10      	pop	{r4, pc}
 801203a:	46c0      	nop			; (mov r8, r8)
 801203c:	20000060 	.word	0x20000060

08012040 <free>:
 8012040:	b510      	push	{r4, lr}
 8012042:	4b03      	ldr	r3, [pc, #12]	; (8012050 <free+0x10>)
 8012044:	0001      	movs	r1, r0
 8012046:	6818      	ldr	r0, [r3, #0]
 8012048:	f000 f836 	bl	80120b8 <_free_r>
 801204c:	bd10      	pop	{r4, pc}
 801204e:	46c0      	nop			; (mov r8, r8)
 8012050:	20000060 	.word	0x20000060

08012054 <__ascii_mbtowc>:
 8012054:	b082      	sub	sp, #8
 8012056:	2900      	cmp	r1, #0
 8012058:	d100      	bne.n	801205c <__ascii_mbtowc+0x8>
 801205a:	a901      	add	r1, sp, #4
 801205c:	1e10      	subs	r0, r2, #0
 801205e:	d006      	beq.n	801206e <__ascii_mbtowc+0x1a>
 8012060:	2b00      	cmp	r3, #0
 8012062:	d006      	beq.n	8012072 <__ascii_mbtowc+0x1e>
 8012064:	7813      	ldrb	r3, [r2, #0]
 8012066:	600b      	str	r3, [r1, #0]
 8012068:	7810      	ldrb	r0, [r2, #0]
 801206a:	1e43      	subs	r3, r0, #1
 801206c:	4198      	sbcs	r0, r3
 801206e:	b002      	add	sp, #8
 8012070:	4770      	bx	lr
 8012072:	2002      	movs	r0, #2
 8012074:	4240      	negs	r0, r0
 8012076:	e7fa      	b.n	801206e <__ascii_mbtowc+0x1a>

08012078 <memcmp>:
 8012078:	b530      	push	{r4, r5, lr}
 801207a:	2400      	movs	r4, #0
 801207c:	42a2      	cmp	r2, r4
 801207e:	d101      	bne.n	8012084 <memcmp+0xc>
 8012080:	2000      	movs	r0, #0
 8012082:	e005      	b.n	8012090 <memcmp+0x18>
 8012084:	5d03      	ldrb	r3, [r0, r4]
 8012086:	1c65      	adds	r5, r4, #1
 8012088:	5d0c      	ldrb	r4, [r1, r4]
 801208a:	42a3      	cmp	r3, r4
 801208c:	d001      	beq.n	8012092 <memcmp+0x1a>
 801208e:	1b18      	subs	r0, r3, r4
 8012090:	bd30      	pop	{r4, r5, pc}
 8012092:	002c      	movs	r4, r5
 8012094:	e7f2      	b.n	801207c <memcmp+0x4>

08012096 <memcpy>:
 8012096:	2300      	movs	r3, #0
 8012098:	b510      	push	{r4, lr}
 801209a:	429a      	cmp	r2, r3
 801209c:	d100      	bne.n	80120a0 <memcpy+0xa>
 801209e:	bd10      	pop	{r4, pc}
 80120a0:	5ccc      	ldrb	r4, [r1, r3]
 80120a2:	54c4      	strb	r4, [r0, r3]
 80120a4:	3301      	adds	r3, #1
 80120a6:	e7f8      	b.n	801209a <memcpy+0x4>

080120a8 <memset>:
 80120a8:	0003      	movs	r3, r0
 80120aa:	1812      	adds	r2, r2, r0
 80120ac:	4293      	cmp	r3, r2
 80120ae:	d100      	bne.n	80120b2 <memset+0xa>
 80120b0:	4770      	bx	lr
 80120b2:	7019      	strb	r1, [r3, #0]
 80120b4:	3301      	adds	r3, #1
 80120b6:	e7f9      	b.n	80120ac <memset+0x4>

080120b8 <_free_r>:
 80120b8:	b570      	push	{r4, r5, r6, lr}
 80120ba:	0005      	movs	r5, r0
 80120bc:	2900      	cmp	r1, #0
 80120be:	d010      	beq.n	80120e2 <_free_r+0x2a>
 80120c0:	1f0c      	subs	r4, r1, #4
 80120c2:	6823      	ldr	r3, [r4, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	da00      	bge.n	80120ca <_free_r+0x12>
 80120c8:	18e4      	adds	r4, r4, r3
 80120ca:	0028      	movs	r0, r5
 80120cc:	f001 fbd1 	bl	8013872 <__malloc_lock>
 80120d0:	4a1d      	ldr	r2, [pc, #116]	; (8012148 <_free_r+0x90>)
 80120d2:	6813      	ldr	r3, [r2, #0]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d105      	bne.n	80120e4 <_free_r+0x2c>
 80120d8:	6063      	str	r3, [r4, #4]
 80120da:	6014      	str	r4, [r2, #0]
 80120dc:	0028      	movs	r0, r5
 80120de:	f001 fbc9 	bl	8013874 <__malloc_unlock>
 80120e2:	bd70      	pop	{r4, r5, r6, pc}
 80120e4:	42a3      	cmp	r3, r4
 80120e6:	d909      	bls.n	80120fc <_free_r+0x44>
 80120e8:	6821      	ldr	r1, [r4, #0]
 80120ea:	1860      	adds	r0, r4, r1
 80120ec:	4283      	cmp	r3, r0
 80120ee:	d1f3      	bne.n	80120d8 <_free_r+0x20>
 80120f0:	6818      	ldr	r0, [r3, #0]
 80120f2:	685b      	ldr	r3, [r3, #4]
 80120f4:	1841      	adds	r1, r0, r1
 80120f6:	6021      	str	r1, [r4, #0]
 80120f8:	e7ee      	b.n	80120d8 <_free_r+0x20>
 80120fa:	0013      	movs	r3, r2
 80120fc:	685a      	ldr	r2, [r3, #4]
 80120fe:	2a00      	cmp	r2, #0
 8012100:	d001      	beq.n	8012106 <_free_r+0x4e>
 8012102:	42a2      	cmp	r2, r4
 8012104:	d9f9      	bls.n	80120fa <_free_r+0x42>
 8012106:	6819      	ldr	r1, [r3, #0]
 8012108:	1858      	adds	r0, r3, r1
 801210a:	42a0      	cmp	r0, r4
 801210c:	d10b      	bne.n	8012126 <_free_r+0x6e>
 801210e:	6820      	ldr	r0, [r4, #0]
 8012110:	1809      	adds	r1, r1, r0
 8012112:	1858      	adds	r0, r3, r1
 8012114:	6019      	str	r1, [r3, #0]
 8012116:	4282      	cmp	r2, r0
 8012118:	d1e0      	bne.n	80120dc <_free_r+0x24>
 801211a:	6810      	ldr	r0, [r2, #0]
 801211c:	6852      	ldr	r2, [r2, #4]
 801211e:	1841      	adds	r1, r0, r1
 8012120:	6019      	str	r1, [r3, #0]
 8012122:	605a      	str	r2, [r3, #4]
 8012124:	e7da      	b.n	80120dc <_free_r+0x24>
 8012126:	42a0      	cmp	r0, r4
 8012128:	d902      	bls.n	8012130 <_free_r+0x78>
 801212a:	230c      	movs	r3, #12
 801212c:	602b      	str	r3, [r5, #0]
 801212e:	e7d5      	b.n	80120dc <_free_r+0x24>
 8012130:	6821      	ldr	r1, [r4, #0]
 8012132:	1860      	adds	r0, r4, r1
 8012134:	4282      	cmp	r2, r0
 8012136:	d103      	bne.n	8012140 <_free_r+0x88>
 8012138:	6810      	ldr	r0, [r2, #0]
 801213a:	6852      	ldr	r2, [r2, #4]
 801213c:	1841      	adds	r1, r0, r1
 801213e:	6021      	str	r1, [r4, #0]
 8012140:	6062      	str	r2, [r4, #4]
 8012142:	605c      	str	r4, [r3, #4]
 8012144:	e7ca      	b.n	80120dc <_free_r+0x24>
 8012146:	46c0      	nop			; (mov r8, r8)
 8012148:	2000609c 	.word	0x2000609c

0801214c <_malloc_r>:
 801214c:	2303      	movs	r3, #3
 801214e:	b570      	push	{r4, r5, r6, lr}
 8012150:	1ccd      	adds	r5, r1, #3
 8012152:	439d      	bics	r5, r3
 8012154:	3508      	adds	r5, #8
 8012156:	0006      	movs	r6, r0
 8012158:	2d0c      	cmp	r5, #12
 801215a:	d21e      	bcs.n	801219a <_malloc_r+0x4e>
 801215c:	250c      	movs	r5, #12
 801215e:	42a9      	cmp	r1, r5
 8012160:	d81d      	bhi.n	801219e <_malloc_r+0x52>
 8012162:	0030      	movs	r0, r6
 8012164:	f001 fb85 	bl	8013872 <__malloc_lock>
 8012168:	4a25      	ldr	r2, [pc, #148]	; (8012200 <_malloc_r+0xb4>)
 801216a:	6814      	ldr	r4, [r2, #0]
 801216c:	0021      	movs	r1, r4
 801216e:	2900      	cmp	r1, #0
 8012170:	d119      	bne.n	80121a6 <_malloc_r+0x5a>
 8012172:	4c24      	ldr	r4, [pc, #144]	; (8012204 <_malloc_r+0xb8>)
 8012174:	6823      	ldr	r3, [r4, #0]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d103      	bne.n	8012182 <_malloc_r+0x36>
 801217a:	0030      	movs	r0, r6
 801217c:	f000 f880 	bl	8012280 <_sbrk_r>
 8012180:	6020      	str	r0, [r4, #0]
 8012182:	0029      	movs	r1, r5
 8012184:	0030      	movs	r0, r6
 8012186:	f000 f87b 	bl	8012280 <_sbrk_r>
 801218a:	1c43      	adds	r3, r0, #1
 801218c:	d12b      	bne.n	80121e6 <_malloc_r+0x9a>
 801218e:	230c      	movs	r3, #12
 8012190:	0030      	movs	r0, r6
 8012192:	6033      	str	r3, [r6, #0]
 8012194:	f001 fb6e 	bl	8013874 <__malloc_unlock>
 8012198:	e003      	b.n	80121a2 <_malloc_r+0x56>
 801219a:	2d00      	cmp	r5, #0
 801219c:	dadf      	bge.n	801215e <_malloc_r+0x12>
 801219e:	230c      	movs	r3, #12
 80121a0:	6033      	str	r3, [r6, #0]
 80121a2:	2000      	movs	r0, #0
 80121a4:	bd70      	pop	{r4, r5, r6, pc}
 80121a6:	680b      	ldr	r3, [r1, #0]
 80121a8:	1b5b      	subs	r3, r3, r5
 80121aa:	d419      	bmi.n	80121e0 <_malloc_r+0x94>
 80121ac:	2b0b      	cmp	r3, #11
 80121ae:	d903      	bls.n	80121b8 <_malloc_r+0x6c>
 80121b0:	600b      	str	r3, [r1, #0]
 80121b2:	18cc      	adds	r4, r1, r3
 80121b4:	6025      	str	r5, [r4, #0]
 80121b6:	e003      	b.n	80121c0 <_malloc_r+0x74>
 80121b8:	684b      	ldr	r3, [r1, #4]
 80121ba:	428c      	cmp	r4, r1
 80121bc:	d10d      	bne.n	80121da <_malloc_r+0x8e>
 80121be:	6013      	str	r3, [r2, #0]
 80121c0:	0030      	movs	r0, r6
 80121c2:	f001 fb57 	bl	8013874 <__malloc_unlock>
 80121c6:	0020      	movs	r0, r4
 80121c8:	2207      	movs	r2, #7
 80121ca:	300b      	adds	r0, #11
 80121cc:	1d23      	adds	r3, r4, #4
 80121ce:	4390      	bics	r0, r2
 80121d0:	1ac3      	subs	r3, r0, r3
 80121d2:	d0e7      	beq.n	80121a4 <_malloc_r+0x58>
 80121d4:	425a      	negs	r2, r3
 80121d6:	50e2      	str	r2, [r4, r3]
 80121d8:	e7e4      	b.n	80121a4 <_malloc_r+0x58>
 80121da:	6063      	str	r3, [r4, #4]
 80121dc:	000c      	movs	r4, r1
 80121de:	e7ef      	b.n	80121c0 <_malloc_r+0x74>
 80121e0:	000c      	movs	r4, r1
 80121e2:	6849      	ldr	r1, [r1, #4]
 80121e4:	e7c3      	b.n	801216e <_malloc_r+0x22>
 80121e6:	2303      	movs	r3, #3
 80121e8:	1cc4      	adds	r4, r0, #3
 80121ea:	439c      	bics	r4, r3
 80121ec:	42a0      	cmp	r0, r4
 80121ee:	d0e1      	beq.n	80121b4 <_malloc_r+0x68>
 80121f0:	1a21      	subs	r1, r4, r0
 80121f2:	0030      	movs	r0, r6
 80121f4:	f000 f844 	bl	8012280 <_sbrk_r>
 80121f8:	1c43      	adds	r3, r0, #1
 80121fa:	d1db      	bne.n	80121b4 <_malloc_r+0x68>
 80121fc:	e7c7      	b.n	801218e <_malloc_r+0x42>
 80121fe:	46c0      	nop			; (mov r8, r8)
 8012200:	2000609c 	.word	0x2000609c
 8012204:	200060a0 	.word	0x200060a0

08012208 <rand>:
 8012208:	4b12      	ldr	r3, [pc, #72]	; (8012254 <rand+0x4c>)
 801220a:	b510      	push	{r4, lr}
 801220c:	681c      	ldr	r4, [r3, #0]
 801220e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012210:	2b00      	cmp	r3, #0
 8012212:	d10f      	bne.n	8012234 <rand+0x2c>
 8012214:	2018      	movs	r0, #24
 8012216:	f7ff ff09 	bl	801202c <malloc>
 801221a:	4b0f      	ldr	r3, [pc, #60]	; (8012258 <rand+0x50>)
 801221c:	63a0      	str	r0, [r4, #56]	; 0x38
 801221e:	6003      	str	r3, [r0, #0]
 8012220:	4b0e      	ldr	r3, [pc, #56]	; (801225c <rand+0x54>)
 8012222:	2201      	movs	r2, #1
 8012224:	6043      	str	r3, [r0, #4]
 8012226:	4b0e      	ldr	r3, [pc, #56]	; (8012260 <rand+0x58>)
 8012228:	6083      	str	r3, [r0, #8]
 801222a:	230b      	movs	r3, #11
 801222c:	8183      	strh	r3, [r0, #12]
 801222e:	2300      	movs	r3, #0
 8012230:	6102      	str	r2, [r0, #16]
 8012232:	6143      	str	r3, [r0, #20]
 8012234:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012236:	4a0b      	ldr	r2, [pc, #44]	; (8012264 <rand+0x5c>)
 8012238:	6920      	ldr	r0, [r4, #16]
 801223a:	6961      	ldr	r1, [r4, #20]
 801223c:	4b0a      	ldr	r3, [pc, #40]	; (8012268 <rand+0x60>)
 801223e:	f7ee f96b 	bl	8000518 <__aeabi_lmul>
 8012242:	2201      	movs	r2, #1
 8012244:	2300      	movs	r3, #0
 8012246:	1880      	adds	r0, r0, r2
 8012248:	4159      	adcs	r1, r3
 801224a:	6120      	str	r0, [r4, #16]
 801224c:	6161      	str	r1, [r4, #20]
 801224e:	0048      	lsls	r0, r1, #1
 8012250:	0840      	lsrs	r0, r0, #1
 8012252:	bd10      	pop	{r4, pc}
 8012254:	20000060 	.word	0x20000060
 8012258:	abcd330e 	.word	0xabcd330e
 801225c:	e66d1234 	.word	0xe66d1234
 8012260:	0005deec 	.word	0x0005deec
 8012264:	4c957f2d 	.word	0x4c957f2d
 8012268:	5851f42d 	.word	0x5851f42d

0801226c <realloc>:
 801226c:	b510      	push	{r4, lr}
 801226e:	4b03      	ldr	r3, [pc, #12]	; (801227c <realloc+0x10>)
 8012270:	000a      	movs	r2, r1
 8012272:	0001      	movs	r1, r0
 8012274:	6818      	ldr	r0, [r3, #0]
 8012276:	f001 ff02 	bl	801407e <_realloc_r>
 801227a:	bd10      	pop	{r4, pc}
 801227c:	20000060 	.word	0x20000060

08012280 <_sbrk_r>:
 8012280:	2300      	movs	r3, #0
 8012282:	b570      	push	{r4, r5, r6, lr}
 8012284:	4c06      	ldr	r4, [pc, #24]	; (80122a0 <_sbrk_r+0x20>)
 8012286:	0005      	movs	r5, r0
 8012288:	0008      	movs	r0, r1
 801228a:	6023      	str	r3, [r4, #0]
 801228c:	f002 fa1a 	bl	80146c4 <_sbrk>
 8012290:	1c43      	adds	r3, r0, #1
 8012292:	d103      	bne.n	801229c <_sbrk_r+0x1c>
 8012294:	6823      	ldr	r3, [r4, #0]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d000      	beq.n	801229c <_sbrk_r+0x1c>
 801229a:	602b      	str	r3, [r5, #0]
 801229c:	bd70      	pop	{r4, r5, r6, pc}
 801229e:	46c0      	nop			; (mov r8, r8)
 80122a0:	20006618 	.word	0x20006618

080122a4 <siprintf>:
 80122a4:	b40e      	push	{r1, r2, r3}
 80122a6:	b500      	push	{lr}
 80122a8:	490b      	ldr	r1, [pc, #44]	; (80122d8 <siprintf+0x34>)
 80122aa:	b09c      	sub	sp, #112	; 0x70
 80122ac:	ab1d      	add	r3, sp, #116	; 0x74
 80122ae:	9002      	str	r0, [sp, #8]
 80122b0:	9006      	str	r0, [sp, #24]
 80122b2:	9107      	str	r1, [sp, #28]
 80122b4:	9104      	str	r1, [sp, #16]
 80122b6:	4809      	ldr	r0, [pc, #36]	; (80122dc <siprintf+0x38>)
 80122b8:	4909      	ldr	r1, [pc, #36]	; (80122e0 <siprintf+0x3c>)
 80122ba:	cb04      	ldmia	r3!, {r2}
 80122bc:	9105      	str	r1, [sp, #20]
 80122be:	6800      	ldr	r0, [r0, #0]
 80122c0:	a902      	add	r1, sp, #8
 80122c2:	9301      	str	r3, [sp, #4]
 80122c4:	f001 ff64 	bl	8014190 <_svfiprintf_r>
 80122c8:	2300      	movs	r3, #0
 80122ca:	9a02      	ldr	r2, [sp, #8]
 80122cc:	7013      	strb	r3, [r2, #0]
 80122ce:	b01c      	add	sp, #112	; 0x70
 80122d0:	bc08      	pop	{r3}
 80122d2:	b003      	add	sp, #12
 80122d4:	4718      	bx	r3
 80122d6:	46c0      	nop			; (mov r8, r8)
 80122d8:	7fffffff 	.word	0x7fffffff
 80122dc:	20000060 	.word	0x20000060
 80122e0:	ffff0208 	.word	0xffff0208

080122e4 <strcat>:
 80122e4:	0002      	movs	r2, r0
 80122e6:	b510      	push	{r4, lr}
 80122e8:	7813      	ldrb	r3, [r2, #0]
 80122ea:	1c54      	adds	r4, r2, #1
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d105      	bne.n	80122fc <strcat+0x18>
 80122f0:	5ccc      	ldrb	r4, [r1, r3]
 80122f2:	54d4      	strb	r4, [r2, r3]
 80122f4:	3301      	adds	r3, #1
 80122f6:	2c00      	cmp	r4, #0
 80122f8:	d1fa      	bne.n	80122f0 <strcat+0xc>
 80122fa:	bd10      	pop	{r4, pc}
 80122fc:	0022      	movs	r2, r4
 80122fe:	e7f3      	b.n	80122e8 <strcat+0x4>

08012300 <strchr>:
 8012300:	b2c9      	uxtb	r1, r1
 8012302:	7803      	ldrb	r3, [r0, #0]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d004      	beq.n	8012312 <strchr+0x12>
 8012308:	428b      	cmp	r3, r1
 801230a:	d100      	bne.n	801230e <strchr+0xe>
 801230c:	4770      	bx	lr
 801230e:	3001      	adds	r0, #1
 8012310:	e7f7      	b.n	8012302 <strchr+0x2>
 8012312:	424b      	negs	r3, r1
 8012314:	4159      	adcs	r1, r3
 8012316:	4249      	negs	r1, r1
 8012318:	4008      	ands	r0, r1
 801231a:	e7f7      	b.n	801230c <strchr+0xc>

0801231c <strcpy>:
 801231c:	0003      	movs	r3, r0
 801231e:	780a      	ldrb	r2, [r1, #0]
 8012320:	3101      	adds	r1, #1
 8012322:	701a      	strb	r2, [r3, #0]
 8012324:	3301      	adds	r3, #1
 8012326:	2a00      	cmp	r2, #0
 8012328:	d1f9      	bne.n	801231e <strcpy+0x2>
 801232a:	4770      	bx	lr

0801232c <strncmp>:
 801232c:	2300      	movs	r3, #0
 801232e:	b530      	push	{r4, r5, lr}
 8012330:	429a      	cmp	r2, r3
 8012332:	d00a      	beq.n	801234a <strncmp+0x1e>
 8012334:	3a01      	subs	r2, #1
 8012336:	5cc4      	ldrb	r4, [r0, r3]
 8012338:	5ccd      	ldrb	r5, [r1, r3]
 801233a:	42ac      	cmp	r4, r5
 801233c:	d104      	bne.n	8012348 <strncmp+0x1c>
 801233e:	4293      	cmp	r3, r2
 8012340:	d002      	beq.n	8012348 <strncmp+0x1c>
 8012342:	3301      	adds	r3, #1
 8012344:	2c00      	cmp	r4, #0
 8012346:	d1f6      	bne.n	8012336 <strncmp+0xa>
 8012348:	1b63      	subs	r3, r4, r5
 801234a:	0018      	movs	r0, r3
 801234c:	bd30      	pop	{r4, r5, pc}

0801234e <strncpy>:
 801234e:	b530      	push	{r4, r5, lr}
 8012350:	0005      	movs	r5, r0
 8012352:	2a00      	cmp	r2, #0
 8012354:	d100      	bne.n	8012358 <strncpy+0xa>
 8012356:	bd30      	pop	{r4, r5, pc}
 8012358:	780c      	ldrb	r4, [r1, #0]
 801235a:	3a01      	subs	r2, #1
 801235c:	1c6b      	adds	r3, r5, #1
 801235e:	702c      	strb	r4, [r5, #0]
 8012360:	3101      	adds	r1, #1
 8012362:	2c00      	cmp	r4, #0
 8012364:	d105      	bne.n	8012372 <strncpy+0x24>
 8012366:	189a      	adds	r2, r3, r2
 8012368:	429a      	cmp	r2, r3
 801236a:	d0f4      	beq.n	8012356 <strncpy+0x8>
 801236c:	701c      	strb	r4, [r3, #0]
 801236e:	3301      	adds	r3, #1
 8012370:	e7fa      	b.n	8012368 <strncpy+0x1a>
 8012372:	001d      	movs	r5, r3
 8012374:	e7ed      	b.n	8012352 <strncpy+0x4>
	...

08012378 <sulp>:
 8012378:	b570      	push	{r4, r5, r6, lr}
 801237a:	0016      	movs	r6, r2
 801237c:	000d      	movs	r5, r1
 801237e:	f001 fd4b 	bl	8013e18 <__ulp>
 8012382:	2e00      	cmp	r6, #0
 8012384:	d00d      	beq.n	80123a2 <sulp+0x2a>
 8012386:	236b      	movs	r3, #107	; 0x6b
 8012388:	006a      	lsls	r2, r5, #1
 801238a:	0d52      	lsrs	r2, r2, #21
 801238c:	1a9b      	subs	r3, r3, r2
 801238e:	2b00      	cmp	r3, #0
 8012390:	dd07      	ble.n	80123a2 <sulp+0x2a>
 8012392:	2400      	movs	r4, #0
 8012394:	4a03      	ldr	r2, [pc, #12]	; (80123a4 <sulp+0x2c>)
 8012396:	051b      	lsls	r3, r3, #20
 8012398:	189d      	adds	r5, r3, r2
 801239a:	002b      	movs	r3, r5
 801239c:	0022      	movs	r2, r4
 801239e:	f7ef fd6f 	bl	8001e80 <__aeabi_dmul>
 80123a2:	bd70      	pop	{r4, r5, r6, pc}
 80123a4:	3ff00000 	.word	0x3ff00000

080123a8 <_strtod_l>:
 80123a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123aa:	b0a7      	sub	sp, #156	; 0x9c
 80123ac:	9307      	str	r3, [sp, #28]
 80123ae:	2300      	movs	r3, #0
 80123b0:	9004      	str	r0, [sp, #16]
 80123b2:	9807      	ldr	r0, [sp, #28]
 80123b4:	9322      	str	r3, [sp, #136]	; 0x88
 80123b6:	9106      	str	r1, [sp, #24]
 80123b8:	921d      	str	r2, [sp, #116]	; 0x74
 80123ba:	f001 fa58 	bl	801386e <__localeconv_l>
 80123be:	0005      	movs	r5, r0
 80123c0:	6800      	ldr	r0, [r0, #0]
 80123c2:	f7ed fea9 	bl	8000118 <strlen>
 80123c6:	2600      	movs	r6, #0
 80123c8:	2700      	movs	r7, #0
 80123ca:	9b06      	ldr	r3, [sp, #24]
 80123cc:	9005      	str	r0, [sp, #20]
 80123ce:	9321      	str	r3, [sp, #132]	; 0x84
 80123d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80123d2:	781a      	ldrb	r2, [r3, #0]
 80123d4:	2a0d      	cmp	r2, #13
 80123d6:	d839      	bhi.n	801244c <_strtod_l+0xa4>
 80123d8:	2a09      	cmp	r2, #9
 80123da:	d23d      	bcs.n	8012458 <_strtod_l+0xb0>
 80123dc:	2a00      	cmp	r2, #0
 80123de:	d044      	beq.n	801246a <_strtod_l+0xc2>
 80123e0:	2300      	movs	r3, #0
 80123e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80123e4:	2200      	movs	r2, #0
 80123e6:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80123e8:	920c      	str	r2, [sp, #48]	; 0x30
 80123ea:	7823      	ldrb	r3, [r4, #0]
 80123ec:	2b30      	cmp	r3, #48	; 0x30
 80123ee:	d000      	beq.n	80123f2 <_strtod_l+0x4a>
 80123f0:	e07e      	b.n	80124f0 <_strtod_l+0x148>
 80123f2:	7863      	ldrb	r3, [r4, #1]
 80123f4:	2b58      	cmp	r3, #88	; 0x58
 80123f6:	d002      	beq.n	80123fe <_strtod_l+0x56>
 80123f8:	2b78      	cmp	r3, #120	; 0x78
 80123fa:	d000      	beq.n	80123fe <_strtod_l+0x56>
 80123fc:	e06e      	b.n	80124dc <_strtod_l+0x134>
 80123fe:	9b07      	ldr	r3, [sp, #28]
 8012400:	4a96      	ldr	r2, [pc, #600]	; (801265c <_strtod_l+0x2b4>)
 8012402:	9302      	str	r3, [sp, #8]
 8012404:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012406:	a921      	add	r1, sp, #132	; 0x84
 8012408:	9301      	str	r3, [sp, #4]
 801240a:	ab22      	add	r3, sp, #136	; 0x88
 801240c:	9300      	str	r3, [sp, #0]
 801240e:	9804      	ldr	r0, [sp, #16]
 8012410:	ab23      	add	r3, sp, #140	; 0x8c
 8012412:	f000 ff44 	bl	801329e <__gethex>
 8012416:	2507      	movs	r5, #7
 8012418:	9005      	str	r0, [sp, #20]
 801241a:	4005      	ands	r5, r0
 801241c:	d005      	beq.n	801242a <_strtod_l+0x82>
 801241e:	2d06      	cmp	r5, #6
 8012420:	d12f      	bne.n	8012482 <_strtod_l+0xda>
 8012422:	2300      	movs	r3, #0
 8012424:	3401      	adds	r4, #1
 8012426:	9421      	str	r4, [sp, #132]	; 0x84
 8012428:	9313      	str	r3, [sp, #76]	; 0x4c
 801242a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801242c:	2b00      	cmp	r3, #0
 801242e:	d002      	beq.n	8012436 <_strtod_l+0x8e>
 8012430:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012432:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012434:	601a      	str	r2, [r3, #0]
 8012436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012438:	2b00      	cmp	r3, #0
 801243a:	d01d      	beq.n	8012478 <_strtod_l+0xd0>
 801243c:	2380      	movs	r3, #128	; 0x80
 801243e:	0032      	movs	r2, r6
 8012440:	061b      	lsls	r3, r3, #24
 8012442:	18fb      	adds	r3, r7, r3
 8012444:	0010      	movs	r0, r2
 8012446:	0019      	movs	r1, r3
 8012448:	b027      	add	sp, #156	; 0x9c
 801244a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801244c:	2a2b      	cmp	r2, #43	; 0x2b
 801244e:	d016      	beq.n	801247e <_strtod_l+0xd6>
 8012450:	2a2d      	cmp	r2, #45	; 0x2d
 8012452:	d003      	beq.n	801245c <_strtod_l+0xb4>
 8012454:	2a20      	cmp	r2, #32
 8012456:	d1c3      	bne.n	80123e0 <_strtod_l+0x38>
 8012458:	3301      	adds	r3, #1
 801245a:	e7b8      	b.n	80123ce <_strtod_l+0x26>
 801245c:	2201      	movs	r2, #1
 801245e:	9213      	str	r2, [sp, #76]	; 0x4c
 8012460:	1c5a      	adds	r2, r3, #1
 8012462:	9221      	str	r2, [sp, #132]	; 0x84
 8012464:	785b      	ldrb	r3, [r3, #1]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d1bc      	bne.n	80123e4 <_strtod_l+0x3c>
 801246a:	9b06      	ldr	r3, [sp, #24]
 801246c:	9321      	str	r3, [sp, #132]	; 0x84
 801246e:	2300      	movs	r3, #0
 8012470:	9313      	str	r3, [sp, #76]	; 0x4c
 8012472:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012474:	2b00      	cmp	r3, #0
 8012476:	d1db      	bne.n	8012430 <_strtod_l+0x88>
 8012478:	0032      	movs	r2, r6
 801247a:	003b      	movs	r3, r7
 801247c:	e7e2      	b.n	8012444 <_strtod_l+0x9c>
 801247e:	2200      	movs	r2, #0
 8012480:	e7ed      	b.n	801245e <_strtod_l+0xb6>
 8012482:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012484:	2a00      	cmp	r2, #0
 8012486:	d007      	beq.n	8012498 <_strtod_l+0xf0>
 8012488:	2135      	movs	r1, #53	; 0x35
 801248a:	a824      	add	r0, sp, #144	; 0x90
 801248c:	f001 fdb1 	bl	8013ff2 <__copybits>
 8012490:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012492:	9804      	ldr	r0, [sp, #16]
 8012494:	f001 fa27 	bl	80138e6 <_Bfree>
 8012498:	1e68      	subs	r0, r5, #1
 801249a:	2804      	cmp	r0, #4
 801249c:	d806      	bhi.n	80124ac <_strtod_l+0x104>
 801249e:	f7ed fe43 	bl	8000128 <__gnu_thumb1_case_uqi>
 80124a2:	030c      	.short	0x030c
 80124a4:	1917      	.short	0x1917
 80124a6:	0c          	.byte	0x0c
 80124a7:	00          	.byte	0x00
 80124a8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80124aa:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80124ac:	9b05      	ldr	r3, [sp, #20]
 80124ae:	071b      	lsls	r3, r3, #28
 80124b0:	d5bb      	bpl.n	801242a <_strtod_l+0x82>
 80124b2:	2380      	movs	r3, #128	; 0x80
 80124b4:	061b      	lsls	r3, r3, #24
 80124b6:	431f      	orrs	r7, r3
 80124b8:	e7b7      	b.n	801242a <_strtod_l+0x82>
 80124ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80124bc:	4a68      	ldr	r2, [pc, #416]	; (8012660 <_strtod_l+0x2b8>)
 80124be:	4969      	ldr	r1, [pc, #420]	; (8012664 <_strtod_l+0x2bc>)
 80124c0:	401a      	ands	r2, r3
 80124c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80124c4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80124c6:	185b      	adds	r3, r3, r1
 80124c8:	051b      	lsls	r3, r3, #20
 80124ca:	431a      	orrs	r2, r3
 80124cc:	0017      	movs	r7, r2
 80124ce:	e7ed      	b.n	80124ac <_strtod_l+0x104>
 80124d0:	4f65      	ldr	r7, [pc, #404]	; (8012668 <_strtod_l+0x2c0>)
 80124d2:	e7eb      	b.n	80124ac <_strtod_l+0x104>
 80124d4:	2601      	movs	r6, #1
 80124d6:	4f65      	ldr	r7, [pc, #404]	; (801266c <_strtod_l+0x2c4>)
 80124d8:	4276      	negs	r6, r6
 80124da:	e7e7      	b.n	80124ac <_strtod_l+0x104>
 80124dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124de:	1c5a      	adds	r2, r3, #1
 80124e0:	9221      	str	r2, [sp, #132]	; 0x84
 80124e2:	785b      	ldrb	r3, [r3, #1]
 80124e4:	2b30      	cmp	r3, #48	; 0x30
 80124e6:	d0f9      	beq.n	80124dc <_strtod_l+0x134>
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d09e      	beq.n	801242a <_strtod_l+0x82>
 80124ec:	2301      	movs	r3, #1
 80124ee:	930c      	str	r3, [sp, #48]	; 0x30
 80124f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124f2:	220a      	movs	r2, #10
 80124f4:	9312      	str	r3, [sp, #72]	; 0x48
 80124f6:	2300      	movs	r3, #0
 80124f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80124fa:	9308      	str	r3, [sp, #32]
 80124fc:	930a      	str	r3, [sp, #40]	; 0x28
 80124fe:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012500:	7804      	ldrb	r4, [r0, #0]
 8012502:	0023      	movs	r3, r4
 8012504:	3b30      	subs	r3, #48	; 0x30
 8012506:	b2d9      	uxtb	r1, r3
 8012508:	2909      	cmp	r1, #9
 801250a:	d934      	bls.n	8012576 <_strtod_l+0x1ce>
 801250c:	9a05      	ldr	r2, [sp, #20]
 801250e:	6829      	ldr	r1, [r5, #0]
 8012510:	f7ff ff0c 	bl	801232c <strncmp>
 8012514:	2800      	cmp	r0, #0
 8012516:	d040      	beq.n	801259a <_strtod_l+0x1f2>
 8012518:	2000      	movs	r0, #0
 801251a:	0023      	movs	r3, r4
 801251c:	4684      	mov	ip, r0
 801251e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012520:	9007      	str	r0, [sp, #28]
 8012522:	9205      	str	r2, [sp, #20]
 8012524:	2220      	movs	r2, #32
 8012526:	0019      	movs	r1, r3
 8012528:	4391      	bics	r1, r2
 801252a:	000a      	movs	r2, r1
 801252c:	2100      	movs	r1, #0
 801252e:	2a45      	cmp	r2, #69	; 0x45
 8012530:	d000      	beq.n	8012534 <_strtod_l+0x18c>
 8012532:	e0bf      	b.n	80126b4 <_strtod_l+0x30c>
 8012534:	9b05      	ldr	r3, [sp, #20]
 8012536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012538:	4303      	orrs	r3, r0
 801253a:	4313      	orrs	r3, r2
 801253c:	428b      	cmp	r3, r1
 801253e:	d094      	beq.n	801246a <_strtod_l+0xc2>
 8012540:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012542:	9306      	str	r3, [sp, #24]
 8012544:	3301      	adds	r3, #1
 8012546:	9321      	str	r3, [sp, #132]	; 0x84
 8012548:	9b06      	ldr	r3, [sp, #24]
 801254a:	785b      	ldrb	r3, [r3, #1]
 801254c:	2b2b      	cmp	r3, #43	; 0x2b
 801254e:	d100      	bne.n	8012552 <_strtod_l+0x1aa>
 8012550:	e082      	b.n	8012658 <_strtod_l+0x2b0>
 8012552:	000c      	movs	r4, r1
 8012554:	2b2d      	cmp	r3, #45	; 0x2d
 8012556:	d105      	bne.n	8012564 <_strtod_l+0x1bc>
 8012558:	2401      	movs	r4, #1
 801255a:	9b06      	ldr	r3, [sp, #24]
 801255c:	3302      	adds	r3, #2
 801255e:	9321      	str	r3, [sp, #132]	; 0x84
 8012560:	9b06      	ldr	r3, [sp, #24]
 8012562:	789b      	ldrb	r3, [r3, #2]
 8012564:	001a      	movs	r2, r3
 8012566:	3a30      	subs	r2, #48	; 0x30
 8012568:	2a09      	cmp	r2, #9
 801256a:	d800      	bhi.n	801256e <_strtod_l+0x1c6>
 801256c:	e084      	b.n	8012678 <_strtod_l+0x2d0>
 801256e:	9a06      	ldr	r2, [sp, #24]
 8012570:	2100      	movs	r1, #0
 8012572:	9221      	str	r2, [sp, #132]	; 0x84
 8012574:	e09e      	b.n	80126b4 <_strtod_l+0x30c>
 8012576:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012578:	2908      	cmp	r1, #8
 801257a:	dc09      	bgt.n	8012590 <_strtod_l+0x1e8>
 801257c:	9908      	ldr	r1, [sp, #32]
 801257e:	4351      	muls	r1, r2
 8012580:	18cb      	adds	r3, r1, r3
 8012582:	9308      	str	r3, [sp, #32]
 8012584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012586:	3001      	adds	r0, #1
 8012588:	3301      	adds	r3, #1
 801258a:	930a      	str	r3, [sp, #40]	; 0x28
 801258c:	9021      	str	r0, [sp, #132]	; 0x84
 801258e:	e7b6      	b.n	80124fe <_strtod_l+0x156>
 8012590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012592:	4351      	muls	r1, r2
 8012594:	18cb      	adds	r3, r1, r3
 8012596:	930b      	str	r3, [sp, #44]	; 0x2c
 8012598:	e7f4      	b.n	8012584 <_strtod_l+0x1dc>
 801259a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801259c:	9b05      	ldr	r3, [sp, #20]
 801259e:	4694      	mov	ip, r2
 80125a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125a2:	4463      	add	r3, ip
 80125a4:	9321      	str	r3, [sp, #132]	; 0x84
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	2a00      	cmp	r2, #0
 80125aa:	d036      	beq.n	801261a <_strtod_l+0x272>
 80125ac:	4684      	mov	ip, r0
 80125ae:	9205      	str	r2, [sp, #20]
 80125b0:	001a      	movs	r2, r3
 80125b2:	3a30      	subs	r2, #48	; 0x30
 80125b4:	2a09      	cmp	r2, #9
 80125b6:	d912      	bls.n	80125de <_strtod_l+0x236>
 80125b8:	2201      	movs	r2, #1
 80125ba:	9207      	str	r2, [sp, #28]
 80125bc:	e7b2      	b.n	8012524 <_strtod_l+0x17c>
 80125be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125c0:	3001      	adds	r0, #1
 80125c2:	1c5a      	adds	r2, r3, #1
 80125c4:	9221      	str	r2, [sp, #132]	; 0x84
 80125c6:	785b      	ldrb	r3, [r3, #1]
 80125c8:	2b30      	cmp	r3, #48	; 0x30
 80125ca:	d0f8      	beq.n	80125be <_strtod_l+0x216>
 80125cc:	001a      	movs	r2, r3
 80125ce:	3a31      	subs	r2, #49	; 0x31
 80125d0:	2a08      	cmp	r2, #8
 80125d2:	d83c      	bhi.n	801264e <_strtod_l+0x2a6>
 80125d4:	4684      	mov	ip, r0
 80125d6:	2000      	movs	r0, #0
 80125d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80125da:	9005      	str	r0, [sp, #20]
 80125dc:	9212      	str	r2, [sp, #72]	; 0x48
 80125de:	3b30      	subs	r3, #48	; 0x30
 80125e0:	1c42      	adds	r2, r0, #1
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d013      	beq.n	801260e <_strtod_l+0x266>
 80125e6:	210a      	movs	r1, #10
 80125e8:	4494      	add	ip, r2
 80125ea:	9a05      	ldr	r2, [sp, #20]
 80125ec:	1885      	adds	r5, r0, r2
 80125ee:	42aa      	cmp	r2, r5
 80125f0:	d115      	bne.n	801261e <_strtod_l+0x276>
 80125f2:	9905      	ldr	r1, [sp, #20]
 80125f4:	9a05      	ldr	r2, [sp, #20]
 80125f6:	3101      	adds	r1, #1
 80125f8:	1809      	adds	r1, r1, r0
 80125fa:	1812      	adds	r2, r2, r0
 80125fc:	9105      	str	r1, [sp, #20]
 80125fe:	2a08      	cmp	r2, #8
 8012600:	dc1b      	bgt.n	801263a <_strtod_l+0x292>
 8012602:	220a      	movs	r2, #10
 8012604:	9908      	ldr	r1, [sp, #32]
 8012606:	434a      	muls	r2, r1
 8012608:	189b      	adds	r3, r3, r2
 801260a:	2200      	movs	r2, #0
 801260c:	9308      	str	r3, [sp, #32]
 801260e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012610:	0010      	movs	r0, r2
 8012612:	1c59      	adds	r1, r3, #1
 8012614:	9121      	str	r1, [sp, #132]	; 0x84
 8012616:	785b      	ldrb	r3, [r3, #1]
 8012618:	e7ca      	b.n	80125b0 <_strtod_l+0x208>
 801261a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801261c:	e7d4      	b.n	80125c8 <_strtod_l+0x220>
 801261e:	1c54      	adds	r4, r2, #1
 8012620:	2a08      	cmp	r2, #8
 8012622:	dc04      	bgt.n	801262e <_strtod_l+0x286>
 8012624:	9a08      	ldr	r2, [sp, #32]
 8012626:	434a      	muls	r2, r1
 8012628:	9208      	str	r2, [sp, #32]
 801262a:	0022      	movs	r2, r4
 801262c:	e7df      	b.n	80125ee <_strtod_l+0x246>
 801262e:	2c10      	cmp	r4, #16
 8012630:	dcfb      	bgt.n	801262a <_strtod_l+0x282>
 8012632:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012634:	434a      	muls	r2, r1
 8012636:	920b      	str	r2, [sp, #44]	; 0x2c
 8012638:	e7f7      	b.n	801262a <_strtod_l+0x282>
 801263a:	9905      	ldr	r1, [sp, #20]
 801263c:	2200      	movs	r2, #0
 801263e:	2910      	cmp	r1, #16
 8012640:	dce5      	bgt.n	801260e <_strtod_l+0x266>
 8012642:	210a      	movs	r1, #10
 8012644:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012646:	4341      	muls	r1, r0
 8012648:	185b      	adds	r3, r3, r1
 801264a:	930b      	str	r3, [sp, #44]	; 0x2c
 801264c:	e7df      	b.n	801260e <_strtod_l+0x266>
 801264e:	2200      	movs	r2, #0
 8012650:	4694      	mov	ip, r2
 8012652:	9205      	str	r2, [sp, #20]
 8012654:	3201      	adds	r2, #1
 8012656:	e7b0      	b.n	80125ba <_strtod_l+0x212>
 8012658:	000c      	movs	r4, r1
 801265a:	e77e      	b.n	801255a <_strtod_l+0x1b2>
 801265c:	08019aec 	.word	0x08019aec
 8012660:	ffefffff 	.word	0xffefffff
 8012664:	00000433 	.word	0x00000433
 8012668:	7ff00000 	.word	0x7ff00000
 801266c:	7fffffff 	.word	0x7fffffff
 8012670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012672:	1c5a      	adds	r2, r3, #1
 8012674:	9221      	str	r2, [sp, #132]	; 0x84
 8012676:	785b      	ldrb	r3, [r3, #1]
 8012678:	2b30      	cmp	r3, #48	; 0x30
 801267a:	d0f9      	beq.n	8012670 <_strtod_l+0x2c8>
 801267c:	001a      	movs	r2, r3
 801267e:	3a31      	subs	r2, #49	; 0x31
 8012680:	2100      	movs	r1, #0
 8012682:	2a08      	cmp	r2, #8
 8012684:	d816      	bhi.n	80126b4 <_strtod_l+0x30c>
 8012686:	3b30      	subs	r3, #48	; 0x30
 8012688:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801268a:	930e      	str	r3, [sp, #56]	; 0x38
 801268c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801268e:	1c59      	adds	r1, r3, #1
 8012690:	9121      	str	r1, [sp, #132]	; 0x84
 8012692:	785b      	ldrb	r3, [r3, #1]
 8012694:	001a      	movs	r2, r3
 8012696:	3a30      	subs	r2, #48	; 0x30
 8012698:	2a09      	cmp	r2, #9
 801269a:	d932      	bls.n	8012702 <_strtod_l+0x35a>
 801269c:	1b4a      	subs	r2, r1, r5
 801269e:	4dad      	ldr	r5, [pc, #692]	; (8012954 <_strtod_l+0x5ac>)
 80126a0:	0029      	movs	r1, r5
 80126a2:	2a08      	cmp	r2, #8
 80126a4:	dc03      	bgt.n	80126ae <_strtod_l+0x306>
 80126a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80126a8:	42a9      	cmp	r1, r5
 80126aa:	dd00      	ble.n	80126ae <_strtod_l+0x306>
 80126ac:	0029      	movs	r1, r5
 80126ae:	2c00      	cmp	r4, #0
 80126b0:	d000      	beq.n	80126b4 <_strtod_l+0x30c>
 80126b2:	4249      	negs	r1, r1
 80126b4:	9a05      	ldr	r2, [sp, #20]
 80126b6:	2a00      	cmp	r2, #0
 80126b8:	d149      	bne.n	801274e <_strtod_l+0x3a6>
 80126ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80126bc:	4310      	orrs	r0, r2
 80126be:	d000      	beq.n	80126c2 <_strtod_l+0x31a>
 80126c0:	e6b3      	b.n	801242a <_strtod_l+0x82>
 80126c2:	9a07      	ldr	r2, [sp, #28]
 80126c4:	2a00      	cmp	r2, #0
 80126c6:	d000      	beq.n	80126ca <_strtod_l+0x322>
 80126c8:	e6cf      	b.n	801246a <_strtod_l+0xc2>
 80126ca:	2b4e      	cmp	r3, #78	; 0x4e
 80126cc:	d025      	beq.n	801271a <_strtod_l+0x372>
 80126ce:	dc1f      	bgt.n	8012710 <_strtod_l+0x368>
 80126d0:	2b49      	cmp	r3, #73	; 0x49
 80126d2:	d000      	beq.n	80126d6 <_strtod_l+0x32e>
 80126d4:	e6c9      	b.n	801246a <_strtod_l+0xc2>
 80126d6:	49a0      	ldr	r1, [pc, #640]	; (8012958 <_strtod_l+0x5b0>)
 80126d8:	a821      	add	r0, sp, #132	; 0x84
 80126da:	f001 f81d 	bl	8013718 <__match>
 80126de:	2800      	cmp	r0, #0
 80126e0:	d100      	bne.n	80126e4 <_strtod_l+0x33c>
 80126e2:	e6c2      	b.n	801246a <_strtod_l+0xc2>
 80126e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126e6:	499d      	ldr	r1, [pc, #628]	; (801295c <_strtod_l+0x5b4>)
 80126e8:	3b01      	subs	r3, #1
 80126ea:	a821      	add	r0, sp, #132	; 0x84
 80126ec:	9321      	str	r3, [sp, #132]	; 0x84
 80126ee:	f001 f813 	bl	8013718 <__match>
 80126f2:	2800      	cmp	r0, #0
 80126f4:	d102      	bne.n	80126fc <_strtod_l+0x354>
 80126f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126f8:	3301      	adds	r3, #1
 80126fa:	9321      	str	r3, [sp, #132]	; 0x84
 80126fc:	4f98      	ldr	r7, [pc, #608]	; (8012960 <_strtod_l+0x5b8>)
 80126fe:	2600      	movs	r6, #0
 8012700:	e693      	b.n	801242a <_strtod_l+0x82>
 8012702:	220a      	movs	r2, #10
 8012704:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012706:	434a      	muls	r2, r1
 8012708:	18d2      	adds	r2, r2, r3
 801270a:	3a30      	subs	r2, #48	; 0x30
 801270c:	920e      	str	r2, [sp, #56]	; 0x38
 801270e:	e7bd      	b.n	801268c <_strtod_l+0x2e4>
 8012710:	2b69      	cmp	r3, #105	; 0x69
 8012712:	d0e0      	beq.n	80126d6 <_strtod_l+0x32e>
 8012714:	2b6e      	cmp	r3, #110	; 0x6e
 8012716:	d000      	beq.n	801271a <_strtod_l+0x372>
 8012718:	e6a7      	b.n	801246a <_strtod_l+0xc2>
 801271a:	4992      	ldr	r1, [pc, #584]	; (8012964 <_strtod_l+0x5bc>)
 801271c:	a821      	add	r0, sp, #132	; 0x84
 801271e:	f000 fffb 	bl	8013718 <__match>
 8012722:	2800      	cmp	r0, #0
 8012724:	d100      	bne.n	8012728 <_strtod_l+0x380>
 8012726:	e6a0      	b.n	801246a <_strtod_l+0xc2>
 8012728:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	2b28      	cmp	r3, #40	; 0x28
 801272e:	d10c      	bne.n	801274a <_strtod_l+0x3a2>
 8012730:	aa24      	add	r2, sp, #144	; 0x90
 8012732:	498d      	ldr	r1, [pc, #564]	; (8012968 <_strtod_l+0x5c0>)
 8012734:	a821      	add	r0, sp, #132	; 0x84
 8012736:	f001 f803 	bl	8013740 <__hexnan>
 801273a:	2805      	cmp	r0, #5
 801273c:	d105      	bne.n	801274a <_strtod_l+0x3a2>
 801273e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012740:	4a87      	ldr	r2, [pc, #540]	; (8012960 <_strtod_l+0x5b8>)
 8012742:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012744:	431a      	orrs	r2, r3
 8012746:	0017      	movs	r7, r2
 8012748:	e66f      	b.n	801242a <_strtod_l+0x82>
 801274a:	4f88      	ldr	r7, [pc, #544]	; (801296c <_strtod_l+0x5c4>)
 801274c:	e7d7      	b.n	80126fe <_strtod_l+0x356>
 801274e:	4663      	mov	r3, ip
 8012750:	1acb      	subs	r3, r1, r3
 8012752:	9307      	str	r3, [sp, #28]
 8012754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012756:	2b00      	cmp	r3, #0
 8012758:	d101      	bne.n	801275e <_strtod_l+0x3b6>
 801275a:	9b05      	ldr	r3, [sp, #20]
 801275c:	930a      	str	r3, [sp, #40]	; 0x28
 801275e:	9c05      	ldr	r4, [sp, #20]
 8012760:	2c10      	cmp	r4, #16
 8012762:	dd00      	ble.n	8012766 <_strtod_l+0x3be>
 8012764:	2410      	movs	r4, #16
 8012766:	9808      	ldr	r0, [sp, #32]
 8012768:	f7f0 f9b4 	bl	8002ad4 <__aeabi_ui2d>
 801276c:	9b05      	ldr	r3, [sp, #20]
 801276e:	0006      	movs	r6, r0
 8012770:	000f      	movs	r7, r1
 8012772:	2b09      	cmp	r3, #9
 8012774:	dc15      	bgt.n	80127a2 <_strtod_l+0x3fa>
 8012776:	9b07      	ldr	r3, [sp, #28]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d100      	bne.n	801277e <_strtod_l+0x3d6>
 801277c:	e655      	b.n	801242a <_strtod_l+0x82>
 801277e:	9b07      	ldr	r3, [sp, #28]
 8012780:	2b00      	cmp	r3, #0
 8012782:	dc00      	bgt.n	8012786 <_strtod_l+0x3de>
 8012784:	e07d      	b.n	8012882 <_strtod_l+0x4da>
 8012786:	2b16      	cmp	r3, #22
 8012788:	dc62      	bgt.n	8012850 <_strtod_l+0x4a8>
 801278a:	00dc      	lsls	r4, r3, #3
 801278c:	4b78      	ldr	r3, [pc, #480]	; (8012970 <_strtod_l+0x5c8>)
 801278e:	0032      	movs	r2, r6
 8012790:	1919      	adds	r1, r3, r4
 8012792:	003b      	movs	r3, r7
 8012794:	6808      	ldr	r0, [r1, #0]
 8012796:	6849      	ldr	r1, [r1, #4]
 8012798:	f7ef fb72 	bl	8001e80 <__aeabi_dmul>
 801279c:	0006      	movs	r6, r0
 801279e:	000f      	movs	r7, r1
 80127a0:	e643      	b.n	801242a <_strtod_l+0x82>
 80127a2:	0022      	movs	r2, r4
 80127a4:	4b72      	ldr	r3, [pc, #456]	; (8012970 <_strtod_l+0x5c8>)
 80127a6:	3a09      	subs	r2, #9
 80127a8:	00d2      	lsls	r2, r2, #3
 80127aa:	189b      	adds	r3, r3, r2
 80127ac:	681a      	ldr	r2, [r3, #0]
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	f7ef fb66 	bl	8001e80 <__aeabi_dmul>
 80127b4:	0006      	movs	r6, r0
 80127b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80127b8:	000f      	movs	r7, r1
 80127ba:	f7f0 f98b 	bl	8002ad4 <__aeabi_ui2d>
 80127be:	000b      	movs	r3, r1
 80127c0:	0002      	movs	r2, r0
 80127c2:	0039      	movs	r1, r7
 80127c4:	0030      	movs	r0, r6
 80127c6:	f7ee fc35 	bl	8001034 <__aeabi_dadd>
 80127ca:	9b05      	ldr	r3, [sp, #20]
 80127cc:	0006      	movs	r6, r0
 80127ce:	000f      	movs	r7, r1
 80127d0:	2b0f      	cmp	r3, #15
 80127d2:	ddd0      	ble.n	8012776 <_strtod_l+0x3ce>
 80127d4:	9b05      	ldr	r3, [sp, #20]
 80127d6:	1b1c      	subs	r4, r3, r4
 80127d8:	9b07      	ldr	r3, [sp, #28]
 80127da:	18e4      	adds	r4, r4, r3
 80127dc:	2c00      	cmp	r4, #0
 80127de:	dc00      	bgt.n	80127e2 <_strtod_l+0x43a>
 80127e0:	e094      	b.n	801290c <_strtod_l+0x564>
 80127e2:	230f      	movs	r3, #15
 80127e4:	4023      	ands	r3, r4
 80127e6:	d00a      	beq.n	80127fe <_strtod_l+0x456>
 80127e8:	4961      	ldr	r1, [pc, #388]	; (8012970 <_strtod_l+0x5c8>)
 80127ea:	00db      	lsls	r3, r3, #3
 80127ec:	18c9      	adds	r1, r1, r3
 80127ee:	0032      	movs	r2, r6
 80127f0:	6808      	ldr	r0, [r1, #0]
 80127f2:	6849      	ldr	r1, [r1, #4]
 80127f4:	003b      	movs	r3, r7
 80127f6:	f7ef fb43 	bl	8001e80 <__aeabi_dmul>
 80127fa:	0006      	movs	r6, r0
 80127fc:	000f      	movs	r7, r1
 80127fe:	230f      	movs	r3, #15
 8012800:	439c      	bics	r4, r3
 8012802:	d06e      	beq.n	80128e2 <_strtod_l+0x53a>
 8012804:	3326      	adds	r3, #38	; 0x26
 8012806:	33ff      	adds	r3, #255	; 0xff
 8012808:	429c      	cmp	r4, r3
 801280a:	dd48      	ble.n	801289e <_strtod_l+0x4f6>
 801280c:	2400      	movs	r4, #0
 801280e:	9405      	str	r4, [sp, #20]
 8012810:	940b      	str	r4, [sp, #44]	; 0x2c
 8012812:	940a      	str	r4, [sp, #40]	; 0x28
 8012814:	2322      	movs	r3, #34	; 0x22
 8012816:	2600      	movs	r6, #0
 8012818:	9a04      	ldr	r2, [sp, #16]
 801281a:	4f51      	ldr	r7, [pc, #324]	; (8012960 <_strtod_l+0x5b8>)
 801281c:	6013      	str	r3, [r2, #0]
 801281e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012820:	42b3      	cmp	r3, r6
 8012822:	d100      	bne.n	8012826 <_strtod_l+0x47e>
 8012824:	e601      	b.n	801242a <_strtod_l+0x82>
 8012826:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012828:	9804      	ldr	r0, [sp, #16]
 801282a:	f001 f85c 	bl	80138e6 <_Bfree>
 801282e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012830:	9804      	ldr	r0, [sp, #16]
 8012832:	f001 f858 	bl	80138e6 <_Bfree>
 8012836:	9905      	ldr	r1, [sp, #20]
 8012838:	9804      	ldr	r0, [sp, #16]
 801283a:	f001 f854 	bl	80138e6 <_Bfree>
 801283e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012840:	9804      	ldr	r0, [sp, #16]
 8012842:	f001 f850 	bl	80138e6 <_Bfree>
 8012846:	0021      	movs	r1, r4
 8012848:	9804      	ldr	r0, [sp, #16]
 801284a:	f001 f84c 	bl	80138e6 <_Bfree>
 801284e:	e5ec      	b.n	801242a <_strtod_l+0x82>
 8012850:	2325      	movs	r3, #37	; 0x25
 8012852:	9a05      	ldr	r2, [sp, #20]
 8012854:	1a9b      	subs	r3, r3, r2
 8012856:	9a07      	ldr	r2, [sp, #28]
 8012858:	4293      	cmp	r3, r2
 801285a:	dbbb      	blt.n	80127d4 <_strtod_l+0x42c>
 801285c:	230f      	movs	r3, #15
 801285e:	9a05      	ldr	r2, [sp, #20]
 8012860:	4c43      	ldr	r4, [pc, #268]	; (8012970 <_strtod_l+0x5c8>)
 8012862:	1a9d      	subs	r5, r3, r2
 8012864:	00e9      	lsls	r1, r5, #3
 8012866:	1861      	adds	r1, r4, r1
 8012868:	0032      	movs	r2, r6
 801286a:	6808      	ldr	r0, [r1, #0]
 801286c:	6849      	ldr	r1, [r1, #4]
 801286e:	003b      	movs	r3, r7
 8012870:	f7ef fb06 	bl	8001e80 <__aeabi_dmul>
 8012874:	9b07      	ldr	r3, [sp, #28]
 8012876:	1b5e      	subs	r6, r3, r5
 8012878:	00f6      	lsls	r6, r6, #3
 801287a:	19a6      	adds	r6, r4, r6
 801287c:	6832      	ldr	r2, [r6, #0]
 801287e:	6873      	ldr	r3, [r6, #4]
 8012880:	e78a      	b.n	8012798 <_strtod_l+0x3f0>
 8012882:	9b07      	ldr	r3, [sp, #28]
 8012884:	3316      	adds	r3, #22
 8012886:	dba5      	blt.n	80127d4 <_strtod_l+0x42c>
 8012888:	9b07      	ldr	r3, [sp, #28]
 801288a:	0030      	movs	r0, r6
 801288c:	00da      	lsls	r2, r3, #3
 801288e:	4b38      	ldr	r3, [pc, #224]	; (8012970 <_strtod_l+0x5c8>)
 8012890:	0039      	movs	r1, r7
 8012892:	1a9b      	subs	r3, r3, r2
 8012894:	681a      	ldr	r2, [r3, #0]
 8012896:	685b      	ldr	r3, [r3, #4]
 8012898:	f7ee fee8 	bl	800166c <__aeabi_ddiv>
 801289c:	e77e      	b.n	801279c <_strtod_l+0x3f4>
 801289e:	2300      	movs	r3, #0
 80128a0:	0030      	movs	r0, r6
 80128a2:	0039      	movs	r1, r7
 80128a4:	001d      	movs	r5, r3
 80128a6:	1124      	asrs	r4, r4, #4
 80128a8:	2c01      	cmp	r4, #1
 80128aa:	dc1d      	bgt.n	80128e8 <_strtod_l+0x540>
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d001      	beq.n	80128b4 <_strtod_l+0x50c>
 80128b0:	0006      	movs	r6, r0
 80128b2:	000f      	movs	r7, r1
 80128b4:	4b2f      	ldr	r3, [pc, #188]	; (8012974 <_strtod_l+0x5cc>)
 80128b6:	00ed      	lsls	r5, r5, #3
 80128b8:	18ff      	adds	r7, r7, r3
 80128ba:	4b2f      	ldr	r3, [pc, #188]	; (8012978 <_strtod_l+0x5d0>)
 80128bc:	0032      	movs	r2, r6
 80128be:	195d      	adds	r5, r3, r5
 80128c0:	6828      	ldr	r0, [r5, #0]
 80128c2:	6869      	ldr	r1, [r5, #4]
 80128c4:	003b      	movs	r3, r7
 80128c6:	f7ef fadb 	bl	8001e80 <__aeabi_dmul>
 80128ca:	4b25      	ldr	r3, [pc, #148]	; (8012960 <_strtod_l+0x5b8>)
 80128cc:	4a2b      	ldr	r2, [pc, #172]	; (801297c <_strtod_l+0x5d4>)
 80128ce:	0006      	movs	r6, r0
 80128d0:	400b      	ands	r3, r1
 80128d2:	4293      	cmp	r3, r2
 80128d4:	d89a      	bhi.n	801280c <_strtod_l+0x464>
 80128d6:	4a2a      	ldr	r2, [pc, #168]	; (8012980 <_strtod_l+0x5d8>)
 80128d8:	4293      	cmp	r3, r2
 80128da:	d913      	bls.n	8012904 <_strtod_l+0x55c>
 80128dc:	2601      	movs	r6, #1
 80128de:	4f29      	ldr	r7, [pc, #164]	; (8012984 <_strtod_l+0x5dc>)
 80128e0:	4276      	negs	r6, r6
 80128e2:	2300      	movs	r3, #0
 80128e4:	9306      	str	r3, [sp, #24]
 80128e6:	e07b      	b.n	80129e0 <_strtod_l+0x638>
 80128e8:	2201      	movs	r2, #1
 80128ea:	4214      	tst	r4, r2
 80128ec:	d007      	beq.n	80128fe <_strtod_l+0x556>
 80128ee:	4a22      	ldr	r2, [pc, #136]	; (8012978 <_strtod_l+0x5d0>)
 80128f0:	00eb      	lsls	r3, r5, #3
 80128f2:	189b      	adds	r3, r3, r2
 80128f4:	681a      	ldr	r2, [r3, #0]
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	f7ef fac2 	bl	8001e80 <__aeabi_dmul>
 80128fc:	2301      	movs	r3, #1
 80128fe:	3501      	adds	r5, #1
 8012900:	1064      	asrs	r4, r4, #1
 8012902:	e7d1      	b.n	80128a8 <_strtod_l+0x500>
 8012904:	23d4      	movs	r3, #212	; 0xd4
 8012906:	049b      	lsls	r3, r3, #18
 8012908:	18cf      	adds	r7, r1, r3
 801290a:	e7ea      	b.n	80128e2 <_strtod_l+0x53a>
 801290c:	2c00      	cmp	r4, #0
 801290e:	d0e8      	beq.n	80128e2 <_strtod_l+0x53a>
 8012910:	230f      	movs	r3, #15
 8012912:	4264      	negs	r4, r4
 8012914:	4023      	ands	r3, r4
 8012916:	d00a      	beq.n	801292e <_strtod_l+0x586>
 8012918:	4a15      	ldr	r2, [pc, #84]	; (8012970 <_strtod_l+0x5c8>)
 801291a:	00db      	lsls	r3, r3, #3
 801291c:	18d3      	adds	r3, r2, r3
 801291e:	0030      	movs	r0, r6
 8012920:	681a      	ldr	r2, [r3, #0]
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	0039      	movs	r1, r7
 8012926:	f7ee fea1 	bl	800166c <__aeabi_ddiv>
 801292a:	0006      	movs	r6, r0
 801292c:	000f      	movs	r7, r1
 801292e:	1124      	asrs	r4, r4, #4
 8012930:	d0d7      	beq.n	80128e2 <_strtod_l+0x53a>
 8012932:	2c1f      	cmp	r4, #31
 8012934:	dd28      	ble.n	8012988 <_strtod_l+0x5e0>
 8012936:	2400      	movs	r4, #0
 8012938:	9405      	str	r4, [sp, #20]
 801293a:	940b      	str	r4, [sp, #44]	; 0x2c
 801293c:	940a      	str	r4, [sp, #40]	; 0x28
 801293e:	2322      	movs	r3, #34	; 0x22
 8012940:	9a04      	ldr	r2, [sp, #16]
 8012942:	2600      	movs	r6, #0
 8012944:	6013      	str	r3, [r2, #0]
 8012946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012948:	2700      	movs	r7, #0
 801294a:	2b00      	cmp	r3, #0
 801294c:	d000      	beq.n	8012950 <_strtod_l+0x5a8>
 801294e:	e76a      	b.n	8012826 <_strtod_l+0x47e>
 8012950:	e56b      	b.n	801242a <_strtod_l+0x82>
 8012952:	46c0      	nop			; (mov r8, r8)
 8012954:	00004e1f 	.word	0x00004e1f
 8012958:	08019ade 	.word	0x08019ade
 801295c:	08019ae1 	.word	0x08019ae1
 8012960:	7ff00000 	.word	0x7ff00000
 8012964:	08019ae7 	.word	0x08019ae7
 8012968:	08019b00 	.word	0x08019b00
 801296c:	fff80000 	.word	0xfff80000
 8012970:	08019c70 	.word	0x08019c70
 8012974:	fcb00000 	.word	0xfcb00000
 8012978:	08019c48 	.word	0x08019c48
 801297c:	7ca00000 	.word	0x7ca00000
 8012980:	7c900000 	.word	0x7c900000
 8012984:	7fefffff 	.word	0x7fefffff
 8012988:	2310      	movs	r3, #16
 801298a:	4023      	ands	r3, r4
 801298c:	9306      	str	r3, [sp, #24]
 801298e:	d001      	beq.n	8012994 <_strtod_l+0x5ec>
 8012990:	236a      	movs	r3, #106	; 0x6a
 8012992:	9306      	str	r3, [sp, #24]
 8012994:	2300      	movs	r3, #0
 8012996:	0030      	movs	r0, r6
 8012998:	0039      	movs	r1, r7
 801299a:	001d      	movs	r5, r3
 801299c:	2c00      	cmp	r4, #0
 801299e:	dd00      	ble.n	80129a2 <_strtod_l+0x5fa>
 80129a0:	e10e      	b.n	8012bc0 <_strtod_l+0x818>
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d001      	beq.n	80129aa <_strtod_l+0x602>
 80129a6:	0006      	movs	r6, r0
 80129a8:	000f      	movs	r7, r1
 80129aa:	9b06      	ldr	r3, [sp, #24]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d00f      	beq.n	80129d0 <_strtod_l+0x628>
 80129b0:	236b      	movs	r3, #107	; 0x6b
 80129b2:	0079      	lsls	r1, r7, #1
 80129b4:	0d49      	lsrs	r1, r1, #21
 80129b6:	003a      	movs	r2, r7
 80129b8:	1a5b      	subs	r3, r3, r1
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	dd08      	ble.n	80129d0 <_strtod_l+0x628>
 80129be:	2b1f      	cmp	r3, #31
 80129c0:	dc00      	bgt.n	80129c4 <_strtod_l+0x61c>
 80129c2:	e112      	b.n	8012bea <_strtod_l+0x842>
 80129c4:	2600      	movs	r6, #0
 80129c6:	2b34      	cmp	r3, #52	; 0x34
 80129c8:	dc00      	bgt.n	80129cc <_strtod_l+0x624>
 80129ca:	e107      	b.n	8012bdc <_strtod_l+0x834>
 80129cc:	27dc      	movs	r7, #220	; 0xdc
 80129ce:	04bf      	lsls	r7, r7, #18
 80129d0:	2200      	movs	r2, #0
 80129d2:	2300      	movs	r3, #0
 80129d4:	0030      	movs	r0, r6
 80129d6:	0039      	movs	r1, r7
 80129d8:	f7ed fd36 	bl	8000448 <__aeabi_dcmpeq>
 80129dc:	2800      	cmp	r0, #0
 80129de:	d1aa      	bne.n	8012936 <_strtod_l+0x58e>
 80129e0:	9b08      	ldr	r3, [sp, #32]
 80129e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129e4:	9300      	str	r3, [sp, #0]
 80129e6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80129e8:	9b05      	ldr	r3, [sp, #20]
 80129ea:	9804      	ldr	r0, [sp, #16]
 80129ec:	f000 ffd2 	bl	8013994 <__s2b>
 80129f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d100      	bne.n	80129f8 <_strtod_l+0x650>
 80129f6:	e709      	b.n	801280c <_strtod_l+0x464>
 80129f8:	9b07      	ldr	r3, [sp, #28]
 80129fa:	9a07      	ldr	r2, [sp, #28]
 80129fc:	17db      	asrs	r3, r3, #31
 80129fe:	4252      	negs	r2, r2
 8012a00:	4013      	ands	r3, r2
 8012a02:	9315      	str	r3, [sp, #84]	; 0x54
 8012a04:	9b07      	ldr	r3, [sp, #28]
 8012a06:	2400      	movs	r4, #0
 8012a08:	43db      	mvns	r3, r3
 8012a0a:	9a07      	ldr	r2, [sp, #28]
 8012a0c:	17db      	asrs	r3, r3, #31
 8012a0e:	401a      	ands	r2, r3
 8012a10:	921c      	str	r2, [sp, #112]	; 0x70
 8012a12:	9405      	str	r4, [sp, #20]
 8012a14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a16:	9804      	ldr	r0, [sp, #16]
 8012a18:	6859      	ldr	r1, [r3, #4]
 8012a1a:	f000 ff2c 	bl	8013876 <_Balloc>
 8012a1e:	900a      	str	r0, [sp, #40]	; 0x28
 8012a20:	2800      	cmp	r0, #0
 8012a22:	d100      	bne.n	8012a26 <_strtod_l+0x67e>
 8012a24:	e6f6      	b.n	8012814 <_strtod_l+0x46c>
 8012a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012a2a:	691b      	ldr	r3, [r3, #16]
 8012a2c:	310c      	adds	r1, #12
 8012a2e:	1c9a      	adds	r2, r3, #2
 8012a30:	0092      	lsls	r2, r2, #2
 8012a32:	300c      	adds	r0, #12
 8012a34:	9308      	str	r3, [sp, #32]
 8012a36:	f7ff fb2e 	bl	8012096 <memcpy>
 8012a3a:	ab24      	add	r3, sp, #144	; 0x90
 8012a3c:	9301      	str	r3, [sp, #4]
 8012a3e:	ab23      	add	r3, sp, #140	; 0x8c
 8012a40:	9300      	str	r3, [sp, #0]
 8012a42:	0032      	movs	r2, r6
 8012a44:	003b      	movs	r3, r7
 8012a46:	9804      	ldr	r0, [sp, #16]
 8012a48:	960e      	str	r6, [sp, #56]	; 0x38
 8012a4a:	970f      	str	r7, [sp, #60]	; 0x3c
 8012a4c:	f001 fa56 	bl	8013efc <__d2b>
 8012a50:	9022      	str	r0, [sp, #136]	; 0x88
 8012a52:	2800      	cmp	r0, #0
 8012a54:	d100      	bne.n	8012a58 <_strtod_l+0x6b0>
 8012a56:	e6dd      	b.n	8012814 <_strtod_l+0x46c>
 8012a58:	2101      	movs	r1, #1
 8012a5a:	9804      	ldr	r0, [sp, #16]
 8012a5c:	f001 f821 	bl	8013aa2 <__i2b>
 8012a60:	9005      	str	r0, [sp, #20]
 8012a62:	2800      	cmp	r0, #0
 8012a64:	d100      	bne.n	8012a68 <_strtod_l+0x6c0>
 8012a66:	e6d5      	b.n	8012814 <_strtod_l+0x46c>
 8012a68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	da00      	bge.n	8012a70 <_strtod_l+0x6c8>
 8012a6e:	e0c1      	b.n	8012bf4 <_strtod_l+0x84c>
 8012a70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012a72:	189d      	adds	r5, r3, r2
 8012a74:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012a76:	4694      	mov	ip, r2
 8012a78:	9906      	ldr	r1, [sp, #24]
 8012a7a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012a7c:	1a5b      	subs	r3, r3, r1
 8012a7e:	2136      	movs	r1, #54	; 0x36
 8012a80:	189b      	adds	r3, r3, r2
 8012a82:	1a8a      	subs	r2, r1, r2
 8012a84:	49b2      	ldr	r1, [pc, #712]	; (8012d50 <_strtod_l+0x9a8>)
 8012a86:	3b01      	subs	r3, #1
 8012a88:	2001      	movs	r0, #1
 8012a8a:	428b      	cmp	r3, r1
 8012a8c:	db00      	blt.n	8012a90 <_strtod_l+0x6e8>
 8012a8e:	e0bd      	b.n	8012c0c <_strtod_l+0x864>
 8012a90:	1ac9      	subs	r1, r1, r3
 8012a92:	1a52      	subs	r2, r2, r1
 8012a94:	291f      	cmp	r1, #31
 8012a96:	dd00      	ble.n	8012a9a <_strtod_l+0x6f2>
 8012a98:	e0b1      	b.n	8012bfe <_strtod_l+0x856>
 8012a9a:	4088      	lsls	r0, r1
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	9014      	str	r0, [sp, #80]	; 0x50
 8012aa0:	9310      	str	r3, [sp, #64]	; 0x40
 8012aa2:	18ab      	adds	r3, r5, r2
 8012aa4:	9308      	str	r3, [sp, #32]
 8012aa6:	0013      	movs	r3, r2
 8012aa8:	9a06      	ldr	r2, [sp, #24]
 8012aaa:	4463      	add	r3, ip
 8012aac:	18d3      	adds	r3, r2, r3
 8012aae:	9a08      	ldr	r2, [sp, #32]
 8012ab0:	930c      	str	r3, [sp, #48]	; 0x30
 8012ab2:	002b      	movs	r3, r5
 8012ab4:	4295      	cmp	r5, r2
 8012ab6:	dd00      	ble.n	8012aba <_strtod_l+0x712>
 8012ab8:	0013      	movs	r3, r2
 8012aba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012abc:	4293      	cmp	r3, r2
 8012abe:	dd00      	ble.n	8012ac2 <_strtod_l+0x71a>
 8012ac0:	0013      	movs	r3, r2
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	dd06      	ble.n	8012ad4 <_strtod_l+0x72c>
 8012ac6:	9a08      	ldr	r2, [sp, #32]
 8012ac8:	1aed      	subs	r5, r5, r3
 8012aca:	1ad2      	subs	r2, r2, r3
 8012acc:	9208      	str	r2, [sp, #32]
 8012ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ad0:	1ad2      	subs	r2, r2, r3
 8012ad2:	920c      	str	r2, [sp, #48]	; 0x30
 8012ad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d017      	beq.n	8012b0a <_strtod_l+0x762>
 8012ada:	001a      	movs	r2, r3
 8012adc:	9905      	ldr	r1, [sp, #20]
 8012ade:	9804      	ldr	r0, [sp, #16]
 8012ae0:	f001 f878 	bl	8013bd4 <__pow5mult>
 8012ae4:	9005      	str	r0, [sp, #20]
 8012ae6:	2800      	cmp	r0, #0
 8012ae8:	d100      	bne.n	8012aec <_strtod_l+0x744>
 8012aea:	e693      	b.n	8012814 <_strtod_l+0x46c>
 8012aec:	0001      	movs	r1, r0
 8012aee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012af0:	9804      	ldr	r0, [sp, #16]
 8012af2:	f000 ffdf 	bl	8013ab4 <__multiply>
 8012af6:	9012      	str	r0, [sp, #72]	; 0x48
 8012af8:	2800      	cmp	r0, #0
 8012afa:	d100      	bne.n	8012afe <_strtod_l+0x756>
 8012afc:	e68a      	b.n	8012814 <_strtod_l+0x46c>
 8012afe:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012b00:	9804      	ldr	r0, [sp, #16]
 8012b02:	f000 fef0 	bl	80138e6 <_Bfree>
 8012b06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b08:	9322      	str	r3, [sp, #136]	; 0x88
 8012b0a:	9b08      	ldr	r3, [sp, #32]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	dd00      	ble.n	8012b12 <_strtod_l+0x76a>
 8012b10:	e07f      	b.n	8012c12 <_strtod_l+0x86a>
 8012b12:	9b07      	ldr	r3, [sp, #28]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	dd08      	ble.n	8012b2a <_strtod_l+0x782>
 8012b18:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012b1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012b1c:	9804      	ldr	r0, [sp, #16]
 8012b1e:	f001 f859 	bl	8013bd4 <__pow5mult>
 8012b22:	900a      	str	r0, [sp, #40]	; 0x28
 8012b24:	2800      	cmp	r0, #0
 8012b26:	d100      	bne.n	8012b2a <_strtod_l+0x782>
 8012b28:	e674      	b.n	8012814 <_strtod_l+0x46c>
 8012b2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	dd08      	ble.n	8012b42 <_strtod_l+0x79a>
 8012b30:	001a      	movs	r2, r3
 8012b32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012b34:	9804      	ldr	r0, [sp, #16]
 8012b36:	f001 f89f 	bl	8013c78 <__lshift>
 8012b3a:	900a      	str	r0, [sp, #40]	; 0x28
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	d100      	bne.n	8012b42 <_strtod_l+0x79a>
 8012b40:	e668      	b.n	8012814 <_strtod_l+0x46c>
 8012b42:	2d00      	cmp	r5, #0
 8012b44:	dd08      	ble.n	8012b58 <_strtod_l+0x7b0>
 8012b46:	002a      	movs	r2, r5
 8012b48:	9905      	ldr	r1, [sp, #20]
 8012b4a:	9804      	ldr	r0, [sp, #16]
 8012b4c:	f001 f894 	bl	8013c78 <__lshift>
 8012b50:	9005      	str	r0, [sp, #20]
 8012b52:	2800      	cmp	r0, #0
 8012b54:	d100      	bne.n	8012b58 <_strtod_l+0x7b0>
 8012b56:	e65d      	b.n	8012814 <_strtod_l+0x46c>
 8012b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b5a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012b5c:	9804      	ldr	r0, [sp, #16]
 8012b5e:	f001 f8f7 	bl	8013d50 <__mdiff>
 8012b62:	1e04      	subs	r4, r0, #0
 8012b64:	d100      	bne.n	8012b68 <_strtod_l+0x7c0>
 8012b66:	e655      	b.n	8012814 <_strtod_l+0x46c>
 8012b68:	2500      	movs	r5, #0
 8012b6a:	68c3      	ldr	r3, [r0, #12]
 8012b6c:	9905      	ldr	r1, [sp, #20]
 8012b6e:	60c5      	str	r5, [r0, #12]
 8012b70:	9312      	str	r3, [sp, #72]	; 0x48
 8012b72:	f001 f8d3 	bl	8013d1c <__mcmp>
 8012b76:	42a8      	cmp	r0, r5
 8012b78:	da55      	bge.n	8012c26 <_strtod_l+0x87e>
 8012b7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b7c:	42ab      	cmp	r3, r5
 8012b7e:	d11b      	bne.n	8012bb8 <_strtod_l+0x810>
 8012b80:	42ae      	cmp	r6, r5
 8012b82:	d119      	bne.n	8012bb8 <_strtod_l+0x810>
 8012b84:	033b      	lsls	r3, r7, #12
 8012b86:	42ab      	cmp	r3, r5
 8012b88:	d116      	bne.n	8012bb8 <_strtod_l+0x810>
 8012b8a:	22d6      	movs	r2, #214	; 0xd6
 8012b8c:	4b71      	ldr	r3, [pc, #452]	; (8012d54 <_strtod_l+0x9ac>)
 8012b8e:	04d2      	lsls	r2, r2, #19
 8012b90:	403b      	ands	r3, r7
 8012b92:	4293      	cmp	r3, r2
 8012b94:	d910      	bls.n	8012bb8 <_strtod_l+0x810>
 8012b96:	6963      	ldr	r3, [r4, #20]
 8012b98:	42ab      	cmp	r3, r5
 8012b9a:	d102      	bne.n	8012ba2 <_strtod_l+0x7fa>
 8012b9c:	6923      	ldr	r3, [r4, #16]
 8012b9e:	2b01      	cmp	r3, #1
 8012ba0:	dd0a      	ble.n	8012bb8 <_strtod_l+0x810>
 8012ba2:	0021      	movs	r1, r4
 8012ba4:	2201      	movs	r2, #1
 8012ba6:	9804      	ldr	r0, [sp, #16]
 8012ba8:	f001 f866 	bl	8013c78 <__lshift>
 8012bac:	9905      	ldr	r1, [sp, #20]
 8012bae:	0004      	movs	r4, r0
 8012bb0:	f001 f8b4 	bl	8013d1c <__mcmp>
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	dc6b      	bgt.n	8012c90 <_strtod_l+0x8e8>
 8012bb8:	9b06      	ldr	r3, [sp, #24]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d178      	bne.n	8012cb0 <_strtod_l+0x908>
 8012bbe:	e632      	b.n	8012826 <_strtod_l+0x47e>
 8012bc0:	2201      	movs	r2, #1
 8012bc2:	4214      	tst	r4, r2
 8012bc4:	d007      	beq.n	8012bd6 <_strtod_l+0x82e>
 8012bc6:	4a64      	ldr	r2, [pc, #400]	; (8012d58 <_strtod_l+0x9b0>)
 8012bc8:	00eb      	lsls	r3, r5, #3
 8012bca:	18d3      	adds	r3, r2, r3
 8012bcc:	681a      	ldr	r2, [r3, #0]
 8012bce:	685b      	ldr	r3, [r3, #4]
 8012bd0:	f7ef f956 	bl	8001e80 <__aeabi_dmul>
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	3501      	adds	r5, #1
 8012bd8:	1064      	asrs	r4, r4, #1
 8012bda:	e6df      	b.n	801299c <_strtod_l+0x5f4>
 8012bdc:	2101      	movs	r1, #1
 8012bde:	3b20      	subs	r3, #32
 8012be0:	4249      	negs	r1, r1
 8012be2:	4099      	lsls	r1, r3
 8012be4:	400a      	ands	r2, r1
 8012be6:	0017      	movs	r7, r2
 8012be8:	e6f2      	b.n	80129d0 <_strtod_l+0x628>
 8012bea:	2201      	movs	r2, #1
 8012bec:	4252      	negs	r2, r2
 8012bee:	409a      	lsls	r2, r3
 8012bf0:	4016      	ands	r6, r2
 8012bf2:	e6ed      	b.n	80129d0 <_strtod_l+0x628>
 8012bf4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012bf6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8012bf8:	1ad2      	subs	r2, r2, r3
 8012bfa:	4694      	mov	ip, r2
 8012bfc:	e73c      	b.n	8012a78 <_strtod_l+0x6d0>
 8012bfe:	4957      	ldr	r1, [pc, #348]	; (8012d5c <_strtod_l+0x9b4>)
 8012c00:	1acb      	subs	r3, r1, r3
 8012c02:	0001      	movs	r1, r0
 8012c04:	4099      	lsls	r1, r3
 8012c06:	9110      	str	r1, [sp, #64]	; 0x40
 8012c08:	9014      	str	r0, [sp, #80]	; 0x50
 8012c0a:	e74a      	b.n	8012aa2 <_strtod_l+0x6fa>
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	9310      	str	r3, [sp, #64]	; 0x40
 8012c10:	e7fa      	b.n	8012c08 <_strtod_l+0x860>
 8012c12:	9a08      	ldr	r2, [sp, #32]
 8012c14:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012c16:	9804      	ldr	r0, [sp, #16]
 8012c18:	f001 f82e 	bl	8013c78 <__lshift>
 8012c1c:	9022      	str	r0, [sp, #136]	; 0x88
 8012c1e:	2800      	cmp	r0, #0
 8012c20:	d000      	beq.n	8012c24 <_strtod_l+0x87c>
 8012c22:	e776      	b.n	8012b12 <_strtod_l+0x76a>
 8012c24:	e5f6      	b.n	8012814 <_strtod_l+0x46c>
 8012c26:	970c      	str	r7, [sp, #48]	; 0x30
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	d000      	beq.n	8012c2e <_strtod_l+0x886>
 8012c2c:	e0a0      	b.n	8012d70 <_strtod_l+0x9c8>
 8012c2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012c30:	033b      	lsls	r3, r7, #12
 8012c32:	0b1b      	lsrs	r3, r3, #12
 8012c34:	2a00      	cmp	r2, #0
 8012c36:	d027      	beq.n	8012c88 <_strtod_l+0x8e0>
 8012c38:	4a49      	ldr	r2, [pc, #292]	; (8012d60 <_strtod_l+0x9b8>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d157      	bne.n	8012cee <_strtod_l+0x946>
 8012c3e:	2201      	movs	r2, #1
 8012c40:	9b06      	ldr	r3, [sp, #24]
 8012c42:	4252      	negs	r2, r2
 8012c44:	0031      	movs	r1, r6
 8012c46:	0010      	movs	r0, r2
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d00b      	beq.n	8012c64 <_strtod_l+0x8bc>
 8012c4c:	25d4      	movs	r5, #212	; 0xd4
 8012c4e:	4b41      	ldr	r3, [pc, #260]	; (8012d54 <_strtod_l+0x9ac>)
 8012c50:	04ed      	lsls	r5, r5, #19
 8012c52:	403b      	ands	r3, r7
 8012c54:	0010      	movs	r0, r2
 8012c56:	42ab      	cmp	r3, r5
 8012c58:	d804      	bhi.n	8012c64 <_strtod_l+0x8bc>
 8012c5a:	306c      	adds	r0, #108	; 0x6c
 8012c5c:	0d1b      	lsrs	r3, r3, #20
 8012c5e:	1ac3      	subs	r3, r0, r3
 8012c60:	409a      	lsls	r2, r3
 8012c62:	0010      	movs	r0, r2
 8012c64:	4281      	cmp	r1, r0
 8012c66:	d142      	bne.n	8012cee <_strtod_l+0x946>
 8012c68:	4b3e      	ldr	r3, [pc, #248]	; (8012d64 <_strtod_l+0x9bc>)
 8012c6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c6c:	429a      	cmp	r2, r3
 8012c6e:	d102      	bne.n	8012c76 <_strtod_l+0x8ce>
 8012c70:	1c4b      	adds	r3, r1, #1
 8012c72:	d100      	bne.n	8012c76 <_strtod_l+0x8ce>
 8012c74:	e5ce      	b.n	8012814 <_strtod_l+0x46c>
 8012c76:	4b37      	ldr	r3, [pc, #220]	; (8012d54 <_strtod_l+0x9ac>)
 8012c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c7a:	2600      	movs	r6, #0
 8012c7c:	401a      	ands	r2, r3
 8012c7e:	0013      	movs	r3, r2
 8012c80:	2280      	movs	r2, #128	; 0x80
 8012c82:	0352      	lsls	r2, r2, #13
 8012c84:	189f      	adds	r7, r3, r2
 8012c86:	e797      	b.n	8012bb8 <_strtod_l+0x810>
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d130      	bne.n	8012cee <_strtod_l+0x946>
 8012c8c:	2e00      	cmp	r6, #0
 8012c8e:	d12e      	bne.n	8012cee <_strtod_l+0x946>
 8012c90:	9906      	ldr	r1, [sp, #24]
 8012c92:	003b      	movs	r3, r7
 8012c94:	4a2f      	ldr	r2, [pc, #188]	; (8012d54 <_strtod_l+0x9ac>)
 8012c96:	2900      	cmp	r1, #0
 8012c98:	d020      	beq.n	8012cdc <_strtod_l+0x934>
 8012c9a:	0011      	movs	r1, r2
 8012c9c:	20d6      	movs	r0, #214	; 0xd6
 8012c9e:	4039      	ands	r1, r7
 8012ca0:	04c0      	lsls	r0, r0, #19
 8012ca2:	4281      	cmp	r1, r0
 8012ca4:	dc1a      	bgt.n	8012cdc <_strtod_l+0x934>
 8012ca6:	23dc      	movs	r3, #220	; 0xdc
 8012ca8:	049b      	lsls	r3, r3, #18
 8012caa:	4299      	cmp	r1, r3
 8012cac:	dc00      	bgt.n	8012cb0 <_strtod_l+0x908>
 8012cae:	e646      	b.n	801293e <_strtod_l+0x596>
 8012cb0:	4b2d      	ldr	r3, [pc, #180]	; (8012d68 <_strtod_l+0x9c0>)
 8012cb2:	0030      	movs	r0, r6
 8012cb4:	931b      	str	r3, [sp, #108]	; 0x6c
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	931a      	str	r3, [sp, #104]	; 0x68
 8012cba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012cbe:	0039      	movs	r1, r7
 8012cc0:	f7ef f8de 	bl	8001e80 <__aeabi_dmul>
 8012cc4:	0006      	movs	r6, r0
 8012cc6:	000f      	movs	r7, r1
 8012cc8:	1e0b      	subs	r3, r1, #0
 8012cca:	d000      	beq.n	8012cce <_strtod_l+0x926>
 8012ccc:	e5ab      	b.n	8012826 <_strtod_l+0x47e>
 8012cce:	2800      	cmp	r0, #0
 8012cd0:	d000      	beq.n	8012cd4 <_strtod_l+0x92c>
 8012cd2:	e5a8      	b.n	8012826 <_strtod_l+0x47e>
 8012cd4:	9a04      	ldr	r2, [sp, #16]
 8012cd6:	3322      	adds	r3, #34	; 0x22
 8012cd8:	6013      	str	r3, [r2, #0]
 8012cda:	e5a4      	b.n	8012826 <_strtod_l+0x47e>
 8012cdc:	2601      	movs	r6, #1
 8012cde:	4013      	ands	r3, r2
 8012ce0:	4a22      	ldr	r2, [pc, #136]	; (8012d6c <_strtod_l+0x9c4>)
 8012ce2:	4276      	negs	r6, r6
 8012ce4:	189b      	adds	r3, r3, r2
 8012ce6:	4a1e      	ldr	r2, [pc, #120]	; (8012d60 <_strtod_l+0x9b8>)
 8012ce8:	431a      	orrs	r2, r3
 8012cea:	0017      	movs	r7, r2
 8012cec:	e764      	b.n	8012bb8 <_strtod_l+0x810>
 8012cee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d015      	beq.n	8012d20 <_strtod_l+0x978>
 8012cf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012cf8:	4213      	tst	r3, r2
 8012cfa:	d100      	bne.n	8012cfe <_strtod_l+0x956>
 8012cfc:	e75c      	b.n	8012bb8 <_strtod_l+0x810>
 8012cfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012d00:	9a06      	ldr	r2, [sp, #24]
 8012d02:	0030      	movs	r0, r6
 8012d04:	0039      	movs	r1, r7
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d00f      	beq.n	8012d2a <_strtod_l+0x982>
 8012d0a:	f7ff fb35 	bl	8012378 <sulp>
 8012d0e:	0002      	movs	r2, r0
 8012d10:	000b      	movs	r3, r1
 8012d12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012d14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012d16:	f7ee f98d 	bl	8001034 <__aeabi_dadd>
 8012d1a:	0006      	movs	r6, r0
 8012d1c:	000f      	movs	r7, r1
 8012d1e:	e74b      	b.n	8012bb8 <_strtod_l+0x810>
 8012d20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012d22:	4233      	tst	r3, r6
 8012d24:	d100      	bne.n	8012d28 <_strtod_l+0x980>
 8012d26:	e747      	b.n	8012bb8 <_strtod_l+0x810>
 8012d28:	e7e9      	b.n	8012cfe <_strtod_l+0x956>
 8012d2a:	f7ff fb25 	bl	8012378 <sulp>
 8012d2e:	0002      	movs	r2, r0
 8012d30:	000b      	movs	r3, r1
 8012d32:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012d34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012d36:	f7ef fb15 	bl	8002364 <__aeabi_dsub>
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	0006      	movs	r6, r0
 8012d40:	000f      	movs	r7, r1
 8012d42:	f7ed fb81 	bl	8000448 <__aeabi_dcmpeq>
 8012d46:	2800      	cmp	r0, #0
 8012d48:	d000      	beq.n	8012d4c <_strtod_l+0x9a4>
 8012d4a:	e5f8      	b.n	801293e <_strtod_l+0x596>
 8012d4c:	e734      	b.n	8012bb8 <_strtod_l+0x810>
 8012d4e:	46c0      	nop			; (mov r8, r8)
 8012d50:	fffffc02 	.word	0xfffffc02
 8012d54:	7ff00000 	.word	0x7ff00000
 8012d58:	08019b18 	.word	0x08019b18
 8012d5c:	fffffbe2 	.word	0xfffffbe2
 8012d60:	000fffff 	.word	0x000fffff
 8012d64:	7fefffff 	.word	0x7fefffff
 8012d68:	39500000 	.word	0x39500000
 8012d6c:	fff00000 	.word	0xfff00000
 8012d70:	9905      	ldr	r1, [sp, #20]
 8012d72:	0020      	movs	r0, r4
 8012d74:	f001 f916 	bl	8013fa4 <__ratio>
 8012d78:	2380      	movs	r3, #128	; 0x80
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	05db      	lsls	r3, r3, #23
 8012d7e:	9008      	str	r0, [sp, #32]
 8012d80:	9109      	str	r1, [sp, #36]	; 0x24
 8012d82:	f7ed fb71 	bl	8000468 <__aeabi_dcmple>
 8012d86:	2800      	cmp	r0, #0
 8012d88:	d100      	bne.n	8012d8c <_strtod_l+0x9e4>
 8012d8a:	e07f      	b.n	8012e8c <_strtod_l+0xae4>
 8012d8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d04b      	beq.n	8012e2a <_strtod_l+0xa82>
 8012d92:	2200      	movs	r2, #0
 8012d94:	4b8a      	ldr	r3, [pc, #552]	; (8012fc0 <_strtod_l+0xc18>)
 8012d96:	9210      	str	r2, [sp, #64]	; 0x40
 8012d98:	9311      	str	r3, [sp, #68]	; 0x44
 8012d9a:	4b89      	ldr	r3, [pc, #548]	; (8012fc0 <_strtod_l+0xc18>)
 8012d9c:	9308      	str	r3, [sp, #32]
 8012d9e:	4a89      	ldr	r2, [pc, #548]	; (8012fc4 <_strtod_l+0xc1c>)
 8012da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012da2:	4013      	ands	r3, r2
 8012da4:	9314      	str	r3, [sp, #80]	; 0x50
 8012da6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012da8:	4b87      	ldr	r3, [pc, #540]	; (8012fc8 <_strtod_l+0xc20>)
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d000      	beq.n	8012db0 <_strtod_l+0xa08>
 8012dae:	e0ba      	b.n	8012f26 <_strtod_l+0xb7e>
 8012db0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012db2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012db4:	921a      	str	r2, [sp, #104]	; 0x68
 8012db6:	931b      	str	r3, [sp, #108]	; 0x6c
 8012db8:	4a84      	ldr	r2, [pc, #528]	; (8012fcc <_strtod_l+0xc24>)
 8012dba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dbc:	4694      	mov	ip, r2
 8012dbe:	4463      	add	r3, ip
 8012dc0:	001f      	movs	r7, r3
 8012dc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012dc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012dc6:	0030      	movs	r0, r6
 8012dc8:	0039      	movs	r1, r7
 8012dca:	920c      	str	r2, [sp, #48]	; 0x30
 8012dcc:	930d      	str	r3, [sp, #52]	; 0x34
 8012dce:	f001 f823 	bl	8013e18 <__ulp>
 8012dd2:	0002      	movs	r2, r0
 8012dd4:	000b      	movs	r3, r1
 8012dd6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012dd8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012dda:	f7ef f851 	bl	8001e80 <__aeabi_dmul>
 8012dde:	0032      	movs	r2, r6
 8012de0:	003b      	movs	r3, r7
 8012de2:	f7ee f927 	bl	8001034 <__aeabi_dadd>
 8012de6:	4a77      	ldr	r2, [pc, #476]	; (8012fc4 <_strtod_l+0xc1c>)
 8012de8:	4b79      	ldr	r3, [pc, #484]	; (8012fd0 <_strtod_l+0xc28>)
 8012dea:	0006      	movs	r6, r0
 8012dec:	400a      	ands	r2, r1
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d964      	bls.n	8012ebc <_strtod_l+0xb14>
 8012df2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012df4:	4a77      	ldr	r2, [pc, #476]	; (8012fd4 <_strtod_l+0xc2c>)
 8012df6:	4293      	cmp	r3, r2
 8012df8:	d103      	bne.n	8012e02 <_strtod_l+0xa5a>
 8012dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	d100      	bne.n	8012e02 <_strtod_l+0xa5a>
 8012e00:	e508      	b.n	8012814 <_strtod_l+0x46c>
 8012e02:	2601      	movs	r6, #1
 8012e04:	4f73      	ldr	r7, [pc, #460]	; (8012fd4 <_strtod_l+0xc2c>)
 8012e06:	4276      	negs	r6, r6
 8012e08:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012e0a:	9804      	ldr	r0, [sp, #16]
 8012e0c:	f000 fd6b 	bl	80138e6 <_Bfree>
 8012e10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012e12:	9804      	ldr	r0, [sp, #16]
 8012e14:	f000 fd67 	bl	80138e6 <_Bfree>
 8012e18:	9905      	ldr	r1, [sp, #20]
 8012e1a:	9804      	ldr	r0, [sp, #16]
 8012e1c:	f000 fd63 	bl	80138e6 <_Bfree>
 8012e20:	0021      	movs	r1, r4
 8012e22:	9804      	ldr	r0, [sp, #16]
 8012e24:	f000 fd5f 	bl	80138e6 <_Bfree>
 8012e28:	e5f4      	b.n	8012a14 <_strtod_l+0x66c>
 8012e2a:	2e00      	cmp	r6, #0
 8012e2c:	d11e      	bne.n	8012e6c <_strtod_l+0xac4>
 8012e2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e30:	031b      	lsls	r3, r3, #12
 8012e32:	d121      	bne.n	8012e78 <_strtod_l+0xad0>
 8012e34:	9808      	ldr	r0, [sp, #32]
 8012e36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e38:	2200      	movs	r2, #0
 8012e3a:	4b61      	ldr	r3, [pc, #388]	; (8012fc0 <_strtod_l+0xc18>)
 8012e3c:	f7ed fb0a 	bl	8000454 <__aeabi_dcmplt>
 8012e40:	2800      	cmp	r0, #0
 8012e42:	d11f      	bne.n	8012e84 <_strtod_l+0xadc>
 8012e44:	9808      	ldr	r0, [sp, #32]
 8012e46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e48:	2200      	movs	r2, #0
 8012e4a:	4b63      	ldr	r3, [pc, #396]	; (8012fd8 <_strtod_l+0xc30>)
 8012e4c:	f7ef f818 	bl	8001e80 <__aeabi_dmul>
 8012e50:	0005      	movs	r5, r0
 8012e52:	9108      	str	r1, [sp, #32]
 8012e54:	2280      	movs	r2, #128	; 0x80
 8012e56:	0612      	lsls	r2, r2, #24
 8012e58:	4694      	mov	ip, r2
 8012e5a:	9b08      	ldr	r3, [sp, #32]
 8012e5c:	951e      	str	r5, [sp, #120]	; 0x78
 8012e5e:	4463      	add	r3, ip
 8012e60:	931f      	str	r3, [sp, #124]	; 0x7c
 8012e62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012e64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012e66:	9210      	str	r2, [sp, #64]	; 0x40
 8012e68:	9311      	str	r3, [sp, #68]	; 0x44
 8012e6a:	e798      	b.n	8012d9e <_strtod_l+0x9f6>
 8012e6c:	2e01      	cmp	r6, #1
 8012e6e:	d103      	bne.n	8012e78 <_strtod_l+0xad0>
 8012e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d100      	bne.n	8012e78 <_strtod_l+0xad0>
 8012e76:	e562      	b.n	801293e <_strtod_l+0x596>
 8012e78:	2200      	movs	r2, #0
 8012e7a:	4b58      	ldr	r3, [pc, #352]	; (8012fdc <_strtod_l+0xc34>)
 8012e7c:	2500      	movs	r5, #0
 8012e7e:	9210      	str	r2, [sp, #64]	; 0x40
 8012e80:	9311      	str	r3, [sp, #68]	; 0x44
 8012e82:	e78a      	b.n	8012d9a <_strtod_l+0x9f2>
 8012e84:	4b54      	ldr	r3, [pc, #336]	; (8012fd8 <_strtod_l+0xc30>)
 8012e86:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8012e88:	9308      	str	r3, [sp, #32]
 8012e8a:	e7e3      	b.n	8012e54 <_strtod_l+0xaac>
 8012e8c:	4b52      	ldr	r3, [pc, #328]	; (8012fd8 <_strtod_l+0xc30>)
 8012e8e:	9808      	ldr	r0, [sp, #32]
 8012e90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e92:	2200      	movs	r2, #0
 8012e94:	f7ee fff4 	bl	8001e80 <__aeabi_dmul>
 8012e98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012e9a:	0005      	movs	r5, r0
 8012e9c:	9108      	str	r1, [sp, #32]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d107      	bne.n	8012eb2 <_strtod_l+0xb0a>
 8012ea2:	2380      	movs	r3, #128	; 0x80
 8012ea4:	061b      	lsls	r3, r3, #24
 8012ea6:	18cb      	adds	r3, r1, r3
 8012ea8:	9016      	str	r0, [sp, #88]	; 0x58
 8012eaa:	9317      	str	r3, [sp, #92]	; 0x5c
 8012eac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012eae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012eb0:	e7d9      	b.n	8012e66 <_strtod_l+0xabe>
 8012eb2:	0002      	movs	r2, r0
 8012eb4:	9b08      	ldr	r3, [sp, #32]
 8012eb6:	9216      	str	r2, [sp, #88]	; 0x58
 8012eb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8012eba:	e7f7      	b.n	8012eac <_strtod_l+0xb04>
 8012ebc:	23d4      	movs	r3, #212	; 0xd4
 8012ebe:	049b      	lsls	r3, r3, #18
 8012ec0:	18cf      	adds	r7, r1, r3
 8012ec2:	9b06      	ldr	r3, [sp, #24]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d19f      	bne.n	8012e08 <_strtod_l+0xa60>
 8012ec8:	4b3e      	ldr	r3, [pc, #248]	; (8012fc4 <_strtod_l+0xc1c>)
 8012eca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012ecc:	970c      	str	r7, [sp, #48]	; 0x30
 8012ece:	403b      	ands	r3, r7
 8012ed0:	429a      	cmp	r2, r3
 8012ed2:	d199      	bne.n	8012e08 <_strtod_l+0xa60>
 8012ed4:	9908      	ldr	r1, [sp, #32]
 8012ed6:	0028      	movs	r0, r5
 8012ed8:	f7ef fd8c 	bl	80029f4 <__aeabi_d2iz>
 8012edc:	f7ef fdc0 	bl	8002a60 <__aeabi_i2d>
 8012ee0:	000b      	movs	r3, r1
 8012ee2:	0002      	movs	r2, r0
 8012ee4:	9908      	ldr	r1, [sp, #32]
 8012ee6:	0028      	movs	r0, r5
 8012ee8:	f7ef fa3c 	bl	8002364 <__aeabi_dsub>
 8012eec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012eee:	9008      	str	r0, [sp, #32]
 8012ef0:	9109      	str	r1, [sp, #36]	; 0x24
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d104      	bne.n	8012f00 <_strtod_l+0xb58>
 8012ef6:	2e00      	cmp	r6, #0
 8012ef8:	d102      	bne.n	8012f00 <_strtod_l+0xb58>
 8012efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012efc:	031b      	lsls	r3, r3, #12
 8012efe:	d058      	beq.n	8012fb2 <_strtod_l+0xc0a>
 8012f00:	9808      	ldr	r0, [sp, #32]
 8012f02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f04:	4a36      	ldr	r2, [pc, #216]	; (8012fe0 <_strtod_l+0xc38>)
 8012f06:	4b37      	ldr	r3, [pc, #220]	; (8012fe4 <_strtod_l+0xc3c>)
 8012f08:	f7ed faa4 	bl	8000454 <__aeabi_dcmplt>
 8012f0c:	2800      	cmp	r0, #0
 8012f0e:	d000      	beq.n	8012f12 <_strtod_l+0xb6a>
 8012f10:	e489      	b.n	8012826 <_strtod_l+0x47e>
 8012f12:	9808      	ldr	r0, [sp, #32]
 8012f14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f16:	4a34      	ldr	r2, [pc, #208]	; (8012fe8 <_strtod_l+0xc40>)
 8012f18:	4b2f      	ldr	r3, [pc, #188]	; (8012fd8 <_strtod_l+0xc30>)
 8012f1a:	f7ed faaf 	bl	800047c <__aeabi_dcmpgt>
 8012f1e:	2800      	cmp	r0, #0
 8012f20:	d100      	bne.n	8012f24 <_strtod_l+0xb7c>
 8012f22:	e771      	b.n	8012e08 <_strtod_l+0xa60>
 8012f24:	e47f      	b.n	8012826 <_strtod_l+0x47e>
 8012f26:	9b06      	ldr	r3, [sp, #24]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d02a      	beq.n	8012f82 <_strtod_l+0xbda>
 8012f2c:	23d4      	movs	r3, #212	; 0xd4
 8012f2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f30:	04db      	lsls	r3, r3, #19
 8012f32:	429a      	cmp	r2, r3
 8012f34:	d825      	bhi.n	8012f82 <_strtod_l+0xbda>
 8012f36:	4a2d      	ldr	r2, [pc, #180]	; (8012fec <_strtod_l+0xc44>)
 8012f38:	4b2d      	ldr	r3, [pc, #180]	; (8012ff0 <_strtod_l+0xc48>)
 8012f3a:	0028      	movs	r0, r5
 8012f3c:	9908      	ldr	r1, [sp, #32]
 8012f3e:	f7ed fa93 	bl	8000468 <__aeabi_dcmple>
 8012f42:	2800      	cmp	r0, #0
 8012f44:	d016      	beq.n	8012f74 <_strtod_l+0xbcc>
 8012f46:	0028      	movs	r0, r5
 8012f48:	9908      	ldr	r1, [sp, #32]
 8012f4a:	f7ed fb27 	bl	800059c <__aeabi_d2uiz>
 8012f4e:	2800      	cmp	r0, #0
 8012f50:	d100      	bne.n	8012f54 <_strtod_l+0xbac>
 8012f52:	3001      	adds	r0, #1
 8012f54:	f7ef fdbe 	bl	8002ad4 <__aeabi_ui2d>
 8012f58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012f5a:	0005      	movs	r5, r0
 8012f5c:	9108      	str	r1, [sp, #32]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d122      	bne.n	8012fa8 <_strtod_l+0xc00>
 8012f62:	2380      	movs	r3, #128	; 0x80
 8012f64:	061b      	lsls	r3, r3, #24
 8012f66:	18cb      	adds	r3, r1, r3
 8012f68:	9018      	str	r0, [sp, #96]	; 0x60
 8012f6a:	9319      	str	r3, [sp, #100]	; 0x64
 8012f6c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012f6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012f70:	9210      	str	r2, [sp, #64]	; 0x40
 8012f72:	9311      	str	r3, [sp, #68]	; 0x44
 8012f74:	22d6      	movs	r2, #214	; 0xd6
 8012f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012f78:	04d2      	lsls	r2, r2, #19
 8012f7a:	189b      	adds	r3, r3, r2
 8012f7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f7e:	1a9b      	subs	r3, r3, r2
 8012f80:	9311      	str	r3, [sp, #68]	; 0x44
 8012f82:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012f84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012f86:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8012f88:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8012f8a:	f000 ff45 	bl	8013e18 <__ulp>
 8012f8e:	0002      	movs	r2, r0
 8012f90:	000b      	movs	r3, r1
 8012f92:	0030      	movs	r0, r6
 8012f94:	0039      	movs	r1, r7
 8012f96:	f7ee ff73 	bl	8001e80 <__aeabi_dmul>
 8012f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012f9e:	f7ee f849 	bl	8001034 <__aeabi_dadd>
 8012fa2:	0006      	movs	r6, r0
 8012fa4:	000f      	movs	r7, r1
 8012fa6:	e78c      	b.n	8012ec2 <_strtod_l+0xb1a>
 8012fa8:	0002      	movs	r2, r0
 8012faa:	9b08      	ldr	r3, [sp, #32]
 8012fac:	9218      	str	r2, [sp, #96]	; 0x60
 8012fae:	9319      	str	r3, [sp, #100]	; 0x64
 8012fb0:	e7dc      	b.n	8012f6c <_strtod_l+0xbc4>
 8012fb2:	4a0b      	ldr	r2, [pc, #44]	; (8012fe0 <_strtod_l+0xc38>)
 8012fb4:	4b0f      	ldr	r3, [pc, #60]	; (8012ff4 <_strtod_l+0xc4c>)
 8012fb6:	9808      	ldr	r0, [sp, #32]
 8012fb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012fba:	f7ed fa4b 	bl	8000454 <__aeabi_dcmplt>
 8012fbe:	e7ae      	b.n	8012f1e <_strtod_l+0xb76>
 8012fc0:	3ff00000 	.word	0x3ff00000
 8012fc4:	7ff00000 	.word	0x7ff00000
 8012fc8:	7fe00000 	.word	0x7fe00000
 8012fcc:	fcb00000 	.word	0xfcb00000
 8012fd0:	7c9fffff 	.word	0x7c9fffff
 8012fd4:	7fefffff 	.word	0x7fefffff
 8012fd8:	3fe00000 	.word	0x3fe00000
 8012fdc:	bff00000 	.word	0xbff00000
 8012fe0:	94a03595 	.word	0x94a03595
 8012fe4:	3fdfffff 	.word	0x3fdfffff
 8012fe8:	35afe535 	.word	0x35afe535
 8012fec:	ffc00000 	.word	0xffc00000
 8012ff0:	41dfffff 	.word	0x41dfffff
 8012ff4:	3fcfffff 	.word	0x3fcfffff

08012ff8 <strtod>:
 8012ff8:	4b06      	ldr	r3, [pc, #24]	; (8013014 <strtod+0x1c>)
 8012ffa:	b510      	push	{r4, lr}
 8012ffc:	0004      	movs	r4, r0
 8012ffe:	6818      	ldr	r0, [r3, #0]
 8013000:	000a      	movs	r2, r1
 8013002:	6a03      	ldr	r3, [r0, #32]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d100      	bne.n	801300a <strtod+0x12>
 8013008:	4b03      	ldr	r3, [pc, #12]	; (8013018 <strtod+0x20>)
 801300a:	0021      	movs	r1, r4
 801300c:	f7ff f9cc 	bl	80123a8 <_strtod_l>
 8013010:	bd10      	pop	{r4, pc}
 8013012:	46c0      	nop			; (mov r8, r8)
 8013014:	20000060 	.word	0x20000060
 8013018:	200000c4 	.word	0x200000c4

0801301c <strtok>:
 801301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801301e:	4b12      	ldr	r3, [pc, #72]	; (8013068 <strtok+0x4c>)
 8013020:	0006      	movs	r6, r0
 8013022:	681d      	ldr	r5, [r3, #0]
 8013024:	000f      	movs	r7, r1
 8013026:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8013028:	2c00      	cmp	r4, #0
 801302a:	d116      	bne.n	801305a <strtok+0x3e>
 801302c:	2050      	movs	r0, #80	; 0x50
 801302e:	f7fe fffd 	bl	801202c <malloc>
 8013032:	65a8      	str	r0, [r5, #88]	; 0x58
 8013034:	6004      	str	r4, [r0, #0]
 8013036:	6044      	str	r4, [r0, #4]
 8013038:	6084      	str	r4, [r0, #8]
 801303a:	60c4      	str	r4, [r0, #12]
 801303c:	6104      	str	r4, [r0, #16]
 801303e:	6144      	str	r4, [r0, #20]
 8013040:	6184      	str	r4, [r0, #24]
 8013042:	6284      	str	r4, [r0, #40]	; 0x28
 8013044:	62c4      	str	r4, [r0, #44]	; 0x2c
 8013046:	6304      	str	r4, [r0, #48]	; 0x30
 8013048:	6344      	str	r4, [r0, #52]	; 0x34
 801304a:	6384      	str	r4, [r0, #56]	; 0x38
 801304c:	63c4      	str	r4, [r0, #60]	; 0x3c
 801304e:	6404      	str	r4, [r0, #64]	; 0x40
 8013050:	6444      	str	r4, [r0, #68]	; 0x44
 8013052:	6484      	str	r4, [r0, #72]	; 0x48
 8013054:	64c4      	str	r4, [r0, #76]	; 0x4c
 8013056:	7704      	strb	r4, [r0, #28]
 8013058:	6244      	str	r4, [r0, #36]	; 0x24
 801305a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 801305c:	0039      	movs	r1, r7
 801305e:	0030      	movs	r0, r6
 8013060:	2301      	movs	r3, #1
 8013062:	f000 f803 	bl	801306c <__strtok_r>
 8013066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013068:	20000060 	.word	0x20000060

0801306c <__strtok_r>:
 801306c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801306e:	2800      	cmp	r0, #0
 8013070:	d104      	bne.n	801307c <__strtok_r+0x10>
 8013072:	6810      	ldr	r0, [r2, #0]
 8013074:	2800      	cmp	r0, #0
 8013076:	d101      	bne.n	801307c <__strtok_r+0x10>
 8013078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801307a:	0020      	movs	r0, r4
 801307c:	000e      	movs	r6, r1
 801307e:	7805      	ldrb	r5, [r0, #0]
 8013080:	1c44      	adds	r4, r0, #1
 8013082:	7837      	ldrb	r7, [r6, #0]
 8013084:	2f00      	cmp	r7, #0
 8013086:	d104      	bne.n	8013092 <__strtok_r+0x26>
 8013088:	2d00      	cmp	r5, #0
 801308a:	d110      	bne.n	80130ae <__strtok_r+0x42>
 801308c:	6015      	str	r5, [r2, #0]
 801308e:	0028      	movs	r0, r5
 8013090:	e7f2      	b.n	8013078 <__strtok_r+0xc>
 8013092:	3601      	adds	r6, #1
 8013094:	42bd      	cmp	r5, r7
 8013096:	d1f4      	bne.n	8013082 <__strtok_r+0x16>
 8013098:	2b00      	cmp	r3, #0
 801309a:	d1ee      	bne.n	801307a <__strtok_r+0xe>
 801309c:	6014      	str	r4, [r2, #0]
 801309e:	7003      	strb	r3, [r0, #0]
 80130a0:	e7ea      	b.n	8013078 <__strtok_r+0xc>
 80130a2:	0033      	movs	r3, r6
 80130a4:	e00d      	b.n	80130c2 <__strtok_r+0x56>
 80130a6:	3501      	adds	r5, #1
 80130a8:	2f00      	cmp	r7, #0
 80130aa:	d103      	bne.n	80130b4 <__strtok_r+0x48>
 80130ac:	001c      	movs	r4, r3
 80130ae:	000d      	movs	r5, r1
 80130b0:	7826      	ldrb	r6, [r4, #0]
 80130b2:	1c63      	adds	r3, r4, #1
 80130b4:	782f      	ldrb	r7, [r5, #0]
 80130b6:	42be      	cmp	r6, r7
 80130b8:	d1f5      	bne.n	80130a6 <__strtok_r+0x3a>
 80130ba:	2e00      	cmp	r6, #0
 80130bc:	d0f1      	beq.n	80130a2 <__strtok_r+0x36>
 80130be:	2100      	movs	r1, #0
 80130c0:	7021      	strb	r1, [r4, #0]
 80130c2:	6013      	str	r3, [r2, #0]
 80130c4:	e7d8      	b.n	8013078 <__strtok_r+0xc>
	...

080130c8 <_strtol_l.isra.0>:
 80130c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130ca:	001f      	movs	r7, r3
 80130cc:	000e      	movs	r6, r1
 80130ce:	b087      	sub	sp, #28
 80130d0:	9005      	str	r0, [sp, #20]
 80130d2:	9101      	str	r1, [sp, #4]
 80130d4:	9202      	str	r2, [sp, #8]
 80130d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80130d8:	7834      	ldrb	r4, [r6, #0]
 80130da:	f7fe ff95 	bl	8012008 <__locale_ctype_ptr_l>
 80130de:	2208      	movs	r2, #8
 80130e0:	1900      	adds	r0, r0, r4
 80130e2:	7843      	ldrb	r3, [r0, #1]
 80130e4:	1c75      	adds	r5, r6, #1
 80130e6:	4013      	ands	r3, r2
 80130e8:	d136      	bne.n	8013158 <_strtol_l.isra.0+0x90>
 80130ea:	2c2d      	cmp	r4, #45	; 0x2d
 80130ec:	d136      	bne.n	801315c <_strtol_l.isra.0+0x94>
 80130ee:	1cb5      	adds	r5, r6, #2
 80130f0:	7874      	ldrb	r4, [r6, #1]
 80130f2:	2601      	movs	r6, #1
 80130f4:	2f00      	cmp	r7, #0
 80130f6:	d062      	beq.n	80131be <_strtol_l.isra.0+0xf6>
 80130f8:	2f10      	cmp	r7, #16
 80130fa:	d109      	bne.n	8013110 <_strtol_l.isra.0+0x48>
 80130fc:	2c30      	cmp	r4, #48	; 0x30
 80130fe:	d107      	bne.n	8013110 <_strtol_l.isra.0+0x48>
 8013100:	2220      	movs	r2, #32
 8013102:	782b      	ldrb	r3, [r5, #0]
 8013104:	4393      	bics	r3, r2
 8013106:	2b58      	cmp	r3, #88	; 0x58
 8013108:	d154      	bne.n	80131b4 <_strtol_l.isra.0+0xec>
 801310a:	2710      	movs	r7, #16
 801310c:	786c      	ldrb	r4, [r5, #1]
 801310e:	3502      	adds	r5, #2
 8013110:	4b2d      	ldr	r3, [pc, #180]	; (80131c8 <_strtol_l.isra.0+0x100>)
 8013112:	0039      	movs	r1, r7
 8013114:	18f3      	adds	r3, r6, r3
 8013116:	0018      	movs	r0, r3
 8013118:	9303      	str	r3, [sp, #12]
 801311a:	f7ed f895 	bl	8000248 <__aeabi_uidivmod>
 801311e:	9104      	str	r1, [sp, #16]
 8013120:	2101      	movs	r1, #1
 8013122:	2300      	movs	r3, #0
 8013124:	4249      	negs	r1, r1
 8013126:	0002      	movs	r2, r0
 8013128:	468c      	mov	ip, r1
 801312a:	0018      	movs	r0, r3
 801312c:	0021      	movs	r1, r4
 801312e:	3930      	subs	r1, #48	; 0x30
 8013130:	2909      	cmp	r1, #9
 8013132:	d81a      	bhi.n	801316a <_strtol_l.isra.0+0xa2>
 8013134:	000c      	movs	r4, r1
 8013136:	42a7      	cmp	r7, r4
 8013138:	dd23      	ble.n	8013182 <_strtol_l.isra.0+0xba>
 801313a:	1c59      	adds	r1, r3, #1
 801313c:	d009      	beq.n	8013152 <_strtol_l.isra.0+0x8a>
 801313e:	4663      	mov	r3, ip
 8013140:	4282      	cmp	r2, r0
 8013142:	d306      	bcc.n	8013152 <_strtol_l.isra.0+0x8a>
 8013144:	d102      	bne.n	801314c <_strtol_l.isra.0+0x84>
 8013146:	9904      	ldr	r1, [sp, #16]
 8013148:	42a1      	cmp	r1, r4
 801314a:	db02      	blt.n	8013152 <_strtol_l.isra.0+0x8a>
 801314c:	2301      	movs	r3, #1
 801314e:	4378      	muls	r0, r7
 8013150:	1820      	adds	r0, r4, r0
 8013152:	782c      	ldrb	r4, [r5, #0]
 8013154:	3501      	adds	r5, #1
 8013156:	e7e9      	b.n	801312c <_strtol_l.isra.0+0x64>
 8013158:	002e      	movs	r6, r5
 801315a:	e7bc      	b.n	80130d6 <_strtol_l.isra.0+0xe>
 801315c:	2c2b      	cmp	r4, #43	; 0x2b
 801315e:	d001      	beq.n	8013164 <_strtol_l.isra.0+0x9c>
 8013160:	001e      	movs	r6, r3
 8013162:	e7c7      	b.n	80130f4 <_strtol_l.isra.0+0x2c>
 8013164:	1cb5      	adds	r5, r6, #2
 8013166:	7874      	ldrb	r4, [r6, #1]
 8013168:	e7fa      	b.n	8013160 <_strtol_l.isra.0+0x98>
 801316a:	0021      	movs	r1, r4
 801316c:	3941      	subs	r1, #65	; 0x41
 801316e:	2919      	cmp	r1, #25
 8013170:	d801      	bhi.n	8013176 <_strtol_l.isra.0+0xae>
 8013172:	3c37      	subs	r4, #55	; 0x37
 8013174:	e7df      	b.n	8013136 <_strtol_l.isra.0+0x6e>
 8013176:	0021      	movs	r1, r4
 8013178:	3961      	subs	r1, #97	; 0x61
 801317a:	2919      	cmp	r1, #25
 801317c:	d801      	bhi.n	8013182 <_strtol_l.isra.0+0xba>
 801317e:	3c57      	subs	r4, #87	; 0x57
 8013180:	e7d9      	b.n	8013136 <_strtol_l.isra.0+0x6e>
 8013182:	1c5a      	adds	r2, r3, #1
 8013184:	d108      	bne.n	8013198 <_strtol_l.isra.0+0xd0>
 8013186:	9a05      	ldr	r2, [sp, #20]
 8013188:	3323      	adds	r3, #35	; 0x23
 801318a:	6013      	str	r3, [r2, #0]
 801318c:	9b02      	ldr	r3, [sp, #8]
 801318e:	9803      	ldr	r0, [sp, #12]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d109      	bne.n	80131a8 <_strtol_l.isra.0+0xe0>
 8013194:	b007      	add	sp, #28
 8013196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013198:	2e00      	cmp	r6, #0
 801319a:	d000      	beq.n	801319e <_strtol_l.isra.0+0xd6>
 801319c:	4240      	negs	r0, r0
 801319e:	9a02      	ldr	r2, [sp, #8]
 80131a0:	2a00      	cmp	r2, #0
 80131a2:	d0f7      	beq.n	8013194 <_strtol_l.isra.0+0xcc>
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d001      	beq.n	80131ac <_strtol_l.isra.0+0xe4>
 80131a8:	1e6b      	subs	r3, r5, #1
 80131aa:	9301      	str	r3, [sp, #4]
 80131ac:	9b02      	ldr	r3, [sp, #8]
 80131ae:	9a01      	ldr	r2, [sp, #4]
 80131b0:	601a      	str	r2, [r3, #0]
 80131b2:	e7ef      	b.n	8013194 <_strtol_l.isra.0+0xcc>
 80131b4:	2430      	movs	r4, #48	; 0x30
 80131b6:	2f00      	cmp	r7, #0
 80131b8:	d1aa      	bne.n	8013110 <_strtol_l.isra.0+0x48>
 80131ba:	2708      	movs	r7, #8
 80131bc:	e7a8      	b.n	8013110 <_strtol_l.isra.0+0x48>
 80131be:	2c30      	cmp	r4, #48	; 0x30
 80131c0:	d09e      	beq.n	8013100 <_strtol_l.isra.0+0x38>
 80131c2:	270a      	movs	r7, #10
 80131c4:	e7a4      	b.n	8013110 <_strtol_l.isra.0+0x48>
 80131c6:	46c0      	nop			; (mov r8, r8)
 80131c8:	7fffffff 	.word	0x7fffffff

080131cc <strtol>:
 80131cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80131ce:	0013      	movs	r3, r2
 80131d0:	4a06      	ldr	r2, [pc, #24]	; (80131ec <strtol+0x20>)
 80131d2:	0005      	movs	r5, r0
 80131d4:	6810      	ldr	r0, [r2, #0]
 80131d6:	6a04      	ldr	r4, [r0, #32]
 80131d8:	2c00      	cmp	r4, #0
 80131da:	d100      	bne.n	80131de <strtol+0x12>
 80131dc:	4c04      	ldr	r4, [pc, #16]	; (80131f0 <strtol+0x24>)
 80131de:	000a      	movs	r2, r1
 80131e0:	9400      	str	r4, [sp, #0]
 80131e2:	0029      	movs	r1, r5
 80131e4:	f7ff ff70 	bl	80130c8 <_strtol_l.isra.0>
 80131e8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80131ea:	46c0      	nop			; (mov r8, r8)
 80131ec:	20000060 	.word	0x20000060
 80131f0:	200000c4 	.word	0x200000c4

080131f4 <__ascii_wctomb>:
 80131f4:	1e0b      	subs	r3, r1, #0
 80131f6:	d004      	beq.n	8013202 <__ascii_wctomb+0xe>
 80131f8:	2aff      	cmp	r2, #255	; 0xff
 80131fa:	d904      	bls.n	8013206 <__ascii_wctomb+0x12>
 80131fc:	238a      	movs	r3, #138	; 0x8a
 80131fe:	6003      	str	r3, [r0, #0]
 8013200:	3b8b      	subs	r3, #139	; 0x8b
 8013202:	0018      	movs	r0, r3
 8013204:	4770      	bx	lr
 8013206:	700a      	strb	r2, [r1, #0]
 8013208:	2301      	movs	r3, #1
 801320a:	e7fa      	b.n	8013202 <__ascii_wctomb+0xe>

0801320c <rshift>:
 801320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801320e:	0004      	movs	r4, r0
 8013210:	6905      	ldr	r5, [r0, #16]
 8013212:	3414      	adds	r4, #20
 8013214:	114b      	asrs	r3, r1, #5
 8013216:	0026      	movs	r6, r4
 8013218:	429d      	cmp	r5, r3
 801321a:	dd14      	ble.n	8013246 <rshift+0x3a>
 801321c:	221f      	movs	r2, #31
 801321e:	00ad      	lsls	r5, r5, #2
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	4011      	ands	r1, r2
 8013224:	1965      	adds	r5, r4, r5
 8013226:	18e3      	adds	r3, r4, r3
 8013228:	0022      	movs	r2, r4
 801322a:	2900      	cmp	r1, #0
 801322c:	d01e      	beq.n	801326c <rshift+0x60>
 801322e:	cb04      	ldmia	r3!, {r2}
 8013230:	2720      	movs	r7, #32
 8013232:	40ca      	lsrs	r2, r1
 8013234:	46a4      	mov	ip, r4
 8013236:	1a7f      	subs	r7, r7, r1
 8013238:	4666      	mov	r6, ip
 801323a:	429d      	cmp	r5, r3
 801323c:	d80b      	bhi.n	8013256 <rshift+0x4a>
 801323e:	6032      	str	r2, [r6, #0]
 8013240:	2a00      	cmp	r2, #0
 8013242:	d000      	beq.n	8013246 <rshift+0x3a>
 8013244:	3604      	adds	r6, #4
 8013246:	1b33      	subs	r3, r6, r4
 8013248:	109b      	asrs	r3, r3, #2
 801324a:	6103      	str	r3, [r0, #16]
 801324c:	42a6      	cmp	r6, r4
 801324e:	d101      	bne.n	8013254 <rshift+0x48>
 8013250:	2300      	movs	r3, #0
 8013252:	6143      	str	r3, [r0, #20]
 8013254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013256:	681e      	ldr	r6, [r3, #0]
 8013258:	40be      	lsls	r6, r7
 801325a:	4332      	orrs	r2, r6
 801325c:	4666      	mov	r6, ip
 801325e:	c604      	stmia	r6!, {r2}
 8013260:	cb04      	ldmia	r3!, {r2}
 8013262:	46b4      	mov	ip, r6
 8013264:	40ca      	lsrs	r2, r1
 8013266:	e7e7      	b.n	8013238 <rshift+0x2c>
 8013268:	cb02      	ldmia	r3!, {r1}
 801326a:	c202      	stmia	r2!, {r1}
 801326c:	0016      	movs	r6, r2
 801326e:	429d      	cmp	r5, r3
 8013270:	d8fa      	bhi.n	8013268 <rshift+0x5c>
 8013272:	e7e8      	b.n	8013246 <rshift+0x3a>

08013274 <__hexdig_fun>:
 8013274:	0003      	movs	r3, r0
 8013276:	3b30      	subs	r3, #48	; 0x30
 8013278:	2b09      	cmp	r3, #9
 801327a:	d803      	bhi.n	8013284 <__hexdig_fun+0x10>
 801327c:	3820      	subs	r0, #32
 801327e:	b2c3      	uxtb	r3, r0
 8013280:	0018      	movs	r0, r3
 8013282:	4770      	bx	lr
 8013284:	0003      	movs	r3, r0
 8013286:	3b61      	subs	r3, #97	; 0x61
 8013288:	2b05      	cmp	r3, #5
 801328a:	d801      	bhi.n	8013290 <__hexdig_fun+0x1c>
 801328c:	3847      	subs	r0, #71	; 0x47
 801328e:	e7f6      	b.n	801327e <__hexdig_fun+0xa>
 8013290:	0002      	movs	r2, r0
 8013292:	3a41      	subs	r2, #65	; 0x41
 8013294:	2300      	movs	r3, #0
 8013296:	2a05      	cmp	r2, #5
 8013298:	d8f2      	bhi.n	8013280 <__hexdig_fun+0xc>
 801329a:	3827      	subs	r0, #39	; 0x27
 801329c:	e7ef      	b.n	801327e <__hexdig_fun+0xa>

0801329e <__gethex>:
 801329e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132a0:	b08d      	sub	sp, #52	; 0x34
 80132a2:	9005      	str	r0, [sp, #20]
 80132a4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80132a6:	9109      	str	r1, [sp, #36]	; 0x24
 80132a8:	9202      	str	r2, [sp, #8]
 80132aa:	930a      	str	r3, [sp, #40]	; 0x28
 80132ac:	f000 fadf 	bl	801386e <__localeconv_l>
 80132b0:	6803      	ldr	r3, [r0, #0]
 80132b2:	0018      	movs	r0, r3
 80132b4:	9307      	str	r3, [sp, #28]
 80132b6:	f7ec ff2f 	bl	8000118 <strlen>
 80132ba:	2202      	movs	r2, #2
 80132bc:	9b07      	ldr	r3, [sp, #28]
 80132be:	4252      	negs	r2, r2
 80132c0:	181b      	adds	r3, r3, r0
 80132c2:	3b01      	subs	r3, #1
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	9004      	str	r0, [sp, #16]
 80132c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80132ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132cc:	6819      	ldr	r1, [r3, #0]
 80132ce:	1c8b      	adds	r3, r1, #2
 80132d0:	1a52      	subs	r2, r2, r1
 80132d2:	18d1      	adds	r1, r2, r3
 80132d4:	9301      	str	r3, [sp, #4]
 80132d6:	9108      	str	r1, [sp, #32]
 80132d8:	9901      	ldr	r1, [sp, #4]
 80132da:	3301      	adds	r3, #1
 80132dc:	7808      	ldrb	r0, [r1, #0]
 80132de:	2830      	cmp	r0, #48	; 0x30
 80132e0:	d0f7      	beq.n	80132d2 <__gethex+0x34>
 80132e2:	f7ff ffc7 	bl	8013274 <__hexdig_fun>
 80132e6:	1e07      	subs	r7, r0, #0
 80132e8:	d000      	beq.n	80132ec <__gethex+0x4e>
 80132ea:	e06f      	b.n	80133cc <__gethex+0x12e>
 80132ec:	9a04      	ldr	r2, [sp, #16]
 80132ee:	9907      	ldr	r1, [sp, #28]
 80132f0:	9801      	ldr	r0, [sp, #4]
 80132f2:	f7ff f81b 	bl	801232c <strncmp>
 80132f6:	2800      	cmp	r0, #0
 80132f8:	d000      	beq.n	80132fc <__gethex+0x5e>
 80132fa:	e06d      	b.n	80133d8 <__gethex+0x13a>
 80132fc:	9b01      	ldr	r3, [sp, #4]
 80132fe:	9a04      	ldr	r2, [sp, #16]
 8013300:	189c      	adds	r4, r3, r2
 8013302:	7820      	ldrb	r0, [r4, #0]
 8013304:	f7ff ffb6 	bl	8013274 <__hexdig_fun>
 8013308:	2800      	cmp	r0, #0
 801330a:	d069      	beq.n	80133e0 <__gethex+0x142>
 801330c:	9401      	str	r4, [sp, #4]
 801330e:	9b01      	ldr	r3, [sp, #4]
 8013310:	7818      	ldrb	r0, [r3, #0]
 8013312:	2830      	cmp	r0, #48	; 0x30
 8013314:	d009      	beq.n	801332a <__gethex+0x8c>
 8013316:	f7ff ffad 	bl	8013274 <__hexdig_fun>
 801331a:	4243      	negs	r3, r0
 801331c:	4143      	adcs	r3, r0
 801331e:	9303      	str	r3, [sp, #12]
 8013320:	2301      	movs	r3, #1
 8013322:	0026      	movs	r6, r4
 8013324:	9308      	str	r3, [sp, #32]
 8013326:	9c01      	ldr	r4, [sp, #4]
 8013328:	e004      	b.n	8013334 <__gethex+0x96>
 801332a:	9b01      	ldr	r3, [sp, #4]
 801332c:	3301      	adds	r3, #1
 801332e:	9301      	str	r3, [sp, #4]
 8013330:	e7ed      	b.n	801330e <__gethex+0x70>
 8013332:	3401      	adds	r4, #1
 8013334:	7820      	ldrb	r0, [r4, #0]
 8013336:	f7ff ff9d 	bl	8013274 <__hexdig_fun>
 801333a:	2800      	cmp	r0, #0
 801333c:	d1f9      	bne.n	8013332 <__gethex+0x94>
 801333e:	9a04      	ldr	r2, [sp, #16]
 8013340:	9907      	ldr	r1, [sp, #28]
 8013342:	0020      	movs	r0, r4
 8013344:	f7fe fff2 	bl	801232c <strncmp>
 8013348:	2800      	cmp	r0, #0
 801334a:	d109      	bne.n	8013360 <__gethex+0xc2>
 801334c:	2e00      	cmp	r6, #0
 801334e:	d10a      	bne.n	8013366 <__gethex+0xc8>
 8013350:	9b04      	ldr	r3, [sp, #16]
 8013352:	18e4      	adds	r4, r4, r3
 8013354:	0026      	movs	r6, r4
 8013356:	7820      	ldrb	r0, [r4, #0]
 8013358:	f7ff ff8c 	bl	8013274 <__hexdig_fun>
 801335c:	2800      	cmp	r0, #0
 801335e:	d139      	bne.n	80133d4 <__gethex+0x136>
 8013360:	2700      	movs	r7, #0
 8013362:	42be      	cmp	r6, r7
 8013364:	d001      	beq.n	801336a <__gethex+0xcc>
 8013366:	1b37      	subs	r7, r6, r4
 8013368:	00bf      	lsls	r7, r7, #2
 801336a:	7823      	ldrb	r3, [r4, #0]
 801336c:	2b50      	cmp	r3, #80	; 0x50
 801336e:	d001      	beq.n	8013374 <__gethex+0xd6>
 8013370:	2b70      	cmp	r3, #112	; 0x70
 8013372:	d142      	bne.n	80133fa <__gethex+0x15c>
 8013374:	7863      	ldrb	r3, [r4, #1]
 8013376:	2b2b      	cmp	r3, #43	; 0x2b
 8013378:	d034      	beq.n	80133e4 <__gethex+0x146>
 801337a:	2b2d      	cmp	r3, #45	; 0x2d
 801337c:	d036      	beq.n	80133ec <__gethex+0x14e>
 801337e:	2300      	movs	r3, #0
 8013380:	1c66      	adds	r6, r4, #1
 8013382:	9306      	str	r3, [sp, #24]
 8013384:	7830      	ldrb	r0, [r6, #0]
 8013386:	f7ff ff75 	bl	8013274 <__hexdig_fun>
 801338a:	1e43      	subs	r3, r0, #1
 801338c:	b2db      	uxtb	r3, r3
 801338e:	2b18      	cmp	r3, #24
 8013390:	d833      	bhi.n	80133fa <__gethex+0x15c>
 8013392:	3810      	subs	r0, #16
 8013394:	0005      	movs	r5, r0
 8013396:	3601      	adds	r6, #1
 8013398:	7830      	ldrb	r0, [r6, #0]
 801339a:	f7ff ff6b 	bl	8013274 <__hexdig_fun>
 801339e:	1e43      	subs	r3, r0, #1
 80133a0:	b2db      	uxtb	r3, r3
 80133a2:	2b18      	cmp	r3, #24
 80133a4:	d924      	bls.n	80133f0 <__gethex+0x152>
 80133a6:	9b06      	ldr	r3, [sp, #24]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d000      	beq.n	80133ae <__gethex+0x110>
 80133ac:	426d      	negs	r5, r5
 80133ae:	197f      	adds	r7, r7, r5
 80133b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133b2:	601e      	str	r6, [r3, #0]
 80133b4:	9b03      	ldr	r3, [sp, #12]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d021      	beq.n	80133fe <__gethex+0x160>
 80133ba:	9b08      	ldr	r3, [sp, #32]
 80133bc:	2606      	movs	r6, #6
 80133be:	425a      	negs	r2, r3
 80133c0:	4153      	adcs	r3, r2
 80133c2:	425b      	negs	r3, r3
 80133c4:	401e      	ands	r6, r3
 80133c6:	0030      	movs	r0, r6
 80133c8:	b00d      	add	sp, #52	; 0x34
 80133ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133cc:	2300      	movs	r3, #0
 80133ce:	9303      	str	r3, [sp, #12]
 80133d0:	001e      	movs	r6, r3
 80133d2:	e7a8      	b.n	8013326 <__gethex+0x88>
 80133d4:	3401      	adds	r4, #1
 80133d6:	e7be      	b.n	8013356 <__gethex+0xb8>
 80133d8:	9c01      	ldr	r4, [sp, #4]
 80133da:	2301      	movs	r3, #1
 80133dc:	9303      	str	r3, [sp, #12]
 80133de:	e7c4      	b.n	801336a <__gethex+0xcc>
 80133e0:	0007      	movs	r7, r0
 80133e2:	e7fa      	b.n	80133da <__gethex+0x13c>
 80133e4:	2300      	movs	r3, #0
 80133e6:	9306      	str	r3, [sp, #24]
 80133e8:	1ca6      	adds	r6, r4, #2
 80133ea:	e7cb      	b.n	8013384 <__gethex+0xe6>
 80133ec:	2301      	movs	r3, #1
 80133ee:	e7fa      	b.n	80133e6 <__gethex+0x148>
 80133f0:	230a      	movs	r3, #10
 80133f2:	435d      	muls	r5, r3
 80133f4:	182d      	adds	r5, r5, r0
 80133f6:	3d10      	subs	r5, #16
 80133f8:	e7cd      	b.n	8013396 <__gethex+0xf8>
 80133fa:	0026      	movs	r6, r4
 80133fc:	e7d8      	b.n	80133b0 <__gethex+0x112>
 80133fe:	9b01      	ldr	r3, [sp, #4]
 8013400:	9903      	ldr	r1, [sp, #12]
 8013402:	1ae3      	subs	r3, r4, r3
 8013404:	3b01      	subs	r3, #1
 8013406:	2b07      	cmp	r3, #7
 8013408:	dc47      	bgt.n	801349a <__gethex+0x1fc>
 801340a:	9805      	ldr	r0, [sp, #20]
 801340c:	f000 fa33 	bl	8013876 <_Balloc>
 8013410:	0003      	movs	r3, r0
 8013412:	3314      	adds	r3, #20
 8013414:	9303      	str	r3, [sp, #12]
 8013416:	9308      	str	r3, [sp, #32]
 8013418:	2300      	movs	r3, #0
 801341a:	0005      	movs	r5, r0
 801341c:	001e      	movs	r6, r3
 801341e:	9306      	str	r3, [sp, #24]
 8013420:	9b01      	ldr	r3, [sp, #4]
 8013422:	42a3      	cmp	r3, r4
 8013424:	d33c      	bcc.n	80134a0 <__gethex+0x202>
 8013426:	9c08      	ldr	r4, [sp, #32]
 8013428:	9b03      	ldr	r3, [sp, #12]
 801342a:	c440      	stmia	r4!, {r6}
 801342c:	1ae4      	subs	r4, r4, r3
 801342e:	10a4      	asrs	r4, r4, #2
 8013430:	612c      	str	r4, [r5, #16]
 8013432:	0030      	movs	r0, r6
 8013434:	f000 faec 	bl	8013a10 <__hi0bits>
 8013438:	9b02      	ldr	r3, [sp, #8]
 801343a:	0164      	lsls	r4, r4, #5
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	1a26      	subs	r6, r4, r0
 8013440:	9301      	str	r3, [sp, #4]
 8013442:	429e      	cmp	r6, r3
 8013444:	dd5f      	ble.n	8013506 <__gethex+0x268>
 8013446:	1af6      	subs	r6, r6, r3
 8013448:	0031      	movs	r1, r6
 801344a:	0028      	movs	r0, r5
 801344c:	f000 fde7 	bl	801401e <__any_on>
 8013450:	1e04      	subs	r4, r0, #0
 8013452:	d00f      	beq.n	8013474 <__gethex+0x1d6>
 8013454:	2401      	movs	r4, #1
 8013456:	211f      	movs	r1, #31
 8013458:	0020      	movs	r0, r4
 801345a:	1e73      	subs	r3, r6, #1
 801345c:	4019      	ands	r1, r3
 801345e:	4088      	lsls	r0, r1
 8013460:	0001      	movs	r1, r0
 8013462:	115a      	asrs	r2, r3, #5
 8013464:	9803      	ldr	r0, [sp, #12]
 8013466:	0092      	lsls	r2, r2, #2
 8013468:	5812      	ldr	r2, [r2, r0]
 801346a:	420a      	tst	r2, r1
 801346c:	d002      	beq.n	8013474 <__gethex+0x1d6>
 801346e:	42a3      	cmp	r3, r4
 8013470:	dc41      	bgt.n	80134f6 <__gethex+0x258>
 8013472:	2402      	movs	r4, #2
 8013474:	0031      	movs	r1, r6
 8013476:	0028      	movs	r0, r5
 8013478:	f7ff fec8 	bl	801320c <rshift>
 801347c:	19bf      	adds	r7, r7, r6
 801347e:	9b02      	ldr	r3, [sp, #8]
 8013480:	689b      	ldr	r3, [r3, #8]
 8013482:	9304      	str	r3, [sp, #16]
 8013484:	42bb      	cmp	r3, r7
 8013486:	da4e      	bge.n	8013526 <__gethex+0x288>
 8013488:	0029      	movs	r1, r5
 801348a:	9805      	ldr	r0, [sp, #20]
 801348c:	f000 fa2b 	bl	80138e6 <_Bfree>
 8013490:	2300      	movs	r3, #0
 8013492:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013494:	26a3      	movs	r6, #163	; 0xa3
 8013496:	6013      	str	r3, [r2, #0]
 8013498:	e795      	b.n	80133c6 <__gethex+0x128>
 801349a:	3101      	adds	r1, #1
 801349c:	105b      	asrs	r3, r3, #1
 801349e:	e7b2      	b.n	8013406 <__gethex+0x168>
 80134a0:	1e63      	subs	r3, r4, #1
 80134a2:	9309      	str	r3, [sp, #36]	; 0x24
 80134a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	4293      	cmp	r3, r2
 80134aa:	d015      	beq.n	80134d8 <__gethex+0x23a>
 80134ac:	9b06      	ldr	r3, [sp, #24]
 80134ae:	2b20      	cmp	r3, #32
 80134b0:	d105      	bne.n	80134be <__gethex+0x220>
 80134b2:	9b08      	ldr	r3, [sp, #32]
 80134b4:	601e      	str	r6, [r3, #0]
 80134b6:	2600      	movs	r6, #0
 80134b8:	3304      	adds	r3, #4
 80134ba:	9308      	str	r3, [sp, #32]
 80134bc:	9606      	str	r6, [sp, #24]
 80134be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134c0:	7818      	ldrb	r0, [r3, #0]
 80134c2:	f7ff fed7 	bl	8013274 <__hexdig_fun>
 80134c6:	230f      	movs	r3, #15
 80134c8:	4018      	ands	r0, r3
 80134ca:	9b06      	ldr	r3, [sp, #24]
 80134cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80134ce:	4098      	lsls	r0, r3
 80134d0:	3304      	adds	r3, #4
 80134d2:	4306      	orrs	r6, r0
 80134d4:	9306      	str	r3, [sp, #24]
 80134d6:	e7a3      	b.n	8013420 <__gethex+0x182>
 80134d8:	2301      	movs	r3, #1
 80134da:	9a04      	ldr	r2, [sp, #16]
 80134dc:	1a9c      	subs	r4, r3, r2
 80134de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134e0:	191c      	adds	r4, r3, r4
 80134e2:	9b01      	ldr	r3, [sp, #4]
 80134e4:	429c      	cmp	r4, r3
 80134e6:	d3e1      	bcc.n	80134ac <__gethex+0x20e>
 80134e8:	9907      	ldr	r1, [sp, #28]
 80134ea:	0020      	movs	r0, r4
 80134ec:	f7fe ff1e 	bl	801232c <strncmp>
 80134f0:	2800      	cmp	r0, #0
 80134f2:	d1db      	bne.n	80134ac <__gethex+0x20e>
 80134f4:	e794      	b.n	8013420 <__gethex+0x182>
 80134f6:	1eb1      	subs	r1, r6, #2
 80134f8:	0028      	movs	r0, r5
 80134fa:	f000 fd90 	bl	801401e <__any_on>
 80134fe:	2800      	cmp	r0, #0
 8013500:	d0b7      	beq.n	8013472 <__gethex+0x1d4>
 8013502:	2403      	movs	r4, #3
 8013504:	e7b6      	b.n	8013474 <__gethex+0x1d6>
 8013506:	9b01      	ldr	r3, [sp, #4]
 8013508:	2400      	movs	r4, #0
 801350a:	429e      	cmp	r6, r3
 801350c:	dab7      	bge.n	801347e <__gethex+0x1e0>
 801350e:	1b9e      	subs	r6, r3, r6
 8013510:	0029      	movs	r1, r5
 8013512:	0032      	movs	r2, r6
 8013514:	9805      	ldr	r0, [sp, #20]
 8013516:	f000 fbaf 	bl	8013c78 <__lshift>
 801351a:	0003      	movs	r3, r0
 801351c:	3314      	adds	r3, #20
 801351e:	0005      	movs	r5, r0
 8013520:	1bbf      	subs	r7, r7, r6
 8013522:	9303      	str	r3, [sp, #12]
 8013524:	e7ab      	b.n	801347e <__gethex+0x1e0>
 8013526:	9b02      	ldr	r3, [sp, #8]
 8013528:	685e      	ldr	r6, [r3, #4]
 801352a:	42be      	cmp	r6, r7
 801352c:	dd6b      	ble.n	8013606 <__gethex+0x368>
 801352e:	9b01      	ldr	r3, [sp, #4]
 8013530:	1bf6      	subs	r6, r6, r7
 8013532:	42b3      	cmp	r3, r6
 8013534:	dc32      	bgt.n	801359c <__gethex+0x2fe>
 8013536:	9b02      	ldr	r3, [sp, #8]
 8013538:	68db      	ldr	r3, [r3, #12]
 801353a:	2b02      	cmp	r3, #2
 801353c:	d026      	beq.n	801358c <__gethex+0x2ee>
 801353e:	2b03      	cmp	r3, #3
 8013540:	d028      	beq.n	8013594 <__gethex+0x2f6>
 8013542:	2b01      	cmp	r3, #1
 8013544:	d119      	bne.n	801357a <__gethex+0x2dc>
 8013546:	9b01      	ldr	r3, [sp, #4]
 8013548:	42b3      	cmp	r3, r6
 801354a:	d116      	bne.n	801357a <__gethex+0x2dc>
 801354c:	2b01      	cmp	r3, #1
 801354e:	dc0d      	bgt.n	801356c <__gethex+0x2ce>
 8013550:	9b02      	ldr	r3, [sp, #8]
 8013552:	2662      	movs	r6, #98	; 0x62
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	9301      	str	r3, [sp, #4]
 8013558:	9a01      	ldr	r2, [sp, #4]
 801355a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801355c:	601a      	str	r2, [r3, #0]
 801355e:	2301      	movs	r3, #1
 8013560:	9a03      	ldr	r2, [sp, #12]
 8013562:	612b      	str	r3, [r5, #16]
 8013564:	6013      	str	r3, [r2, #0]
 8013566:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013568:	601d      	str	r5, [r3, #0]
 801356a:	e72c      	b.n	80133c6 <__gethex+0x128>
 801356c:	9901      	ldr	r1, [sp, #4]
 801356e:	0028      	movs	r0, r5
 8013570:	3901      	subs	r1, #1
 8013572:	f000 fd54 	bl	801401e <__any_on>
 8013576:	2800      	cmp	r0, #0
 8013578:	d1ea      	bne.n	8013550 <__gethex+0x2b2>
 801357a:	0029      	movs	r1, r5
 801357c:	9805      	ldr	r0, [sp, #20]
 801357e:	f000 f9b2 	bl	80138e6 <_Bfree>
 8013582:	2300      	movs	r3, #0
 8013584:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013586:	2650      	movs	r6, #80	; 0x50
 8013588:	6013      	str	r3, [r2, #0]
 801358a:	e71c      	b.n	80133c6 <__gethex+0x128>
 801358c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801358e:	2b00      	cmp	r3, #0
 8013590:	d0de      	beq.n	8013550 <__gethex+0x2b2>
 8013592:	e7f2      	b.n	801357a <__gethex+0x2dc>
 8013594:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013596:	2b00      	cmp	r3, #0
 8013598:	d1da      	bne.n	8013550 <__gethex+0x2b2>
 801359a:	e7ee      	b.n	801357a <__gethex+0x2dc>
 801359c:	1e77      	subs	r7, r6, #1
 801359e:	2c00      	cmp	r4, #0
 80135a0:	d12f      	bne.n	8013602 <__gethex+0x364>
 80135a2:	2f00      	cmp	r7, #0
 80135a4:	d004      	beq.n	80135b0 <__gethex+0x312>
 80135a6:	0039      	movs	r1, r7
 80135a8:	0028      	movs	r0, r5
 80135aa:	f000 fd38 	bl	801401e <__any_on>
 80135ae:	0004      	movs	r4, r0
 80135b0:	231f      	movs	r3, #31
 80135b2:	117a      	asrs	r2, r7, #5
 80135b4:	401f      	ands	r7, r3
 80135b6:	3b1e      	subs	r3, #30
 80135b8:	40bb      	lsls	r3, r7
 80135ba:	9903      	ldr	r1, [sp, #12]
 80135bc:	0092      	lsls	r2, r2, #2
 80135be:	5852      	ldr	r2, [r2, r1]
 80135c0:	421a      	tst	r2, r3
 80135c2:	d001      	beq.n	80135c8 <__gethex+0x32a>
 80135c4:	2302      	movs	r3, #2
 80135c6:	431c      	orrs	r4, r3
 80135c8:	9b01      	ldr	r3, [sp, #4]
 80135ca:	0031      	movs	r1, r6
 80135cc:	1b9b      	subs	r3, r3, r6
 80135ce:	2602      	movs	r6, #2
 80135d0:	0028      	movs	r0, r5
 80135d2:	9301      	str	r3, [sp, #4]
 80135d4:	f7ff fe1a 	bl	801320c <rshift>
 80135d8:	9b02      	ldr	r3, [sp, #8]
 80135da:	685f      	ldr	r7, [r3, #4]
 80135dc:	2c00      	cmp	r4, #0
 80135de:	d040      	beq.n	8013662 <__gethex+0x3c4>
 80135e0:	9b02      	ldr	r3, [sp, #8]
 80135e2:	68db      	ldr	r3, [r3, #12]
 80135e4:	2b02      	cmp	r3, #2
 80135e6:	d010      	beq.n	801360a <__gethex+0x36c>
 80135e8:	2b03      	cmp	r3, #3
 80135ea:	d012      	beq.n	8013612 <__gethex+0x374>
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	d106      	bne.n	80135fe <__gethex+0x360>
 80135f0:	07a2      	lsls	r2, r4, #30
 80135f2:	d504      	bpl.n	80135fe <__gethex+0x360>
 80135f4:	9a03      	ldr	r2, [sp, #12]
 80135f6:	6812      	ldr	r2, [r2, #0]
 80135f8:	4314      	orrs	r4, r2
 80135fa:	421c      	tst	r4, r3
 80135fc:	d10c      	bne.n	8013618 <__gethex+0x37a>
 80135fe:	2310      	movs	r3, #16
 8013600:	e02e      	b.n	8013660 <__gethex+0x3c2>
 8013602:	2401      	movs	r4, #1
 8013604:	e7d4      	b.n	80135b0 <__gethex+0x312>
 8013606:	2601      	movs	r6, #1
 8013608:	e7e8      	b.n	80135dc <__gethex+0x33e>
 801360a:	2301      	movs	r3, #1
 801360c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801360e:	1a9b      	subs	r3, r3, r2
 8013610:	9313      	str	r3, [sp, #76]	; 0x4c
 8013612:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013614:	2b00      	cmp	r3, #0
 8013616:	d0f2      	beq.n	80135fe <__gethex+0x360>
 8013618:	692c      	ldr	r4, [r5, #16]
 801361a:	00a3      	lsls	r3, r4, #2
 801361c:	9304      	str	r3, [sp, #16]
 801361e:	002b      	movs	r3, r5
 8013620:	00a2      	lsls	r2, r4, #2
 8013622:	3314      	adds	r3, #20
 8013624:	1899      	adds	r1, r3, r2
 8013626:	2200      	movs	r2, #0
 8013628:	4694      	mov	ip, r2
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	1c50      	adds	r0, r2, #1
 801362e:	d01d      	beq.n	801366c <__gethex+0x3ce>
 8013630:	3201      	adds	r2, #1
 8013632:	601a      	str	r2, [r3, #0]
 8013634:	002b      	movs	r3, r5
 8013636:	3314      	adds	r3, #20
 8013638:	2e02      	cmp	r6, #2
 801363a:	d13a      	bne.n	80136b2 <__gethex+0x414>
 801363c:	9a02      	ldr	r2, [sp, #8]
 801363e:	9901      	ldr	r1, [sp, #4]
 8013640:	6812      	ldr	r2, [r2, #0]
 8013642:	3a01      	subs	r2, #1
 8013644:	428a      	cmp	r2, r1
 8013646:	d10a      	bne.n	801365e <__gethex+0x3c0>
 8013648:	114a      	asrs	r2, r1, #5
 801364a:	211f      	movs	r1, #31
 801364c:	9801      	ldr	r0, [sp, #4]
 801364e:	0092      	lsls	r2, r2, #2
 8013650:	4001      	ands	r1, r0
 8013652:	2001      	movs	r0, #1
 8013654:	0004      	movs	r4, r0
 8013656:	408c      	lsls	r4, r1
 8013658:	58d3      	ldr	r3, [r2, r3]
 801365a:	4223      	tst	r3, r4
 801365c:	d148      	bne.n	80136f0 <__gethex+0x452>
 801365e:	2320      	movs	r3, #32
 8013660:	431e      	orrs	r6, r3
 8013662:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013664:	601d      	str	r5, [r3, #0]
 8013666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013668:	601f      	str	r7, [r3, #0]
 801366a:	e6ac      	b.n	80133c6 <__gethex+0x128>
 801366c:	4662      	mov	r2, ip
 801366e:	c304      	stmia	r3!, {r2}
 8013670:	4299      	cmp	r1, r3
 8013672:	d8da      	bhi.n	801362a <__gethex+0x38c>
 8013674:	68ab      	ldr	r3, [r5, #8]
 8013676:	429c      	cmp	r4, r3
 8013678:	db12      	blt.n	80136a0 <__gethex+0x402>
 801367a:	686b      	ldr	r3, [r5, #4]
 801367c:	9805      	ldr	r0, [sp, #20]
 801367e:	1c59      	adds	r1, r3, #1
 8013680:	f000 f8f9 	bl	8013876 <_Balloc>
 8013684:	0029      	movs	r1, r5
 8013686:	692b      	ldr	r3, [r5, #16]
 8013688:	9003      	str	r0, [sp, #12]
 801368a:	1c9a      	adds	r2, r3, #2
 801368c:	0092      	lsls	r2, r2, #2
 801368e:	310c      	adds	r1, #12
 8013690:	300c      	adds	r0, #12
 8013692:	f7fe fd00 	bl	8012096 <memcpy>
 8013696:	0029      	movs	r1, r5
 8013698:	9805      	ldr	r0, [sp, #20]
 801369a:	f000 f924 	bl	80138e6 <_Bfree>
 801369e:	9d03      	ldr	r5, [sp, #12]
 80136a0:	692b      	ldr	r3, [r5, #16]
 80136a2:	1c5a      	adds	r2, r3, #1
 80136a4:	612a      	str	r2, [r5, #16]
 80136a6:	2201      	movs	r2, #1
 80136a8:	3304      	adds	r3, #4
 80136aa:	009b      	lsls	r3, r3, #2
 80136ac:	18eb      	adds	r3, r5, r3
 80136ae:	605a      	str	r2, [r3, #4]
 80136b0:	e7c0      	b.n	8013634 <__gethex+0x396>
 80136b2:	692a      	ldr	r2, [r5, #16]
 80136b4:	42a2      	cmp	r2, r4
 80136b6:	dd0a      	ble.n	80136ce <__gethex+0x430>
 80136b8:	2101      	movs	r1, #1
 80136ba:	0028      	movs	r0, r5
 80136bc:	f7ff fda6 	bl	801320c <rshift>
 80136c0:	9b02      	ldr	r3, [sp, #8]
 80136c2:	3701      	adds	r7, #1
 80136c4:	689b      	ldr	r3, [r3, #8]
 80136c6:	2601      	movs	r6, #1
 80136c8:	42bb      	cmp	r3, r7
 80136ca:	dac8      	bge.n	801365e <__gethex+0x3c0>
 80136cc:	e6dc      	b.n	8013488 <__gethex+0x1ea>
 80136ce:	241f      	movs	r4, #31
 80136d0:	9a01      	ldr	r2, [sp, #4]
 80136d2:	2601      	movs	r6, #1
 80136d4:	4022      	ands	r2, r4
 80136d6:	1e14      	subs	r4, r2, #0
 80136d8:	d0c1      	beq.n	801365e <__gethex+0x3c0>
 80136da:	9a04      	ldr	r2, [sp, #16]
 80136dc:	189b      	adds	r3, r3, r2
 80136de:	3b04      	subs	r3, #4
 80136e0:	6818      	ldr	r0, [r3, #0]
 80136e2:	f000 f995 	bl	8013a10 <__hi0bits>
 80136e6:	2120      	movs	r1, #32
 80136e8:	1b0c      	subs	r4, r1, r4
 80136ea:	42a0      	cmp	r0, r4
 80136ec:	dbe4      	blt.n	80136b8 <__gethex+0x41a>
 80136ee:	e7b6      	b.n	801365e <__gethex+0x3c0>
 80136f0:	0006      	movs	r6, r0
 80136f2:	e7b4      	b.n	801365e <__gethex+0x3c0>

080136f4 <L_shift>:
 80136f4:	2308      	movs	r3, #8
 80136f6:	b570      	push	{r4, r5, r6, lr}
 80136f8:	2520      	movs	r5, #32
 80136fa:	1a9a      	subs	r2, r3, r2
 80136fc:	0092      	lsls	r2, r2, #2
 80136fe:	1aad      	subs	r5, r5, r2
 8013700:	6843      	ldr	r3, [r0, #4]
 8013702:	6806      	ldr	r6, [r0, #0]
 8013704:	001c      	movs	r4, r3
 8013706:	40ac      	lsls	r4, r5
 8013708:	40d3      	lsrs	r3, r2
 801370a:	4334      	orrs	r4, r6
 801370c:	6004      	str	r4, [r0, #0]
 801370e:	6043      	str	r3, [r0, #4]
 8013710:	3004      	adds	r0, #4
 8013712:	4288      	cmp	r0, r1
 8013714:	d3f4      	bcc.n	8013700 <L_shift+0xc>
 8013716:	bd70      	pop	{r4, r5, r6, pc}

08013718 <__match>:
 8013718:	b530      	push	{r4, r5, lr}
 801371a:	6803      	ldr	r3, [r0, #0]
 801371c:	780c      	ldrb	r4, [r1, #0]
 801371e:	3301      	adds	r3, #1
 8013720:	2c00      	cmp	r4, #0
 8013722:	d102      	bne.n	801372a <__match+0x12>
 8013724:	6003      	str	r3, [r0, #0]
 8013726:	2001      	movs	r0, #1
 8013728:	bd30      	pop	{r4, r5, pc}
 801372a:	781a      	ldrb	r2, [r3, #0]
 801372c:	0015      	movs	r5, r2
 801372e:	3d41      	subs	r5, #65	; 0x41
 8013730:	2d19      	cmp	r5, #25
 8013732:	d800      	bhi.n	8013736 <__match+0x1e>
 8013734:	3220      	adds	r2, #32
 8013736:	3101      	adds	r1, #1
 8013738:	42a2      	cmp	r2, r4
 801373a:	d0ef      	beq.n	801371c <__match+0x4>
 801373c:	2000      	movs	r0, #0
 801373e:	e7f3      	b.n	8013728 <__match+0x10>

08013740 <__hexnan>:
 8013740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013742:	b08b      	sub	sp, #44	; 0x2c
 8013744:	9201      	str	r2, [sp, #4]
 8013746:	680a      	ldr	r2, [r1, #0]
 8013748:	9901      	ldr	r1, [sp, #4]
 801374a:	1153      	asrs	r3, r2, #5
 801374c:	009b      	lsls	r3, r3, #2
 801374e:	18cb      	adds	r3, r1, r3
 8013750:	9304      	str	r3, [sp, #16]
 8013752:	231f      	movs	r3, #31
 8013754:	401a      	ands	r2, r3
 8013756:	9008      	str	r0, [sp, #32]
 8013758:	9206      	str	r2, [sp, #24]
 801375a:	d002      	beq.n	8013762 <__hexnan+0x22>
 801375c:	9b04      	ldr	r3, [sp, #16]
 801375e:	3304      	adds	r3, #4
 8013760:	9304      	str	r3, [sp, #16]
 8013762:	9b04      	ldr	r3, [sp, #16]
 8013764:	2500      	movs	r5, #0
 8013766:	1f1e      	subs	r6, r3, #4
 8013768:	0037      	movs	r7, r6
 801376a:	0034      	movs	r4, r6
 801376c:	9b08      	ldr	r3, [sp, #32]
 801376e:	6035      	str	r5, [r6, #0]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	9507      	str	r5, [sp, #28]
 8013774:	9305      	str	r3, [sp, #20]
 8013776:	9502      	str	r5, [sp, #8]
 8013778:	9b05      	ldr	r3, [sp, #20]
 801377a:	3301      	adds	r3, #1
 801377c:	9309      	str	r3, [sp, #36]	; 0x24
 801377e:	9b05      	ldr	r3, [sp, #20]
 8013780:	785b      	ldrb	r3, [r3, #1]
 8013782:	9303      	str	r3, [sp, #12]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d028      	beq.n	80137da <__hexnan+0x9a>
 8013788:	9803      	ldr	r0, [sp, #12]
 801378a:	f7ff fd73 	bl	8013274 <__hexdig_fun>
 801378e:	2800      	cmp	r0, #0
 8013790:	d145      	bne.n	801381e <__hexnan+0xde>
 8013792:	9b03      	ldr	r3, [sp, #12]
 8013794:	2b20      	cmp	r3, #32
 8013796:	d819      	bhi.n	80137cc <__hexnan+0x8c>
 8013798:	9b02      	ldr	r3, [sp, #8]
 801379a:	9a07      	ldr	r2, [sp, #28]
 801379c:	4293      	cmp	r3, r2
 801379e:	dd12      	ble.n	80137c6 <__hexnan+0x86>
 80137a0:	42bc      	cmp	r4, r7
 80137a2:	d206      	bcs.n	80137b2 <__hexnan+0x72>
 80137a4:	2d07      	cmp	r5, #7
 80137a6:	dc04      	bgt.n	80137b2 <__hexnan+0x72>
 80137a8:	002a      	movs	r2, r5
 80137aa:	0039      	movs	r1, r7
 80137ac:	0020      	movs	r0, r4
 80137ae:	f7ff ffa1 	bl	80136f4 <L_shift>
 80137b2:	9b01      	ldr	r3, [sp, #4]
 80137b4:	2508      	movs	r5, #8
 80137b6:	429c      	cmp	r4, r3
 80137b8:	d905      	bls.n	80137c6 <__hexnan+0x86>
 80137ba:	1f27      	subs	r7, r4, #4
 80137bc:	2500      	movs	r5, #0
 80137be:	003c      	movs	r4, r7
 80137c0:	9b02      	ldr	r3, [sp, #8]
 80137c2:	603d      	str	r5, [r7, #0]
 80137c4:	9307      	str	r3, [sp, #28]
 80137c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137c8:	9305      	str	r3, [sp, #20]
 80137ca:	e7d5      	b.n	8013778 <__hexnan+0x38>
 80137cc:	9b03      	ldr	r3, [sp, #12]
 80137ce:	2b29      	cmp	r3, #41	; 0x29
 80137d0:	d14a      	bne.n	8013868 <__hexnan+0x128>
 80137d2:	9b05      	ldr	r3, [sp, #20]
 80137d4:	9a08      	ldr	r2, [sp, #32]
 80137d6:	3302      	adds	r3, #2
 80137d8:	6013      	str	r3, [r2, #0]
 80137da:	9b02      	ldr	r3, [sp, #8]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d043      	beq.n	8013868 <__hexnan+0x128>
 80137e0:	42bc      	cmp	r4, r7
 80137e2:	d206      	bcs.n	80137f2 <__hexnan+0xb2>
 80137e4:	2d07      	cmp	r5, #7
 80137e6:	dc04      	bgt.n	80137f2 <__hexnan+0xb2>
 80137e8:	002a      	movs	r2, r5
 80137ea:	0039      	movs	r1, r7
 80137ec:	0020      	movs	r0, r4
 80137ee:	f7ff ff81 	bl	80136f4 <L_shift>
 80137f2:	9b01      	ldr	r3, [sp, #4]
 80137f4:	429c      	cmp	r4, r3
 80137f6:	d926      	bls.n	8013846 <__hexnan+0x106>
 80137f8:	cc04      	ldmia	r4!, {r2}
 80137fa:	601a      	str	r2, [r3, #0]
 80137fc:	3304      	adds	r3, #4
 80137fe:	42a6      	cmp	r6, r4
 8013800:	d2fa      	bcs.n	80137f8 <__hexnan+0xb8>
 8013802:	2200      	movs	r2, #0
 8013804:	c304      	stmia	r3!, {r2}
 8013806:	429e      	cmp	r6, r3
 8013808:	d2fc      	bcs.n	8013804 <__hexnan+0xc4>
 801380a:	6833      	ldr	r3, [r6, #0]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d104      	bne.n	801381a <__hexnan+0xda>
 8013810:	9b01      	ldr	r3, [sp, #4]
 8013812:	429e      	cmp	r6, r3
 8013814:	d126      	bne.n	8013864 <__hexnan+0x124>
 8013816:	2301      	movs	r3, #1
 8013818:	6033      	str	r3, [r6, #0]
 801381a:	2005      	movs	r0, #5
 801381c:	e025      	b.n	801386a <__hexnan+0x12a>
 801381e:	9b02      	ldr	r3, [sp, #8]
 8013820:	3501      	adds	r5, #1
 8013822:	3301      	adds	r3, #1
 8013824:	9302      	str	r3, [sp, #8]
 8013826:	2d08      	cmp	r5, #8
 8013828:	dd06      	ble.n	8013838 <__hexnan+0xf8>
 801382a:	9b01      	ldr	r3, [sp, #4]
 801382c:	429c      	cmp	r4, r3
 801382e:	d9ca      	bls.n	80137c6 <__hexnan+0x86>
 8013830:	2300      	movs	r3, #0
 8013832:	2501      	movs	r5, #1
 8013834:	3c04      	subs	r4, #4
 8013836:	6023      	str	r3, [r4, #0]
 8013838:	220f      	movs	r2, #15
 801383a:	6823      	ldr	r3, [r4, #0]
 801383c:	4010      	ands	r0, r2
 801383e:	011b      	lsls	r3, r3, #4
 8013840:	4318      	orrs	r0, r3
 8013842:	6020      	str	r0, [r4, #0]
 8013844:	e7bf      	b.n	80137c6 <__hexnan+0x86>
 8013846:	9b06      	ldr	r3, [sp, #24]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d0de      	beq.n	801380a <__hexnan+0xca>
 801384c:	2120      	movs	r1, #32
 801384e:	9a06      	ldr	r2, [sp, #24]
 8013850:	9b04      	ldr	r3, [sp, #16]
 8013852:	1a89      	subs	r1, r1, r2
 8013854:	2201      	movs	r2, #1
 8013856:	4252      	negs	r2, r2
 8013858:	40ca      	lsrs	r2, r1
 801385a:	3b04      	subs	r3, #4
 801385c:	6819      	ldr	r1, [r3, #0]
 801385e:	400a      	ands	r2, r1
 8013860:	601a      	str	r2, [r3, #0]
 8013862:	e7d2      	b.n	801380a <__hexnan+0xca>
 8013864:	3e04      	subs	r6, #4
 8013866:	e7d0      	b.n	801380a <__hexnan+0xca>
 8013868:	2004      	movs	r0, #4
 801386a:	b00b      	add	sp, #44	; 0x2c
 801386c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801386e <__localeconv_l>:
 801386e:	30f0      	adds	r0, #240	; 0xf0
 8013870:	4770      	bx	lr

08013872 <__malloc_lock>:
 8013872:	4770      	bx	lr

08013874 <__malloc_unlock>:
 8013874:	4770      	bx	lr

08013876 <_Balloc>:
 8013876:	b570      	push	{r4, r5, r6, lr}
 8013878:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801387a:	0004      	movs	r4, r0
 801387c:	000d      	movs	r5, r1
 801387e:	2e00      	cmp	r6, #0
 8013880:	d107      	bne.n	8013892 <_Balloc+0x1c>
 8013882:	2010      	movs	r0, #16
 8013884:	f7fe fbd2 	bl	801202c <malloc>
 8013888:	6260      	str	r0, [r4, #36]	; 0x24
 801388a:	6046      	str	r6, [r0, #4]
 801388c:	6086      	str	r6, [r0, #8]
 801388e:	6006      	str	r6, [r0, #0]
 8013890:	60c6      	str	r6, [r0, #12]
 8013892:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013894:	68f3      	ldr	r3, [r6, #12]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d013      	beq.n	80138c2 <_Balloc+0x4c>
 801389a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801389c:	00aa      	lsls	r2, r5, #2
 801389e:	68db      	ldr	r3, [r3, #12]
 80138a0:	189b      	adds	r3, r3, r2
 80138a2:	6818      	ldr	r0, [r3, #0]
 80138a4:	2800      	cmp	r0, #0
 80138a6:	d118      	bne.n	80138da <_Balloc+0x64>
 80138a8:	2101      	movs	r1, #1
 80138aa:	000e      	movs	r6, r1
 80138ac:	40ae      	lsls	r6, r5
 80138ae:	1d72      	adds	r2, r6, #5
 80138b0:	0092      	lsls	r2, r2, #2
 80138b2:	0020      	movs	r0, r4
 80138b4:	f000 fbd5 	bl	8014062 <_calloc_r>
 80138b8:	2800      	cmp	r0, #0
 80138ba:	d00c      	beq.n	80138d6 <_Balloc+0x60>
 80138bc:	6045      	str	r5, [r0, #4]
 80138be:	6086      	str	r6, [r0, #8]
 80138c0:	e00d      	b.n	80138de <_Balloc+0x68>
 80138c2:	2221      	movs	r2, #33	; 0x21
 80138c4:	2104      	movs	r1, #4
 80138c6:	0020      	movs	r0, r4
 80138c8:	f000 fbcb 	bl	8014062 <_calloc_r>
 80138cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138ce:	60f0      	str	r0, [r6, #12]
 80138d0:	68db      	ldr	r3, [r3, #12]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d1e1      	bne.n	801389a <_Balloc+0x24>
 80138d6:	2000      	movs	r0, #0
 80138d8:	bd70      	pop	{r4, r5, r6, pc}
 80138da:	6802      	ldr	r2, [r0, #0]
 80138dc:	601a      	str	r2, [r3, #0]
 80138de:	2300      	movs	r3, #0
 80138e0:	6103      	str	r3, [r0, #16]
 80138e2:	60c3      	str	r3, [r0, #12]
 80138e4:	e7f8      	b.n	80138d8 <_Balloc+0x62>

080138e6 <_Bfree>:
 80138e6:	b570      	push	{r4, r5, r6, lr}
 80138e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80138ea:	0006      	movs	r6, r0
 80138ec:	000d      	movs	r5, r1
 80138ee:	2c00      	cmp	r4, #0
 80138f0:	d107      	bne.n	8013902 <_Bfree+0x1c>
 80138f2:	2010      	movs	r0, #16
 80138f4:	f7fe fb9a 	bl	801202c <malloc>
 80138f8:	6270      	str	r0, [r6, #36]	; 0x24
 80138fa:	6044      	str	r4, [r0, #4]
 80138fc:	6084      	str	r4, [r0, #8]
 80138fe:	6004      	str	r4, [r0, #0]
 8013900:	60c4      	str	r4, [r0, #12]
 8013902:	2d00      	cmp	r5, #0
 8013904:	d007      	beq.n	8013916 <_Bfree+0x30>
 8013906:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013908:	686a      	ldr	r2, [r5, #4]
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	0092      	lsls	r2, r2, #2
 801390e:	189b      	adds	r3, r3, r2
 8013910:	681a      	ldr	r2, [r3, #0]
 8013912:	602a      	str	r2, [r5, #0]
 8013914:	601d      	str	r5, [r3, #0]
 8013916:	bd70      	pop	{r4, r5, r6, pc}

08013918 <__multadd>:
 8013918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801391a:	001e      	movs	r6, r3
 801391c:	2314      	movs	r3, #20
 801391e:	469c      	mov	ip, r3
 8013920:	0007      	movs	r7, r0
 8013922:	000c      	movs	r4, r1
 8013924:	2000      	movs	r0, #0
 8013926:	690d      	ldr	r5, [r1, #16]
 8013928:	448c      	add	ip, r1
 801392a:	4663      	mov	r3, ip
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	3001      	adds	r0, #1
 8013930:	b299      	uxth	r1, r3
 8013932:	4663      	mov	r3, ip
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	4351      	muls	r1, r2
 8013938:	0c1b      	lsrs	r3, r3, #16
 801393a:	4353      	muls	r3, r2
 801393c:	1989      	adds	r1, r1, r6
 801393e:	0c0e      	lsrs	r6, r1, #16
 8013940:	199b      	adds	r3, r3, r6
 8013942:	b289      	uxth	r1, r1
 8013944:	0c1e      	lsrs	r6, r3, #16
 8013946:	041b      	lsls	r3, r3, #16
 8013948:	185b      	adds	r3, r3, r1
 801394a:	4661      	mov	r1, ip
 801394c:	c108      	stmia	r1!, {r3}
 801394e:	468c      	mov	ip, r1
 8013950:	4285      	cmp	r5, r0
 8013952:	dcea      	bgt.n	801392a <__multadd+0x12>
 8013954:	2e00      	cmp	r6, #0
 8013956:	d01b      	beq.n	8013990 <__multadd+0x78>
 8013958:	68a3      	ldr	r3, [r4, #8]
 801395a:	42ab      	cmp	r3, r5
 801395c:	dc12      	bgt.n	8013984 <__multadd+0x6c>
 801395e:	6863      	ldr	r3, [r4, #4]
 8013960:	0038      	movs	r0, r7
 8013962:	1c59      	adds	r1, r3, #1
 8013964:	f7ff ff87 	bl	8013876 <_Balloc>
 8013968:	0021      	movs	r1, r4
 801396a:	6923      	ldr	r3, [r4, #16]
 801396c:	9001      	str	r0, [sp, #4]
 801396e:	1c9a      	adds	r2, r3, #2
 8013970:	0092      	lsls	r2, r2, #2
 8013972:	310c      	adds	r1, #12
 8013974:	300c      	adds	r0, #12
 8013976:	f7fe fb8e 	bl	8012096 <memcpy>
 801397a:	0021      	movs	r1, r4
 801397c:	0038      	movs	r0, r7
 801397e:	f7ff ffb2 	bl	80138e6 <_Bfree>
 8013982:	9c01      	ldr	r4, [sp, #4]
 8013984:	1d2b      	adds	r3, r5, #4
 8013986:	009b      	lsls	r3, r3, #2
 8013988:	18e3      	adds	r3, r4, r3
 801398a:	3501      	adds	r5, #1
 801398c:	605e      	str	r6, [r3, #4]
 801398e:	6125      	str	r5, [r4, #16]
 8013990:	0020      	movs	r0, r4
 8013992:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08013994 <__s2b>:
 8013994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013996:	0006      	movs	r6, r0
 8013998:	0018      	movs	r0, r3
 801399a:	000c      	movs	r4, r1
 801399c:	3008      	adds	r0, #8
 801399e:	2109      	movs	r1, #9
 80139a0:	9301      	str	r3, [sp, #4]
 80139a2:	0015      	movs	r5, r2
 80139a4:	f7ec fc54 	bl	8000250 <__divsi3>
 80139a8:	2301      	movs	r3, #1
 80139aa:	2100      	movs	r1, #0
 80139ac:	4283      	cmp	r3, r0
 80139ae:	db1f      	blt.n	80139f0 <__s2b+0x5c>
 80139b0:	0030      	movs	r0, r6
 80139b2:	f7ff ff60 	bl	8013876 <_Balloc>
 80139b6:	9b08      	ldr	r3, [sp, #32]
 80139b8:	6143      	str	r3, [r0, #20]
 80139ba:	2301      	movs	r3, #1
 80139bc:	6103      	str	r3, [r0, #16]
 80139be:	2d09      	cmp	r5, #9
 80139c0:	dd19      	ble.n	80139f6 <__s2b+0x62>
 80139c2:	0023      	movs	r3, r4
 80139c4:	3309      	adds	r3, #9
 80139c6:	001f      	movs	r7, r3
 80139c8:	9300      	str	r3, [sp, #0]
 80139ca:	1964      	adds	r4, r4, r5
 80139cc:	783b      	ldrb	r3, [r7, #0]
 80139ce:	0001      	movs	r1, r0
 80139d0:	3b30      	subs	r3, #48	; 0x30
 80139d2:	220a      	movs	r2, #10
 80139d4:	0030      	movs	r0, r6
 80139d6:	3701      	adds	r7, #1
 80139d8:	f7ff ff9e 	bl	8013918 <__multadd>
 80139dc:	42a7      	cmp	r7, r4
 80139de:	d1f5      	bne.n	80139cc <__s2b+0x38>
 80139e0:	9b00      	ldr	r3, [sp, #0]
 80139e2:	195c      	adds	r4, r3, r5
 80139e4:	3c08      	subs	r4, #8
 80139e6:	002f      	movs	r7, r5
 80139e8:	9b01      	ldr	r3, [sp, #4]
 80139ea:	429f      	cmp	r7, r3
 80139ec:	db06      	blt.n	80139fc <__s2b+0x68>
 80139ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80139f0:	005b      	lsls	r3, r3, #1
 80139f2:	3101      	adds	r1, #1
 80139f4:	e7da      	b.n	80139ac <__s2b+0x18>
 80139f6:	340a      	adds	r4, #10
 80139f8:	2509      	movs	r5, #9
 80139fa:	e7f4      	b.n	80139e6 <__s2b+0x52>
 80139fc:	1b63      	subs	r3, r4, r5
 80139fe:	5ddb      	ldrb	r3, [r3, r7]
 8013a00:	0001      	movs	r1, r0
 8013a02:	3b30      	subs	r3, #48	; 0x30
 8013a04:	220a      	movs	r2, #10
 8013a06:	0030      	movs	r0, r6
 8013a08:	f7ff ff86 	bl	8013918 <__multadd>
 8013a0c:	3701      	adds	r7, #1
 8013a0e:	e7eb      	b.n	80139e8 <__s2b+0x54>

08013a10 <__hi0bits>:
 8013a10:	0003      	movs	r3, r0
 8013a12:	0c02      	lsrs	r2, r0, #16
 8013a14:	2000      	movs	r0, #0
 8013a16:	4282      	cmp	r2, r0
 8013a18:	d101      	bne.n	8013a1e <__hi0bits+0xe>
 8013a1a:	041b      	lsls	r3, r3, #16
 8013a1c:	3010      	adds	r0, #16
 8013a1e:	0e1a      	lsrs	r2, r3, #24
 8013a20:	d101      	bne.n	8013a26 <__hi0bits+0x16>
 8013a22:	3008      	adds	r0, #8
 8013a24:	021b      	lsls	r3, r3, #8
 8013a26:	0f1a      	lsrs	r2, r3, #28
 8013a28:	d101      	bne.n	8013a2e <__hi0bits+0x1e>
 8013a2a:	3004      	adds	r0, #4
 8013a2c:	011b      	lsls	r3, r3, #4
 8013a2e:	0f9a      	lsrs	r2, r3, #30
 8013a30:	d101      	bne.n	8013a36 <__hi0bits+0x26>
 8013a32:	3002      	adds	r0, #2
 8013a34:	009b      	lsls	r3, r3, #2
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	db03      	blt.n	8013a42 <__hi0bits+0x32>
 8013a3a:	3001      	adds	r0, #1
 8013a3c:	005b      	lsls	r3, r3, #1
 8013a3e:	d400      	bmi.n	8013a42 <__hi0bits+0x32>
 8013a40:	2020      	movs	r0, #32
 8013a42:	4770      	bx	lr

08013a44 <__lo0bits>:
 8013a44:	2207      	movs	r2, #7
 8013a46:	6803      	ldr	r3, [r0, #0]
 8013a48:	b510      	push	{r4, lr}
 8013a4a:	0001      	movs	r1, r0
 8013a4c:	401a      	ands	r2, r3
 8013a4e:	d00d      	beq.n	8013a6c <__lo0bits+0x28>
 8013a50:	2401      	movs	r4, #1
 8013a52:	2000      	movs	r0, #0
 8013a54:	4223      	tst	r3, r4
 8013a56:	d105      	bne.n	8013a64 <__lo0bits+0x20>
 8013a58:	3002      	adds	r0, #2
 8013a5a:	4203      	tst	r3, r0
 8013a5c:	d003      	beq.n	8013a66 <__lo0bits+0x22>
 8013a5e:	40e3      	lsrs	r3, r4
 8013a60:	0020      	movs	r0, r4
 8013a62:	600b      	str	r3, [r1, #0]
 8013a64:	bd10      	pop	{r4, pc}
 8013a66:	089b      	lsrs	r3, r3, #2
 8013a68:	600b      	str	r3, [r1, #0]
 8013a6a:	e7fb      	b.n	8013a64 <__lo0bits+0x20>
 8013a6c:	b29c      	uxth	r4, r3
 8013a6e:	0010      	movs	r0, r2
 8013a70:	2c00      	cmp	r4, #0
 8013a72:	d101      	bne.n	8013a78 <__lo0bits+0x34>
 8013a74:	2010      	movs	r0, #16
 8013a76:	0c1b      	lsrs	r3, r3, #16
 8013a78:	b2da      	uxtb	r2, r3
 8013a7a:	2a00      	cmp	r2, #0
 8013a7c:	d101      	bne.n	8013a82 <__lo0bits+0x3e>
 8013a7e:	3008      	adds	r0, #8
 8013a80:	0a1b      	lsrs	r3, r3, #8
 8013a82:	071a      	lsls	r2, r3, #28
 8013a84:	d101      	bne.n	8013a8a <__lo0bits+0x46>
 8013a86:	3004      	adds	r0, #4
 8013a88:	091b      	lsrs	r3, r3, #4
 8013a8a:	079a      	lsls	r2, r3, #30
 8013a8c:	d101      	bne.n	8013a92 <__lo0bits+0x4e>
 8013a8e:	3002      	adds	r0, #2
 8013a90:	089b      	lsrs	r3, r3, #2
 8013a92:	07da      	lsls	r2, r3, #31
 8013a94:	d4e8      	bmi.n	8013a68 <__lo0bits+0x24>
 8013a96:	085b      	lsrs	r3, r3, #1
 8013a98:	d001      	beq.n	8013a9e <__lo0bits+0x5a>
 8013a9a:	3001      	adds	r0, #1
 8013a9c:	e7e4      	b.n	8013a68 <__lo0bits+0x24>
 8013a9e:	2020      	movs	r0, #32
 8013aa0:	e7e0      	b.n	8013a64 <__lo0bits+0x20>

08013aa2 <__i2b>:
 8013aa2:	b510      	push	{r4, lr}
 8013aa4:	000c      	movs	r4, r1
 8013aa6:	2101      	movs	r1, #1
 8013aa8:	f7ff fee5 	bl	8013876 <_Balloc>
 8013aac:	2301      	movs	r3, #1
 8013aae:	6144      	str	r4, [r0, #20]
 8013ab0:	6103      	str	r3, [r0, #16]
 8013ab2:	bd10      	pop	{r4, pc}

08013ab4 <__multiply>:
 8013ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ab6:	690b      	ldr	r3, [r1, #16]
 8013ab8:	0014      	movs	r4, r2
 8013aba:	6912      	ldr	r2, [r2, #16]
 8013abc:	b089      	sub	sp, #36	; 0x24
 8013abe:	000d      	movs	r5, r1
 8013ac0:	4293      	cmp	r3, r2
 8013ac2:	da01      	bge.n	8013ac8 <__multiply+0x14>
 8013ac4:	0025      	movs	r5, r4
 8013ac6:	000c      	movs	r4, r1
 8013ac8:	692f      	ldr	r7, [r5, #16]
 8013aca:	6926      	ldr	r6, [r4, #16]
 8013acc:	6869      	ldr	r1, [r5, #4]
 8013ace:	19bb      	adds	r3, r7, r6
 8013ad0:	9302      	str	r3, [sp, #8]
 8013ad2:	68ab      	ldr	r3, [r5, #8]
 8013ad4:	19ba      	adds	r2, r7, r6
 8013ad6:	4293      	cmp	r3, r2
 8013ad8:	da00      	bge.n	8013adc <__multiply+0x28>
 8013ada:	3101      	adds	r1, #1
 8013adc:	f7ff fecb 	bl	8013876 <_Balloc>
 8013ae0:	0002      	movs	r2, r0
 8013ae2:	19bb      	adds	r3, r7, r6
 8013ae4:	3214      	adds	r2, #20
 8013ae6:	009b      	lsls	r3, r3, #2
 8013ae8:	18d3      	adds	r3, r2, r3
 8013aea:	469c      	mov	ip, r3
 8013aec:	2100      	movs	r1, #0
 8013aee:	0013      	movs	r3, r2
 8013af0:	9004      	str	r0, [sp, #16]
 8013af2:	4563      	cmp	r3, ip
 8013af4:	d31d      	bcc.n	8013b32 <__multiply+0x7e>
 8013af6:	3514      	adds	r5, #20
 8013af8:	00bf      	lsls	r7, r7, #2
 8013afa:	19eb      	adds	r3, r5, r7
 8013afc:	3414      	adds	r4, #20
 8013afe:	00b6      	lsls	r6, r6, #2
 8013b00:	9305      	str	r3, [sp, #20]
 8013b02:	19a3      	adds	r3, r4, r6
 8013b04:	9503      	str	r5, [sp, #12]
 8013b06:	9401      	str	r4, [sp, #4]
 8013b08:	9307      	str	r3, [sp, #28]
 8013b0a:	9b07      	ldr	r3, [sp, #28]
 8013b0c:	9901      	ldr	r1, [sp, #4]
 8013b0e:	4299      	cmp	r1, r3
 8013b10:	d311      	bcc.n	8013b36 <__multiply+0x82>
 8013b12:	9b02      	ldr	r3, [sp, #8]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	dd06      	ble.n	8013b26 <__multiply+0x72>
 8013b18:	2304      	movs	r3, #4
 8013b1a:	425b      	negs	r3, r3
 8013b1c:	449c      	add	ip, r3
 8013b1e:	4663      	mov	r3, ip
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d051      	beq.n	8013bca <__multiply+0x116>
 8013b26:	9b04      	ldr	r3, [sp, #16]
 8013b28:	9a02      	ldr	r2, [sp, #8]
 8013b2a:	0018      	movs	r0, r3
 8013b2c:	611a      	str	r2, [r3, #16]
 8013b2e:	b009      	add	sp, #36	; 0x24
 8013b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b32:	c302      	stmia	r3!, {r1}
 8013b34:	e7dd      	b.n	8013af2 <__multiply+0x3e>
 8013b36:	9b01      	ldr	r3, [sp, #4]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	b298      	uxth	r0, r3
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	d01c      	beq.n	8013b7a <__multiply+0xc6>
 8013b40:	0015      	movs	r5, r2
 8013b42:	2600      	movs	r6, #0
 8013b44:	9f03      	ldr	r7, [sp, #12]
 8013b46:	cf02      	ldmia	r7!, {r1}
 8013b48:	682c      	ldr	r4, [r5, #0]
 8013b4a:	b28b      	uxth	r3, r1
 8013b4c:	4343      	muls	r3, r0
 8013b4e:	0c09      	lsrs	r1, r1, #16
 8013b50:	4341      	muls	r1, r0
 8013b52:	b2a4      	uxth	r4, r4
 8013b54:	191b      	adds	r3, r3, r4
 8013b56:	199b      	adds	r3, r3, r6
 8013b58:	000e      	movs	r6, r1
 8013b5a:	6829      	ldr	r1, [r5, #0]
 8013b5c:	9506      	str	r5, [sp, #24]
 8013b5e:	0c09      	lsrs	r1, r1, #16
 8013b60:	1871      	adds	r1, r6, r1
 8013b62:	0c1e      	lsrs	r6, r3, #16
 8013b64:	1989      	adds	r1, r1, r6
 8013b66:	0c0e      	lsrs	r6, r1, #16
 8013b68:	b29b      	uxth	r3, r3
 8013b6a:	0409      	lsls	r1, r1, #16
 8013b6c:	430b      	orrs	r3, r1
 8013b6e:	c508      	stmia	r5!, {r3}
 8013b70:	9b05      	ldr	r3, [sp, #20]
 8013b72:	42bb      	cmp	r3, r7
 8013b74:	d8e7      	bhi.n	8013b46 <__multiply+0x92>
 8013b76:	9b06      	ldr	r3, [sp, #24]
 8013b78:	605e      	str	r6, [r3, #4]
 8013b7a:	9b01      	ldr	r3, [sp, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	0c1d      	lsrs	r5, r3, #16
 8013b80:	d01e      	beq.n	8013bc0 <__multiply+0x10c>
 8013b82:	0010      	movs	r0, r2
 8013b84:	2700      	movs	r7, #0
 8013b86:	6813      	ldr	r3, [r2, #0]
 8013b88:	9e03      	ldr	r6, [sp, #12]
 8013b8a:	6831      	ldr	r1, [r6, #0]
 8013b8c:	6804      	ldr	r4, [r0, #0]
 8013b8e:	b289      	uxth	r1, r1
 8013b90:	4369      	muls	r1, r5
 8013b92:	0c24      	lsrs	r4, r4, #16
 8013b94:	1909      	adds	r1, r1, r4
 8013b96:	19c9      	adds	r1, r1, r7
 8013b98:	040f      	lsls	r7, r1, #16
 8013b9a:	b29b      	uxth	r3, r3
 8013b9c:	433b      	orrs	r3, r7
 8013b9e:	6003      	str	r3, [r0, #0]
 8013ba0:	ce80      	ldmia	r6!, {r7}
 8013ba2:	6843      	ldr	r3, [r0, #4]
 8013ba4:	0c3f      	lsrs	r7, r7, #16
 8013ba6:	436f      	muls	r7, r5
 8013ba8:	b29b      	uxth	r3, r3
 8013baa:	18fb      	adds	r3, r7, r3
 8013bac:	0c09      	lsrs	r1, r1, #16
 8013bae:	185b      	adds	r3, r3, r1
 8013bb0:	9905      	ldr	r1, [sp, #20]
 8013bb2:	9006      	str	r0, [sp, #24]
 8013bb4:	0c1f      	lsrs	r7, r3, #16
 8013bb6:	3004      	adds	r0, #4
 8013bb8:	42b1      	cmp	r1, r6
 8013bba:	d8e6      	bhi.n	8013b8a <__multiply+0xd6>
 8013bbc:	9906      	ldr	r1, [sp, #24]
 8013bbe:	604b      	str	r3, [r1, #4]
 8013bc0:	9b01      	ldr	r3, [sp, #4]
 8013bc2:	3204      	adds	r2, #4
 8013bc4:	3304      	adds	r3, #4
 8013bc6:	9301      	str	r3, [sp, #4]
 8013bc8:	e79f      	b.n	8013b0a <__multiply+0x56>
 8013bca:	9b02      	ldr	r3, [sp, #8]
 8013bcc:	3b01      	subs	r3, #1
 8013bce:	9302      	str	r3, [sp, #8]
 8013bd0:	e79f      	b.n	8013b12 <__multiply+0x5e>
	...

08013bd4 <__pow5mult>:
 8013bd4:	2303      	movs	r3, #3
 8013bd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013bd8:	4013      	ands	r3, r2
 8013bda:	0005      	movs	r5, r0
 8013bdc:	000e      	movs	r6, r1
 8013bde:	0014      	movs	r4, r2
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d008      	beq.n	8013bf6 <__pow5mult+0x22>
 8013be4:	4922      	ldr	r1, [pc, #136]	; (8013c70 <__pow5mult+0x9c>)
 8013be6:	3b01      	subs	r3, #1
 8013be8:	009a      	lsls	r2, r3, #2
 8013bea:	5852      	ldr	r2, [r2, r1]
 8013bec:	2300      	movs	r3, #0
 8013bee:	0031      	movs	r1, r6
 8013bf0:	f7ff fe92 	bl	8013918 <__multadd>
 8013bf4:	0006      	movs	r6, r0
 8013bf6:	10a3      	asrs	r3, r4, #2
 8013bf8:	9301      	str	r3, [sp, #4]
 8013bfa:	d036      	beq.n	8013c6a <__pow5mult+0x96>
 8013bfc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8013bfe:	2c00      	cmp	r4, #0
 8013c00:	d107      	bne.n	8013c12 <__pow5mult+0x3e>
 8013c02:	2010      	movs	r0, #16
 8013c04:	f7fe fa12 	bl	801202c <malloc>
 8013c08:	6268      	str	r0, [r5, #36]	; 0x24
 8013c0a:	6044      	str	r4, [r0, #4]
 8013c0c:	6084      	str	r4, [r0, #8]
 8013c0e:	6004      	str	r4, [r0, #0]
 8013c10:	60c4      	str	r4, [r0, #12]
 8013c12:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8013c14:	68bc      	ldr	r4, [r7, #8]
 8013c16:	2c00      	cmp	r4, #0
 8013c18:	d107      	bne.n	8013c2a <__pow5mult+0x56>
 8013c1a:	4916      	ldr	r1, [pc, #88]	; (8013c74 <__pow5mult+0xa0>)
 8013c1c:	0028      	movs	r0, r5
 8013c1e:	f7ff ff40 	bl	8013aa2 <__i2b>
 8013c22:	2300      	movs	r3, #0
 8013c24:	0004      	movs	r4, r0
 8013c26:	60b8      	str	r0, [r7, #8]
 8013c28:	6003      	str	r3, [r0, #0]
 8013c2a:	2201      	movs	r2, #1
 8013c2c:	9b01      	ldr	r3, [sp, #4]
 8013c2e:	4213      	tst	r3, r2
 8013c30:	d00a      	beq.n	8013c48 <__pow5mult+0x74>
 8013c32:	0031      	movs	r1, r6
 8013c34:	0022      	movs	r2, r4
 8013c36:	0028      	movs	r0, r5
 8013c38:	f7ff ff3c 	bl	8013ab4 <__multiply>
 8013c3c:	0007      	movs	r7, r0
 8013c3e:	0031      	movs	r1, r6
 8013c40:	0028      	movs	r0, r5
 8013c42:	f7ff fe50 	bl	80138e6 <_Bfree>
 8013c46:	003e      	movs	r6, r7
 8013c48:	9b01      	ldr	r3, [sp, #4]
 8013c4a:	105b      	asrs	r3, r3, #1
 8013c4c:	9301      	str	r3, [sp, #4]
 8013c4e:	d00c      	beq.n	8013c6a <__pow5mult+0x96>
 8013c50:	6820      	ldr	r0, [r4, #0]
 8013c52:	2800      	cmp	r0, #0
 8013c54:	d107      	bne.n	8013c66 <__pow5mult+0x92>
 8013c56:	0022      	movs	r2, r4
 8013c58:	0021      	movs	r1, r4
 8013c5a:	0028      	movs	r0, r5
 8013c5c:	f7ff ff2a 	bl	8013ab4 <__multiply>
 8013c60:	2300      	movs	r3, #0
 8013c62:	6020      	str	r0, [r4, #0]
 8013c64:	6003      	str	r3, [r0, #0]
 8013c66:	0004      	movs	r4, r0
 8013c68:	e7df      	b.n	8013c2a <__pow5mult+0x56>
 8013c6a:	0030      	movs	r0, r6
 8013c6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013c6e:	46c0      	nop			; (mov r8, r8)
 8013c70:	08019d38 	.word	0x08019d38
 8013c74:	00000271 	.word	0x00000271

08013c78 <__lshift>:
 8013c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c7a:	000d      	movs	r5, r1
 8013c7c:	0017      	movs	r7, r2
 8013c7e:	692b      	ldr	r3, [r5, #16]
 8013c80:	1154      	asrs	r4, r2, #5
 8013c82:	b085      	sub	sp, #20
 8013c84:	18e3      	adds	r3, r4, r3
 8013c86:	9301      	str	r3, [sp, #4]
 8013c88:	3301      	adds	r3, #1
 8013c8a:	9300      	str	r3, [sp, #0]
 8013c8c:	6849      	ldr	r1, [r1, #4]
 8013c8e:	68ab      	ldr	r3, [r5, #8]
 8013c90:	9002      	str	r0, [sp, #8]
 8013c92:	9a00      	ldr	r2, [sp, #0]
 8013c94:	4293      	cmp	r3, r2
 8013c96:	db35      	blt.n	8013d04 <__lshift+0x8c>
 8013c98:	9802      	ldr	r0, [sp, #8]
 8013c9a:	f7ff fdec 	bl	8013876 <_Balloc>
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	0002      	movs	r2, r0
 8013ca2:	0006      	movs	r6, r0
 8013ca4:	0019      	movs	r1, r3
 8013ca6:	3214      	adds	r2, #20
 8013ca8:	42a3      	cmp	r3, r4
 8013caa:	db2e      	blt.n	8013d0a <__lshift+0x92>
 8013cac:	43e3      	mvns	r3, r4
 8013cae:	17db      	asrs	r3, r3, #31
 8013cb0:	401c      	ands	r4, r3
 8013cb2:	002b      	movs	r3, r5
 8013cb4:	00a4      	lsls	r4, r4, #2
 8013cb6:	1914      	adds	r4, r2, r4
 8013cb8:	692a      	ldr	r2, [r5, #16]
 8013cba:	3314      	adds	r3, #20
 8013cbc:	0092      	lsls	r2, r2, #2
 8013cbe:	189a      	adds	r2, r3, r2
 8013cc0:	4694      	mov	ip, r2
 8013cc2:	221f      	movs	r2, #31
 8013cc4:	4017      	ands	r7, r2
 8013cc6:	d024      	beq.n	8013d12 <__lshift+0x9a>
 8013cc8:	3201      	adds	r2, #1
 8013cca:	1bd2      	subs	r2, r2, r7
 8013ccc:	9203      	str	r2, [sp, #12]
 8013cce:	2200      	movs	r2, #0
 8013cd0:	6819      	ldr	r1, [r3, #0]
 8013cd2:	0020      	movs	r0, r4
 8013cd4:	40b9      	lsls	r1, r7
 8013cd6:	430a      	orrs	r2, r1
 8013cd8:	c404      	stmia	r4!, {r2}
 8013cda:	cb04      	ldmia	r3!, {r2}
 8013cdc:	9903      	ldr	r1, [sp, #12]
 8013cde:	40ca      	lsrs	r2, r1
 8013ce0:	459c      	cmp	ip, r3
 8013ce2:	d8f5      	bhi.n	8013cd0 <__lshift+0x58>
 8013ce4:	6042      	str	r2, [r0, #4]
 8013ce6:	2a00      	cmp	r2, #0
 8013ce8:	d002      	beq.n	8013cf0 <__lshift+0x78>
 8013cea:	9b01      	ldr	r3, [sp, #4]
 8013cec:	3302      	adds	r3, #2
 8013cee:	9300      	str	r3, [sp, #0]
 8013cf0:	9b00      	ldr	r3, [sp, #0]
 8013cf2:	9802      	ldr	r0, [sp, #8]
 8013cf4:	3b01      	subs	r3, #1
 8013cf6:	6133      	str	r3, [r6, #16]
 8013cf8:	0029      	movs	r1, r5
 8013cfa:	f7ff fdf4 	bl	80138e6 <_Bfree>
 8013cfe:	0030      	movs	r0, r6
 8013d00:	b005      	add	sp, #20
 8013d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d04:	3101      	adds	r1, #1
 8013d06:	005b      	lsls	r3, r3, #1
 8013d08:	e7c3      	b.n	8013c92 <__lshift+0x1a>
 8013d0a:	0098      	lsls	r0, r3, #2
 8013d0c:	5011      	str	r1, [r2, r0]
 8013d0e:	3301      	adds	r3, #1
 8013d10:	e7ca      	b.n	8013ca8 <__lshift+0x30>
 8013d12:	cb04      	ldmia	r3!, {r2}
 8013d14:	c404      	stmia	r4!, {r2}
 8013d16:	459c      	cmp	ip, r3
 8013d18:	d8fb      	bhi.n	8013d12 <__lshift+0x9a>
 8013d1a:	e7e9      	b.n	8013cf0 <__lshift+0x78>

08013d1c <__mcmp>:
 8013d1c:	690a      	ldr	r2, [r1, #16]
 8013d1e:	6903      	ldr	r3, [r0, #16]
 8013d20:	b530      	push	{r4, r5, lr}
 8013d22:	1a9b      	subs	r3, r3, r2
 8013d24:	d10d      	bne.n	8013d42 <__mcmp+0x26>
 8013d26:	0092      	lsls	r2, r2, #2
 8013d28:	3014      	adds	r0, #20
 8013d2a:	3114      	adds	r1, #20
 8013d2c:	1884      	adds	r4, r0, r2
 8013d2e:	1889      	adds	r1, r1, r2
 8013d30:	3c04      	subs	r4, #4
 8013d32:	3904      	subs	r1, #4
 8013d34:	6825      	ldr	r5, [r4, #0]
 8013d36:	680a      	ldr	r2, [r1, #0]
 8013d38:	4295      	cmp	r5, r2
 8013d3a:	d004      	beq.n	8013d46 <__mcmp+0x2a>
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	4295      	cmp	r5, r2
 8013d40:	d304      	bcc.n	8013d4c <__mcmp+0x30>
 8013d42:	0018      	movs	r0, r3
 8013d44:	bd30      	pop	{r4, r5, pc}
 8013d46:	42a0      	cmp	r0, r4
 8013d48:	d3f2      	bcc.n	8013d30 <__mcmp+0x14>
 8013d4a:	e7fa      	b.n	8013d42 <__mcmp+0x26>
 8013d4c:	425b      	negs	r3, r3
 8013d4e:	e7f8      	b.n	8013d42 <__mcmp+0x26>

08013d50 <__mdiff>:
 8013d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d52:	000d      	movs	r5, r1
 8013d54:	b085      	sub	sp, #20
 8013d56:	0007      	movs	r7, r0
 8013d58:	0011      	movs	r1, r2
 8013d5a:	0028      	movs	r0, r5
 8013d5c:	0014      	movs	r4, r2
 8013d5e:	f7ff ffdd 	bl	8013d1c <__mcmp>
 8013d62:	1e06      	subs	r6, r0, #0
 8013d64:	d108      	bne.n	8013d78 <__mdiff+0x28>
 8013d66:	0001      	movs	r1, r0
 8013d68:	0038      	movs	r0, r7
 8013d6a:	f7ff fd84 	bl	8013876 <_Balloc>
 8013d6e:	2301      	movs	r3, #1
 8013d70:	6146      	str	r6, [r0, #20]
 8013d72:	6103      	str	r3, [r0, #16]
 8013d74:	b005      	add	sp, #20
 8013d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d78:	2301      	movs	r3, #1
 8013d7a:	9301      	str	r3, [sp, #4]
 8013d7c:	2800      	cmp	r0, #0
 8013d7e:	db04      	blt.n	8013d8a <__mdiff+0x3a>
 8013d80:	0023      	movs	r3, r4
 8013d82:	002c      	movs	r4, r5
 8013d84:	001d      	movs	r5, r3
 8013d86:	2300      	movs	r3, #0
 8013d88:	9301      	str	r3, [sp, #4]
 8013d8a:	6861      	ldr	r1, [r4, #4]
 8013d8c:	0038      	movs	r0, r7
 8013d8e:	f7ff fd72 	bl	8013876 <_Balloc>
 8013d92:	002f      	movs	r7, r5
 8013d94:	2200      	movs	r2, #0
 8013d96:	9b01      	ldr	r3, [sp, #4]
 8013d98:	6926      	ldr	r6, [r4, #16]
 8013d9a:	60c3      	str	r3, [r0, #12]
 8013d9c:	3414      	adds	r4, #20
 8013d9e:	00b3      	lsls	r3, r6, #2
 8013da0:	18e3      	adds	r3, r4, r3
 8013da2:	9302      	str	r3, [sp, #8]
 8013da4:	692b      	ldr	r3, [r5, #16]
 8013da6:	3714      	adds	r7, #20
 8013da8:	009b      	lsls	r3, r3, #2
 8013daa:	18fb      	adds	r3, r7, r3
 8013dac:	9303      	str	r3, [sp, #12]
 8013dae:	0003      	movs	r3, r0
 8013db0:	4694      	mov	ip, r2
 8013db2:	3314      	adds	r3, #20
 8013db4:	cc20      	ldmia	r4!, {r5}
 8013db6:	cf04      	ldmia	r7!, {r2}
 8013db8:	9201      	str	r2, [sp, #4]
 8013dba:	b2aa      	uxth	r2, r5
 8013dbc:	4494      	add	ip, r2
 8013dbe:	466a      	mov	r2, sp
 8013dc0:	4661      	mov	r1, ip
 8013dc2:	8892      	ldrh	r2, [r2, #4]
 8013dc4:	0c2d      	lsrs	r5, r5, #16
 8013dc6:	1a8a      	subs	r2, r1, r2
 8013dc8:	9901      	ldr	r1, [sp, #4]
 8013dca:	0c09      	lsrs	r1, r1, #16
 8013dcc:	1a69      	subs	r1, r5, r1
 8013dce:	1415      	asrs	r5, r2, #16
 8013dd0:	1949      	adds	r1, r1, r5
 8013dd2:	140d      	asrs	r5, r1, #16
 8013dd4:	b292      	uxth	r2, r2
 8013dd6:	0409      	lsls	r1, r1, #16
 8013dd8:	430a      	orrs	r2, r1
 8013dda:	601a      	str	r2, [r3, #0]
 8013ddc:	9a03      	ldr	r2, [sp, #12]
 8013dde:	46ac      	mov	ip, r5
 8013de0:	3304      	adds	r3, #4
 8013de2:	42ba      	cmp	r2, r7
 8013de4:	d8e6      	bhi.n	8013db4 <__mdiff+0x64>
 8013de6:	9902      	ldr	r1, [sp, #8]
 8013de8:	001a      	movs	r2, r3
 8013dea:	428c      	cmp	r4, r1
 8013dec:	d305      	bcc.n	8013dfa <__mdiff+0xaa>
 8013dee:	3a04      	subs	r2, #4
 8013df0:	6813      	ldr	r3, [r2, #0]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d00e      	beq.n	8013e14 <__mdiff+0xc4>
 8013df6:	6106      	str	r6, [r0, #16]
 8013df8:	e7bc      	b.n	8013d74 <__mdiff+0x24>
 8013dfa:	cc04      	ldmia	r4!, {r2}
 8013dfc:	b291      	uxth	r1, r2
 8013dfe:	4461      	add	r1, ip
 8013e00:	140d      	asrs	r5, r1, #16
 8013e02:	0c12      	lsrs	r2, r2, #16
 8013e04:	1952      	adds	r2, r2, r5
 8013e06:	1415      	asrs	r5, r2, #16
 8013e08:	b289      	uxth	r1, r1
 8013e0a:	0412      	lsls	r2, r2, #16
 8013e0c:	430a      	orrs	r2, r1
 8013e0e:	46ac      	mov	ip, r5
 8013e10:	c304      	stmia	r3!, {r2}
 8013e12:	e7e8      	b.n	8013de6 <__mdiff+0x96>
 8013e14:	3e01      	subs	r6, #1
 8013e16:	e7ea      	b.n	8013dee <__mdiff+0x9e>

08013e18 <__ulp>:
 8013e18:	000b      	movs	r3, r1
 8013e1a:	4910      	ldr	r1, [pc, #64]	; (8013e5c <__ulp+0x44>)
 8013e1c:	b510      	push	{r4, lr}
 8013e1e:	4019      	ands	r1, r3
 8013e20:	4b0f      	ldr	r3, [pc, #60]	; (8013e60 <__ulp+0x48>)
 8013e22:	18c9      	adds	r1, r1, r3
 8013e24:	2900      	cmp	r1, #0
 8013e26:	dd04      	ble.n	8013e32 <__ulp+0x1a>
 8013e28:	2200      	movs	r2, #0
 8013e2a:	000b      	movs	r3, r1
 8013e2c:	0010      	movs	r0, r2
 8013e2e:	0019      	movs	r1, r3
 8013e30:	bd10      	pop	{r4, pc}
 8013e32:	4249      	negs	r1, r1
 8013e34:	1509      	asrs	r1, r1, #20
 8013e36:	2200      	movs	r2, #0
 8013e38:	2300      	movs	r3, #0
 8013e3a:	2913      	cmp	r1, #19
 8013e3c:	dc04      	bgt.n	8013e48 <__ulp+0x30>
 8013e3e:	2080      	movs	r0, #128	; 0x80
 8013e40:	0300      	lsls	r0, r0, #12
 8013e42:	4108      	asrs	r0, r1
 8013e44:	0003      	movs	r3, r0
 8013e46:	e7f1      	b.n	8013e2c <__ulp+0x14>
 8013e48:	3914      	subs	r1, #20
 8013e4a:	2001      	movs	r0, #1
 8013e4c:	291e      	cmp	r1, #30
 8013e4e:	dc02      	bgt.n	8013e56 <__ulp+0x3e>
 8013e50:	241f      	movs	r4, #31
 8013e52:	1a61      	subs	r1, r4, r1
 8013e54:	4088      	lsls	r0, r1
 8013e56:	0002      	movs	r2, r0
 8013e58:	e7e8      	b.n	8013e2c <__ulp+0x14>
 8013e5a:	46c0      	nop			; (mov r8, r8)
 8013e5c:	7ff00000 	.word	0x7ff00000
 8013e60:	fcc00000 	.word	0xfcc00000

08013e64 <__b2d>:
 8013e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e66:	0006      	movs	r6, r0
 8013e68:	6903      	ldr	r3, [r0, #16]
 8013e6a:	3614      	adds	r6, #20
 8013e6c:	009b      	lsls	r3, r3, #2
 8013e6e:	18f3      	adds	r3, r6, r3
 8013e70:	1f1d      	subs	r5, r3, #4
 8013e72:	682c      	ldr	r4, [r5, #0]
 8013e74:	000f      	movs	r7, r1
 8013e76:	0020      	movs	r0, r4
 8013e78:	9301      	str	r3, [sp, #4]
 8013e7a:	f7ff fdc9 	bl	8013a10 <__hi0bits>
 8013e7e:	2320      	movs	r3, #32
 8013e80:	1a1b      	subs	r3, r3, r0
 8013e82:	603b      	str	r3, [r7, #0]
 8013e84:	491c      	ldr	r1, [pc, #112]	; (8013ef8 <__b2d+0x94>)
 8013e86:	280a      	cmp	r0, #10
 8013e88:	dc16      	bgt.n	8013eb8 <__b2d+0x54>
 8013e8a:	230b      	movs	r3, #11
 8013e8c:	0027      	movs	r7, r4
 8013e8e:	1a1b      	subs	r3, r3, r0
 8013e90:	40df      	lsrs	r7, r3
 8013e92:	4339      	orrs	r1, r7
 8013e94:	469c      	mov	ip, r3
 8013e96:	000b      	movs	r3, r1
 8013e98:	2100      	movs	r1, #0
 8013e9a:	42ae      	cmp	r6, r5
 8013e9c:	d202      	bcs.n	8013ea4 <__b2d+0x40>
 8013e9e:	9901      	ldr	r1, [sp, #4]
 8013ea0:	3908      	subs	r1, #8
 8013ea2:	6809      	ldr	r1, [r1, #0]
 8013ea4:	3015      	adds	r0, #21
 8013ea6:	4084      	lsls	r4, r0
 8013ea8:	4660      	mov	r0, ip
 8013eaa:	40c1      	lsrs	r1, r0
 8013eac:	430c      	orrs	r4, r1
 8013eae:	0022      	movs	r2, r4
 8013eb0:	0010      	movs	r0, r2
 8013eb2:	0019      	movs	r1, r3
 8013eb4:	b003      	add	sp, #12
 8013eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eb8:	2700      	movs	r7, #0
 8013eba:	42ae      	cmp	r6, r5
 8013ebc:	d202      	bcs.n	8013ec4 <__b2d+0x60>
 8013ebe:	9d01      	ldr	r5, [sp, #4]
 8013ec0:	3d08      	subs	r5, #8
 8013ec2:	682f      	ldr	r7, [r5, #0]
 8013ec4:	380b      	subs	r0, #11
 8013ec6:	4684      	mov	ip, r0
 8013ec8:	1e03      	subs	r3, r0, #0
 8013eca:	d012      	beq.n	8013ef2 <__b2d+0x8e>
 8013ecc:	409c      	lsls	r4, r3
 8013ece:	2020      	movs	r0, #32
 8013ed0:	4321      	orrs	r1, r4
 8013ed2:	003c      	movs	r4, r7
 8013ed4:	1ac0      	subs	r0, r0, r3
 8013ed6:	40c4      	lsrs	r4, r0
 8013ed8:	4321      	orrs	r1, r4
 8013eda:	000b      	movs	r3, r1
 8013edc:	2100      	movs	r1, #0
 8013ede:	42b5      	cmp	r5, r6
 8013ee0:	d901      	bls.n	8013ee6 <__b2d+0x82>
 8013ee2:	3d04      	subs	r5, #4
 8013ee4:	6829      	ldr	r1, [r5, #0]
 8013ee6:	4664      	mov	r4, ip
 8013ee8:	40c1      	lsrs	r1, r0
 8013eea:	40a7      	lsls	r7, r4
 8013eec:	430f      	orrs	r7, r1
 8013eee:	003a      	movs	r2, r7
 8013ef0:	e7de      	b.n	8013eb0 <__b2d+0x4c>
 8013ef2:	4321      	orrs	r1, r4
 8013ef4:	000b      	movs	r3, r1
 8013ef6:	e7fa      	b.n	8013eee <__b2d+0x8a>
 8013ef8:	3ff00000 	.word	0x3ff00000

08013efc <__d2b>:
 8013efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013efe:	001d      	movs	r5, r3
 8013f00:	2101      	movs	r1, #1
 8013f02:	0014      	movs	r4, r2
 8013f04:	9f08      	ldr	r7, [sp, #32]
 8013f06:	f7ff fcb6 	bl	8013876 <_Balloc>
 8013f0a:	032b      	lsls	r3, r5, #12
 8013f0c:	006d      	lsls	r5, r5, #1
 8013f0e:	0006      	movs	r6, r0
 8013f10:	0b1b      	lsrs	r3, r3, #12
 8013f12:	0d6d      	lsrs	r5, r5, #21
 8013f14:	d124      	bne.n	8013f60 <__d2b+0x64>
 8013f16:	9301      	str	r3, [sp, #4]
 8013f18:	2c00      	cmp	r4, #0
 8013f1a:	d027      	beq.n	8013f6c <__d2b+0x70>
 8013f1c:	4668      	mov	r0, sp
 8013f1e:	9400      	str	r4, [sp, #0]
 8013f20:	f7ff fd90 	bl	8013a44 <__lo0bits>
 8013f24:	9c00      	ldr	r4, [sp, #0]
 8013f26:	2800      	cmp	r0, #0
 8013f28:	d01e      	beq.n	8013f68 <__d2b+0x6c>
 8013f2a:	9b01      	ldr	r3, [sp, #4]
 8013f2c:	2120      	movs	r1, #32
 8013f2e:	001a      	movs	r2, r3
 8013f30:	1a09      	subs	r1, r1, r0
 8013f32:	408a      	lsls	r2, r1
 8013f34:	40c3      	lsrs	r3, r0
 8013f36:	4322      	orrs	r2, r4
 8013f38:	6172      	str	r2, [r6, #20]
 8013f3a:	9301      	str	r3, [sp, #4]
 8013f3c:	9c01      	ldr	r4, [sp, #4]
 8013f3e:	61b4      	str	r4, [r6, #24]
 8013f40:	1e63      	subs	r3, r4, #1
 8013f42:	419c      	sbcs	r4, r3
 8013f44:	3401      	adds	r4, #1
 8013f46:	6134      	str	r4, [r6, #16]
 8013f48:	2d00      	cmp	r5, #0
 8013f4a:	d018      	beq.n	8013f7e <__d2b+0x82>
 8013f4c:	4b12      	ldr	r3, [pc, #72]	; (8013f98 <__d2b+0x9c>)
 8013f4e:	18ed      	adds	r5, r5, r3
 8013f50:	2335      	movs	r3, #53	; 0x35
 8013f52:	182d      	adds	r5, r5, r0
 8013f54:	603d      	str	r5, [r7, #0]
 8013f56:	1a18      	subs	r0, r3, r0
 8013f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f5a:	6018      	str	r0, [r3, #0]
 8013f5c:	0030      	movs	r0, r6
 8013f5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013f60:	2280      	movs	r2, #128	; 0x80
 8013f62:	0352      	lsls	r2, r2, #13
 8013f64:	4313      	orrs	r3, r2
 8013f66:	e7d6      	b.n	8013f16 <__d2b+0x1a>
 8013f68:	6174      	str	r4, [r6, #20]
 8013f6a:	e7e7      	b.n	8013f3c <__d2b+0x40>
 8013f6c:	a801      	add	r0, sp, #4
 8013f6e:	f7ff fd69 	bl	8013a44 <__lo0bits>
 8013f72:	2401      	movs	r4, #1
 8013f74:	9b01      	ldr	r3, [sp, #4]
 8013f76:	6134      	str	r4, [r6, #16]
 8013f78:	6173      	str	r3, [r6, #20]
 8013f7a:	3020      	adds	r0, #32
 8013f7c:	e7e4      	b.n	8013f48 <__d2b+0x4c>
 8013f7e:	4b07      	ldr	r3, [pc, #28]	; (8013f9c <__d2b+0xa0>)
 8013f80:	18c0      	adds	r0, r0, r3
 8013f82:	4b07      	ldr	r3, [pc, #28]	; (8013fa0 <__d2b+0xa4>)
 8013f84:	6038      	str	r0, [r7, #0]
 8013f86:	18e3      	adds	r3, r4, r3
 8013f88:	009b      	lsls	r3, r3, #2
 8013f8a:	18f3      	adds	r3, r6, r3
 8013f8c:	6958      	ldr	r0, [r3, #20]
 8013f8e:	f7ff fd3f 	bl	8013a10 <__hi0bits>
 8013f92:	0164      	lsls	r4, r4, #5
 8013f94:	1a20      	subs	r0, r4, r0
 8013f96:	e7df      	b.n	8013f58 <__d2b+0x5c>
 8013f98:	fffffbcd 	.word	0xfffffbcd
 8013f9c:	fffffbce 	.word	0xfffffbce
 8013fa0:	3fffffff 	.word	0x3fffffff

08013fa4 <__ratio>:
 8013fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fa6:	b085      	sub	sp, #20
 8013fa8:	000f      	movs	r7, r1
 8013faa:	a902      	add	r1, sp, #8
 8013fac:	0006      	movs	r6, r0
 8013fae:	f7ff ff59 	bl	8013e64 <__b2d>
 8013fb2:	0004      	movs	r4, r0
 8013fb4:	000d      	movs	r5, r1
 8013fb6:	0038      	movs	r0, r7
 8013fb8:	a903      	add	r1, sp, #12
 8013fba:	9400      	str	r4, [sp, #0]
 8013fbc:	9501      	str	r5, [sp, #4]
 8013fbe:	f7ff ff51 	bl	8013e64 <__b2d>
 8013fc2:	6936      	ldr	r6, [r6, #16]
 8013fc4:	693f      	ldr	r7, [r7, #16]
 8013fc6:	0002      	movs	r2, r0
 8013fc8:	1bf7      	subs	r7, r6, r7
 8013fca:	017e      	lsls	r6, r7, #5
 8013fcc:	46b4      	mov	ip, r6
 8013fce:	9f03      	ldr	r7, [sp, #12]
 8013fd0:	9e02      	ldr	r6, [sp, #8]
 8013fd2:	000b      	movs	r3, r1
 8013fd4:	1bf6      	subs	r6, r6, r7
 8013fd6:	4466      	add	r6, ip
 8013fd8:	0537      	lsls	r7, r6, #20
 8013fda:	2e00      	cmp	r6, #0
 8013fdc:	dd07      	ble.n	8013fee <__ratio+0x4a>
 8013fde:	1979      	adds	r1, r7, r5
 8013fe0:	9101      	str	r1, [sp, #4]
 8013fe2:	9800      	ldr	r0, [sp, #0]
 8013fe4:	9901      	ldr	r1, [sp, #4]
 8013fe6:	f7ed fb41 	bl	800166c <__aeabi_ddiv>
 8013fea:	b005      	add	sp, #20
 8013fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fee:	1bcb      	subs	r3, r1, r7
 8013ff0:	e7f7      	b.n	8013fe2 <__ratio+0x3e>

08013ff2 <__copybits>:
 8013ff2:	0013      	movs	r3, r2
 8013ff4:	3901      	subs	r1, #1
 8013ff6:	b510      	push	{r4, lr}
 8013ff8:	1149      	asrs	r1, r1, #5
 8013ffa:	6912      	ldr	r2, [r2, #16]
 8013ffc:	3101      	adds	r1, #1
 8013ffe:	0089      	lsls	r1, r1, #2
 8014000:	3314      	adds	r3, #20
 8014002:	0092      	lsls	r2, r2, #2
 8014004:	1841      	adds	r1, r0, r1
 8014006:	189a      	adds	r2, r3, r2
 8014008:	429a      	cmp	r2, r3
 801400a:	d803      	bhi.n	8014014 <__copybits+0x22>
 801400c:	2300      	movs	r3, #0
 801400e:	4281      	cmp	r1, r0
 8014010:	d803      	bhi.n	801401a <__copybits+0x28>
 8014012:	bd10      	pop	{r4, pc}
 8014014:	cb10      	ldmia	r3!, {r4}
 8014016:	c010      	stmia	r0!, {r4}
 8014018:	e7f6      	b.n	8014008 <__copybits+0x16>
 801401a:	c008      	stmia	r0!, {r3}
 801401c:	e7f7      	b.n	801400e <__copybits+0x1c>

0801401e <__any_on>:
 801401e:	0002      	movs	r2, r0
 8014020:	6900      	ldr	r0, [r0, #16]
 8014022:	b510      	push	{r4, lr}
 8014024:	3214      	adds	r2, #20
 8014026:	114b      	asrs	r3, r1, #5
 8014028:	4298      	cmp	r0, r3
 801402a:	db12      	blt.n	8014052 <__any_on+0x34>
 801402c:	dd0b      	ble.n	8014046 <__any_on+0x28>
 801402e:	201f      	movs	r0, #31
 8014030:	4001      	ands	r1, r0
 8014032:	d008      	beq.n	8014046 <__any_on+0x28>
 8014034:	0098      	lsls	r0, r3, #2
 8014036:	5884      	ldr	r4, [r0, r2]
 8014038:	0020      	movs	r0, r4
 801403a:	40c8      	lsrs	r0, r1
 801403c:	4088      	lsls	r0, r1
 801403e:	0001      	movs	r1, r0
 8014040:	2001      	movs	r0, #1
 8014042:	428c      	cmp	r4, r1
 8014044:	d104      	bne.n	8014050 <__any_on+0x32>
 8014046:	009b      	lsls	r3, r3, #2
 8014048:	18d3      	adds	r3, r2, r3
 801404a:	4293      	cmp	r3, r2
 801404c:	d803      	bhi.n	8014056 <__any_on+0x38>
 801404e:	2000      	movs	r0, #0
 8014050:	bd10      	pop	{r4, pc}
 8014052:	0003      	movs	r3, r0
 8014054:	e7f7      	b.n	8014046 <__any_on+0x28>
 8014056:	3b04      	subs	r3, #4
 8014058:	6819      	ldr	r1, [r3, #0]
 801405a:	2900      	cmp	r1, #0
 801405c:	d0f5      	beq.n	801404a <__any_on+0x2c>
 801405e:	2001      	movs	r0, #1
 8014060:	e7f6      	b.n	8014050 <__any_on+0x32>

08014062 <_calloc_r>:
 8014062:	434a      	muls	r2, r1
 8014064:	b570      	push	{r4, r5, r6, lr}
 8014066:	0011      	movs	r1, r2
 8014068:	0014      	movs	r4, r2
 801406a:	f7fe f86f 	bl	801214c <_malloc_r>
 801406e:	1e05      	subs	r5, r0, #0
 8014070:	d003      	beq.n	801407a <_calloc_r+0x18>
 8014072:	0022      	movs	r2, r4
 8014074:	2100      	movs	r1, #0
 8014076:	f7fe f817 	bl	80120a8 <memset>
 801407a:	0028      	movs	r0, r5
 801407c:	bd70      	pop	{r4, r5, r6, pc}

0801407e <_realloc_r>:
 801407e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014080:	0007      	movs	r7, r0
 8014082:	000d      	movs	r5, r1
 8014084:	0016      	movs	r6, r2
 8014086:	2900      	cmp	r1, #0
 8014088:	d105      	bne.n	8014096 <_realloc_r+0x18>
 801408a:	0011      	movs	r1, r2
 801408c:	f7fe f85e 	bl	801214c <_malloc_r>
 8014090:	0004      	movs	r4, r0
 8014092:	0020      	movs	r0, r4
 8014094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014096:	2a00      	cmp	r2, #0
 8014098:	d103      	bne.n	80140a2 <_realloc_r+0x24>
 801409a:	f7fe f80d 	bl	80120b8 <_free_r>
 801409e:	0034      	movs	r4, r6
 80140a0:	e7f7      	b.n	8014092 <_realloc_r+0x14>
 80140a2:	f000 fb07 	bl	80146b4 <_malloc_usable_size_r>
 80140a6:	002c      	movs	r4, r5
 80140a8:	42b0      	cmp	r0, r6
 80140aa:	d2f2      	bcs.n	8014092 <_realloc_r+0x14>
 80140ac:	0031      	movs	r1, r6
 80140ae:	0038      	movs	r0, r7
 80140b0:	f7fe f84c 	bl	801214c <_malloc_r>
 80140b4:	1e04      	subs	r4, r0, #0
 80140b6:	d0ec      	beq.n	8014092 <_realloc_r+0x14>
 80140b8:	0029      	movs	r1, r5
 80140ba:	0032      	movs	r2, r6
 80140bc:	f7fd ffeb 	bl	8012096 <memcpy>
 80140c0:	0029      	movs	r1, r5
 80140c2:	0038      	movs	r0, r7
 80140c4:	f7fd fff8 	bl	80120b8 <_free_r>
 80140c8:	e7e3      	b.n	8014092 <_realloc_r+0x14>
	...

080140cc <__ssputs_r>:
 80140cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140ce:	688e      	ldr	r6, [r1, #8]
 80140d0:	b085      	sub	sp, #20
 80140d2:	0007      	movs	r7, r0
 80140d4:	000c      	movs	r4, r1
 80140d6:	9203      	str	r2, [sp, #12]
 80140d8:	9301      	str	r3, [sp, #4]
 80140da:	429e      	cmp	r6, r3
 80140dc:	d83c      	bhi.n	8014158 <__ssputs_r+0x8c>
 80140de:	2390      	movs	r3, #144	; 0x90
 80140e0:	898a      	ldrh	r2, [r1, #12]
 80140e2:	00db      	lsls	r3, r3, #3
 80140e4:	421a      	tst	r2, r3
 80140e6:	d034      	beq.n	8014152 <__ssputs_r+0x86>
 80140e8:	2503      	movs	r5, #3
 80140ea:	6909      	ldr	r1, [r1, #16]
 80140ec:	6823      	ldr	r3, [r4, #0]
 80140ee:	1a5b      	subs	r3, r3, r1
 80140f0:	9302      	str	r3, [sp, #8]
 80140f2:	6963      	ldr	r3, [r4, #20]
 80140f4:	9802      	ldr	r0, [sp, #8]
 80140f6:	435d      	muls	r5, r3
 80140f8:	0feb      	lsrs	r3, r5, #31
 80140fa:	195d      	adds	r5, r3, r5
 80140fc:	9b01      	ldr	r3, [sp, #4]
 80140fe:	106d      	asrs	r5, r5, #1
 8014100:	3301      	adds	r3, #1
 8014102:	181b      	adds	r3, r3, r0
 8014104:	42ab      	cmp	r3, r5
 8014106:	d900      	bls.n	801410a <__ssputs_r+0x3e>
 8014108:	001d      	movs	r5, r3
 801410a:	0553      	lsls	r3, r2, #21
 801410c:	d532      	bpl.n	8014174 <__ssputs_r+0xa8>
 801410e:	0029      	movs	r1, r5
 8014110:	0038      	movs	r0, r7
 8014112:	f7fe f81b 	bl	801214c <_malloc_r>
 8014116:	1e06      	subs	r6, r0, #0
 8014118:	d109      	bne.n	801412e <__ssputs_r+0x62>
 801411a:	230c      	movs	r3, #12
 801411c:	603b      	str	r3, [r7, #0]
 801411e:	2340      	movs	r3, #64	; 0x40
 8014120:	2001      	movs	r0, #1
 8014122:	89a2      	ldrh	r2, [r4, #12]
 8014124:	4240      	negs	r0, r0
 8014126:	4313      	orrs	r3, r2
 8014128:	81a3      	strh	r3, [r4, #12]
 801412a:	b005      	add	sp, #20
 801412c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801412e:	9a02      	ldr	r2, [sp, #8]
 8014130:	6921      	ldr	r1, [r4, #16]
 8014132:	f7fd ffb0 	bl	8012096 <memcpy>
 8014136:	89a3      	ldrh	r3, [r4, #12]
 8014138:	4a14      	ldr	r2, [pc, #80]	; (801418c <__ssputs_r+0xc0>)
 801413a:	401a      	ands	r2, r3
 801413c:	2380      	movs	r3, #128	; 0x80
 801413e:	4313      	orrs	r3, r2
 8014140:	81a3      	strh	r3, [r4, #12]
 8014142:	9b02      	ldr	r3, [sp, #8]
 8014144:	6126      	str	r6, [r4, #16]
 8014146:	18f6      	adds	r6, r6, r3
 8014148:	6026      	str	r6, [r4, #0]
 801414a:	6165      	str	r5, [r4, #20]
 801414c:	9e01      	ldr	r6, [sp, #4]
 801414e:	1aed      	subs	r5, r5, r3
 8014150:	60a5      	str	r5, [r4, #8]
 8014152:	9b01      	ldr	r3, [sp, #4]
 8014154:	429e      	cmp	r6, r3
 8014156:	d900      	bls.n	801415a <__ssputs_r+0x8e>
 8014158:	9e01      	ldr	r6, [sp, #4]
 801415a:	0032      	movs	r2, r6
 801415c:	9903      	ldr	r1, [sp, #12]
 801415e:	6820      	ldr	r0, [r4, #0]
 8014160:	f000 fa95 	bl	801468e <memmove>
 8014164:	68a3      	ldr	r3, [r4, #8]
 8014166:	2000      	movs	r0, #0
 8014168:	1b9b      	subs	r3, r3, r6
 801416a:	60a3      	str	r3, [r4, #8]
 801416c:	6823      	ldr	r3, [r4, #0]
 801416e:	199e      	adds	r6, r3, r6
 8014170:	6026      	str	r6, [r4, #0]
 8014172:	e7da      	b.n	801412a <__ssputs_r+0x5e>
 8014174:	002a      	movs	r2, r5
 8014176:	0038      	movs	r0, r7
 8014178:	f7ff ff81 	bl	801407e <_realloc_r>
 801417c:	1e06      	subs	r6, r0, #0
 801417e:	d1e0      	bne.n	8014142 <__ssputs_r+0x76>
 8014180:	6921      	ldr	r1, [r4, #16]
 8014182:	0038      	movs	r0, r7
 8014184:	f7fd ff98 	bl	80120b8 <_free_r>
 8014188:	e7c7      	b.n	801411a <__ssputs_r+0x4e>
 801418a:	46c0      	nop			; (mov r8, r8)
 801418c:	fffffb7f 	.word	0xfffffb7f

08014190 <_svfiprintf_r>:
 8014190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014192:	b0a1      	sub	sp, #132	; 0x84
 8014194:	9003      	str	r0, [sp, #12]
 8014196:	001d      	movs	r5, r3
 8014198:	898b      	ldrh	r3, [r1, #12]
 801419a:	000f      	movs	r7, r1
 801419c:	0016      	movs	r6, r2
 801419e:	061b      	lsls	r3, r3, #24
 80141a0:	d511      	bpl.n	80141c6 <_svfiprintf_r+0x36>
 80141a2:	690b      	ldr	r3, [r1, #16]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d10e      	bne.n	80141c6 <_svfiprintf_r+0x36>
 80141a8:	2140      	movs	r1, #64	; 0x40
 80141aa:	f7fd ffcf 	bl	801214c <_malloc_r>
 80141ae:	6038      	str	r0, [r7, #0]
 80141b0:	6138      	str	r0, [r7, #16]
 80141b2:	2800      	cmp	r0, #0
 80141b4:	d105      	bne.n	80141c2 <_svfiprintf_r+0x32>
 80141b6:	230c      	movs	r3, #12
 80141b8:	9a03      	ldr	r2, [sp, #12]
 80141ba:	3801      	subs	r0, #1
 80141bc:	6013      	str	r3, [r2, #0]
 80141be:	b021      	add	sp, #132	; 0x84
 80141c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141c2:	2340      	movs	r3, #64	; 0x40
 80141c4:	617b      	str	r3, [r7, #20]
 80141c6:	2300      	movs	r3, #0
 80141c8:	ac08      	add	r4, sp, #32
 80141ca:	6163      	str	r3, [r4, #20]
 80141cc:	3320      	adds	r3, #32
 80141ce:	7663      	strb	r3, [r4, #25]
 80141d0:	3310      	adds	r3, #16
 80141d2:	76a3      	strb	r3, [r4, #26]
 80141d4:	9507      	str	r5, [sp, #28]
 80141d6:	0035      	movs	r5, r6
 80141d8:	782b      	ldrb	r3, [r5, #0]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d001      	beq.n	80141e2 <_svfiprintf_r+0x52>
 80141de:	2b25      	cmp	r3, #37	; 0x25
 80141e0:	d146      	bne.n	8014270 <_svfiprintf_r+0xe0>
 80141e2:	1bab      	subs	r3, r5, r6
 80141e4:	9305      	str	r3, [sp, #20]
 80141e6:	d00c      	beq.n	8014202 <_svfiprintf_r+0x72>
 80141e8:	0032      	movs	r2, r6
 80141ea:	0039      	movs	r1, r7
 80141ec:	9803      	ldr	r0, [sp, #12]
 80141ee:	f7ff ff6d 	bl	80140cc <__ssputs_r>
 80141f2:	1c43      	adds	r3, r0, #1
 80141f4:	d100      	bne.n	80141f8 <_svfiprintf_r+0x68>
 80141f6:	e0ae      	b.n	8014356 <_svfiprintf_r+0x1c6>
 80141f8:	6962      	ldr	r2, [r4, #20]
 80141fa:	9b05      	ldr	r3, [sp, #20]
 80141fc:	4694      	mov	ip, r2
 80141fe:	4463      	add	r3, ip
 8014200:	6163      	str	r3, [r4, #20]
 8014202:	782b      	ldrb	r3, [r5, #0]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d100      	bne.n	801420a <_svfiprintf_r+0x7a>
 8014208:	e0a5      	b.n	8014356 <_svfiprintf_r+0x1c6>
 801420a:	2201      	movs	r2, #1
 801420c:	2300      	movs	r3, #0
 801420e:	4252      	negs	r2, r2
 8014210:	6062      	str	r2, [r4, #4]
 8014212:	a904      	add	r1, sp, #16
 8014214:	3254      	adds	r2, #84	; 0x54
 8014216:	1852      	adds	r2, r2, r1
 8014218:	1c6e      	adds	r6, r5, #1
 801421a:	6023      	str	r3, [r4, #0]
 801421c:	60e3      	str	r3, [r4, #12]
 801421e:	60a3      	str	r3, [r4, #8]
 8014220:	7013      	strb	r3, [r2, #0]
 8014222:	65a3      	str	r3, [r4, #88]	; 0x58
 8014224:	7831      	ldrb	r1, [r6, #0]
 8014226:	2205      	movs	r2, #5
 8014228:	4853      	ldr	r0, [pc, #332]	; (8014378 <_svfiprintf_r+0x1e8>)
 801422a:	f000 fa25 	bl	8014678 <memchr>
 801422e:	1c75      	adds	r5, r6, #1
 8014230:	2800      	cmp	r0, #0
 8014232:	d11f      	bne.n	8014274 <_svfiprintf_r+0xe4>
 8014234:	6822      	ldr	r2, [r4, #0]
 8014236:	06d3      	lsls	r3, r2, #27
 8014238:	d504      	bpl.n	8014244 <_svfiprintf_r+0xb4>
 801423a:	2353      	movs	r3, #83	; 0x53
 801423c:	a904      	add	r1, sp, #16
 801423e:	185b      	adds	r3, r3, r1
 8014240:	2120      	movs	r1, #32
 8014242:	7019      	strb	r1, [r3, #0]
 8014244:	0713      	lsls	r3, r2, #28
 8014246:	d504      	bpl.n	8014252 <_svfiprintf_r+0xc2>
 8014248:	2353      	movs	r3, #83	; 0x53
 801424a:	a904      	add	r1, sp, #16
 801424c:	185b      	adds	r3, r3, r1
 801424e:	212b      	movs	r1, #43	; 0x2b
 8014250:	7019      	strb	r1, [r3, #0]
 8014252:	7833      	ldrb	r3, [r6, #0]
 8014254:	2b2a      	cmp	r3, #42	; 0x2a
 8014256:	d016      	beq.n	8014286 <_svfiprintf_r+0xf6>
 8014258:	0035      	movs	r5, r6
 801425a:	2100      	movs	r1, #0
 801425c:	200a      	movs	r0, #10
 801425e:	68e3      	ldr	r3, [r4, #12]
 8014260:	782a      	ldrb	r2, [r5, #0]
 8014262:	1c6e      	adds	r6, r5, #1
 8014264:	3a30      	subs	r2, #48	; 0x30
 8014266:	2a09      	cmp	r2, #9
 8014268:	d94e      	bls.n	8014308 <_svfiprintf_r+0x178>
 801426a:	2900      	cmp	r1, #0
 801426c:	d018      	beq.n	80142a0 <_svfiprintf_r+0x110>
 801426e:	e010      	b.n	8014292 <_svfiprintf_r+0x102>
 8014270:	3501      	adds	r5, #1
 8014272:	e7b1      	b.n	80141d8 <_svfiprintf_r+0x48>
 8014274:	4b40      	ldr	r3, [pc, #256]	; (8014378 <_svfiprintf_r+0x1e8>)
 8014276:	6822      	ldr	r2, [r4, #0]
 8014278:	1ac0      	subs	r0, r0, r3
 801427a:	2301      	movs	r3, #1
 801427c:	4083      	lsls	r3, r0
 801427e:	4313      	orrs	r3, r2
 8014280:	6023      	str	r3, [r4, #0]
 8014282:	002e      	movs	r6, r5
 8014284:	e7ce      	b.n	8014224 <_svfiprintf_r+0x94>
 8014286:	9b07      	ldr	r3, [sp, #28]
 8014288:	1d19      	adds	r1, r3, #4
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	9107      	str	r1, [sp, #28]
 801428e:	2b00      	cmp	r3, #0
 8014290:	db01      	blt.n	8014296 <_svfiprintf_r+0x106>
 8014292:	930b      	str	r3, [sp, #44]	; 0x2c
 8014294:	e004      	b.n	80142a0 <_svfiprintf_r+0x110>
 8014296:	425b      	negs	r3, r3
 8014298:	60e3      	str	r3, [r4, #12]
 801429a:	2302      	movs	r3, #2
 801429c:	4313      	orrs	r3, r2
 801429e:	6023      	str	r3, [r4, #0]
 80142a0:	782b      	ldrb	r3, [r5, #0]
 80142a2:	2b2e      	cmp	r3, #46	; 0x2e
 80142a4:	d10a      	bne.n	80142bc <_svfiprintf_r+0x12c>
 80142a6:	786b      	ldrb	r3, [r5, #1]
 80142a8:	2b2a      	cmp	r3, #42	; 0x2a
 80142aa:	d135      	bne.n	8014318 <_svfiprintf_r+0x188>
 80142ac:	9b07      	ldr	r3, [sp, #28]
 80142ae:	3502      	adds	r5, #2
 80142b0:	1d1a      	adds	r2, r3, #4
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	9207      	str	r2, [sp, #28]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	db2b      	blt.n	8014312 <_svfiprintf_r+0x182>
 80142ba:	9309      	str	r3, [sp, #36]	; 0x24
 80142bc:	4e2f      	ldr	r6, [pc, #188]	; (801437c <_svfiprintf_r+0x1ec>)
 80142be:	7829      	ldrb	r1, [r5, #0]
 80142c0:	2203      	movs	r2, #3
 80142c2:	0030      	movs	r0, r6
 80142c4:	f000 f9d8 	bl	8014678 <memchr>
 80142c8:	2800      	cmp	r0, #0
 80142ca:	d006      	beq.n	80142da <_svfiprintf_r+0x14a>
 80142cc:	2340      	movs	r3, #64	; 0x40
 80142ce:	1b80      	subs	r0, r0, r6
 80142d0:	4083      	lsls	r3, r0
 80142d2:	6822      	ldr	r2, [r4, #0]
 80142d4:	3501      	adds	r5, #1
 80142d6:	4313      	orrs	r3, r2
 80142d8:	6023      	str	r3, [r4, #0]
 80142da:	7829      	ldrb	r1, [r5, #0]
 80142dc:	2206      	movs	r2, #6
 80142de:	4828      	ldr	r0, [pc, #160]	; (8014380 <_svfiprintf_r+0x1f0>)
 80142e0:	1c6e      	adds	r6, r5, #1
 80142e2:	7621      	strb	r1, [r4, #24]
 80142e4:	f000 f9c8 	bl	8014678 <memchr>
 80142e8:	2800      	cmp	r0, #0
 80142ea:	d03c      	beq.n	8014366 <_svfiprintf_r+0x1d6>
 80142ec:	4b25      	ldr	r3, [pc, #148]	; (8014384 <_svfiprintf_r+0x1f4>)
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d125      	bne.n	801433e <_svfiprintf_r+0x1ae>
 80142f2:	2207      	movs	r2, #7
 80142f4:	9b07      	ldr	r3, [sp, #28]
 80142f6:	3307      	adds	r3, #7
 80142f8:	4393      	bics	r3, r2
 80142fa:	3308      	adds	r3, #8
 80142fc:	9307      	str	r3, [sp, #28]
 80142fe:	6963      	ldr	r3, [r4, #20]
 8014300:	9a04      	ldr	r2, [sp, #16]
 8014302:	189b      	adds	r3, r3, r2
 8014304:	6163      	str	r3, [r4, #20]
 8014306:	e766      	b.n	80141d6 <_svfiprintf_r+0x46>
 8014308:	4343      	muls	r3, r0
 801430a:	2101      	movs	r1, #1
 801430c:	189b      	adds	r3, r3, r2
 801430e:	0035      	movs	r5, r6
 8014310:	e7a6      	b.n	8014260 <_svfiprintf_r+0xd0>
 8014312:	2301      	movs	r3, #1
 8014314:	425b      	negs	r3, r3
 8014316:	e7d0      	b.n	80142ba <_svfiprintf_r+0x12a>
 8014318:	2300      	movs	r3, #0
 801431a:	200a      	movs	r0, #10
 801431c:	001a      	movs	r2, r3
 801431e:	3501      	adds	r5, #1
 8014320:	6063      	str	r3, [r4, #4]
 8014322:	7829      	ldrb	r1, [r5, #0]
 8014324:	1c6e      	adds	r6, r5, #1
 8014326:	3930      	subs	r1, #48	; 0x30
 8014328:	2909      	cmp	r1, #9
 801432a:	d903      	bls.n	8014334 <_svfiprintf_r+0x1a4>
 801432c:	2b00      	cmp	r3, #0
 801432e:	d0c5      	beq.n	80142bc <_svfiprintf_r+0x12c>
 8014330:	9209      	str	r2, [sp, #36]	; 0x24
 8014332:	e7c3      	b.n	80142bc <_svfiprintf_r+0x12c>
 8014334:	4342      	muls	r2, r0
 8014336:	2301      	movs	r3, #1
 8014338:	1852      	adds	r2, r2, r1
 801433a:	0035      	movs	r5, r6
 801433c:	e7f1      	b.n	8014322 <_svfiprintf_r+0x192>
 801433e:	ab07      	add	r3, sp, #28
 8014340:	9300      	str	r3, [sp, #0]
 8014342:	003a      	movs	r2, r7
 8014344:	4b10      	ldr	r3, [pc, #64]	; (8014388 <_svfiprintf_r+0x1f8>)
 8014346:	0021      	movs	r1, r4
 8014348:	9803      	ldr	r0, [sp, #12]
 801434a:	e000      	b.n	801434e <_svfiprintf_r+0x1be>
 801434c:	bf00      	nop
 801434e:	9004      	str	r0, [sp, #16]
 8014350:	9b04      	ldr	r3, [sp, #16]
 8014352:	3301      	adds	r3, #1
 8014354:	d1d3      	bne.n	80142fe <_svfiprintf_r+0x16e>
 8014356:	89bb      	ldrh	r3, [r7, #12]
 8014358:	980d      	ldr	r0, [sp, #52]	; 0x34
 801435a:	065b      	lsls	r3, r3, #25
 801435c:	d400      	bmi.n	8014360 <_svfiprintf_r+0x1d0>
 801435e:	e72e      	b.n	80141be <_svfiprintf_r+0x2e>
 8014360:	2001      	movs	r0, #1
 8014362:	4240      	negs	r0, r0
 8014364:	e72b      	b.n	80141be <_svfiprintf_r+0x2e>
 8014366:	ab07      	add	r3, sp, #28
 8014368:	9300      	str	r3, [sp, #0]
 801436a:	003a      	movs	r2, r7
 801436c:	4b06      	ldr	r3, [pc, #24]	; (8014388 <_svfiprintf_r+0x1f8>)
 801436e:	0021      	movs	r1, r4
 8014370:	9803      	ldr	r0, [sp, #12]
 8014372:	f000 f879 	bl	8014468 <_printf_i>
 8014376:	e7ea      	b.n	801434e <_svfiprintf_r+0x1be>
 8014378:	08019d44 	.word	0x08019d44
 801437c:	08019d4a 	.word	0x08019d4a
 8014380:	08019d4e 	.word	0x08019d4e
 8014384:	00000000 	.word	0x00000000
 8014388:	080140cd 	.word	0x080140cd

0801438c <_printf_common>:
 801438c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801438e:	0015      	movs	r5, r2
 8014390:	9301      	str	r3, [sp, #4]
 8014392:	688a      	ldr	r2, [r1, #8]
 8014394:	690b      	ldr	r3, [r1, #16]
 8014396:	9000      	str	r0, [sp, #0]
 8014398:	000c      	movs	r4, r1
 801439a:	4293      	cmp	r3, r2
 801439c:	da00      	bge.n	80143a0 <_printf_common+0x14>
 801439e:	0013      	movs	r3, r2
 80143a0:	0022      	movs	r2, r4
 80143a2:	602b      	str	r3, [r5, #0]
 80143a4:	3243      	adds	r2, #67	; 0x43
 80143a6:	7812      	ldrb	r2, [r2, #0]
 80143a8:	2a00      	cmp	r2, #0
 80143aa:	d001      	beq.n	80143b0 <_printf_common+0x24>
 80143ac:	3301      	adds	r3, #1
 80143ae:	602b      	str	r3, [r5, #0]
 80143b0:	6823      	ldr	r3, [r4, #0]
 80143b2:	069b      	lsls	r3, r3, #26
 80143b4:	d502      	bpl.n	80143bc <_printf_common+0x30>
 80143b6:	682b      	ldr	r3, [r5, #0]
 80143b8:	3302      	adds	r3, #2
 80143ba:	602b      	str	r3, [r5, #0]
 80143bc:	2706      	movs	r7, #6
 80143be:	6823      	ldr	r3, [r4, #0]
 80143c0:	401f      	ands	r7, r3
 80143c2:	d027      	beq.n	8014414 <_printf_common+0x88>
 80143c4:	0023      	movs	r3, r4
 80143c6:	3343      	adds	r3, #67	; 0x43
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	1e5a      	subs	r2, r3, #1
 80143cc:	4193      	sbcs	r3, r2
 80143ce:	6822      	ldr	r2, [r4, #0]
 80143d0:	0692      	lsls	r2, r2, #26
 80143d2:	d430      	bmi.n	8014436 <_printf_common+0xaa>
 80143d4:	0022      	movs	r2, r4
 80143d6:	9901      	ldr	r1, [sp, #4]
 80143d8:	3243      	adds	r2, #67	; 0x43
 80143da:	9800      	ldr	r0, [sp, #0]
 80143dc:	9e08      	ldr	r6, [sp, #32]
 80143de:	47b0      	blx	r6
 80143e0:	1c43      	adds	r3, r0, #1
 80143e2:	d025      	beq.n	8014430 <_printf_common+0xa4>
 80143e4:	2306      	movs	r3, #6
 80143e6:	6820      	ldr	r0, [r4, #0]
 80143e8:	682a      	ldr	r2, [r5, #0]
 80143ea:	68e1      	ldr	r1, [r4, #12]
 80143ec:	4003      	ands	r3, r0
 80143ee:	2500      	movs	r5, #0
 80143f0:	2b04      	cmp	r3, #4
 80143f2:	d103      	bne.n	80143fc <_printf_common+0x70>
 80143f4:	1a8d      	subs	r5, r1, r2
 80143f6:	43eb      	mvns	r3, r5
 80143f8:	17db      	asrs	r3, r3, #31
 80143fa:	401d      	ands	r5, r3
 80143fc:	68a3      	ldr	r3, [r4, #8]
 80143fe:	6922      	ldr	r2, [r4, #16]
 8014400:	4293      	cmp	r3, r2
 8014402:	dd01      	ble.n	8014408 <_printf_common+0x7c>
 8014404:	1a9b      	subs	r3, r3, r2
 8014406:	18ed      	adds	r5, r5, r3
 8014408:	2700      	movs	r7, #0
 801440a:	42bd      	cmp	r5, r7
 801440c:	d120      	bne.n	8014450 <_printf_common+0xc4>
 801440e:	2000      	movs	r0, #0
 8014410:	e010      	b.n	8014434 <_printf_common+0xa8>
 8014412:	3701      	adds	r7, #1
 8014414:	68e3      	ldr	r3, [r4, #12]
 8014416:	682a      	ldr	r2, [r5, #0]
 8014418:	1a9b      	subs	r3, r3, r2
 801441a:	42bb      	cmp	r3, r7
 801441c:	ddd2      	ble.n	80143c4 <_printf_common+0x38>
 801441e:	0022      	movs	r2, r4
 8014420:	2301      	movs	r3, #1
 8014422:	3219      	adds	r2, #25
 8014424:	9901      	ldr	r1, [sp, #4]
 8014426:	9800      	ldr	r0, [sp, #0]
 8014428:	9e08      	ldr	r6, [sp, #32]
 801442a:	47b0      	blx	r6
 801442c:	1c43      	adds	r3, r0, #1
 801442e:	d1f0      	bne.n	8014412 <_printf_common+0x86>
 8014430:	2001      	movs	r0, #1
 8014432:	4240      	negs	r0, r0
 8014434:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014436:	2030      	movs	r0, #48	; 0x30
 8014438:	18e1      	adds	r1, r4, r3
 801443a:	3143      	adds	r1, #67	; 0x43
 801443c:	7008      	strb	r0, [r1, #0]
 801443e:	0021      	movs	r1, r4
 8014440:	1c5a      	adds	r2, r3, #1
 8014442:	3145      	adds	r1, #69	; 0x45
 8014444:	7809      	ldrb	r1, [r1, #0]
 8014446:	18a2      	adds	r2, r4, r2
 8014448:	3243      	adds	r2, #67	; 0x43
 801444a:	3302      	adds	r3, #2
 801444c:	7011      	strb	r1, [r2, #0]
 801444e:	e7c1      	b.n	80143d4 <_printf_common+0x48>
 8014450:	0022      	movs	r2, r4
 8014452:	2301      	movs	r3, #1
 8014454:	321a      	adds	r2, #26
 8014456:	9901      	ldr	r1, [sp, #4]
 8014458:	9800      	ldr	r0, [sp, #0]
 801445a:	9e08      	ldr	r6, [sp, #32]
 801445c:	47b0      	blx	r6
 801445e:	1c43      	adds	r3, r0, #1
 8014460:	d0e6      	beq.n	8014430 <_printf_common+0xa4>
 8014462:	3701      	adds	r7, #1
 8014464:	e7d1      	b.n	801440a <_printf_common+0x7e>
	...

08014468 <_printf_i>:
 8014468:	b5f0      	push	{r4, r5, r6, r7, lr}
 801446a:	b089      	sub	sp, #36	; 0x24
 801446c:	9204      	str	r2, [sp, #16]
 801446e:	000a      	movs	r2, r1
 8014470:	3243      	adds	r2, #67	; 0x43
 8014472:	9305      	str	r3, [sp, #20]
 8014474:	9003      	str	r0, [sp, #12]
 8014476:	9202      	str	r2, [sp, #8]
 8014478:	7e0a      	ldrb	r2, [r1, #24]
 801447a:	000c      	movs	r4, r1
 801447c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801447e:	2a6e      	cmp	r2, #110	; 0x6e
 8014480:	d100      	bne.n	8014484 <_printf_i+0x1c>
 8014482:	e086      	b.n	8014592 <_printf_i+0x12a>
 8014484:	d81f      	bhi.n	80144c6 <_printf_i+0x5e>
 8014486:	2a63      	cmp	r2, #99	; 0x63
 8014488:	d033      	beq.n	80144f2 <_printf_i+0x8a>
 801448a:	d808      	bhi.n	801449e <_printf_i+0x36>
 801448c:	2a00      	cmp	r2, #0
 801448e:	d100      	bne.n	8014492 <_printf_i+0x2a>
 8014490:	e08c      	b.n	80145ac <_printf_i+0x144>
 8014492:	2a58      	cmp	r2, #88	; 0x58
 8014494:	d04d      	beq.n	8014532 <_printf_i+0xca>
 8014496:	0025      	movs	r5, r4
 8014498:	3542      	adds	r5, #66	; 0x42
 801449a:	702a      	strb	r2, [r5, #0]
 801449c:	e030      	b.n	8014500 <_printf_i+0x98>
 801449e:	2a64      	cmp	r2, #100	; 0x64
 80144a0:	d001      	beq.n	80144a6 <_printf_i+0x3e>
 80144a2:	2a69      	cmp	r2, #105	; 0x69
 80144a4:	d1f7      	bne.n	8014496 <_printf_i+0x2e>
 80144a6:	6819      	ldr	r1, [r3, #0]
 80144a8:	6825      	ldr	r5, [r4, #0]
 80144aa:	1d0a      	adds	r2, r1, #4
 80144ac:	0628      	lsls	r0, r5, #24
 80144ae:	d529      	bpl.n	8014504 <_printf_i+0x9c>
 80144b0:	6808      	ldr	r0, [r1, #0]
 80144b2:	601a      	str	r2, [r3, #0]
 80144b4:	2800      	cmp	r0, #0
 80144b6:	da03      	bge.n	80144c0 <_printf_i+0x58>
 80144b8:	232d      	movs	r3, #45	; 0x2d
 80144ba:	9a02      	ldr	r2, [sp, #8]
 80144bc:	4240      	negs	r0, r0
 80144be:	7013      	strb	r3, [r2, #0]
 80144c0:	4e6b      	ldr	r6, [pc, #428]	; (8014670 <_printf_i+0x208>)
 80144c2:	270a      	movs	r7, #10
 80144c4:	e04f      	b.n	8014566 <_printf_i+0xfe>
 80144c6:	2a73      	cmp	r2, #115	; 0x73
 80144c8:	d074      	beq.n	80145b4 <_printf_i+0x14c>
 80144ca:	d808      	bhi.n	80144de <_printf_i+0x76>
 80144cc:	2a6f      	cmp	r2, #111	; 0x6f
 80144ce:	d01f      	beq.n	8014510 <_printf_i+0xa8>
 80144d0:	2a70      	cmp	r2, #112	; 0x70
 80144d2:	d1e0      	bne.n	8014496 <_printf_i+0x2e>
 80144d4:	2220      	movs	r2, #32
 80144d6:	6809      	ldr	r1, [r1, #0]
 80144d8:	430a      	orrs	r2, r1
 80144da:	6022      	str	r2, [r4, #0]
 80144dc:	e003      	b.n	80144e6 <_printf_i+0x7e>
 80144de:	2a75      	cmp	r2, #117	; 0x75
 80144e0:	d016      	beq.n	8014510 <_printf_i+0xa8>
 80144e2:	2a78      	cmp	r2, #120	; 0x78
 80144e4:	d1d7      	bne.n	8014496 <_printf_i+0x2e>
 80144e6:	0022      	movs	r2, r4
 80144e8:	2178      	movs	r1, #120	; 0x78
 80144ea:	3245      	adds	r2, #69	; 0x45
 80144ec:	7011      	strb	r1, [r2, #0]
 80144ee:	4e61      	ldr	r6, [pc, #388]	; (8014674 <_printf_i+0x20c>)
 80144f0:	e022      	b.n	8014538 <_printf_i+0xd0>
 80144f2:	0025      	movs	r5, r4
 80144f4:	681a      	ldr	r2, [r3, #0]
 80144f6:	3542      	adds	r5, #66	; 0x42
 80144f8:	1d11      	adds	r1, r2, #4
 80144fa:	6019      	str	r1, [r3, #0]
 80144fc:	6813      	ldr	r3, [r2, #0]
 80144fe:	702b      	strb	r3, [r5, #0]
 8014500:	2301      	movs	r3, #1
 8014502:	e065      	b.n	80145d0 <_printf_i+0x168>
 8014504:	6808      	ldr	r0, [r1, #0]
 8014506:	601a      	str	r2, [r3, #0]
 8014508:	0669      	lsls	r1, r5, #25
 801450a:	d5d3      	bpl.n	80144b4 <_printf_i+0x4c>
 801450c:	b200      	sxth	r0, r0
 801450e:	e7d1      	b.n	80144b4 <_printf_i+0x4c>
 8014510:	6819      	ldr	r1, [r3, #0]
 8014512:	6825      	ldr	r5, [r4, #0]
 8014514:	1d08      	adds	r0, r1, #4
 8014516:	6018      	str	r0, [r3, #0]
 8014518:	6808      	ldr	r0, [r1, #0]
 801451a:	062e      	lsls	r6, r5, #24
 801451c:	d505      	bpl.n	801452a <_printf_i+0xc2>
 801451e:	4e54      	ldr	r6, [pc, #336]	; (8014670 <_printf_i+0x208>)
 8014520:	2708      	movs	r7, #8
 8014522:	2a6f      	cmp	r2, #111	; 0x6f
 8014524:	d01b      	beq.n	801455e <_printf_i+0xf6>
 8014526:	270a      	movs	r7, #10
 8014528:	e019      	b.n	801455e <_printf_i+0xf6>
 801452a:	066d      	lsls	r5, r5, #25
 801452c:	d5f7      	bpl.n	801451e <_printf_i+0xb6>
 801452e:	b280      	uxth	r0, r0
 8014530:	e7f5      	b.n	801451e <_printf_i+0xb6>
 8014532:	3145      	adds	r1, #69	; 0x45
 8014534:	4e4e      	ldr	r6, [pc, #312]	; (8014670 <_printf_i+0x208>)
 8014536:	700a      	strb	r2, [r1, #0]
 8014538:	6818      	ldr	r0, [r3, #0]
 801453a:	6822      	ldr	r2, [r4, #0]
 801453c:	1d01      	adds	r1, r0, #4
 801453e:	6800      	ldr	r0, [r0, #0]
 8014540:	6019      	str	r1, [r3, #0]
 8014542:	0615      	lsls	r5, r2, #24
 8014544:	d521      	bpl.n	801458a <_printf_i+0x122>
 8014546:	07d3      	lsls	r3, r2, #31
 8014548:	d502      	bpl.n	8014550 <_printf_i+0xe8>
 801454a:	2320      	movs	r3, #32
 801454c:	431a      	orrs	r2, r3
 801454e:	6022      	str	r2, [r4, #0]
 8014550:	2710      	movs	r7, #16
 8014552:	2800      	cmp	r0, #0
 8014554:	d103      	bne.n	801455e <_printf_i+0xf6>
 8014556:	2320      	movs	r3, #32
 8014558:	6822      	ldr	r2, [r4, #0]
 801455a:	439a      	bics	r2, r3
 801455c:	6022      	str	r2, [r4, #0]
 801455e:	0023      	movs	r3, r4
 8014560:	2200      	movs	r2, #0
 8014562:	3343      	adds	r3, #67	; 0x43
 8014564:	701a      	strb	r2, [r3, #0]
 8014566:	6863      	ldr	r3, [r4, #4]
 8014568:	60a3      	str	r3, [r4, #8]
 801456a:	2b00      	cmp	r3, #0
 801456c:	db58      	blt.n	8014620 <_printf_i+0x1b8>
 801456e:	2204      	movs	r2, #4
 8014570:	6821      	ldr	r1, [r4, #0]
 8014572:	4391      	bics	r1, r2
 8014574:	6021      	str	r1, [r4, #0]
 8014576:	2800      	cmp	r0, #0
 8014578:	d154      	bne.n	8014624 <_printf_i+0x1bc>
 801457a:	9d02      	ldr	r5, [sp, #8]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d05a      	beq.n	8014636 <_printf_i+0x1ce>
 8014580:	0025      	movs	r5, r4
 8014582:	7833      	ldrb	r3, [r6, #0]
 8014584:	3542      	adds	r5, #66	; 0x42
 8014586:	702b      	strb	r3, [r5, #0]
 8014588:	e055      	b.n	8014636 <_printf_i+0x1ce>
 801458a:	0655      	lsls	r5, r2, #25
 801458c:	d5db      	bpl.n	8014546 <_printf_i+0xde>
 801458e:	b280      	uxth	r0, r0
 8014590:	e7d9      	b.n	8014546 <_printf_i+0xde>
 8014592:	681a      	ldr	r2, [r3, #0]
 8014594:	680d      	ldr	r5, [r1, #0]
 8014596:	1d10      	adds	r0, r2, #4
 8014598:	6949      	ldr	r1, [r1, #20]
 801459a:	6018      	str	r0, [r3, #0]
 801459c:	6813      	ldr	r3, [r2, #0]
 801459e:	062e      	lsls	r6, r5, #24
 80145a0:	d501      	bpl.n	80145a6 <_printf_i+0x13e>
 80145a2:	6019      	str	r1, [r3, #0]
 80145a4:	e002      	b.n	80145ac <_printf_i+0x144>
 80145a6:	066d      	lsls	r5, r5, #25
 80145a8:	d5fb      	bpl.n	80145a2 <_printf_i+0x13a>
 80145aa:	8019      	strh	r1, [r3, #0]
 80145ac:	2300      	movs	r3, #0
 80145ae:	9d02      	ldr	r5, [sp, #8]
 80145b0:	6123      	str	r3, [r4, #16]
 80145b2:	e04f      	b.n	8014654 <_printf_i+0x1ec>
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	1d11      	adds	r1, r2, #4
 80145b8:	6019      	str	r1, [r3, #0]
 80145ba:	6815      	ldr	r5, [r2, #0]
 80145bc:	2100      	movs	r1, #0
 80145be:	6862      	ldr	r2, [r4, #4]
 80145c0:	0028      	movs	r0, r5
 80145c2:	f000 f859 	bl	8014678 <memchr>
 80145c6:	2800      	cmp	r0, #0
 80145c8:	d001      	beq.n	80145ce <_printf_i+0x166>
 80145ca:	1b40      	subs	r0, r0, r5
 80145cc:	6060      	str	r0, [r4, #4]
 80145ce:	6863      	ldr	r3, [r4, #4]
 80145d0:	6123      	str	r3, [r4, #16]
 80145d2:	2300      	movs	r3, #0
 80145d4:	9a02      	ldr	r2, [sp, #8]
 80145d6:	7013      	strb	r3, [r2, #0]
 80145d8:	e03c      	b.n	8014654 <_printf_i+0x1ec>
 80145da:	6923      	ldr	r3, [r4, #16]
 80145dc:	002a      	movs	r2, r5
 80145de:	9904      	ldr	r1, [sp, #16]
 80145e0:	9803      	ldr	r0, [sp, #12]
 80145e2:	9d05      	ldr	r5, [sp, #20]
 80145e4:	47a8      	blx	r5
 80145e6:	1c43      	adds	r3, r0, #1
 80145e8:	d03e      	beq.n	8014668 <_printf_i+0x200>
 80145ea:	6823      	ldr	r3, [r4, #0]
 80145ec:	079b      	lsls	r3, r3, #30
 80145ee:	d415      	bmi.n	801461c <_printf_i+0x1b4>
 80145f0:	9b07      	ldr	r3, [sp, #28]
 80145f2:	68e0      	ldr	r0, [r4, #12]
 80145f4:	4298      	cmp	r0, r3
 80145f6:	da39      	bge.n	801466c <_printf_i+0x204>
 80145f8:	0018      	movs	r0, r3
 80145fa:	e037      	b.n	801466c <_printf_i+0x204>
 80145fc:	0022      	movs	r2, r4
 80145fe:	2301      	movs	r3, #1
 8014600:	3219      	adds	r2, #25
 8014602:	9904      	ldr	r1, [sp, #16]
 8014604:	9803      	ldr	r0, [sp, #12]
 8014606:	9e05      	ldr	r6, [sp, #20]
 8014608:	47b0      	blx	r6
 801460a:	1c43      	adds	r3, r0, #1
 801460c:	d02c      	beq.n	8014668 <_printf_i+0x200>
 801460e:	3501      	adds	r5, #1
 8014610:	68e3      	ldr	r3, [r4, #12]
 8014612:	9a07      	ldr	r2, [sp, #28]
 8014614:	1a9b      	subs	r3, r3, r2
 8014616:	42ab      	cmp	r3, r5
 8014618:	dcf0      	bgt.n	80145fc <_printf_i+0x194>
 801461a:	e7e9      	b.n	80145f0 <_printf_i+0x188>
 801461c:	2500      	movs	r5, #0
 801461e:	e7f7      	b.n	8014610 <_printf_i+0x1a8>
 8014620:	2800      	cmp	r0, #0
 8014622:	d0ad      	beq.n	8014580 <_printf_i+0x118>
 8014624:	9d02      	ldr	r5, [sp, #8]
 8014626:	0039      	movs	r1, r7
 8014628:	f7eb fe0e 	bl	8000248 <__aeabi_uidivmod>
 801462c:	5c73      	ldrb	r3, [r6, r1]
 801462e:	3d01      	subs	r5, #1
 8014630:	702b      	strb	r3, [r5, #0]
 8014632:	2800      	cmp	r0, #0
 8014634:	d1f7      	bne.n	8014626 <_printf_i+0x1be>
 8014636:	2f08      	cmp	r7, #8
 8014638:	d109      	bne.n	801464e <_printf_i+0x1e6>
 801463a:	6823      	ldr	r3, [r4, #0]
 801463c:	07db      	lsls	r3, r3, #31
 801463e:	d506      	bpl.n	801464e <_printf_i+0x1e6>
 8014640:	6863      	ldr	r3, [r4, #4]
 8014642:	6922      	ldr	r2, [r4, #16]
 8014644:	4293      	cmp	r3, r2
 8014646:	dc02      	bgt.n	801464e <_printf_i+0x1e6>
 8014648:	2330      	movs	r3, #48	; 0x30
 801464a:	3d01      	subs	r5, #1
 801464c:	702b      	strb	r3, [r5, #0]
 801464e:	9b02      	ldr	r3, [sp, #8]
 8014650:	1b5b      	subs	r3, r3, r5
 8014652:	6123      	str	r3, [r4, #16]
 8014654:	9b05      	ldr	r3, [sp, #20]
 8014656:	aa07      	add	r2, sp, #28
 8014658:	9300      	str	r3, [sp, #0]
 801465a:	0021      	movs	r1, r4
 801465c:	9b04      	ldr	r3, [sp, #16]
 801465e:	9803      	ldr	r0, [sp, #12]
 8014660:	f7ff fe94 	bl	801438c <_printf_common>
 8014664:	1c43      	adds	r3, r0, #1
 8014666:	d1b8      	bne.n	80145da <_printf_i+0x172>
 8014668:	2001      	movs	r0, #1
 801466a:	4240      	negs	r0, r0
 801466c:	b009      	add	sp, #36	; 0x24
 801466e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014670:	08019d55 	.word	0x08019d55
 8014674:	08019d66 	.word	0x08019d66

08014678 <memchr>:
 8014678:	b2c9      	uxtb	r1, r1
 801467a:	1882      	adds	r2, r0, r2
 801467c:	4290      	cmp	r0, r2
 801467e:	d101      	bne.n	8014684 <memchr+0xc>
 8014680:	2000      	movs	r0, #0
 8014682:	4770      	bx	lr
 8014684:	7803      	ldrb	r3, [r0, #0]
 8014686:	428b      	cmp	r3, r1
 8014688:	d0fb      	beq.n	8014682 <memchr+0xa>
 801468a:	3001      	adds	r0, #1
 801468c:	e7f6      	b.n	801467c <memchr+0x4>

0801468e <memmove>:
 801468e:	b510      	push	{r4, lr}
 8014690:	4288      	cmp	r0, r1
 8014692:	d902      	bls.n	801469a <memmove+0xc>
 8014694:	188b      	adds	r3, r1, r2
 8014696:	4298      	cmp	r0, r3
 8014698:	d303      	bcc.n	80146a2 <memmove+0x14>
 801469a:	2300      	movs	r3, #0
 801469c:	e007      	b.n	80146ae <memmove+0x20>
 801469e:	5c8b      	ldrb	r3, [r1, r2]
 80146a0:	5483      	strb	r3, [r0, r2]
 80146a2:	3a01      	subs	r2, #1
 80146a4:	d2fb      	bcs.n	801469e <memmove+0x10>
 80146a6:	bd10      	pop	{r4, pc}
 80146a8:	5ccc      	ldrb	r4, [r1, r3]
 80146aa:	54c4      	strb	r4, [r0, r3]
 80146ac:	3301      	adds	r3, #1
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d1fa      	bne.n	80146a8 <memmove+0x1a>
 80146b2:	e7f8      	b.n	80146a6 <memmove+0x18>

080146b4 <_malloc_usable_size_r>:
 80146b4:	1f0b      	subs	r3, r1, #4
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	1f18      	subs	r0, r3, #4
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	da01      	bge.n	80146c2 <_malloc_usable_size_r+0xe>
 80146be:	580b      	ldr	r3, [r1, r0]
 80146c0:	18c0      	adds	r0, r0, r3
 80146c2:	4770      	bx	lr

080146c4 <_sbrk>:
 80146c4:	4b05      	ldr	r3, [pc, #20]	; (80146dc <_sbrk+0x18>)
 80146c6:	0002      	movs	r2, r0
 80146c8:	6819      	ldr	r1, [r3, #0]
 80146ca:	2900      	cmp	r1, #0
 80146cc:	d101      	bne.n	80146d2 <_sbrk+0xe>
 80146ce:	4904      	ldr	r1, [pc, #16]	; (80146e0 <_sbrk+0x1c>)
 80146d0:	6019      	str	r1, [r3, #0]
 80146d2:	6818      	ldr	r0, [r3, #0]
 80146d4:	1882      	adds	r2, r0, r2
 80146d6:	601a      	str	r2, [r3, #0]
 80146d8:	4770      	bx	lr
 80146da:	46c0      	nop			; (mov r8, r8)
 80146dc:	200060a4 	.word	0x200060a4
 80146e0:	20006620 	.word	0x20006620

080146e4 <_init>:
 80146e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146e6:	46c0      	nop			; (mov r8, r8)
 80146e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146ea:	bc08      	pop	{r3}
 80146ec:	469e      	mov	lr, r3
 80146ee:	4770      	bx	lr

080146f0 <_fini>:
 80146f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146f2:	46c0      	nop			; (mov r8, r8)
 80146f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146f6:	bc08      	pop	{r3}
 80146f8:	469e      	mov	lr, r3
 80146fa:	4770      	bx	lr

Disassembly of section privileged_functions:

080146fc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80146fc:	b570      	push	{r4, r5, r6, lr}
 80146fe:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014700:	f7fa f9bc 	bl	800ea7c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8014704:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014706:	2b00      	cmp	r3, #0
 8014708:	dd04      	ble.n	8014714 <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801470a:	0025      	movs	r5, r4
 801470c:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801470e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014710:	2b00      	cmp	r3, #0
 8014712:	d11f      	bne.n	8014754 <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8014714:	2301      	movs	r3, #1
 8014716:	425b      	negs	r3, r3
 8014718:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 801471a:	f7fa f9bb 	bl	800ea94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801471e:	f7fa f9ad 	bl	800ea7c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8014722:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014724:	2b00      	cmp	r3, #0
 8014726:	dd04      	ble.n	8014732 <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014728:	0025      	movs	r5, r4
 801472a:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801472c:	6923      	ldr	r3, [r4, #16]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d121      	bne.n	8014776 <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8014732:	2301      	movs	r3, #1
 8014734:	425b      	negs	r3, r3
 8014736:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014738:	f7fa f9ac 	bl	800ea94 <vPortExitCritical>
}
 801473c:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 801473e:	f001 f8a3 	bl	8015888 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 8014742:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014744:	3b01      	subs	r3, #1
 8014746:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8014748:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801474a:	2b00      	cmp	r3, #0
 801474c:	dde2      	ble.n	8014714 <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801474e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014750:	2b00      	cmp	r3, #0
 8014752:	d0df      	beq.n	8014714 <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014754:	0028      	movs	r0, r5
 8014756:	f000 ff1b 	bl	8015590 <xTaskRemoveFromEventList>
 801475a:	2800      	cmp	r0, #0
 801475c:	d0f1      	beq.n	8014742 <prvUnlockQueue+0x46>
 801475e:	e7ee      	b.n	801473e <prvUnlockQueue+0x42>
					vTaskMissedYield();
 8014760:	f001 f892 	bl	8015888 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 8014764:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014766:	3b01      	subs	r3, #1
 8014768:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 801476a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801476c:	2b00      	cmp	r3, #0
 801476e:	dde0      	ble.n	8014732 <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014770:	6923      	ldr	r3, [r4, #16]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d0dd      	beq.n	8014732 <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014776:	0028      	movs	r0, r5
 8014778:	f000 ff0a 	bl	8015590 <xTaskRemoveFromEventList>
 801477c:	2800      	cmp	r0, #0
 801477e:	d0f1      	beq.n	8014764 <prvUnlockQueue+0x68>
 8014780:	e7ee      	b.n	8014760 <prvUnlockQueue+0x64>

08014782 <prvCopyDataToQueue>:
{
 8014782:	b570      	push	{r4, r5, r6, lr}
 8014784:	0004      	movs	r4, r0
 8014786:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014788:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801478a:	2a00      	cmp	r2, #0
 801478c:	d10d      	bne.n	80147aa <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 801478e:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014790:	6823      	ldr	r3, [r4, #0]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d003      	beq.n	801479e <prvCopyDataToQueue+0x1c>
	++( pxQueue->uxMessagesWaiting );
 8014796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014798:	3301      	adds	r3, #1
 801479a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 801479c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801479e:	6860      	ldr	r0, [r4, #4]
 80147a0:	f001 f8c0 	bl	8015924 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80147a4:	2300      	movs	r3, #0
 80147a6:	6063      	str	r3, [r4, #4]
 80147a8:	e7f5      	b.n	8014796 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 80147aa:	2d00      	cmp	r5, #0
 80147ac:	d10e      	bne.n	80147cc <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80147ae:	6880      	ldr	r0, [r0, #8]
 80147b0:	f7fd fc71 	bl	8012096 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80147b4:	68a3      	ldr	r3, [r4, #8]
 80147b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80147b8:	4694      	mov	ip, r2
 80147ba:	4463      	add	r3, ip
 80147bc:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80147be:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80147c0:	6862      	ldr	r2, [r4, #4]
 80147c2:	4293      	cmp	r3, r2
 80147c4:	d3e7      	bcc.n	8014796 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80147c6:	6823      	ldr	r3, [r4, #0]
 80147c8:	60a3      	str	r3, [r4, #8]
 80147ca:	e7e4      	b.n	8014796 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147cc:	68c0      	ldr	r0, [r0, #12]
 80147ce:	f7fd fc62 	bl	8012096 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80147d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80147d4:	425a      	negs	r2, r3
 80147d6:	68e3      	ldr	r3, [r4, #12]
 80147d8:	189b      	adds	r3, r3, r2
 80147da:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80147dc:	6821      	ldr	r1, [r4, #0]
 80147de:	428b      	cmp	r3, r1
 80147e0:	d203      	bcs.n	80147ea <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80147e2:	6863      	ldr	r3, [r4, #4]
 80147e4:	469c      	mov	ip, r3
 80147e6:	4462      	add	r2, ip
 80147e8:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 80147ea:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 80147ec:	2d02      	cmp	r5, #2
 80147ee:	d1d2      	bne.n	8014796 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80147f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d0cf      	beq.n	8014796 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 80147f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80147f8:	3b01      	subs	r3, #1
 80147fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80147fc:	e7cb      	b.n	8014796 <prvCopyDataToQueue+0x14>

080147fe <prvCopyDataFromQueue>:
{
 80147fe:	b510      	push	{r4, lr}
 8014800:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014802:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8014804:	2a00      	cmp	r2, #0
 8014806:	d00b      	beq.n	8014820 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8014808:	68c3      	ldr	r3, [r0, #12]
 801480a:	189b      	adds	r3, r3, r2
 801480c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801480e:	6841      	ldr	r1, [r0, #4]
 8014810:	428b      	cmp	r3, r1
 8014812:	d301      	bcc.n	8014818 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8014814:	6803      	ldr	r3, [r0, #0]
 8014816:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8014818:	68c1      	ldr	r1, [r0, #12]
 801481a:	0020      	movs	r0, r4
 801481c:	f7fd fc3b 	bl	8012096 <memcpy>
}
 8014820:	bd10      	pop	{r4, pc}

08014822 <xQueueGenericSend>:
{
 8014822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014824:	46ce      	mov	lr, r9
 8014826:	b500      	push	{lr}
 8014828:	b084      	sub	sp, #16
 801482a:	0004      	movs	r4, r0
 801482c:	9100      	str	r1, [sp, #0]
 801482e:	9201      	str	r2, [sp, #4]
 8014830:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 8014832:	2800      	cmp	r0, #0
 8014834:	d007      	beq.n	8014846 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014836:	9b00      	ldr	r3, [sp, #0]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d106      	bne.n	801484a <xQueueGenericSend+0x28>
 801483c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801483e:	2b00      	cmp	r3, #0
 8014840:	d003      	beq.n	801484a <xQueueGenericSend+0x28>
 8014842:	b672      	cpsid	i
 8014844:	e7fe      	b.n	8014844 <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 8014846:	b672      	cpsid	i
 8014848:	e7fe      	b.n	8014848 <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801484a:	2d02      	cmp	r5, #2
 801484c:	d104      	bne.n	8014858 <xQueueGenericSend+0x36>
 801484e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014850:	2b01      	cmp	r3, #1
 8014852:	d001      	beq.n	8014858 <xQueueGenericSend+0x36>
 8014854:	b672      	cpsid	i
 8014856:	e7fe      	b.n	8014856 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014858:	f001 f81c 	bl	8015894 <xTaskGetSchedulerState>
 801485c:	2800      	cmp	r0, #0
 801485e:	d104      	bne.n	801486a <xQueueGenericSend+0x48>
 8014860:	9b01      	ldr	r3, [sp, #4]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d004      	beq.n	8014870 <xQueueGenericSend+0x4e>
 8014866:	b672      	cpsid	i
 8014868:	e7fe      	b.n	8014868 <xQueueGenericSend+0x46>
 801486a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 801486c:	2700      	movs	r7, #0
 801486e:	e02f      	b.n	80148d0 <xQueueGenericSend+0xae>
 8014870:	2600      	movs	r6, #0
 8014872:	e7fb      	b.n	801486c <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014874:	002a      	movs	r2, r5
 8014876:	9900      	ldr	r1, [sp, #0]
 8014878:	0020      	movs	r0, r4
 801487a:	f7ff ff82 	bl	8014782 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801487e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014880:	2b00      	cmp	r3, #0
 8014882:	d104      	bne.n	801488e <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 8014884:	2800      	cmp	r0, #0
 8014886:	d00a      	beq.n	801489e <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 8014888:	f7fa f8ec 	bl	800ea64 <vPortYield>
 801488c:	e007      	b.n	801489e <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 801488e:	0020      	movs	r0, r4
 8014890:	3024      	adds	r0, #36	; 0x24
 8014892:	f000 fe7d 	bl	8015590 <xTaskRemoveFromEventList>
 8014896:	2801      	cmp	r0, #1
 8014898:	d101      	bne.n	801489e <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 801489a:	f7fa f8e3 	bl	800ea64 <vPortYield>
				taskEXIT_CRITICAL();
 801489e:	f7fa f8f9 	bl	800ea94 <vPortExitCritical>
				return pdPASS;
 80148a2:	2001      	movs	r0, #1
}
 80148a4:	b004      	add	sp, #16
 80148a6:	bc04      	pop	{r2}
 80148a8:	4691      	mov	r9, r2
 80148aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80148ac:	f7fa f8f2 	bl	800ea94 <vPortExitCritical>
					return errQUEUE_FULL;
 80148b0:	2000      	movs	r0, #0
 80148b2:	e7f7      	b.n	80148a4 <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 80148b4:	a802      	add	r0, sp, #8
 80148b6:	f000 ffab 	bl	8015810 <vTaskSetTimeOutState>
 80148ba:	e016      	b.n	80148ea <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 80148bc:	6467      	str	r7, [r4, #68]	; 0x44
 80148be:	e01d      	b.n	80148fc <xQueueGenericSend+0xda>
 80148c0:	64a7      	str	r7, [r4, #72]	; 0x48
 80148c2:	e01e      	b.n	8014902 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 80148c4:	0020      	movs	r0, r4
 80148c6:	f7ff ff19 	bl	80146fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80148ca:	f000 fd7d 	bl	80153c8 <xTaskResumeAll>
 80148ce:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80148d0:	f7fa f8d4 	bl	800ea7c <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80148d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80148d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80148d8:	4293      	cmp	r3, r2
 80148da:	d3cb      	bcc.n	8014874 <xQueueGenericSend+0x52>
 80148dc:	2d02      	cmp	r5, #2
 80148de:	d0c9      	beq.n	8014874 <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 80148e0:	9b01      	ldr	r3, [sp, #4]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d0e2      	beq.n	80148ac <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 80148e6:	2e00      	cmp	r6, #0
 80148e8:	d0e4      	beq.n	80148b4 <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 80148ea:	f7fa f8d3 	bl	800ea94 <vPortExitCritical>
		vTaskSuspendAll();
 80148ee:	f000 fcc5 	bl	801527c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80148f2:	f7fa f8c3 	bl	800ea7c <vPortEnterCritical>
 80148f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80148f8:	3301      	adds	r3, #1
 80148fa:	d0df      	beq.n	80148bc <xQueueGenericSend+0x9a>
 80148fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80148fe:	3301      	adds	r3, #1
 8014900:	d0de      	beq.n	80148c0 <xQueueGenericSend+0x9e>
 8014902:	f7fa f8c7 	bl	800ea94 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014906:	a901      	add	r1, sp, #4
 8014908:	a802      	add	r0, sp, #8
 801490a:	f000 ff8d 	bl	8015828 <xTaskCheckForTimeOut>
 801490e:	2800      	cmp	r0, #0
 8014910:	d117      	bne.n	8014942 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014912:	f7fa f8b3 	bl	800ea7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014918:	4699      	mov	r9, r3
 801491a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 801491c:	f7fa f8ba 	bl	800ea94 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014920:	45b1      	cmp	r9, r6
 8014922:	d1cf      	bne.n	80148c4 <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014924:	0020      	movs	r0, r4
 8014926:	3010      	adds	r0, #16
 8014928:	9901      	ldr	r1, [sp, #4]
 801492a:	f000 fdcf 	bl	80154cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801492e:	0020      	movs	r0, r4
 8014930:	f7ff fee4 	bl	80146fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014934:	f000 fd48 	bl	80153c8 <xTaskResumeAll>
 8014938:	2800      	cmp	r0, #0
 801493a:	d1c8      	bne.n	80148ce <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 801493c:	f7fa f892 	bl	800ea64 <vPortYield>
 8014940:	e7c5      	b.n	80148ce <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 8014942:	0020      	movs	r0, r4
 8014944:	f7ff feda 	bl	80146fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014948:	f000 fd3e 	bl	80153c8 <xTaskResumeAll>
			return errQUEUE_FULL;
 801494c:	2000      	movs	r0, #0
 801494e:	e7a9      	b.n	80148a4 <xQueueGenericSend+0x82>

08014950 <xQueuePeekFromISR>:
{
 8014950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014952:	0004      	movs	r4, r0
 8014954:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 8014956:	2800      	cmp	r0, #0
 8014958:	d006      	beq.n	8014968 <xQueuePeekFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801495a:	2900      	cmp	r1, #0
 801495c:	d106      	bne.n	801496c <xQueuePeekFromISR+0x1c>
 801495e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014960:	2b00      	cmp	r3, #0
 8014962:	d006      	beq.n	8014972 <xQueuePeekFromISR+0x22>
 8014964:	b672      	cpsid	i
 8014966:	e7fe      	b.n	8014966 <xQueuePeekFromISR+0x16>
	configASSERT( pxQueue );
 8014968:	b672      	cpsid	i
 801496a:	e7fe      	b.n	801496a <xQueuePeekFromISR+0x1a>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 801496c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801496e:	2b00      	cmp	r3, #0
 8014970:	d101      	bne.n	8014976 <xQueuePeekFromISR+0x26>
 8014972:	b672      	cpsid	i
 8014974:	e7fe      	b.n	8014974 <xQueuePeekFromISR+0x24>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014976:	f7fa f89d 	bl	800eab4 <ulSetInterruptMaskFromISR>
 801497a:	0007      	movs	r7, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 801497c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 801497e:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014980:	42ab      	cmp	r3, r5
 8014982:	d006      	beq.n	8014992 <xQueuePeekFromISR+0x42>
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8014984:	68e5      	ldr	r5, [r4, #12]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014986:	0031      	movs	r1, r6
 8014988:	0020      	movs	r0, r4
 801498a:	f7ff ff38 	bl	80147fe <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 801498e:	60e5      	str	r5, [r4, #12]
			xReturn = pdPASS;
 8014990:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8014992:	0038      	movs	r0, r7
 8014994:	f7fa f893 	bl	800eabe <vClearInterruptMaskFromISR>
}
 8014998:	0028      	movs	r0, r5
 801499a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801499c <xQueueGenericReceive>:
{
 801499c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801499e:	46c6      	mov	lr, r8
 80149a0:	b500      	push	{lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	0004      	movs	r4, r0
 80149a6:	000e      	movs	r6, r1
 80149a8:	9201      	str	r2, [sp, #4]
 80149aa:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 80149ac:	2800      	cmp	r0, #0
 80149ae:	d006      	beq.n	80149be <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80149b0:	2900      	cmp	r1, #0
 80149b2:	d106      	bne.n	80149c2 <xQueueGenericReceive+0x26>
 80149b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d003      	beq.n	80149c2 <xQueueGenericReceive+0x26>
 80149ba:	b672      	cpsid	i
 80149bc:	e7fe      	b.n	80149bc <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 80149be:	b672      	cpsid	i
 80149c0:	e7fe      	b.n	80149c0 <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80149c2:	f000 ff67 	bl	8015894 <xTaskGetSchedulerState>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d104      	bne.n	80149d4 <xQueueGenericReceive+0x38>
 80149ca:	9b01      	ldr	r3, [sp, #4]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d004      	beq.n	80149da <xQueueGenericReceive+0x3e>
 80149d0:	b672      	cpsid	i
 80149d2:	e7fe      	b.n	80149d2 <xQueueGenericReceive+0x36>
 80149d4:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80149d6:	2700      	movs	r7, #0
 80149d8:	e04b      	b.n	8014a72 <xQueueGenericReceive+0xd6>
 80149da:	2500      	movs	r5, #0
 80149dc:	e7fb      	b.n	80149d6 <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80149de:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80149e0:	0031      	movs	r1, r6
 80149e2:	0020      	movs	r0, r4
 80149e4:	f7ff ff0b 	bl	80147fe <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80149e8:	4643      	mov	r3, r8
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d11a      	bne.n	8014a24 <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 80149ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80149f0:	3b01      	subs	r3, #1
 80149f2:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80149f4:	6823      	ldr	r3, [r4, #0]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d102      	bne.n	8014a00 <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80149fa:	f7f9 ff67 	bl	800e8cc <pvTaskIncrementMutexHeldCount>
 80149fe:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a00:	6923      	ldr	r3, [r4, #16]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d007      	beq.n	8014a16 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8014a06:	0020      	movs	r0, r4
 8014a08:	3010      	adds	r0, #16
 8014a0a:	f000 fdc1 	bl	8015590 <xTaskRemoveFromEventList>
 8014a0e:	2801      	cmp	r0, #1
 8014a10:	d101      	bne.n	8014a16 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 8014a12:	f7fa f827 	bl	800ea64 <vPortYield>
				taskEXIT_CRITICAL();
 8014a16:	f7fa f83d 	bl	800ea94 <vPortExitCritical>
				return pdPASS;
 8014a1a:	2001      	movs	r0, #1
}
 8014a1c:	b004      	add	sp, #16
 8014a1e:	bc04      	pop	{r2}
 8014a20:	4690      	mov	r8, r2
 8014a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8014a24:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d0f4      	beq.n	8014a16 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014a2c:	0020      	movs	r0, r4
 8014a2e:	3024      	adds	r0, #36	; 0x24
 8014a30:	f000 fdae 	bl	8015590 <xTaskRemoveFromEventList>
 8014a34:	2800      	cmp	r0, #0
 8014a36:	d0ee      	beq.n	8014a16 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 8014a38:	f7fa f814 	bl	800ea64 <vPortYield>
 8014a3c:	e7eb      	b.n	8014a16 <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 8014a3e:	f7fa f829 	bl	800ea94 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8014a42:	2000      	movs	r0, #0
 8014a44:	e7ea      	b.n	8014a1c <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 8014a46:	a802      	add	r0, sp, #8
 8014a48:	f000 fee2 	bl	8015810 <vTaskSetTimeOutState>
 8014a4c:	e01b      	b.n	8014a86 <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 8014a4e:	6467      	str	r7, [r4, #68]	; 0x44
 8014a50:	e022      	b.n	8014a98 <xQueueGenericReceive+0xfc>
 8014a52:	64a7      	str	r7, [r4, #72]	; 0x48
 8014a54:	e023      	b.n	8014a9e <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 8014a56:	f7fa f811 	bl	800ea7c <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8014a5a:	6860      	ldr	r0, [r4, #4]
 8014a5c:	f000 ff28 	bl	80158b0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8014a60:	f7fa f818 	bl	800ea94 <vPortExitCritical>
 8014a64:	e02d      	b.n	8014ac2 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 8014a66:	0020      	movs	r0, r4
 8014a68:	f7ff fe48 	bl	80146fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014a6c:	f000 fcac 	bl	80153c8 <xTaskResumeAll>
 8014a70:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8014a72:	f7fa f803 	bl	800ea7c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014a76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d1b0      	bne.n	80149de <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 8014a7c:	9b01      	ldr	r3, [sp, #4]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d0dd      	beq.n	8014a3e <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 8014a82:	2d00      	cmp	r5, #0
 8014a84:	d0df      	beq.n	8014a46 <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 8014a86:	f7fa f805 	bl	800ea94 <vPortExitCritical>
		vTaskSuspendAll();
 8014a8a:	f000 fbf7 	bl	801527c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014a8e:	f7f9 fff5 	bl	800ea7c <vPortEnterCritical>
 8014a92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014a94:	3301      	adds	r3, #1
 8014a96:	d0da      	beq.n	8014a4e <xQueueGenericReceive+0xb2>
 8014a98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	d0d9      	beq.n	8014a52 <xQueueGenericReceive+0xb6>
 8014a9e:	f7f9 fff9 	bl	800ea94 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014aa2:	a901      	add	r1, sp, #4
 8014aa4:	a802      	add	r0, sp, #8
 8014aa6:	f000 febf 	bl	8015828 <xTaskCheckForTimeOut>
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	d118      	bne.n	8014ae0 <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 8014aae:	f7f9 ffe5 	bl	800ea7c <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014ab2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8014ab4:	f7f9 ffee 	bl	800ea94 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014ab8:	2d00      	cmp	r5, #0
 8014aba:	d1d4      	bne.n	8014a66 <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014abc:	6823      	ldr	r3, [r4, #0]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d0c9      	beq.n	8014a56 <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014ac2:	0020      	movs	r0, r4
 8014ac4:	3024      	adds	r0, #36	; 0x24
 8014ac6:	9901      	ldr	r1, [sp, #4]
 8014ac8:	f000 fd00 	bl	80154cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014acc:	0020      	movs	r0, r4
 8014ace:	f7ff fe15 	bl	80146fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014ad2:	f000 fc79 	bl	80153c8 <xTaskResumeAll>
 8014ad6:	2800      	cmp	r0, #0
 8014ad8:	d1ca      	bne.n	8014a70 <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 8014ada:	f7f9 ffc3 	bl	800ea64 <vPortYield>
 8014ade:	e7c7      	b.n	8014a70 <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8014ae0:	0020      	movs	r0, r4
 8014ae2:	f7ff fe0b 	bl	80146fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014ae6:	f000 fc6f 	bl	80153c8 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 8014aea:	2000      	movs	r0, #0
 8014aec:	e796      	b.n	8014a1c <xQueueGenericReceive+0x80>

08014aee <uxQueueMessagesWaiting>:
{
 8014aee:	b510      	push	{r4, lr}
 8014af0:	1e04      	subs	r4, r0, #0
	configASSERT( xQueue );
 8014af2:	d101      	bne.n	8014af8 <uxQueueMessagesWaiting+0xa>
 8014af4:	b672      	cpsid	i
 8014af6:	e7fe      	b.n	8014af6 <uxQueueMessagesWaiting+0x8>
	taskENTER_CRITICAL();
 8014af8:	f7f9 ffc0 	bl	800ea7c <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014afc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8014afe:	f7f9 ffc9 	bl	800ea94 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014b02:	0020      	movs	r0, r4
 8014b04:	bd10      	pop	{r4, pc}

08014b06 <uxQueueSpacesAvailable>:
{
 8014b06:	b570      	push	{r4, r5, r6, lr}
 8014b08:	1e05      	subs	r5, r0, #0
	configASSERT( pxQueue );
 8014b0a:	d101      	bne.n	8014b10 <uxQueueSpacesAvailable+0xa>
 8014b0c:	b672      	cpsid	i
 8014b0e:	e7fe      	b.n	8014b0e <uxQueueSpacesAvailable+0x8>
	taskENTER_CRITICAL();
 8014b10:	f7f9 ffb4 	bl	800ea7c <vPortEnterCritical>
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8014b14:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8014b16:	6bec      	ldr	r4, [r5, #60]	; 0x3c
 8014b18:	1ae4      	subs	r4, r4, r3
	taskEXIT_CRITICAL();
 8014b1a:	f7f9 ffbb 	bl	800ea94 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014b1e:	0020      	movs	r0, r4
 8014b20:	bd70      	pop	{r4, r5, r6, pc}

08014b22 <xQueueGenericSendFromISR>:
{
 8014b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b24:	b083      	sub	sp, #12
 8014b26:	0004      	movs	r4, r0
 8014b28:	000d      	movs	r5, r1
 8014b2a:	0016      	movs	r6, r2
 8014b2c:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 8014b2e:	2800      	cmp	r0, #0
 8014b30:	d006      	beq.n	8014b40 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014b32:	2900      	cmp	r1, #0
 8014b34:	d106      	bne.n	8014b44 <xQueueGenericSendFromISR+0x22>
 8014b36:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d003      	beq.n	8014b44 <xQueueGenericSendFromISR+0x22>
 8014b3c:	b672      	cpsid	i
 8014b3e:	e7fe      	b.n	8014b3e <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 8014b40:	b672      	cpsid	i
 8014b42:	e7fe      	b.n	8014b42 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014b44:	2f02      	cmp	r7, #2
 8014b46:	d12a      	bne.n	8014b9e <xQueueGenericSendFromISR+0x7c>
 8014b48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014b4a:	2b01      	cmp	r3, #1
 8014b4c:	d011      	beq.n	8014b72 <xQueueGenericSendFromISR+0x50>
 8014b4e:	b672      	cpsid	i
 8014b50:	e7fe      	b.n	8014b50 <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 8014b52:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d01b      	beq.n	8014b92 <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014b5a:	0020      	movs	r0, r4
 8014b5c:	3024      	adds	r0, #36	; 0x24
 8014b5e:	f000 fd17 	bl	8015590 <xTaskRemoveFromEventList>
 8014b62:	2800      	cmp	r0, #0
 8014b64:	d015      	beq.n	8014b92 <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 8014b66:	2e00      	cmp	r6, #0
 8014b68:	d001      	beq.n	8014b6e <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014b6a:	6035      	str	r5, [r6, #0]
 8014b6c:	e011      	b.n	8014b92 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 8014b6e:	2501      	movs	r5, #1
 8014b70:	e00f      	b.n	8014b92 <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014b72:	f7f9 ff9f 	bl	800eab4 <ulSetInterruptMaskFromISR>
 8014b76:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014b78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014b7a:	003a      	movs	r2, r7
 8014b7c:	0029      	movs	r1, r5
 8014b7e:	0020      	movs	r0, r4
 8014b80:	f7ff fdff 	bl	8014782 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 8014b84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014b86:	3301      	adds	r3, #1
 8014b88:	d0e3      	beq.n	8014b52 <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 8014b8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014b8c:	3301      	adds	r3, #1
 8014b8e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 8014b90:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8014b92:	9801      	ldr	r0, [sp, #4]
 8014b94:	f7f9 ff93 	bl	800eabe <vClearInterruptMaskFromISR>
}
 8014b98:	0028      	movs	r0, r5
 8014b9a:	b003      	add	sp, #12
 8014b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014b9e:	f7f9 ff89 	bl	800eab4 <ulSetInterruptMaskFromISR>
 8014ba2:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014ba4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014ba6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8014ba8:	4293      	cmp	r3, r2
 8014baa:	d3e6      	bcc.n	8014b7a <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 8014bac:	2500      	movs	r5, #0
 8014bae:	e7f0      	b.n	8014b92 <xQueueGenericSendFromISR+0x70>

08014bb0 <xQueueGiveFromISR>:
{
 8014bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bb2:	0004      	movs	r4, r0
 8014bb4:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 8014bb6:	2800      	cmp	r0, #0
 8014bb8:	d004      	beq.n	8014bc4 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 8014bba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d003      	beq.n	8014bc8 <xQueueGiveFromISR+0x18>
 8014bc0:	b672      	cpsid	i
 8014bc2:	e7fe      	b.n	8014bc2 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 8014bc4:	b672      	cpsid	i
 8014bc6:	e7fe      	b.n	8014bc6 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8014bc8:	6803      	ldr	r3, [r0, #0]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d01f      	beq.n	8014c0e <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014bce:	f7f9 ff71 	bl	800eab4 <ulSetInterruptMaskFromISR>
 8014bd2:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8014bd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 8014bd6:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8014bd8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8014bda:	4293      	cmp	r3, r2
 8014bdc:	d212      	bcs.n	8014c04 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 8014bde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014be0:	3301      	adds	r3, #1
 8014be2:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 8014be4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014be6:	3301      	adds	r3, #1
 8014be8:	d116      	bne.n	8014c18 <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 8014bea:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d008      	beq.n	8014c04 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014bf2:	0020      	movs	r0, r4
 8014bf4:	3024      	adds	r0, #36	; 0x24
 8014bf6:	f000 fccb 	bl	8015590 <xTaskRemoveFromEventList>
 8014bfa:	2800      	cmp	r0, #0
 8014bfc:	d002      	beq.n	8014c04 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 8014bfe:	2f00      	cmp	r7, #0
 8014c00:	d00f      	beq.n	8014c22 <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014c02:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8014c04:	0030      	movs	r0, r6
 8014c06:	f7f9 ff5a 	bl	800eabe <vClearInterruptMaskFromISR>
}
 8014c0a:	0028      	movs	r0, r5
 8014c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8014c0e:	6843      	ldr	r3, [r0, #4]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d0dc      	beq.n	8014bce <xQueueGiveFromISR+0x1e>
 8014c14:	b672      	cpsid	i
 8014c16:	e7fe      	b.n	8014c16 <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 8014c18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 8014c1e:	2501      	movs	r5, #1
 8014c20:	e7f0      	b.n	8014c04 <xQueueGiveFromISR+0x54>
 8014c22:	2501      	movs	r5, #1
 8014c24:	e7ee      	b.n	8014c04 <xQueueGiveFromISR+0x54>

08014c26 <xQueueReceiveFromISR>:
{
 8014c26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c28:	b083      	sub	sp, #12
 8014c2a:	0004      	movs	r4, r0
 8014c2c:	000f      	movs	r7, r1
 8014c2e:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 8014c30:	2800      	cmp	r0, #0
 8014c32:	d006      	beq.n	8014c42 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014c34:	2900      	cmp	r1, #0
 8014c36:	d106      	bne.n	8014c46 <xQueueReceiveFromISR+0x20>
 8014c38:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d003      	beq.n	8014c46 <xQueueReceiveFromISR+0x20>
 8014c3e:	b672      	cpsid	i
 8014c40:	e7fe      	b.n	8014c40 <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 8014c42:	b672      	cpsid	i
 8014c44:	e7fe      	b.n	8014c44 <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014c46:	f7f9 ff35 	bl	800eab4 <ulSetInterruptMaskFromISR>
 8014c4a:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 8014c4e:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d01b      	beq.n	8014c8c <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014c54:	0039      	movs	r1, r7
 8014c56:	0020      	movs	r0, r4
 8014c58:	f7ff fdd1 	bl	80147fe <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8014c5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014c5e:	3b01      	subs	r3, #1
 8014c60:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 8014c62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014c64:	3301      	adds	r3, #1
 8014c66:	d004      	beq.n	8014c72 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 8014c68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014c6a:	3301      	adds	r3, #1
 8014c6c:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8014c6e:	2501      	movs	r5, #1
 8014c70:	e00c      	b.n	8014c8c <xQueueReceiveFromISR+0x66>
 8014c72:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c74:	6923      	ldr	r3, [r4, #16]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d008      	beq.n	8014c8c <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c7a:	0020      	movs	r0, r4
 8014c7c:	3010      	adds	r0, #16
 8014c7e:	f000 fc87 	bl	8015590 <xTaskRemoveFromEventList>
 8014c82:	2800      	cmp	r0, #0
 8014c84:	d002      	beq.n	8014c8c <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 8014c86:	2e00      	cmp	r6, #0
 8014c88:	d006      	beq.n	8014c98 <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014c8a:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8014c8c:	9801      	ldr	r0, [sp, #4]
 8014c8e:	f7f9 ff16 	bl	800eabe <vClearInterruptMaskFromISR>
}
 8014c92:	0028      	movs	r0, r5
 8014c94:	b003      	add	sp, #12
 8014c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 8014c98:	2501      	movs	r5, #1
 8014c9a:	e7f7      	b.n	8014c8c <xQueueReceiveFromISR+0x66>

08014c9c <xQueueIsQueueEmptyFromISR>:
	configASSERT( xQueue );
 8014c9c:	2800      	cmp	r0, #0
 8014c9e:	d003      	beq.n	8014ca8 <xQueueIsQueueEmptyFromISR+0xc>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8014ca0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8014ca2:	4243      	negs	r3, r0
 8014ca4:	4158      	adcs	r0, r3
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014ca6:	4770      	bx	lr
	configASSERT( xQueue );
 8014ca8:	b672      	cpsid	i
 8014caa:	e7fe      	b.n	8014caa <xQueueIsQueueEmptyFromISR+0xe>

08014cac <xQueueIsQueueFullFromISR>:

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
 8014cac:	2800      	cmp	r0, #0
 8014cae:	d005      	beq.n	8014cbc <xQueueIsQueueFullFromISR+0x10>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 8014cb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014cb2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8014cb4:	1ac0      	subs	r0, r0, r3
 8014cb6:	4243      	negs	r3, r0
 8014cb8:	4158      	adcs	r0, r3
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014cba:	4770      	bx	lr
	configASSERT( xQueue );
 8014cbc:	b672      	cpsid	i
 8014cbe:	e7fe      	b.n	8014cbe <xQueueIsQueueFullFromISR+0x12>

08014cc0 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8014cc0:	2800      	cmp	r0, #0
 8014cc2:	d001      	beq.n	8014cc8 <uxQueueMessagesWaitingFromISR+0x8>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014cc4:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014cc6:	4770      	bx	lr
	configASSERT( xQueue );
 8014cc8:	b672      	cpsid	i
 8014cca:	e7fe      	b.n	8014cca <uxQueueMessagesWaitingFromISR+0xa>

08014ccc <xQueueCreateMutex>:
	{
 8014ccc:	b570      	push	{r4, r5, r6, lr}
 8014cce:	0005      	movs	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8014cd0:	2054      	movs	r0, #84	; 0x54
 8014cd2:	f001 fa4d 	bl	8016170 <pvPortMalloc>
 8014cd6:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 8014cd8:	d01c      	beq.n	8014d14 <xQueueCreateMutex+0x48>
			pxNewQueue->pxMutexHolder = NULL;
 8014cda:	2300      	movs	r3, #0
 8014cdc:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8014cde:	6003      	str	r3, [r0, #0]
			pxNewQueue->pcWriteTo = NULL;
 8014ce0:	6083      	str	r3, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 8014ce2:	60c3      	str	r3, [r0, #12]
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014ce4:	6383      	str	r3, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 8014ce6:	2201      	movs	r2, #1
 8014ce8:	63c2      	str	r2, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 8014cea:	6403      	str	r3, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 8014cec:	3b01      	subs	r3, #1
 8014cee:	6443      	str	r3, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 8014cf0:	6483      	str	r3, [r0, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
 8014cf2:	3351      	adds	r3, #81	; 0x51
 8014cf4:	54c5      	strb	r5, [r0, r3]
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8014cf6:	3010      	adds	r0, #16
 8014cf8:	f7f9 fcfe 	bl	800e6f8 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8014cfc:	0020      	movs	r0, r4
 8014cfe:	3024      	adds	r0, #36	; 0x24
 8014d00:	f7f9 fcfa 	bl	800e6f8 <vListInitialise>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014d04:	2300      	movs	r3, #0
 8014d06:	2200      	movs	r2, #0
 8014d08:	2100      	movs	r1, #0
 8014d0a:	0020      	movs	r0, r4
 8014d0c:	f7ff fd89 	bl	8014822 <xQueueGenericSend>
	}
 8014d10:	0020      	movs	r0, r4
 8014d12:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxNewQueue );
 8014d14:	b672      	cpsid	i
 8014d16:	e7fe      	b.n	8014d16 <xQueueCreateMutex+0x4a>

08014d18 <xQueueTakeMutexRecursive>:
	{
 8014d18:	b570      	push	{r4, r5, r6, lr}
 8014d1a:	0004      	movs	r4, r0
 8014d1c:	000d      	movs	r5, r1
		configASSERT( pxMutex );
 8014d1e:	2800      	cmp	r0, #0
 8014d20:	d101      	bne.n	8014d26 <xQueueTakeMutexRecursive+0xe>
 8014d22:	b672      	cpsid	i
 8014d24:	e7fe      	b.n	8014d24 <xQueueTakeMutexRecursive+0xc>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8014d26:	6846      	ldr	r6, [r0, #4]
 8014d28:	f000 fd6c 	bl	8015804 <xTaskGetCurrentTaskHandle>
 8014d2c:	4286      	cmp	r6, r0
 8014d2e:	d008      	beq.n	8014d42 <xQueueTakeMutexRecursive+0x2a>
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 8014d30:	2300      	movs	r3, #0
 8014d32:	002a      	movs	r2, r5
 8014d34:	2100      	movs	r1, #0
 8014d36:	0020      	movs	r0, r4
 8014d38:	f7ff fe30 	bl	801499c <xQueueGenericReceive>
			if( xReturn == pdPASS )
 8014d3c:	2801      	cmp	r0, #1
 8014d3e:	d005      	beq.n	8014d4c <xQueueTakeMutexRecursive+0x34>
	}
 8014d40:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.uxRecursiveCallCount )++;
 8014d42:	68e3      	ldr	r3, [r4, #12]
 8014d44:	3301      	adds	r3, #1
 8014d46:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8014d48:	2001      	movs	r0, #1
 8014d4a:	e7f9      	b.n	8014d40 <xQueueTakeMutexRecursive+0x28>
				( pxMutex->u.uxRecursiveCallCount )++;
 8014d4c:	68e3      	ldr	r3, [r4, #12]
 8014d4e:	3301      	adds	r3, #1
 8014d50:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8014d52:	e7f5      	b.n	8014d40 <xQueueTakeMutexRecursive+0x28>

08014d54 <xQueueGiveMutexRecursive>:
	{
 8014d54:	b570      	push	{r4, r5, r6, lr}
 8014d56:	1e04      	subs	r4, r0, #0
		configASSERT( pxMutex );
 8014d58:	d101      	bne.n	8014d5e <xQueueGiveMutexRecursive+0xa>
 8014d5a:	b672      	cpsid	i
 8014d5c:	e7fe      	b.n	8014d5c <xQueueGiveMutexRecursive+0x8>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8014d5e:	6845      	ldr	r5, [r0, #4]
 8014d60:	f000 fd50 	bl	8015804 <xTaskGetCurrentTaskHandle>
			xReturn = pdFAIL;
 8014d64:	2200      	movs	r2, #0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8014d66:	4285      	cmp	r5, r0
 8014d68:	d001      	beq.n	8014d6e <xQueueGiveMutexRecursive+0x1a>
	}
 8014d6a:	0010      	movs	r0, r2
 8014d6c:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.uxRecursiveCallCount )--;
 8014d6e:	68e3      	ldr	r3, [r4, #12]
 8014d70:	3b01      	subs	r3, #1
 8014d72:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8014d74:	3201      	adds	r2, #1
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d1f7      	bne.n	8014d6a <xQueueGiveMutexRecursive+0x16>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8014d7a:	001a      	movs	r2, r3
 8014d7c:	0019      	movs	r1, r3
 8014d7e:	0020      	movs	r0, r4
 8014d80:	f7ff fd4f 	bl	8014822 <xQueueGenericSend>
			xReturn = pdPASS;
 8014d84:	2201      	movs	r2, #1
 8014d86:	e7f0      	b.n	8014d6a <xQueueGiveMutexRecursive+0x16>

08014d88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014d88:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014d8a:	4b0a      	ldr	r3, [pc, #40]	; (8014db4 <vQueueAddToRegistry+0x2c>)
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d009      	beq.n	8014da6 <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014d92:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014d94:	4c07      	ldr	r4, [pc, #28]	; (8014db4 <vQueueAddToRegistry+0x2c>)
 8014d96:	00da      	lsls	r2, r3, #3
 8014d98:	58a2      	ldr	r2, [r4, r2]
 8014d9a:	2a00      	cmp	r2, #0
 8014d9c:	d004      	beq.n	8014da8 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014d9e:	3301      	adds	r3, #1
 8014da0:	2b08      	cmp	r3, #8
 8014da2:	d1f8      	bne.n	8014d96 <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014da4:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014da6:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014da8:	4a02      	ldr	r2, [pc, #8]	; (8014db4 <vQueueAddToRegistry+0x2c>)
 8014daa:	00db      	lsls	r3, r3, #3
 8014dac:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014dae:	18d3      	adds	r3, r2, r3
 8014db0:	6058      	str	r0, [r3, #4]
				break;
 8014db2:	e7f7      	b.n	8014da4 <vQueueAddToRegistry+0x1c>
 8014db4:	200065b4 	.word	0x200065b4

08014db8 <vQueueUnregisterQueue>:

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014db8:	4b09      	ldr	r3, [pc, #36]	; (8014de0 <vQueueUnregisterQueue+0x28>)
 8014dba:	685b      	ldr	r3, [r3, #4]
 8014dbc:	4298      	cmp	r0, r3
 8014dbe:	d009      	beq.n	8014dd4 <vQueueUnregisterQueue+0x1c>
 8014dc0:	4a07      	ldr	r2, [pc, #28]	; (8014de0 <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014dc2:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014dc4:	68d1      	ldr	r1, [r2, #12]
 8014dc6:	4281      	cmp	r1, r0
 8014dc8:	d005      	beq.n	8014dd6 <vQueueUnregisterQueue+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014dca:	3301      	adds	r3, #1
 8014dcc:	3208      	adds	r2, #8
 8014dce:	2b08      	cmp	r3, #8
 8014dd0:	d1f8      	bne.n	8014dc4 <vQueueUnregisterQueue+0xc>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014dd2:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014dd4:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8014dd6:	00db      	lsls	r3, r3, #3
 8014dd8:	4a01      	ldr	r2, [pc, #4]	; (8014de0 <vQueueUnregisterQueue+0x28>)
 8014dda:	2100      	movs	r1, #0
 8014ddc:	5099      	str	r1, [r3, r2]
				break;
 8014dde:	e7f8      	b.n	8014dd2 <vQueueUnregisterQueue+0x1a>
 8014de0:	200065b4 	.word	0x200065b4

08014de4 <vQueueDelete>:
{
 8014de4:	b510      	push	{r4, lr}
 8014de6:	1e04      	subs	r4, r0, #0
	configASSERT( pxQueue );
 8014de8:	d101      	bne.n	8014dee <vQueueDelete+0xa>
 8014dea:	b672      	cpsid	i
 8014dec:	e7fe      	b.n	8014dec <vQueueDelete+0x8>
		vQueueUnregisterQueue( pxQueue );
 8014dee:	f7ff ffe3 	bl	8014db8 <vQueueUnregisterQueue>
	vPortFree( pxQueue );
 8014df2:	0020      	movs	r0, r4
 8014df4:	f001 fa52 	bl	801629c <vPortFree>
}
 8014df8:	bd10      	pop	{r4, pc}

08014dfa <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 8014dfa:	b570      	push	{r4, r5, r6, lr}
 8014dfc:	0004      	movs	r4, r0
 8014dfe:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014e00:	f7f9 fe3c 	bl	800ea7c <vPortEnterCritical>
 8014e04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014e06:	3301      	adds	r3, #1
 8014e08:	d00b      	beq.n	8014e22 <vQueueWaitForMessageRestricted+0x28>
 8014e0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014e0c:	3301      	adds	r3, #1
 8014e0e:	d00b      	beq.n	8014e28 <vQueueWaitForMessageRestricted+0x2e>
 8014e10:	f7f9 fe40 	bl	800ea94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014e14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d009      	beq.n	8014e2e <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014e1a:	0020      	movs	r0, r4
 8014e1c:	f7ff fc6e 	bl	80146fc <prvUnlockQueue>
	}
 8014e20:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8014e22:	2300      	movs	r3, #0
 8014e24:	6463      	str	r3, [r4, #68]	; 0x44
 8014e26:	e7f0      	b.n	8014e0a <vQueueWaitForMessageRestricted+0x10>
 8014e28:	2300      	movs	r3, #0
 8014e2a:	64a3      	str	r3, [r4, #72]	; 0x48
 8014e2c:	e7f0      	b.n	8014e10 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014e2e:	0020      	movs	r0, r4
 8014e30:	3024      	adds	r0, #36	; 0x24
 8014e32:	0029      	movs	r1, r5
 8014e34:	f000 fb96 	bl	8015564 <vTaskPlaceOnEventListRestricted>
 8014e38:	e7ef      	b.n	8014e1a <vQueueWaitForMessageRestricted+0x20>

08014e3a <xQueueGenericReset>:
{
 8014e3a:	b570      	push	{r4, r5, r6, lr}
 8014e3c:	0004      	movs	r4, r0
 8014e3e:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 8014e40:	2800      	cmp	r0, #0
 8014e42:	d101      	bne.n	8014e48 <xQueueGenericReset+0xe>
 8014e44:	b672      	cpsid	i
 8014e46:	e7fe      	b.n	8014e46 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 8014e48:	f7f9 fe18 	bl	800ea7c <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8014e4c:	6822      	ldr	r2, [r4, #0]
 8014e4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014e50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014e52:	434b      	muls	r3, r1
 8014e54:	18d0      	adds	r0, r2, r3
 8014e56:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014e58:	2000      	movs	r0, #0
 8014e5a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014e5c:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8014e5e:	1a5b      	subs	r3, r3, r1
 8014e60:	18d3      	adds	r3, r2, r3
 8014e62:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8014e64:	2301      	movs	r3, #1
 8014e66:	425b      	negs	r3, r3
 8014e68:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8014e6a:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 8014e6c:	2d00      	cmp	r5, #0
 8014e6e:	d10f      	bne.n	8014e90 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014e70:	6923      	ldr	r3, [r4, #16]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d103      	bne.n	8014e7e <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 8014e76:	f7f9 fe0d 	bl	800ea94 <vPortExitCritical>
}
 8014e7a:	2001      	movs	r0, #1
 8014e7c:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8014e7e:	0020      	movs	r0, r4
 8014e80:	3010      	adds	r0, #16
 8014e82:	f000 fb85 	bl	8015590 <xTaskRemoveFromEventList>
 8014e86:	2801      	cmp	r0, #1
 8014e88:	d1f5      	bne.n	8014e76 <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 8014e8a:	f7f9 fdeb 	bl	800ea64 <vPortYield>
 8014e8e:	e7f2      	b.n	8014e76 <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014e90:	0020      	movs	r0, r4
 8014e92:	3010      	adds	r0, #16
 8014e94:	f7f9 fc30 	bl	800e6f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014e98:	0020      	movs	r0, r4
 8014e9a:	3024      	adds	r0, #36	; 0x24
 8014e9c:	f7f9 fc2c 	bl	800e6f8 <vListInitialise>
 8014ea0:	e7e9      	b.n	8014e76 <xQueueGenericReset+0x3c>

08014ea2 <xQueueGenericCreate>:
{
 8014ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ea4:	0005      	movs	r5, r0
 8014ea6:	000e      	movs	r6, r1
 8014ea8:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014eaa:	2800      	cmp	r0, #0
 8014eac:	d101      	bne.n	8014eb2 <xQueueGenericCreate+0x10>
 8014eae:	b672      	cpsid	i
 8014eb0:	e7fe      	b.n	8014eb0 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8014eb2:	2900      	cmp	r1, #0
 8014eb4:	d00c      	beq.n	8014ed0 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014eb6:	0008      	movs	r0, r1
 8014eb8:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8014eba:	3055      	adds	r0, #85	; 0x55
 8014ebc:	f001 f958 	bl	8016170 <pvPortMalloc>
 8014ec0:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 8014ec2:	d101      	bne.n	8014ec8 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 8014ec4:	b672      	cpsid	i
 8014ec6:	e7fe      	b.n	8014ec6 <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 8014ec8:	0003      	movs	r3, r0
 8014eca:	3354      	adds	r3, #84	; 0x54
 8014ecc:	6003      	str	r3, [r0, #0]
 8014ece:	e005      	b.n	8014edc <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8014ed0:	2054      	movs	r0, #84	; 0x54
 8014ed2:	f001 f94d 	bl	8016170 <pvPortMalloc>
 8014ed6:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 8014ed8:	d0f4      	beq.n	8014ec4 <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014eda:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 8014edc:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 8014ede:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014ee0:	2101      	movs	r1, #1
 8014ee2:	0020      	movs	r0, r4
 8014ee4:	f7ff ffa9 	bl	8014e3a <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 8014ee8:	2350      	movs	r3, #80	; 0x50
 8014eea:	54e7      	strb	r7, [r4, r3]
}
 8014eec:	0020      	movs	r0, r4
 8014eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014ef0 <xQueueCreateCountingSemaphore>:
	{
 8014ef0:	b510      	push	{r4, lr}
 8014ef2:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 8014ef4:	2800      	cmp	r0, #0
 8014ef6:	d101      	bne.n	8014efc <xQueueCreateCountingSemaphore+0xc>
 8014ef8:	b672      	cpsid	i
 8014efa:	e7fe      	b.n	8014efa <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014efc:	4288      	cmp	r0, r1
 8014efe:	d201      	bcs.n	8014f04 <xQueueCreateCountingSemaphore+0x14>
 8014f00:	b672      	cpsid	i
 8014f02:	e7fe      	b.n	8014f02 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014f04:	2202      	movs	r2, #2
 8014f06:	2100      	movs	r1, #0
 8014f08:	f7ff ffcb 	bl	8014ea2 <xQueueGenericCreate>
		if( xHandle != NULL )
 8014f0c:	2800      	cmp	r0, #0
 8014f0e:	d001      	beq.n	8014f14 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014f10:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8014f12:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 8014f14:	b672      	cpsid	i
 8014f16:	e7fe      	b.n	8014f16 <xQueueCreateCountingSemaphore+0x26>

08014f18 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8014f18:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
 8014f1a:	4770      	bx	lr

08014f1c <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8014f1c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
 8014f1e:	4770      	bx	lr

08014f20 <ucQueueGetQueueType>:
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8014f20:	2350      	movs	r3, #80	; 0x50
 8014f22:	5cc0      	ldrb	r0, [r0, r3]
	}
 8014f24:	4770      	bx	lr
 8014f26:	46c0      	nop			; (mov r8, r8)

08014f28 <prvListTaskWithinSingleList>:
	{
 8014f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f2a:	46d6      	mov	lr, sl
 8014f2c:	464f      	mov	r7, r9
 8014f2e:	4646      	mov	r6, r8
 8014f30:	b5c0      	push	{r6, r7, lr}
 8014f32:	0006      	movs	r6, r0
 8014f34:	4694      	mov	ip, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8014f36:	6808      	ldr	r0, [r1, #0]
 8014f38:	2800      	cmp	r0, #0
 8014f3a:	d044      	beq.n	8014fc6 <prvListTaskWithinSingleList+0x9e>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8014f3c:	684b      	ldr	r3, [r1, #4]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	604b      	str	r3, [r1, #4]
 8014f42:	2208      	movs	r2, #8
 8014f44:	4690      	mov	r8, r2
 8014f46:	4488      	add	r8, r1
 8014f48:	4543      	cmp	r3, r8
 8014f4a:	d006      	beq.n	8014f5a <prvListTaskWithinSingleList+0x32>
 8014f4c:	684b      	ldr	r3, [r1, #4]
 8014f4e:	68db      	ldr	r3, [r3, #12]
 8014f50:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 8014f52:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 8014f54:	2302      	movs	r3, #2
 8014f56:	469a      	mov	sl, r3
 8014f58:	e018      	b.n	8014f8c <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8014f5a:	68cb      	ldr	r3, [r1, #12]
 8014f5c:	604b      	str	r3, [r1, #4]
 8014f5e:	e7f5      	b.n	8014f4c <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8014f60:	68cb      	ldr	r3, [r1, #12]
 8014f62:	604b      	str	r3, [r1, #4]
 8014f64:	e017      	b.n	8014f96 <prvListTaskWithinSingleList+0x6e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 8014f66:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8014f68:	6153      	str	r3, [r2, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 8014f6a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8014f6c:	6193      	str	r3, [r2, #24]
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 8014f6e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014f70:	783b      	ldrb	r3, [r7, #0]
 8014f72:	2ba5      	cmp	r3, #165	; 0xa5
 8014f74:	d125      	bne.n	8014fc2 <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 8014f76:	2300      	movs	r3, #0
			ulCount++;
 8014f78:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014f7a:	5cfc      	ldrb	r4, [r7, r3]
 8014f7c:	2ca5      	cmp	r4, #165	; 0xa5
 8014f7e:	d0fb      	beq.n	8014f78 <prvListTaskWithinSingleList+0x50>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8014f80:	089b      	lsrs	r3, r3, #2
		return ( uint16_t ) ulCount;
 8014f82:	8393      	strh	r3, [r2, #28]
				uxTask++;
 8014f84:	3001      	adds	r0, #1
 8014f86:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 8014f88:	45a9      	cmp	r9, r5
 8014f8a:	d01c      	beq.n	8014fc6 <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8014f8c:	684b      	ldr	r3, [r1, #4]
 8014f8e:	685b      	ldr	r3, [r3, #4]
 8014f90:	604b      	str	r3, [r1, #4]
 8014f92:	4598      	cmp	r8, r3
 8014f94:	d0e4      	beq.n	8014f60 <prvListTaskWithinSingleList+0x38>
 8014f96:	684b      	ldr	r3, [r1, #4]
 8014f98:	68dd      	ldr	r5, [r3, #12]
 8014f9a:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 8014f9c:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 8014f9e:	002b      	movs	r3, r5
 8014fa0:	3334      	adds	r3, #52	; 0x34
 8014fa2:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 8014fa4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8014fa6:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 8014fa8:	4663      	mov	r3, ip
 8014faa:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 8014fac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8014fae:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 8014fb0:	4663      	mov	r3, ip
 8014fb2:	2b03      	cmp	r3, #3
 8014fb4:	d1d7      	bne.n	8014f66 <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 8014fb6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d0d4      	beq.n	8014f66 <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 8014fbc:	4653      	mov	r3, sl
 8014fbe:	7333      	strb	r3, [r6, #12]
 8014fc0:	e7d1      	b.n	8014f66 <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	e7dc      	b.n	8014f80 <prvListTaskWithinSingleList+0x58>
	}
 8014fc6:	bc1c      	pop	{r2, r3, r4}
 8014fc8:	4690      	mov	r8, r2
 8014fca:	4699      	mov	r9, r3
 8014fcc:	46a2      	mov	sl, r4
 8014fce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014fd0 <prvAddCurrentTaskToDelayedList>:
{
 8014fd0:	b570      	push	{r4, r5, r6, lr}
 8014fd2:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8014fd4:	4b0c      	ldr	r3, [pc, #48]	; (8015008 <prvAddCurrentTaskToDelayedList+0x38>)
 8014fd6:	689a      	ldr	r2, [r3, #8]
 8014fd8:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 8014fda:	68db      	ldr	r3, [r3, #12]
 8014fdc:	4283      	cmp	r3, r0
 8014fde:	d80b      	bhi.n	8014ff8 <prvAddCurrentTaskToDelayedList+0x28>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8014fe0:	4d09      	ldr	r5, [pc, #36]	; (8015008 <prvAddCurrentTaskToDelayedList+0x38>)
 8014fe2:	6828      	ldr	r0, [r5, #0]
 8014fe4:	68a9      	ldr	r1, [r5, #8]
 8014fe6:	3104      	adds	r1, #4
 8014fe8:	f7f9 fba0 	bl	800e72c <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 8014fec:	686b      	ldr	r3, [r5, #4]
 8014fee:	42a3      	cmp	r3, r4
 8014ff0:	d908      	bls.n	8015004 <prvAddCurrentTaskToDelayedList+0x34>
			xNextTaskUnblockTime = xTimeToWake;
 8014ff2:	4b05      	ldr	r3, [pc, #20]	; (8015008 <prvAddCurrentTaskToDelayedList+0x38>)
 8014ff4:	605c      	str	r4, [r3, #4]
}
 8014ff6:	e005      	b.n	8015004 <prvAddCurrentTaskToDelayedList+0x34>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8014ff8:	4b03      	ldr	r3, [pc, #12]	; (8015008 <prvAddCurrentTaskToDelayedList+0x38>)
 8014ffa:	6918      	ldr	r0, [r3, #16]
 8014ffc:	6899      	ldr	r1, [r3, #8]
 8014ffe:	3104      	adds	r1, #4
 8015000:	f7f9 fb94 	bl	800e72c <vListInsert>
}
 8015004:	bd70      	pop	{r4, r5, r6, pc}
 8015006:	46c0      	nop			; (mov r8, r8)
 8015008:	20000230 	.word	0x20000230

0801500c <vTaskDelete>:
	{
 801500c:	b570      	push	{r4, r5, r6, lr}
 801500e:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 8015010:	f7f9 fd34 	bl	800ea7c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8015014:	2c00      	cmp	r4, #0
 8015016:	d026      	beq.n	8015066 <vTaskDelete+0x5a>
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8015018:	1d26      	adds	r6, r4, #4
 801501a:	0030      	movs	r0, r6
 801501c:	f7f9 fb9d 	bl	800e75a <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015020:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015022:	2b00      	cmp	r3, #0
 8015024:	d003      	beq.n	801502e <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015026:	0020      	movs	r0, r4
 8015028:	3018      	adds	r0, #24
 801502a:	f7f9 fb96 	bl	800e75a <uxListRemove>
			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 801502e:	4d14      	ldr	r5, [pc, #80]	; (8015080 <vTaskDelete+0x74>)
 8015030:	0028      	movs	r0, r5
 8015032:	3014      	adds	r0, #20
 8015034:	0031      	movs	r1, r6
 8015036:	f7f9 fb6d 	bl	800e714 <vListInsertEnd>
			++uxTasksDeleted;
 801503a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801503c:	3301      	adds	r3, #1
 801503e:	62ab      	str	r3, [r5, #40]	; 0x28
			uxTaskNumber++;
 8015040:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8015042:	3301      	adds	r3, #1
 8015044:	62eb      	str	r3, [r5, #44]	; 0x2c
		taskEXIT_CRITICAL();
 8015046:	f7f9 fd25 	bl	800ea94 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 801504a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801504c:	2b00      	cmp	r3, #0
 801504e:	d009      	beq.n	8015064 <vTaskDelete+0x58>
			if( pxTCB == pxCurrentTCB )
 8015050:	4b0b      	ldr	r3, [pc, #44]	; (8015080 <vTaskDelete+0x74>)
 8015052:	689b      	ldr	r3, [r3, #8]
 8015054:	42a3      	cmp	r3, r4
 8015056:	d009      	beq.n	801506c <vTaskDelete+0x60>
				taskENTER_CRITICAL();
 8015058:	f7f9 fd10 	bl	800ea7c <vPortEnterCritical>
					prvResetNextTaskUnblockTime();
 801505c:	f7f9 fb90 	bl	800e780 <prvResetNextTaskUnblockTime>
				taskEXIT_CRITICAL();
 8015060:	f7f9 fd18 	bl	800ea94 <vPortExitCritical>
	}
 8015064:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8015066:	4b06      	ldr	r3, [pc, #24]	; (8015080 <vTaskDelete+0x74>)
 8015068:	689c      	ldr	r4, [r3, #8]
 801506a:	e7d5      	b.n	8015018 <vTaskDelete+0xc>
				configASSERT( uxSchedulerSuspended == 0 );
 801506c:	4b04      	ldr	r3, [pc, #16]	; (8015080 <vTaskDelete+0x74>)
 801506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015070:	2b00      	cmp	r3, #0
 8015072:	d001      	beq.n	8015078 <vTaskDelete+0x6c>
 8015074:	b672      	cpsid	i
 8015076:	e7fe      	b.n	8015076 <vTaskDelete+0x6a>
				portYIELD_WITHIN_API();
 8015078:	f7f9 fcf4 	bl	800ea64 <vPortYield>
 801507c:	e7f2      	b.n	8015064 <vTaskDelete+0x58>
 801507e:	46c0      	nop			; (mov r8, r8)
 8015080:	20000230 	.word	0x20000230

08015084 <uxTaskPriorityGet>:
	{
 8015084:	b510      	push	{r4, lr}
 8015086:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 8015088:	f7f9 fcf8 	bl	800ea7c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 801508c:	2c00      	cmp	r4, #0
 801508e:	d004      	beq.n	801509a <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 8015090:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 8015092:	f7f9 fcff 	bl	800ea94 <vPortExitCritical>
	}
 8015096:	0020      	movs	r0, r4
 8015098:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 801509a:	4b01      	ldr	r3, [pc, #4]	; (80150a0 <uxTaskPriorityGet+0x1c>)
 801509c:	689c      	ldr	r4, [r3, #8]
 801509e:	e7f7      	b.n	8015090 <uxTaskPriorityGet+0xc>
 80150a0:	20000230 	.word	0x20000230

080150a4 <uxTaskPriorityGetFromISR>:
	{
 80150a4:	b510      	push	{r4, lr}
 80150a6:	0004      	movs	r4, r0
		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 80150a8:	f7f9 fd04 	bl	800eab4 <ulSetInterruptMaskFromISR>
			pxTCB = prvGetTCBFromHandle( xTask );
 80150ac:	2c00      	cmp	r4, #0
 80150ae:	d004      	beq.n	80150ba <uxTaskPriorityGetFromISR+0x16>
			uxReturn = pxTCB->uxPriority;
 80150b0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
 80150b2:	f7f9 fd04 	bl	800eabe <vClearInterruptMaskFromISR>
	}
 80150b6:	0020      	movs	r0, r4
 80150b8:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 80150ba:	4b01      	ldr	r3, [pc, #4]	; (80150c0 <uxTaskPriorityGetFromISR+0x1c>)
 80150bc:	689c      	ldr	r4, [r3, #8]
 80150be:	e7f7      	b.n	80150b0 <uxTaskPriorityGetFromISR+0xc>
 80150c0:	20000230 	.word	0x20000230

080150c4 <vTaskPrioritySet>:
	{
 80150c4:	b570      	push	{r4, r5, r6, lr}
 80150c6:	0004      	movs	r4, r0
 80150c8:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80150ca:	2906      	cmp	r1, #6
 80150cc:	d901      	bls.n	80150d2 <vTaskPrioritySet+0xe>
 80150ce:	b672      	cpsid	i
 80150d0:	e7fe      	b.n	80150d0 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 80150d2:	f7f9 fcd3 	bl	800ea7c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 80150d6:	2c00      	cmp	r4, #0
 80150d8:	d101      	bne.n	80150de <vTaskPrioritySet+0x1a>
 80150da:	4b21      	ldr	r3, [pc, #132]	; (8015160 <vTaskPrioritySet+0x9c>)
 80150dc:	689c      	ldr	r4, [r3, #8]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80150de:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 80150e0:	4295      	cmp	r5, r2
 80150e2:	d032      	beq.n	801514a <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 80150e4:	d934      	bls.n	8015150 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 80150e6:	4b1e      	ldr	r3, [pc, #120]	; (8015160 <vTaskPrioritySet+0x9c>)
 80150e8:	689b      	ldr	r3, [r3, #8]
 80150ea:	42a3      	cmp	r3, r4
 80150ec:	d036      	beq.n	801515c <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80150ee:	4b1c      	ldr	r3, [pc, #112]	; (8015160 <vTaskPrioritySet+0x9c>)
 80150f0:	689b      	ldr	r3, [r3, #8]
 80150f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150f4:	2600      	movs	r6, #0
 80150f6:	429d      	cmp	r5, r3
 80150f8:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80150fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80150fc:	428a      	cmp	r2, r1
 80150fe:	d100      	bne.n	8015102 <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 8015100:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 8015102:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015104:	69a3      	ldr	r3, [r4, #24]
 8015106:	2b00      	cmp	r3, #0
 8015108:	db02      	blt.n	8015110 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801510a:	2207      	movs	r2, #7
 801510c:	1b55      	subs	r5, r2, r5
 801510e:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8015110:	2314      	movs	r3, #20
 8015112:	434b      	muls	r3, r1
 8015114:	4a13      	ldr	r2, [pc, #76]	; (8015164 <vTaskPrioritySet+0xa0>)
 8015116:	189b      	adds	r3, r3, r2
 8015118:	6962      	ldr	r2, [r4, #20]
 801511a:	429a      	cmp	r2, r3
 801511c:	d111      	bne.n	8015142 <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 801511e:	1d25      	adds	r5, r4, #4
 8015120:	0028      	movs	r0, r5
 8015122:	f7f9 fb1a 	bl	800e75a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015126:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015128:	4a0d      	ldr	r2, [pc, #52]	; (8015160 <vTaskPrioritySet+0x9c>)
 801512a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801512c:	4293      	cmp	r3, r2
 801512e:	d901      	bls.n	8015134 <vTaskPrioritySet+0x70>
 8015130:	4a0b      	ldr	r2, [pc, #44]	; (8015160 <vTaskPrioritySet+0x9c>)
 8015132:	6393      	str	r3, [r2, #56]	; 0x38
 8015134:	2014      	movs	r0, #20
 8015136:	4358      	muls	r0, r3
 8015138:	4b0a      	ldr	r3, [pc, #40]	; (8015164 <vTaskPrioritySet+0xa0>)
 801513a:	18c0      	adds	r0, r0, r3
 801513c:	0029      	movs	r1, r5
 801513e:	f7f9 fae9 	bl	800e714 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 8015142:	2e01      	cmp	r6, #1
 8015144:	d101      	bne.n	801514a <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 8015146:	f7f9 fc8d 	bl	800ea64 <vPortYield>
		taskEXIT_CRITICAL();
 801514a:	f7f9 fca3 	bl	800ea94 <vPortExitCritical>
	}
 801514e:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 8015150:	4b03      	ldr	r3, [pc, #12]	; (8015160 <vTaskPrioritySet+0x9c>)
 8015152:	689e      	ldr	r6, [r3, #8]
 8015154:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 8015156:	4273      	negs	r3, r6
 8015158:	415e      	adcs	r6, r3
 801515a:	e7ce      	b.n	80150fa <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 801515c:	2600      	movs	r6, #0
 801515e:	e7cc      	b.n	80150fa <vTaskPrioritySet+0x36>
 8015160:	20000230 	.word	0x20000230
 8015164:	200002d0 	.word	0x200002d0

08015168 <vTaskResume>:
	{
 8015168:	b570      	push	{r4, r5, r6, lr}
 801516a:	1e04      	subs	r4, r0, #0
		configASSERT( xTaskToResume );
 801516c:	d00d      	beq.n	801518a <vTaskResume+0x22>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 801516e:	4b19      	ldr	r3, [pc, #100]	; (80151d4 <vTaskResume+0x6c>)
 8015170:	689b      	ldr	r3, [r3, #8]
 8015172:	4283      	cmp	r3, r0
 8015174:	d008      	beq.n	8015188 <vTaskResume+0x20>
			taskENTER_CRITICAL();
 8015176:	f7f9 fc81 	bl	800ea7c <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 801517a:	4b16      	ldr	r3, [pc, #88]	; (80151d4 <vTaskResume+0x6c>)
 801517c:	333c      	adds	r3, #60	; 0x3c
 801517e:	6962      	ldr	r2, [r4, #20]
 8015180:	429a      	cmp	r2, r3
 8015182:	d004      	beq.n	801518e <vTaskResume+0x26>
			taskEXIT_CRITICAL();
 8015184:	f7f9 fc86 	bl	800ea94 <vPortExitCritical>
	}
 8015188:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( xTaskToResume );
 801518a:	b672      	cpsid	i
 801518c:	e7fe      	b.n	801518c <vTaskResume+0x24>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801518e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8015190:	4b10      	ldr	r3, [pc, #64]	; (80151d4 <vTaskResume+0x6c>)
 8015192:	3350      	adds	r3, #80	; 0x50
 8015194:	429a      	cmp	r2, r3
 8015196:	d0f5      	beq.n	8015184 <vTaskResume+0x1c>
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8015198:	2a00      	cmp	r2, #0
 801519a:	d1f3      	bne.n	8015184 <vTaskResume+0x1c>
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 801519c:	1d25      	adds	r5, r4, #4
 801519e:	0028      	movs	r0, r5
 80151a0:	f7f9 fadb 	bl	800e75a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80151a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80151a6:	4a0b      	ldr	r2, [pc, #44]	; (80151d4 <vTaskResume+0x6c>)
 80151a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80151aa:	4293      	cmp	r3, r2
 80151ac:	d901      	bls.n	80151b2 <vTaskResume+0x4a>
 80151ae:	4a09      	ldr	r2, [pc, #36]	; (80151d4 <vTaskResume+0x6c>)
 80151b0:	6393      	str	r3, [r2, #56]	; 0x38
 80151b2:	2014      	movs	r0, #20
 80151b4:	4358      	muls	r0, r3
 80151b6:	4b08      	ldr	r3, [pc, #32]	; (80151d8 <vTaskResume+0x70>)
 80151b8:	18c0      	adds	r0, r0, r3
 80151ba:	0029      	movs	r1, r5
 80151bc:	f7f9 faaa 	bl	800e714 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80151c0:	4b04      	ldr	r3, [pc, #16]	; (80151d4 <vTaskResume+0x6c>)
 80151c2:	689b      	ldr	r3, [r3, #8]
 80151c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80151c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d3db      	bcc.n	8015184 <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 80151cc:	f7f9 fc4a 	bl	800ea64 <vPortYield>
 80151d0:	e7d8      	b.n	8015184 <vTaskResume+0x1c>
 80151d2:	46c0      	nop			; (mov r8, r8)
 80151d4:	20000230 	.word	0x20000230
 80151d8:	200002d0 	.word	0x200002d0

080151dc <xTaskResumeFromISR>:
	{
 80151dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151de:	b083      	sub	sp, #12
 80151e0:	1e04      	subs	r4, r0, #0
		configASSERT( xTaskToResume );
 80151e2:	d101      	bne.n	80151e8 <xTaskResumeFromISR+0xc>
 80151e4:	b672      	cpsid	i
 80151e6:	e7fe      	b.n	80151e6 <xTaskResumeFromISR+0xa>
		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80151e8:	f7f9 fc64 	bl	800eab4 <ulSetInterruptMaskFromISR>
 80151ec:	9001      	str	r0, [sp, #4]
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80151ee:	4b1c      	ldr	r3, [pc, #112]	; (8015260 <xTaskResumeFromISR+0x84>)
 80151f0:	333c      	adds	r3, #60	; 0x3c
	BaseType_t xYieldRequired = pdFALSE;
 80151f2:	2500      	movs	r5, #0
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80151f4:	6962      	ldr	r2, [r4, #20]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d005      	beq.n	8015206 <xTaskResumeFromISR+0x2a>
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80151fa:	9801      	ldr	r0, [sp, #4]
 80151fc:	f7f9 fc5f 	bl	800eabe <vClearInterruptMaskFromISR>
	}
 8015200:	0028      	movs	r0, r5
 8015202:	b003      	add	sp, #12
 8015204:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8015206:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8015208:	4b15      	ldr	r3, [pc, #84]	; (8015260 <xTaskResumeFromISR+0x84>)
 801520a:	3350      	adds	r3, #80	; 0x50
 801520c:	429a      	cmp	r2, r3
 801520e:	d025      	beq.n	801525c <xTaskResumeFromISR+0x80>
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8015210:	42aa      	cmp	r2, r5
 8015212:	d1f2      	bne.n	80151fa <xTaskResumeFromISR+0x1e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015214:	4b12      	ldr	r3, [pc, #72]	; (8015260 <xTaskResumeFromISR+0x84>)
 8015216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015218:	42ab      	cmp	r3, r5
 801521a:	d117      	bne.n	801524c <xTaskResumeFromISR+0x70>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801521c:	4e10      	ldr	r6, [pc, #64]	; (8015260 <xTaskResumeFromISR+0x84>)
 801521e:	68b3      	ldr	r3, [r6, #8]
 8015220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015222:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015224:	429a      	cmp	r2, r3
 8015226:	416d      	adcs	r5, r5
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8015228:	1d27      	adds	r7, r4, #4
 801522a:	0038      	movs	r0, r7
 801522c:	f7f9 fa95 	bl	800e75a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015230:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015232:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8015234:	4293      	cmp	r3, r2
 8015236:	d901      	bls.n	801523c <xTaskResumeFromISR+0x60>
 8015238:	4a09      	ldr	r2, [pc, #36]	; (8015260 <xTaskResumeFromISR+0x84>)
 801523a:	6393      	str	r3, [r2, #56]	; 0x38
 801523c:	2014      	movs	r0, #20
 801523e:	4358      	muls	r0, r3
 8015240:	4b08      	ldr	r3, [pc, #32]	; (8015264 <xTaskResumeFromISR+0x88>)
 8015242:	18c0      	adds	r0, r0, r3
 8015244:	0039      	movs	r1, r7
 8015246:	f7f9 fa65 	bl	800e714 <vListInsertEnd>
 801524a:	e7d6      	b.n	80151fa <xTaskResumeFromISR+0x1e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801524c:	0021      	movs	r1, r4
 801524e:	3118      	adds	r1, #24
 8015250:	4803      	ldr	r0, [pc, #12]	; (8015260 <xTaskResumeFromISR+0x84>)
 8015252:	3050      	adds	r0, #80	; 0x50
 8015254:	f7f9 fa5e 	bl	800e714 <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 8015258:	2500      	movs	r5, #0
 801525a:	e7ce      	b.n	80151fa <xTaskResumeFromISR+0x1e>
 801525c:	2500      	movs	r5, #0
 801525e:	e7cc      	b.n	80151fa <xTaskResumeFromISR+0x1e>
 8015260:	20000230 	.word	0x20000230
 8015264:	200002d0 	.word	0x200002d0

08015268 <vTaskEndScheduler>:
{
 8015268:	b510      	push	{r4, lr}
	portDISABLE_INTERRUPTS();
 801526a:	b672      	cpsid	i
	xSchedulerRunning = pdFALSE;
 801526c:	4b02      	ldr	r3, [pc, #8]	; (8015278 <vTaskEndScheduler+0x10>)
 801526e:	2200      	movs	r2, #0
 8015270:	631a      	str	r2, [r3, #48]	; 0x30
	vPortEndScheduler();
 8015272:	f000 ff71 	bl	8016158 <vPortEndScheduler>
}
 8015276:	bd10      	pop	{r4, pc}
 8015278:	20000230 	.word	0x20000230

0801527c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 801527c:	4a02      	ldr	r2, [pc, #8]	; (8015288 <vTaskSuspendAll+0xc>)
 801527e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8015280:	3301      	adds	r3, #1
 8015282:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015284:	4770      	bx	lr
 8015286:	46c0      	nop			; (mov r8, r8)
 8015288:	20000230 	.word	0x20000230

0801528c <xTaskGetTickCount>:
		xTicks = xTickCount;
 801528c:	4b01      	ldr	r3, [pc, #4]	; (8015294 <xTaskGetTickCount+0x8>)
 801528e:	68d8      	ldr	r0, [r3, #12]
}
 8015290:	4770      	bx	lr
 8015292:	46c0      	nop			; (mov r8, r8)
 8015294:	20000230 	.word	0x20000230

08015298 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 8015298:	4b01      	ldr	r3, [pc, #4]	; (80152a0 <xTaskGetTickCountFromISR+0x8>)
 801529a:	68d8      	ldr	r0, [r3, #12]
}
 801529c:	4770      	bx	lr
 801529e:	46c0      	nop			; (mov r8, r8)
 80152a0:	20000230 	.word	0x20000230

080152a4 <uxTaskGetNumberOfTasks>:
	return uxCurrentNumberOfTasks;
 80152a4:	4b01      	ldr	r3, [pc, #4]	; (80152ac <uxTaskGetNumberOfTasks+0x8>)
 80152a6:	6e58      	ldr	r0, [r3, #100]	; 0x64
}
 80152a8:	4770      	bx	lr
 80152aa:	46c0      	nop			; (mov r8, r8)
 80152ac:	20000230 	.word	0x20000230

080152b0 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 80152b0:	2800      	cmp	r0, #0
 80152b2:	d00b      	beq.n	80152cc <uxTaskGetStackHighWaterMark+0x1c>
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80152b4:	6b02      	ldr	r2, [r0, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80152b6:	7813      	ldrb	r3, [r2, #0]
 80152b8:	2ba5      	cmp	r3, #165	; 0xa5
 80152ba:	d10a      	bne.n	80152d2 <uxTaskGetStackHighWaterMark+0x22>
	uint32_t ulCount = 0U;
 80152bc:	2000      	movs	r0, #0
			ulCount++;
 80152be:	3001      	adds	r0, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80152c0:	5c13      	ldrb	r3, [r2, r0]
 80152c2:	2ba5      	cmp	r3, #165	; 0xa5
 80152c4:	d0fb      	beq.n	80152be <uxTaskGetStackHighWaterMark+0xe>
		return uxReturn;
 80152c6:	0380      	lsls	r0, r0, #14
 80152c8:	0c00      	lsrs	r0, r0, #16
	}
 80152ca:	4770      	bx	lr
		pxTCB = prvGetTCBFromHandle( xTask );
 80152cc:	4b02      	ldr	r3, [pc, #8]	; (80152d8 <uxTaskGetStackHighWaterMark+0x28>)
 80152ce:	6898      	ldr	r0, [r3, #8]
 80152d0:	e7f0      	b.n	80152b4 <uxTaskGetStackHighWaterMark+0x4>
	uint32_t ulCount = 0U;
 80152d2:	2000      	movs	r0, #0
 80152d4:	e7f7      	b.n	80152c6 <uxTaskGetStackHighWaterMark+0x16>
 80152d6:	46c0      	nop			; (mov r8, r8)
 80152d8:	20000230 	.word	0x20000230

080152dc <xTaskIncrementTick>:
{
 80152dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152de:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80152e0:	4b37      	ldr	r3, [pc, #220]	; (80153c0 <xTaskIncrementTick+0xe4>)
 80152e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d15e      	bne.n	80153a6 <xTaskIncrementTick+0xca>
		++xTickCount;
 80152e8:	4b35      	ldr	r3, [pc, #212]	; (80153c0 <xTaskIncrementTick+0xe4>)
 80152ea:	68da      	ldr	r2, [r3, #12]
 80152ec:	3201      	adds	r2, #1
 80152ee:	60da      	str	r2, [r3, #12]
			const TickType_t xConstTickCount = xTickCount;
 80152f0:	68de      	ldr	r6, [r3, #12]
			if( xConstTickCount == ( TickType_t ) 0U )
 80152f2:	2e00      	cmp	r6, #0
 80152f4:	d10f      	bne.n	8015316 <xTaskIncrementTick+0x3a>
				taskSWITCH_DELAYED_LISTS();
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d001      	beq.n	8015302 <xTaskIncrementTick+0x26>
 80152fe:	b672      	cpsid	i
 8015300:	e7fe      	b.n	8015300 <xTaskIncrementTick+0x24>
 8015302:	4b2f      	ldr	r3, [pc, #188]	; (80153c0 <xTaskIncrementTick+0xe4>)
 8015304:	681a      	ldr	r2, [r3, #0]
 8015306:	6919      	ldr	r1, [r3, #16]
 8015308:	6019      	str	r1, [r3, #0]
 801530a:	611a      	str	r2, [r3, #16]
 801530c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801530e:	3201      	adds	r2, #1
 8015310:	669a      	str	r2, [r3, #104]	; 0x68
 8015312:	f7f9 fa35 	bl	800e780 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 8015316:	4b2a      	ldr	r3, [pc, #168]	; (80153c0 <xTaskIncrementTick+0xe4>)
 8015318:	685b      	ldr	r3, [r3, #4]
BaseType_t xSwitchRequired = pdFALSE;
 801531a:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 801531c:	42b3      	cmp	r3, r6
 801531e:	d833      	bhi.n	8015388 <xTaskIncrementTick+0xac>
BaseType_t xSwitchRequired = pdFALSE;
 8015320:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015322:	4d27      	ldr	r5, [pc, #156]	; (80153c0 <xTaskIncrementTick+0xe4>)
 8015324:	682b      	ldr	r3, [r5, #0]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d029      	beq.n	8015380 <xTaskIncrementTick+0xa4>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801532c:	4b24      	ldr	r3, [pc, #144]	; (80153c0 <xTaskIncrementTick+0xe4>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	68db      	ldr	r3, [r3, #12]
 8015332:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8015334:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 8015336:	429e      	cmp	r6, r3
 8015338:	d332      	bcc.n	80153a0 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 801533a:	1d23      	adds	r3, r4, #4
 801533c:	9301      	str	r3, [sp, #4]
 801533e:	0018      	movs	r0, r3
 8015340:	f7f9 fa0b 	bl	800e75a <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015344:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015346:	2b00      	cmp	r3, #0
 8015348:	d003      	beq.n	8015352 <xTaskIncrementTick+0x76>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801534a:	0020      	movs	r0, r4
 801534c:	3018      	adds	r0, #24
 801534e:	f7f9 fa04 	bl	800e75a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8015352:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015354:	4a1a      	ldr	r2, [pc, #104]	; (80153c0 <xTaskIncrementTick+0xe4>)
 8015356:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015358:	4293      	cmp	r3, r2
 801535a:	d901      	bls.n	8015360 <xTaskIncrementTick+0x84>
 801535c:	4a18      	ldr	r2, [pc, #96]	; (80153c0 <xTaskIncrementTick+0xe4>)
 801535e:	6393      	str	r3, [r2, #56]	; 0x38
 8015360:	0098      	lsls	r0, r3, #2
 8015362:	18c0      	adds	r0, r0, r3
 8015364:	0080      	lsls	r0, r0, #2
 8015366:	4b17      	ldr	r3, [pc, #92]	; (80153c4 <xTaskIncrementTick+0xe8>)
 8015368:	18c0      	adds	r0, r0, r3
 801536a:	9901      	ldr	r1, [sp, #4]
 801536c:	f7f9 f9d2 	bl	800e714 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015370:	4b13      	ldr	r3, [pc, #76]	; (80153c0 <xTaskIncrementTick+0xe4>)
 8015372:	689b      	ldr	r3, [r3, #8]
 8015374:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015378:	429a      	cmp	r2, r3
 801537a:	d3d3      	bcc.n	8015324 <xTaskIncrementTick+0x48>
								xSwitchRequired = pdTRUE;
 801537c:	2701      	movs	r7, #1
 801537e:	e7d1      	b.n	8015324 <xTaskIncrementTick+0x48>
						xNextTaskUnblockTime = portMAX_DELAY;
 8015380:	4b0f      	ldr	r3, [pc, #60]	; (80153c0 <xTaskIncrementTick+0xe4>)
 8015382:	2201      	movs	r2, #1
 8015384:	4252      	negs	r2, r2
 8015386:	605a      	str	r2, [r3, #4]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015388:	4b0d      	ldr	r3, [pc, #52]	; (80153c0 <xTaskIncrementTick+0xe4>)
 801538a:	689b      	ldr	r3, [r3, #8]
 801538c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801538e:	0093      	lsls	r3, r2, #2
 8015390:	189b      	adds	r3, r3, r2
 8015392:	009b      	lsls	r3, r3, #2
 8015394:	4a0b      	ldr	r2, [pc, #44]	; (80153c4 <xTaskIncrementTick+0xe8>)
 8015396:	589b      	ldr	r3, [r3, r2]
 8015398:	2b01      	cmp	r3, #1
 801539a:	d909      	bls.n	80153b0 <xTaskIncrementTick+0xd4>
				xSwitchRequired = pdTRUE;
 801539c:	2701      	movs	r7, #1
 801539e:	e007      	b.n	80153b0 <xTaskIncrementTick+0xd4>
							xNextTaskUnblockTime = xItemValue;
 80153a0:	4a07      	ldr	r2, [pc, #28]	; (80153c0 <xTaskIncrementTick+0xe4>)
 80153a2:	6053      	str	r3, [r2, #4]
							break;
 80153a4:	e7f0      	b.n	8015388 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
 80153a6:	4a06      	ldr	r2, [pc, #24]	; (80153c0 <xTaskIncrementTick+0xe4>)
 80153a8:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 80153aa:	3301      	adds	r3, #1
 80153ac:	66d3      	str	r3, [r2, #108]	; 0x6c
BaseType_t xSwitchRequired = pdFALSE;
 80153ae:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 80153b0:	4b03      	ldr	r3, [pc, #12]	; (80153c0 <xTaskIncrementTick+0xe4>)
 80153b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d000      	beq.n	80153ba <xTaskIncrementTick+0xde>
			xSwitchRequired = pdTRUE;
 80153b8:	2701      	movs	r7, #1
}
 80153ba:	0038      	movs	r0, r7
 80153bc:	b003      	add	sp, #12
 80153be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153c0:	20000230 	.word	0x20000230
 80153c4:	200002d0 	.word	0x200002d0

080153c8 <xTaskResumeAll>:
{
 80153c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 80153ca:	4b2f      	ldr	r3, [pc, #188]	; (8015488 <xTaskResumeAll+0xc0>)
 80153cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d101      	bne.n	80153d6 <xTaskResumeAll+0xe>
 80153d2:	b672      	cpsid	i
 80153d4:	e7fe      	b.n	80153d4 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 80153d6:	f7f9 fb51 	bl	800ea7c <vPortEnterCritical>
		--uxSchedulerSuspended;
 80153da:	4b2b      	ldr	r3, [pc, #172]	; (8015488 <xTaskResumeAll+0xc0>)
 80153dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80153de:	3a01      	subs	r2, #1
 80153e0:	635a      	str	r2, [r3, #52]	; 0x34
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80153e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
BaseType_t xAlreadyYielded = pdFALSE;
 80153e4:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80153e6:	42a3      	cmp	r3, r4
 80153e8:	d105      	bne.n	80153f6 <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80153ea:	4b27      	ldr	r3, [pc, #156]	; (8015488 <xTaskResumeAll+0xc0>)
 80153ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80153ee:	4f26      	ldr	r7, [pc, #152]	; (8015488 <xTaskResumeAll+0xc0>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80153f0:	42a3      	cmp	r3, r4
 80153f2:	d12a      	bne.n	801544a <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 80153f4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80153f6:	f7f9 fb4d 	bl	800ea94 <vPortExitCritical>
}
 80153fa:	0020      	movs	r0, r4
 80153fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 80153fe:	0098      	lsls	r0, r3, #2
 8015400:	18c0      	adds	r0, r0, r3
 8015402:	0080      	lsls	r0, r0, #2
 8015404:	4b21      	ldr	r3, [pc, #132]	; (801548c <xTaskResumeAll+0xc4>)
 8015406:	469c      	mov	ip, r3
 8015408:	4460      	add	r0, ip
 801540a:	0021      	movs	r1, r4
 801540c:	f7f9 f982 	bl	800e714 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015410:	4b1d      	ldr	r3, [pc, #116]	; (8015488 <xTaskResumeAll+0xc0>)
 8015412:	689b      	ldr	r3, [r3, #8]
 8015414:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8015416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015418:	429a      	cmp	r2, r3
 801541a:	d213      	bcs.n	8015444 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801541c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801541e:	2b00      	cmp	r3, #0
 8015420:	d015      	beq.n	801544e <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8015422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015424:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015426:	0030      	movs	r0, r6
 8015428:	3018      	adds	r0, #24
 801542a:	f7f9 f996 	bl	800e75a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 801542e:	1d34      	adds	r4, r6, #4
 8015430:	0020      	movs	r0, r4
 8015432:	f7f9 f992 	bl	800e75a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015436:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8015438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801543a:	4293      	cmp	r3, r2
 801543c:	d9df      	bls.n	80153fe <xTaskResumeAll+0x36>
 801543e:	4a12      	ldr	r2, [pc, #72]	; (8015488 <xTaskResumeAll+0xc0>)
 8015440:	6393      	str	r3, [r2, #56]	; 0x38
 8015442:	e7dc      	b.n	80153fe <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 8015444:	4b10      	ldr	r3, [pc, #64]	; (8015488 <xTaskResumeAll+0xc0>)
 8015446:	2201      	movs	r2, #1
 8015448:	671a      	str	r2, [r3, #112]	; 0x70
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801544a:	4d0f      	ldr	r5, [pc, #60]	; (8015488 <xTaskResumeAll+0xc0>)
 801544c:	e7e6      	b.n	801541c <xTaskResumeAll+0x54>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 801544e:	4b0e      	ldr	r3, [pc, #56]	; (8015488 <xTaskResumeAll+0xc0>)
 8015450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015452:	2b00      	cmp	r3, #0
 8015454:	d005      	beq.n	8015462 <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8015456:	4e0c      	ldr	r6, [pc, #48]	; (8015488 <xTaskResumeAll+0xc0>)
							xYieldPending = pdTRUE;
 8015458:	0034      	movs	r4, r6
 801545a:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 801545c:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801545e:	2b00      	cmp	r3, #0
 8015460:	d108      	bne.n	8015474 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 8015462:	4b09      	ldr	r3, [pc, #36]	; (8015488 <xTaskResumeAll+0xc0>)
 8015464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
BaseType_t xAlreadyYielded = pdFALSE;
 8015466:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 8015468:	2b01      	cmp	r3, #1
 801546a:	d1c4      	bne.n	80153f6 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 801546c:	f7f9 fafa 	bl	800ea64 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8015470:	3401      	adds	r4, #1
 8015472:	e7c0      	b.n	80153f6 <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 8015474:	f7ff ff32 	bl	80152dc <xTaskIncrementTick>
 8015478:	2800      	cmp	r0, #0
 801547a:	d000      	beq.n	801547e <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 801547c:	6725      	str	r5, [r4, #112]	; 0x70
						--uxPendedTicks;
 801547e:	4a02      	ldr	r2, [pc, #8]	; (8015488 <xTaskResumeAll+0xc0>)
 8015480:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8015482:	3b01      	subs	r3, #1
 8015484:	66d3      	str	r3, [r2, #108]	; 0x6c
 8015486:	e7e9      	b.n	801545c <xTaskResumeAll+0x94>
 8015488:	20000230 	.word	0x20000230
 801548c:	200002d0 	.word	0x200002d0

08015490 <vTaskDelay>:
	{
 8015490:	b570      	push	{r4, r5, r6, lr}
 8015492:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015494:	d015      	beq.n	80154c2 <vTaskDelay+0x32>
			configASSERT( uxSchedulerSuspended == 0 );
 8015496:	4b0c      	ldr	r3, [pc, #48]	; (80154c8 <vTaskDelay+0x38>)
 8015498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801549a:	2b00      	cmp	r3, #0
 801549c:	d001      	beq.n	80154a2 <vTaskDelay+0x12>
 801549e:	b672      	cpsid	i
 80154a0:	e7fe      	b.n	80154a0 <vTaskDelay+0x10>
			vTaskSuspendAll();
 80154a2:	f7ff feeb 	bl	801527c <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 80154a6:	4b08      	ldr	r3, [pc, #32]	; (80154c8 <vTaskDelay+0x38>)
 80154a8:	68dc      	ldr	r4, [r3, #12]
 80154aa:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80154ac:	6898      	ldr	r0, [r3, #8]
 80154ae:	3004      	adds	r0, #4
 80154b0:	f7f9 f953 	bl	800e75a <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80154b4:	0020      	movs	r0, r4
 80154b6:	f7ff fd8b 	bl	8014fd0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80154ba:	f7ff ff85 	bl	80153c8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80154be:	2800      	cmp	r0, #0
 80154c0:	d101      	bne.n	80154c6 <vTaskDelay+0x36>
			portYIELD_WITHIN_API();
 80154c2:	f7f9 facf 	bl	800ea64 <vPortYield>
	}
 80154c6:	bd70      	pop	{r4, r5, r6, pc}
 80154c8:	20000230 	.word	0x20000230

080154cc <vTaskPlaceOnEventList>:
{
 80154cc:	b570      	push	{r4, r5, r6, lr}
 80154ce:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 80154d0:	2800      	cmp	r0, #0
 80154d2:	d101      	bne.n	80154d8 <vTaskPlaceOnEventList+0xc>
 80154d4:	b672      	cpsid	i
 80154d6:	e7fe      	b.n	80154d6 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80154d8:	4d0b      	ldr	r5, [pc, #44]	; (8015508 <vTaskPlaceOnEventList+0x3c>)
 80154da:	68a9      	ldr	r1, [r5, #8]
 80154dc:	3118      	adds	r1, #24
 80154de:	f7f9 f925 	bl	800e72c <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80154e2:	68a8      	ldr	r0, [r5, #8]
 80154e4:	3004      	adds	r0, #4
 80154e6:	f7f9 f938 	bl	800e75a <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 80154ea:	1c63      	adds	r3, r4, #1
 80154ec:	d005      	beq.n	80154fa <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 80154ee:	4b06      	ldr	r3, [pc, #24]	; (8015508 <vTaskPlaceOnEventList+0x3c>)
 80154f0:	68d8      	ldr	r0, [r3, #12]
 80154f2:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80154f4:	f7ff fd6c 	bl	8014fd0 <prvAddCurrentTaskToDelayedList>
}
 80154f8:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80154fa:	4803      	ldr	r0, [pc, #12]	; (8015508 <vTaskPlaceOnEventList+0x3c>)
 80154fc:	6881      	ldr	r1, [r0, #8]
 80154fe:	3104      	adds	r1, #4
 8015500:	303c      	adds	r0, #60	; 0x3c
 8015502:	f7f9 f907 	bl	800e714 <vListInsertEnd>
 8015506:	e7f7      	b.n	80154f8 <vTaskPlaceOnEventList+0x2c>
 8015508:	20000230 	.word	0x20000230

0801550c <vTaskPlaceOnUnorderedEventList>:
{
 801550c:	b570      	push	{r4, r5, r6, lr}
 801550e:	0015      	movs	r5, r2
	configASSERT( pxEventList );
 8015510:	2800      	cmp	r0, #0
 8015512:	d101      	bne.n	8015518 <vTaskPlaceOnUnorderedEventList+0xc>
 8015514:	b672      	cpsid	i
 8015516:	e7fe      	b.n	8015516 <vTaskPlaceOnUnorderedEventList+0xa>
	configASSERT( uxSchedulerSuspended != 0 );
 8015518:	4b11      	ldr	r3, [pc, #68]	; (8015560 <vTaskPlaceOnUnorderedEventList+0x54>)
 801551a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801551c:	2b00      	cmp	r3, #0
 801551e:	d101      	bne.n	8015524 <vTaskPlaceOnUnorderedEventList+0x18>
 8015520:	b672      	cpsid	i
 8015522:	e7fe      	b.n	8015522 <vTaskPlaceOnUnorderedEventList+0x16>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015524:	4c0e      	ldr	r4, [pc, #56]	; (8015560 <vTaskPlaceOnUnorderedEventList+0x54>)
 8015526:	68a2      	ldr	r2, [r4, #8]
 8015528:	2380      	movs	r3, #128	; 0x80
 801552a:	061b      	lsls	r3, r3, #24
 801552c:	4319      	orrs	r1, r3
 801552e:	6191      	str	r1, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015530:	68a1      	ldr	r1, [r4, #8]
 8015532:	3118      	adds	r1, #24
 8015534:	f7f9 f8ee 	bl	800e714 <vListInsertEnd>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8015538:	68a0      	ldr	r0, [r4, #8]
 801553a:	3004      	adds	r0, #4
 801553c:	f7f9 f90d 	bl	800e75a <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 8015540:	1c6b      	adds	r3, r5, #1
 8015542:	d106      	bne.n	8015552 <vTaskPlaceOnUnorderedEventList+0x46>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8015544:	4806      	ldr	r0, [pc, #24]	; (8015560 <vTaskPlaceOnUnorderedEventList+0x54>)
 8015546:	6881      	ldr	r1, [r0, #8]
 8015548:	3104      	adds	r1, #4
 801554a:	303c      	adds	r0, #60	; 0x3c
 801554c:	f7f9 f8e2 	bl	800e714 <vListInsertEnd>
}
 8015550:	bd70      	pop	{r4, r5, r6, pc}
			xTimeToWake = xTickCount + xTicksToWait;
 8015552:	4b03      	ldr	r3, [pc, #12]	; (8015560 <vTaskPlaceOnUnorderedEventList+0x54>)
 8015554:	68d8      	ldr	r0, [r3, #12]
 8015556:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8015558:	f7ff fd3a 	bl	8014fd0 <prvAddCurrentTaskToDelayedList>
}
 801555c:	e7f8      	b.n	8015550 <vTaskPlaceOnUnorderedEventList+0x44>
 801555e:	46c0      	nop			; (mov r8, r8)
 8015560:	20000230 	.word	0x20000230

08015564 <vTaskPlaceOnEventListRestricted>:
	{
 8015564:	b570      	push	{r4, r5, r6, lr}
 8015566:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 8015568:	2800      	cmp	r0, #0
 801556a:	d101      	bne.n	8015570 <vTaskPlaceOnEventListRestricted+0xc>
 801556c:	b672      	cpsid	i
 801556e:	e7fe      	b.n	801556e <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015570:	4c06      	ldr	r4, [pc, #24]	; (801558c <vTaskPlaceOnEventListRestricted+0x28>)
 8015572:	68a1      	ldr	r1, [r4, #8]
 8015574:	3118      	adds	r1, #24
 8015576:	f7f9 f8cd 	bl	800e714 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 801557a:	68a0      	ldr	r0, [r4, #8]
 801557c:	3004      	adds	r0, #4
 801557e:	f7f9 f8ec 	bl	800e75a <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 8015582:	68e0      	ldr	r0, [r4, #12]
 8015584:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8015586:	f7ff fd23 	bl	8014fd0 <prvAddCurrentTaskToDelayedList>
	}
 801558a:	bd70      	pop	{r4, r5, r6, pc}
 801558c:	20000230 	.word	0x20000230

08015590 <xTaskRemoveFromEventList>:
{
 8015590:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8015592:	68c3      	ldr	r3, [r0, #12]
 8015594:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8015596:	2d00      	cmp	r5, #0
 8015598:	d101      	bne.n	801559e <xTaskRemoveFromEventList+0xe>
 801559a:	b672      	cpsid	i
 801559c:	e7fe      	b.n	801559c <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801559e:	002c      	movs	r4, r5
 80155a0:	3418      	adds	r4, #24
 80155a2:	0020      	movs	r0, r4
 80155a4:	f7f9 f8d9 	bl	800e75a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80155a8:	4b14      	ldr	r3, [pc, #80]	; (80155fc <xTaskRemoveFromEventList+0x6c>)
 80155aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d11e      	bne.n	80155ee <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80155b0:	1d2c      	adds	r4, r5, #4
 80155b2:	0020      	movs	r0, r4
 80155b4:	f7f9 f8d1 	bl	800e75a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80155b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80155ba:	4a10      	ldr	r2, [pc, #64]	; (80155fc <xTaskRemoveFromEventList+0x6c>)
 80155bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80155be:	4293      	cmp	r3, r2
 80155c0:	d901      	bls.n	80155c6 <xTaskRemoveFromEventList+0x36>
 80155c2:	4a0e      	ldr	r2, [pc, #56]	; (80155fc <xTaskRemoveFromEventList+0x6c>)
 80155c4:	6393      	str	r3, [r2, #56]	; 0x38
 80155c6:	0098      	lsls	r0, r3, #2
 80155c8:	18c0      	adds	r0, r0, r3
 80155ca:	0080      	lsls	r0, r0, #2
 80155cc:	4b0c      	ldr	r3, [pc, #48]	; (8015600 <xTaskRemoveFromEventList+0x70>)
 80155ce:	18c0      	adds	r0, r0, r3
 80155d0:	0021      	movs	r1, r4
 80155d2:	f7f9 f89f 	bl	800e714 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80155d6:	4b09      	ldr	r3, [pc, #36]	; (80155fc <xTaskRemoveFromEventList+0x6c>)
 80155d8:	689b      	ldr	r3, [r3, #8]
 80155da:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80155dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 80155de:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d903      	bls.n	80155ec <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 80155e4:	4b05      	ldr	r3, [pc, #20]	; (80155fc <xTaskRemoveFromEventList+0x6c>)
 80155e6:	2201      	movs	r2, #1
 80155e8:	671a      	str	r2, [r3, #112]	; 0x70
		xReturn = pdTRUE;
 80155ea:	3001      	adds	r0, #1
}
 80155ec:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80155ee:	4803      	ldr	r0, [pc, #12]	; (80155fc <xTaskRemoveFromEventList+0x6c>)
 80155f0:	0021      	movs	r1, r4
 80155f2:	3050      	adds	r0, #80	; 0x50
 80155f4:	f7f9 f88e 	bl	800e714 <vListInsertEnd>
 80155f8:	e7ed      	b.n	80155d6 <xTaskRemoveFromEventList+0x46>
 80155fa:	46c0      	nop			; (mov r8, r8)
 80155fc:	20000230 	.word	0x20000230
 8015600:	200002d0 	.word	0x200002d0

08015604 <xTaskRemoveFromUnorderedEventList>:
{
 8015604:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8015606:	4b17      	ldr	r3, [pc, #92]	; (8015664 <xTaskRemoveFromUnorderedEventList+0x60>)
 8015608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801560a:	2b00      	cmp	r3, #0
 801560c:	d101      	bne.n	8015612 <xTaskRemoveFromUnorderedEventList+0xe>
 801560e:	b672      	cpsid	i
 8015610:	e7fe      	b.n	8015610 <xTaskRemoveFromUnorderedEventList+0xc>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015612:	2380      	movs	r3, #128	; 0x80
 8015614:	061b      	lsls	r3, r3, #24
 8015616:	4319      	orrs	r1, r3
 8015618:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 801561a:	68c5      	ldr	r5, [r0, #12]
	configASSERT( pxUnblockedTCB );
 801561c:	2d00      	cmp	r5, #0
 801561e:	d01f      	beq.n	8015660 <xTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 8015620:	f7f9 f89b 	bl	800e75a <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8015624:	1d2c      	adds	r4, r5, #4
 8015626:	0020      	movs	r0, r4
 8015628:	f7f9 f897 	bl	800e75a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801562c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801562e:	4a0d      	ldr	r2, [pc, #52]	; (8015664 <xTaskRemoveFromUnorderedEventList+0x60>)
 8015630:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015632:	4293      	cmp	r3, r2
 8015634:	d901      	bls.n	801563a <xTaskRemoveFromUnorderedEventList+0x36>
 8015636:	4a0b      	ldr	r2, [pc, #44]	; (8015664 <xTaskRemoveFromUnorderedEventList+0x60>)
 8015638:	6393      	str	r3, [r2, #56]	; 0x38
 801563a:	0098      	lsls	r0, r3, #2
 801563c:	18c0      	adds	r0, r0, r3
 801563e:	0080      	lsls	r0, r0, #2
 8015640:	4b09      	ldr	r3, [pc, #36]	; (8015668 <xTaskRemoveFromUnorderedEventList+0x64>)
 8015642:	18c0      	adds	r0, r0, r3
 8015644:	0021      	movs	r1, r4
 8015646:	f7f9 f865 	bl	800e714 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801564a:	4b06      	ldr	r3, [pc, #24]	; (8015664 <xTaskRemoveFromUnorderedEventList+0x60>)
 801564c:	689b      	ldr	r3, [r3, #8]
 801564e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8015650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 8015652:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015654:	429a      	cmp	r2, r3
 8015656:	d902      	bls.n	801565e <xTaskRemoveFromUnorderedEventList+0x5a>
		xYieldPending = pdTRUE;
 8015658:	3001      	adds	r0, #1
 801565a:	4b02      	ldr	r3, [pc, #8]	; (8015664 <xTaskRemoveFromUnorderedEventList+0x60>)
 801565c:	6718      	str	r0, [r3, #112]	; 0x70
}
 801565e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 8015660:	b672      	cpsid	i
 8015662:	e7fe      	b.n	8015662 <xTaskRemoveFromUnorderedEventList+0x5e>
 8015664:	20000230 	.word	0x20000230
 8015668:	200002d0 	.word	0x200002d0

0801566c <vTaskSwitchContext>:
{
 801566c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801566e:	4b39      	ldr	r3, [pc, #228]	; (8015754 <vTaskSwitchContext+0xe8>)
 8015670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015672:	2b00      	cmp	r3, #0
 8015674:	d003      	beq.n	801567e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8015676:	4b37      	ldr	r3, [pc, #220]	; (8015754 <vTaskSwitchContext+0xe8>)
 8015678:	2201      	movs	r2, #1
 801567a:	671a      	str	r2, [r3, #112]	; 0x70
}
 801567c:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 801567e:	4c35      	ldr	r4, [pc, #212]	; (8015754 <vTaskSwitchContext+0xe8>)
 8015680:	2300      	movs	r3, #0
 8015682:	6723      	str	r3, [r4, #112]	; 0x70
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8015684:	f7f5 feba 	bl	800b3fc <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8015688:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801568a:	4298      	cmp	r0, r3
 801568c:	d905      	bls.n	801569a <vTaskSwitchContext+0x2e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801568e:	4a31      	ldr	r2, [pc, #196]	; (8015754 <vTaskSwitchContext+0xe8>)
 8015690:	6892      	ldr	r2, [r2, #8]
 8015692:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8015694:	1acb      	subs	r3, r1, r3
 8015696:	181b      	adds	r3, r3, r0
 8015698:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 801569a:	4b2e      	ldr	r3, [pc, #184]	; (8015754 <vTaskSwitchContext+0xe8>)
 801569c:	6758      	str	r0, [r3, #116]	; 0x74
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 801569e:	689a      	ldr	r2, [r3, #8]
 80156a0:	689b      	ldr	r3, [r3, #8]
 80156a2:	6812      	ldr	r2, [r2, #0]
 80156a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d805      	bhi.n	80156b6 <vTaskSwitchContext+0x4a>
 80156aa:	4b2a      	ldr	r3, [pc, #168]	; (8015754 <vTaskSwitchContext+0xe8>)
 80156ac:	6898      	ldr	r0, [r3, #8]
 80156ae:	6899      	ldr	r1, [r3, #8]
 80156b0:	3134      	adds	r1, #52	; 0x34
 80156b2:	f7f8 fbab 	bl	800de0c <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 80156b6:	4b27      	ldr	r3, [pc, #156]	; (8015754 <vTaskSwitchContext+0xe8>)
 80156b8:	689b      	ldr	r3, [r3, #8]
 80156ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80156bc:	2214      	movs	r2, #20
 80156be:	4926      	ldr	r1, [pc, #152]	; (8015758 <vTaskSwitchContext+0xec>)
 80156c0:	f7fc fcda 	bl	8012078 <memcmp>
 80156c4:	2800      	cmp	r0, #0
 80156c6:	d005      	beq.n	80156d4 <vTaskSwitchContext+0x68>
 80156c8:	4b22      	ldr	r3, [pc, #136]	; (8015754 <vTaskSwitchContext+0xe8>)
 80156ca:	6898      	ldr	r0, [r3, #8]
 80156cc:	6899      	ldr	r1, [r3, #8]
 80156ce:	3134      	adds	r1, #52	; 0x34
 80156d0:	f7f8 fb9c 	bl	800de0c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80156d4:	4b1f      	ldr	r3, [pc, #124]	; (8015754 <vTaskSwitchContext+0xe8>)
 80156d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80156d8:	0093      	lsls	r3, r2, #2
 80156da:	189b      	adds	r3, r3, r2
 80156dc:	009b      	lsls	r3, r3, #2
 80156de:	4a1f      	ldr	r2, [pc, #124]	; (801575c <vTaskSwitchContext+0xf0>)
 80156e0:	589b      	ldr	r3, [r3, r2]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d115      	bne.n	8015712 <vTaskSwitchContext+0xa6>
 80156e6:	4b1b      	ldr	r3, [pc, #108]	; (8015754 <vTaskSwitchContext+0xe8>)
 80156e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d00f      	beq.n	801570e <vTaskSwitchContext+0xa2>
 80156ee:	4a19      	ldr	r2, [pc, #100]	; (8015754 <vTaskSwitchContext+0xe8>)
 80156f0:	4c1a      	ldr	r4, [pc, #104]	; (801575c <vTaskSwitchContext+0xf0>)
 80156f2:	0010      	movs	r0, r2
 80156f4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80156f6:	3b01      	subs	r3, #1
 80156f8:	6393      	str	r3, [r2, #56]	; 0x38
 80156fa:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80156fc:	008b      	lsls	r3, r1, #2
 80156fe:	185b      	adds	r3, r3, r1
 8015700:	009b      	lsls	r3, r3, #2
 8015702:	591b      	ldr	r3, [r3, r4]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d104      	bne.n	8015712 <vTaskSwitchContext+0xa6>
 8015708:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801570a:	2b00      	cmp	r3, #0
 801570c:	d1f2      	bne.n	80156f4 <vTaskSwitchContext+0x88>
 801570e:	b672      	cpsid	i
 8015710:	e7fe      	b.n	8015710 <vTaskSwitchContext+0xa4>
 8015712:	4b10      	ldr	r3, [pc, #64]	; (8015754 <vTaskSwitchContext+0xe8>)
 8015714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015716:	4c11      	ldr	r4, [pc, #68]	; (801575c <vTaskSwitchContext+0xf0>)
 8015718:	0093      	lsls	r3, r2, #2
 801571a:	1899      	adds	r1, r3, r2
 801571c:	0089      	lsls	r1, r1, #2
 801571e:	1861      	adds	r1, r4, r1
 8015720:	6848      	ldr	r0, [r1, #4]
 8015722:	6840      	ldr	r0, [r0, #4]
 8015724:	6048      	str	r0, [r1, #4]
 8015726:	189b      	adds	r3, r3, r2
 8015728:	009b      	lsls	r3, r3, #2
 801572a:	3308      	adds	r3, #8
 801572c:	191b      	adds	r3, r3, r4
 801572e:	4298      	cmp	r0, r3
 8015730:	d009      	beq.n	8015746 <vTaskSwitchContext+0xda>
 8015732:	0093      	lsls	r3, r2, #2
 8015734:	189a      	adds	r2, r3, r2
 8015736:	0092      	lsls	r2, r2, #2
 8015738:	4b08      	ldr	r3, [pc, #32]	; (801575c <vTaskSwitchContext+0xf0>)
 801573a:	189a      	adds	r2, r3, r2
 801573c:	6853      	ldr	r3, [r2, #4]
 801573e:	68da      	ldr	r2, [r3, #12]
 8015740:	4b04      	ldr	r3, [pc, #16]	; (8015754 <vTaskSwitchContext+0xe8>)
 8015742:	609a      	str	r2, [r3, #8]
}
 8015744:	e79a      	b.n	801567c <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8015746:	6840      	ldr	r0, [r0, #4]
 8015748:	2114      	movs	r1, #20
 801574a:	4351      	muls	r1, r2
 801574c:	1863      	adds	r3, r4, r1
 801574e:	6058      	str	r0, [r3, #4]
 8015750:	e7ef      	b.n	8015732 <vTaskSwitchContext+0xc6>
 8015752:	46c0      	nop			; (mov r8, r8)
 8015754:	20000230 	.word	0x20000230
 8015758:	08019aa0 	.word	0x08019aa0
 801575c:	200002d0 	.word	0x200002d0

08015760 <vTaskSuspend>:
	{
 8015760:	b570      	push	{r4, r5, r6, lr}
 8015762:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 8015764:	f7f9 f98a 	bl	800ea7c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8015768:	2c00      	cmp	r4, #0
 801576a:	d01a      	beq.n	80157a2 <vTaskSuspend+0x42>
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 801576c:	1d26      	adds	r6, r4, #4
 801576e:	0030      	movs	r0, r6
 8015770:	f7f8 fff3 	bl	800e75a <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015774:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015776:	2b00      	cmp	r3, #0
 8015778:	d003      	beq.n	8015782 <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801577a:	0020      	movs	r0, r4
 801577c:	3018      	adds	r0, #24
 801577e:	f7f8 ffec 	bl	800e75a <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8015782:	4d19      	ldr	r5, [pc, #100]	; (80157e8 <vTaskSuspend+0x88>)
 8015784:	0028      	movs	r0, r5
 8015786:	303c      	adds	r0, #60	; 0x3c
 8015788:	0031      	movs	r1, r6
 801578a:	f7f8 ffc3 	bl	800e714 <vListInsertEnd>
		taskEXIT_CRITICAL();
 801578e:	f7f9 f981 	bl	800ea94 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 8015792:	68ab      	ldr	r3, [r5, #8]
 8015794:	42a3      	cmp	r3, r4
 8015796:	d007      	beq.n	80157a8 <vTaskSuspend+0x48>
			if( xSchedulerRunning != pdFALSE )
 8015798:	4b13      	ldr	r3, [pc, #76]	; (80157e8 <vTaskSuspend+0x88>)
 801579a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801579c:	2b00      	cmp	r3, #0
 801579e:	d11c      	bne.n	80157da <vTaskSuspend+0x7a>
	}
 80157a0:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80157a2:	4b11      	ldr	r3, [pc, #68]	; (80157e8 <vTaskSuspend+0x88>)
 80157a4:	689c      	ldr	r4, [r3, #8]
 80157a6:	e7e1      	b.n	801576c <vTaskSuspend+0xc>
			if( xSchedulerRunning != pdFALSE )
 80157a8:	4b0f      	ldr	r3, [pc, #60]	; (80157e8 <vTaskSuspend+0x88>)
 80157aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d008      	beq.n	80157c2 <vTaskSuspend+0x62>
				configASSERT( uxSchedulerSuspended == 0 );
 80157b0:	4b0d      	ldr	r3, [pc, #52]	; (80157e8 <vTaskSuspend+0x88>)
 80157b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d001      	beq.n	80157bc <vTaskSuspend+0x5c>
 80157b8:	b672      	cpsid	i
 80157ba:	e7fe      	b.n	80157ba <vTaskSuspend+0x5a>
				portYIELD_WITHIN_API();
 80157bc:	f7f9 f952 	bl	800ea64 <vPortYield>
 80157c0:	e7ee      	b.n	80157a0 <vTaskSuspend+0x40>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80157c2:	4b09      	ldr	r3, [pc, #36]	; (80157e8 <vTaskSuspend+0x88>)
 80157c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80157c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157c8:	4293      	cmp	r3, r2
 80157ca:	d103      	bne.n	80157d4 <vTaskSuspend+0x74>
					pxCurrentTCB = NULL;
 80157cc:	4b06      	ldr	r3, [pc, #24]	; (80157e8 <vTaskSuspend+0x88>)
 80157ce:	2200      	movs	r2, #0
 80157d0:	609a      	str	r2, [r3, #8]
 80157d2:	e7e5      	b.n	80157a0 <vTaskSuspend+0x40>
					vTaskSwitchContext();
 80157d4:	f7ff ff4a 	bl	801566c <vTaskSwitchContext>
 80157d8:	e7e2      	b.n	80157a0 <vTaskSuspend+0x40>
				taskENTER_CRITICAL();
 80157da:	f7f9 f94f 	bl	800ea7c <vPortEnterCritical>
					prvResetNextTaskUnblockTime();
 80157de:	f7f8 ffcf 	bl	800e780 <prvResetNextTaskUnblockTime>
				taskEXIT_CRITICAL();
 80157e2:	f7f9 f957 	bl	800ea94 <vPortExitCritical>
	}
 80157e6:	e7db      	b.n	80157a0 <vTaskSuspend+0x40>
 80157e8:	20000230 	.word	0x20000230

080157ec <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80157ec:	4b04      	ldr	r3, [pc, #16]	; (8015800 <uxTaskResetEventItemValue+0x14>)
 80157ee:	689a      	ldr	r2, [r3, #8]
 80157f0:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157f2:	6899      	ldr	r1, [r3, #8]
 80157f4:	689a      	ldr	r2, [r3, #8]
 80157f6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80157f8:	2307      	movs	r3, #7
 80157fa:	1a5b      	subs	r3, r3, r1
 80157fc:	6193      	str	r3, [r2, #24]
}
 80157fe:	4770      	bx	lr
 8015800:	20000230 	.word	0x20000230

08015804 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8015804:	4b01      	ldr	r3, [pc, #4]	; (801580c <xTaskGetCurrentTaskHandle+0x8>)
 8015806:	6898      	ldr	r0, [r3, #8]
	}
 8015808:	4770      	bx	lr
 801580a:	46c0      	nop			; (mov r8, r8)
 801580c:	20000230 	.word	0x20000230

08015810 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8015810:	2800      	cmp	r0, #0
 8015812:	d005      	beq.n	8015820 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015814:	4b03      	ldr	r3, [pc, #12]	; (8015824 <vTaskSetTimeOutState+0x14>)
 8015816:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8015818:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801581a:	68db      	ldr	r3, [r3, #12]
 801581c:	6043      	str	r3, [r0, #4]
}
 801581e:	4770      	bx	lr
	configASSERT( pxTimeOut );
 8015820:	b672      	cpsid	i
 8015822:	e7fe      	b.n	8015822 <vTaskSetTimeOutState+0x12>
 8015824:	20000230 	.word	0x20000230

08015828 <xTaskCheckForTimeOut>:
{
 8015828:	b570      	push	{r4, r5, r6, lr}
 801582a:	0004      	movs	r4, r0
 801582c:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 801582e:	2800      	cmp	r0, #0
 8015830:	d003      	beq.n	801583a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8015832:	2900      	cmp	r1, #0
 8015834:	d103      	bne.n	801583e <xTaskCheckForTimeOut+0x16>
 8015836:	b672      	cpsid	i
 8015838:	e7fe      	b.n	8015838 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 801583a:	b672      	cpsid	i
 801583c:	e7fe      	b.n	801583c <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 801583e:	f7f9 f91d 	bl	800ea7c <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8015842:	4b10      	ldr	r3, [pc, #64]	; (8015884 <xTaskCheckForTimeOut+0x5c>)
 8015844:	68da      	ldr	r2, [r3, #12]
			if( *pxTicksToWait == portMAX_DELAY )
 8015846:	6833      	ldr	r3, [r6, #0]
 8015848:	1c59      	adds	r1, r3, #1
 801584a:	d019      	beq.n	8015880 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801584c:	490d      	ldr	r1, [pc, #52]	; (8015884 <xTaskCheckForTimeOut+0x5c>)
 801584e:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8015850:	6820      	ldr	r0, [r4, #0]
 8015852:	4288      	cmp	r0, r1
 8015854:	d003      	beq.n	801585e <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 8015856:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015858:	6861      	ldr	r1, [r4, #4]
 801585a:	4291      	cmp	r1, r2
 801585c:	d904      	bls.n	8015868 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 801585e:	6861      	ldr	r1, [r4, #4]
 8015860:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 8015862:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8015864:	4283      	cmp	r3, r0
 8015866:	d803      	bhi.n	8015870 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 8015868:	f7f9 f914 	bl	800ea94 <vPortExitCritical>
}
 801586c:	0028      	movs	r0, r5
 801586e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8015870:	1a9b      	subs	r3, r3, r2
 8015872:	185b      	adds	r3, r3, r1
 8015874:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8015876:	0020      	movs	r0, r4
 8015878:	f7ff ffca 	bl	8015810 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 801587c:	2500      	movs	r5, #0
 801587e:	e7f3      	b.n	8015868 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 8015880:	2500      	movs	r5, #0
 8015882:	e7f1      	b.n	8015868 <xTaskCheckForTimeOut+0x40>
 8015884:	20000230 	.word	0x20000230

08015888 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8015888:	4b01      	ldr	r3, [pc, #4]	; (8015890 <vTaskMissedYield+0x8>)
 801588a:	2201      	movs	r2, #1
 801588c:	671a      	str	r2, [r3, #112]	; 0x70
}
 801588e:	4770      	bx	lr
 8015890:	20000230 	.word	0x20000230

08015894 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8015894:	4b05      	ldr	r3, [pc, #20]	; (80158ac <xTaskGetSchedulerState+0x18>)
 8015896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015898:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 801589a:	2b00      	cmp	r3, #0
 801589c:	d004      	beq.n	80158a8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801589e:	4b03      	ldr	r3, [pc, #12]	; (80158ac <xTaskGetSchedulerState+0x18>)
 80158a0:	6b58      	ldr	r0, [r3, #52]	; 0x34
				xReturn = taskSCHEDULER_SUSPENDED;
 80158a2:	4243      	negs	r3, r0
 80158a4:	4158      	adcs	r0, r3
 80158a6:	0040      	lsls	r0, r0, #1
	}
 80158a8:	4770      	bx	lr
 80158aa:	46c0      	nop			; (mov r8, r8)
 80158ac:	20000230 	.word	0x20000230

080158b0 <vTaskPriorityInherit>:
	{
 80158b0:	b570      	push	{r4, r5, r6, lr}
 80158b2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80158b4:	d01a      	beq.n	80158ec <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80158b6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80158b8:	4b18      	ldr	r3, [pc, #96]	; (801591c <vTaskPriorityInherit+0x6c>)
 80158ba:	689b      	ldr	r3, [r3, #8]
 80158bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158be:	429a      	cmp	r2, r3
 80158c0:	d214      	bcs.n	80158ec <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80158c2:	6983      	ldr	r3, [r0, #24]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	db05      	blt.n	80158d4 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158c8:	4b14      	ldr	r3, [pc, #80]	; (801591c <vTaskPriorityInherit+0x6c>)
 80158ca:	689b      	ldr	r3, [r3, #8]
 80158cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80158ce:	2307      	movs	r3, #7
 80158d0:	1a5b      	subs	r3, r3, r1
 80158d2:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80158d4:	0093      	lsls	r3, r2, #2
 80158d6:	189b      	adds	r3, r3, r2
 80158d8:	009b      	lsls	r3, r3, #2
 80158da:	4a11      	ldr	r2, [pc, #68]	; (8015920 <vTaskPriorityInherit+0x70>)
 80158dc:	189b      	adds	r3, r3, r2
 80158de:	6962      	ldr	r2, [r4, #20]
 80158e0:	429a      	cmp	r2, r3
 80158e2:	d004      	beq.n	80158ee <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80158e4:	4b0d      	ldr	r3, [pc, #52]	; (801591c <vTaskPriorityInherit+0x6c>)
 80158e6:	689b      	ldr	r3, [r3, #8]
 80158e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158ea:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 80158ec:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80158ee:	1d25      	adds	r5, r4, #4
 80158f0:	0028      	movs	r0, r5
 80158f2:	f7f8 ff32 	bl	800e75a <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80158f6:	4a09      	ldr	r2, [pc, #36]	; (801591c <vTaskPriorityInherit+0x6c>)
 80158f8:	6893      	ldr	r3, [r2, #8]
 80158fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158fc:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80158fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015900:	4293      	cmp	r3, r2
 8015902:	d808      	bhi.n	8015916 <vTaskPriorityInherit+0x66>
 8015904:	0098      	lsls	r0, r3, #2
 8015906:	18c0      	adds	r0, r0, r3
 8015908:	0080      	lsls	r0, r0, #2
 801590a:	4b05      	ldr	r3, [pc, #20]	; (8015920 <vTaskPriorityInherit+0x70>)
 801590c:	18c0      	adds	r0, r0, r3
 801590e:	0029      	movs	r1, r5
 8015910:	f7f8 ff00 	bl	800e714 <vListInsertEnd>
	}
 8015914:	e7ea      	b.n	80158ec <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 8015916:	4a01      	ldr	r2, [pc, #4]	; (801591c <vTaskPriorityInherit+0x6c>)
 8015918:	6393      	str	r3, [r2, #56]	; 0x38
 801591a:	e7f3      	b.n	8015904 <vTaskPriorityInherit+0x54>
 801591c:	20000230 	.word	0x20000230
 8015920:	200002d0 	.word	0x200002d0

08015924 <xTaskPriorityDisinherit>:
	{
 8015924:	b570      	push	{r4, r5, r6, lr}
 8015926:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8015928:	d02b      	beq.n	8015982 <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 801592a:	4b18      	ldr	r3, [pc, #96]	; (801598c <xTaskPriorityDisinherit+0x68>)
 801592c:	689b      	ldr	r3, [r3, #8]
 801592e:	4283      	cmp	r3, r0
 8015930:	d001      	beq.n	8015936 <xTaskPriorityDisinherit+0x12>
 8015932:	b672      	cpsid	i
 8015934:	e7fe      	b.n	8015934 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 8015936:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8015938:	2b00      	cmp	r3, #0
 801593a:	d101      	bne.n	8015940 <xTaskPriorityDisinherit+0x1c>
 801593c:	b672      	cpsid	i
 801593e:	e7fe      	b.n	801593e <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 8015940:	3b01      	subs	r3, #1
 8015942:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015944:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015946:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8015948:	428a      	cmp	r2, r1
 801594a:	d01c      	beq.n	8015986 <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 801594c:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801594e:	4283      	cmp	r3, r0
 8015950:	d118      	bne.n	8015984 <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8015952:	1d25      	adds	r5, r4, #4
 8015954:	0028      	movs	r0, r5
 8015956:	f7f8 ff00 	bl	800e75a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801595a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801595c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801595e:	2207      	movs	r2, #7
 8015960:	1ad2      	subs	r2, r2, r3
 8015962:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8015964:	4a09      	ldr	r2, [pc, #36]	; (801598c <xTaskPriorityDisinherit+0x68>)
 8015966:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015968:	4293      	cmp	r3, r2
 801596a:	d901      	bls.n	8015970 <xTaskPriorityDisinherit+0x4c>
 801596c:	4a07      	ldr	r2, [pc, #28]	; (801598c <xTaskPriorityDisinherit+0x68>)
 801596e:	6393      	str	r3, [r2, #56]	; 0x38
 8015970:	2014      	movs	r0, #20
 8015972:	4358      	muls	r0, r3
 8015974:	4b06      	ldr	r3, [pc, #24]	; (8015990 <xTaskPriorityDisinherit+0x6c>)
 8015976:	18c0      	adds	r0, r0, r3
 8015978:	0029      	movs	r1, r5
 801597a:	f7f8 fecb 	bl	800e714 <vListInsertEnd>
					xReturn = pdTRUE;
 801597e:	2001      	movs	r0, #1
 8015980:	e000      	b.n	8015984 <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 8015982:	2000      	movs	r0, #0
	}
 8015984:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 8015986:	2000      	movs	r0, #0
 8015988:	e7fc      	b.n	8015984 <xTaskPriorityDisinherit+0x60>
 801598a:	46c0      	nop			; (mov r8, r8)
 801598c:	20000230 	.word	0x20000230
 8015990:	200002d0 	.word	0x200002d0

08015994 <xTaskGenericCreate>:
{
 8015994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015996:	46c6      	mov	lr, r8
 8015998:	b500      	push	{lr}
 801599a:	b084      	sub	sp, #16
 801599c:	9002      	str	r0, [sp, #8]
 801599e:	000d      	movs	r5, r1
 80159a0:	0016      	movs	r6, r2
 80159a2:	9303      	str	r3, [sp, #12]
 80159a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159a6:	4698      	mov	r8, r3
 80159a8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 80159aa:	2800      	cmp	r0, #0
 80159ac:	d101      	bne.n	80159b2 <xTaskGenericCreate+0x1e>
 80159ae:	b672      	cpsid	i
 80159b0:	e7fe      	b.n	80159b0 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 80159b2:	2b06      	cmp	r3, #6
 80159b4:	d901      	bls.n	80159ba <xTaskGenericCreate+0x26>
 80159b6:	b672      	cpsid	i
 80159b8:	e7fe      	b.n	80159b8 <xTaskGenericCreate+0x24>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80159ba:	2f00      	cmp	r7, #0
 80159bc:	d105      	bne.n	80159ca <xTaskGenericCreate+0x36>
 80159be:	0090      	lsls	r0, r2, #2
 80159c0:	f000 fbd6 	bl	8016170 <pvPortMalloc>
 80159c4:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 80159c6:	d100      	bne.n	80159ca <xTaskGenericCreate+0x36>
 80159c8:	e0b8      	b.n	8015b3c <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80159ca:	2060      	movs	r0, #96	; 0x60
 80159cc:	f000 fbd0 	bl	8016170 <pvPortMalloc>
 80159d0:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 80159d2:	d100      	bne.n	80159d6 <xTaskGenericCreate+0x42>
 80159d4:	e08d      	b.n	8015af2 <xTaskGenericCreate+0x15e>
				pxNewTCB->pxStack = pxStack;
 80159d6:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 80159d8:	00b2      	lsls	r2, r6, #2
 80159da:	21a5      	movs	r1, #165	; 0xa5
 80159dc:	0038      	movs	r0, r7
 80159de:	f7fc fb63 	bl	80120a8 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 80159e2:	4b58      	ldr	r3, [pc, #352]	; (8015b44 <xTaskGenericCreate+0x1b0>)
 80159e4:	18f3      	adds	r3, r6, r3
 80159e6:	009b      	lsls	r3, r3, #2
 80159e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80159ea:	4694      	mov	ip, r2
 80159ec:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80159ee:	2207      	movs	r2, #7
 80159f0:	4393      	bics	r3, r2
 80159f2:	001f      	movs	r7, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80159f4:	782a      	ldrb	r2, [r5, #0]
 80159f6:	2334      	movs	r3, #52	; 0x34
 80159f8:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 80159fa:	782b      	ldrb	r3, [r5, #0]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d000      	beq.n	8015a02 <xTaskGenericCreate+0x6e>
 8015a00:	e080      	b.n	8015b04 <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015a02:	2500      	movs	r5, #0
 8015a04:	2340      	movs	r3, #64	; 0x40
 8015a06:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 8015a08:	4643      	mov	r3, r8
 8015a0a:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 8015a0c:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 8015a0e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8015a10:	1d23      	adds	r3, r4, #4
 8015a12:	9301      	str	r3, [sp, #4]
 8015a14:	0018      	movs	r0, r3
 8015a16:	f7f8 fe7a 	bl	800e70e <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8015a1a:	0020      	movs	r0, r4
 8015a1c:	3018      	adds	r0, #24
 8015a1e:	f7f8 fe76 	bl	800e70e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8015a22:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a24:	2307      	movs	r3, #7
 8015a26:	4642      	mov	r2, r8
 8015a28:	1a9b      	subs	r3, r3, r2
 8015a2a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8015a2c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 8015a2e:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 8015a30:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 8015a32:	235c      	movs	r3, #92	; 0x5c
 8015a34:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015a36:	9a03      	ldr	r2, [sp, #12]
 8015a38:	9902      	ldr	r1, [sp, #8]
 8015a3a:	0038      	movs	r0, r7
 8015a3c:	f000 fb52 	bl	80160e4 <pxPortInitialiseStack>
 8015a40:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 8015a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a44:	42ab      	cmp	r3, r5
 8015a46:	d000      	beq.n	8015a4a <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015a48:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 8015a4a:	f7f9 f817 	bl	800ea7c <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 8015a4e:	4b3e      	ldr	r3, [pc, #248]	; (8015b48 <xTaskGenericCreate+0x1b4>)
 8015a50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015a52:	3201      	adds	r2, #1
 8015a54:	665a      	str	r2, [r3, #100]	; 0x64
			if( pxCurrentTCB == NULL )
 8015a56:	689b      	ldr	r3, [r3, #8]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d163      	bne.n	8015b24 <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 8015a5c:	4b3a      	ldr	r3, [pc, #232]	; (8015b48 <xTaskGenericCreate+0x1b4>)
 8015a5e:	609c      	str	r4, [r3, #8]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015a62:	2b01      	cmp	r3, #1
 8015a64:	d123      	bne.n	8015aae <xTaskGenericCreate+0x11a>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015a66:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015a68:	2714      	movs	r7, #20
 8015a6a:	4e38      	ldr	r6, [pc, #224]	; (8015b4c <xTaskGenericCreate+0x1b8>)
 8015a6c:	0038      	movs	r0, r7
 8015a6e:	4368      	muls	r0, r5
 8015a70:	1980      	adds	r0, r0, r6
 8015a72:	f7f8 fe41 	bl	800e6f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015a76:	3501      	adds	r5, #1
 8015a78:	2d07      	cmp	r5, #7
 8015a7a:	d1f7      	bne.n	8015a6c <xTaskGenericCreate+0xd8>
	vListInitialise( &xDelayedTaskList1 );
 8015a7c:	4d32      	ldr	r5, [pc, #200]	; (8015b48 <xTaskGenericCreate+0x1b4>)
 8015a7e:	002f      	movs	r7, r5
 8015a80:	3778      	adds	r7, #120	; 0x78
 8015a82:	0038      	movs	r0, r7
 8015a84:	f7f8 fe38 	bl	800e6f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015a88:	4e31      	ldr	r6, [pc, #196]	; (8015b50 <xTaskGenericCreate+0x1bc>)
 8015a8a:	360c      	adds	r6, #12
 8015a8c:	0030      	movs	r0, r6
 8015a8e:	f7f8 fe33 	bl	800e6f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015a92:	0028      	movs	r0, r5
 8015a94:	3050      	adds	r0, #80	; 0x50
 8015a96:	f7f8 fe2f 	bl	800e6f8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8015a9a:	0028      	movs	r0, r5
 8015a9c:	3014      	adds	r0, #20
 8015a9e:	f7f8 fe2b 	bl	800e6f8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8015aa2:	0028      	movs	r0, r5
 8015aa4:	303c      	adds	r0, #60	; 0x3c
 8015aa6:	f7f8 fe27 	bl	800e6f8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8015aaa:	602f      	str	r7, [r5, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015aac:	612e      	str	r6, [r5, #16]
			uxTaskNumber++;
 8015aae:	4a26      	ldr	r2, [pc, #152]	; (8015b48 <xTaskGenericCreate+0x1b4>)
 8015ab0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8015ab2:	3301      	adds	r3, #1
 8015ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015ab6:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 8015ab8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015abc:	4293      	cmp	r3, r2
 8015abe:	d901      	bls.n	8015ac4 <xTaskGenericCreate+0x130>
 8015ac0:	4a21      	ldr	r2, [pc, #132]	; (8015b48 <xTaskGenericCreate+0x1b4>)
 8015ac2:	6393      	str	r3, [r2, #56]	; 0x38
 8015ac4:	2014      	movs	r0, #20
 8015ac6:	4358      	muls	r0, r3
 8015ac8:	4b20      	ldr	r3, [pc, #128]	; (8015b4c <xTaskGenericCreate+0x1b8>)
 8015aca:	18c0      	adds	r0, r0, r3
 8015acc:	9901      	ldr	r1, [sp, #4]
 8015ace:	f7f8 fe21 	bl	800e714 <vListInsertEnd>
		taskEXIT_CRITICAL();
 8015ad2:	f7f8 ffdf 	bl	800ea94 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8015ad6:	4b1c      	ldr	r3, [pc, #112]	; (8015b48 <xTaskGenericCreate+0x1b4>)
 8015ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			xReturn = pdPASS;
 8015ada:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d00d      	beq.n	8015afc <xTaskGenericCreate+0x168>
			if( pxCurrentTCB->uxPriority < uxPriority )
 8015ae0:	4b19      	ldr	r3, [pc, #100]	; (8015b48 <xTaskGenericCreate+0x1b4>)
 8015ae2:	689b      	ldr	r3, [r3, #8]
 8015ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ae6:	4543      	cmp	r3, r8
 8015ae8:	d208      	bcs.n	8015afc <xTaskGenericCreate+0x168>
				taskYIELD_IF_USING_PREEMPTION();
 8015aea:	f7f8 ffbb 	bl	800ea64 <vPortYield>
			xReturn = pdPASS;
 8015aee:	2001      	movs	r0, #1
 8015af0:	e004      	b.n	8015afc <xTaskGenericCreate+0x168>
				vPortFree( pxStack );
 8015af2:	0038      	movs	r0, r7
 8015af4:	f000 fbd2 	bl	801629c <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015af8:	2001      	movs	r0, #1
 8015afa:	4240      	negs	r0, r0
}
 8015afc:	b004      	add	sp, #16
 8015afe:	bc04      	pop	{r2}
 8015b00:	4690      	mov	r8, r2
 8015b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b04:	1c6b      	adds	r3, r5, #1
 8015b06:	0022      	movs	r2, r4
 8015b08:	3235      	adds	r2, #53	; 0x35
 8015b0a:	0021      	movs	r1, r4
 8015b0c:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8015b0e:	7818      	ldrb	r0, [r3, #0]
 8015b10:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 8015b12:	7818      	ldrb	r0, [r3, #0]
 8015b14:	2800      	cmp	r0, #0
 8015b16:	d100      	bne.n	8015b1a <xTaskGenericCreate+0x186>
 8015b18:	e773      	b.n	8015a02 <xTaskGenericCreate+0x6e>
 8015b1a:	3301      	adds	r3, #1
 8015b1c:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015b1e:	4291      	cmp	r1, r2
 8015b20:	d1f5      	bne.n	8015b0e <xTaskGenericCreate+0x17a>
 8015b22:	e76e      	b.n	8015a02 <xTaskGenericCreate+0x6e>
				if( xSchedulerRunning == pdFALSE )
 8015b24:	4b08      	ldr	r3, [pc, #32]	; (8015b48 <xTaskGenericCreate+0x1b4>)
 8015b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d1c0      	bne.n	8015aae <xTaskGenericCreate+0x11a>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8015b2c:	4b06      	ldr	r3, [pc, #24]	; (8015b48 <xTaskGenericCreate+0x1b4>)
 8015b2e:	689b      	ldr	r3, [r3, #8]
 8015b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b32:	4543      	cmp	r3, r8
 8015b34:	d8bb      	bhi.n	8015aae <xTaskGenericCreate+0x11a>
						pxCurrentTCB = pxNewTCB;
 8015b36:	4b04      	ldr	r3, [pc, #16]	; (8015b48 <xTaskGenericCreate+0x1b4>)
 8015b38:	609c      	str	r4, [r3, #8]
 8015b3a:	e7b8      	b.n	8015aae <xTaskGenericCreate+0x11a>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015b3c:	2001      	movs	r0, #1
 8015b3e:	4240      	negs	r0, r0
 8015b40:	e7dc      	b.n	8015afc <xTaskGenericCreate+0x168>
 8015b42:	46c0      	nop			; (mov r8, r8)
 8015b44:	3fffffff 	.word	0x3fffffff
 8015b48:	20000230 	.word	0x20000230
 8015b4c:	200002d0 	.word	0x200002d0
 8015b50:	200002b0 	.word	0x200002b0

08015b54 <vTaskStartScheduler>:
{
 8015b54:	b500      	push	{lr}
 8015b56:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8015b58:	2300      	movs	r3, #0
 8015b5a:	9303      	str	r3, [sp, #12]
 8015b5c:	9302      	str	r3, [sp, #8]
 8015b5e:	9301      	str	r3, [sp, #4]
 8015b60:	9300      	str	r3, [sp, #0]
 8015b62:	22a0      	movs	r2, #160	; 0xa0
 8015b64:	490c      	ldr	r1, [pc, #48]	; (8015b98 <vTaskStartScheduler+0x44>)
 8015b66:	480d      	ldr	r0, [pc, #52]	; (8015b9c <vTaskStartScheduler+0x48>)
 8015b68:	f7ff ff14 	bl	8015994 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 8015b6c:	2801      	cmp	r0, #1
 8015b6e:	d003      	beq.n	8015b78 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 8015b70:	2800      	cmp	r0, #0
 8015b72:	d10f      	bne.n	8015b94 <vTaskStartScheduler+0x40>
 8015b74:	b672      	cpsid	i
 8015b76:	e7fe      	b.n	8015b76 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 8015b78:	f000 f962 	bl	8015e40 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8015b7c:	2801      	cmp	r0, #1
 8015b7e:	d1f7      	bne.n	8015b70 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 8015b80:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 8015b82:	4b07      	ldr	r3, [pc, #28]	; (8015ba0 <vTaskStartScheduler+0x4c>)
 8015b84:	2201      	movs	r2, #1
 8015b86:	631a      	str	r2, [r3, #48]	; 0x30
		xTickCount = ( TickType_t ) 0U;
 8015b88:	2200      	movs	r2, #0
 8015b8a:	60da      	str	r2, [r3, #12]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8015b8c:	f7f5 fc26 	bl	800b3dc <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8015b90:	f000 fab8 	bl	8016104 <xPortStartScheduler>
}
 8015b94:	b005      	add	sp, #20
 8015b96:	bd00      	pop	{pc}
 8015b98:	08019a70 	.word	0x08019a70
 8015b9c:	0800e7d9 	.word	0x0800e7d9
 8015ba0:	20000230 	.word	0x20000230

08015ba4 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
 8015ba4:	2800      	cmp	r0, #0
 8015ba6:	d001      	beq.n	8015bac <uxTaskGetTaskNumber+0x8>
			uxReturn = pxTCB->uxTaskNumber;
 8015ba8:	6c80      	ldr	r0, [r0, #72]	; 0x48
	}
 8015baa:	4770      	bx	lr
			uxReturn = 0U;
 8015bac:	2000      	movs	r0, #0
		return uxReturn;
 8015bae:	e7fc      	b.n	8015baa <uxTaskGetTaskNumber+0x6>

08015bb0 <vTaskSetTaskNumber>:
		if( xTask != NULL )
 8015bb0:	2800      	cmp	r0, #0
 8015bb2:	d000      	beq.n	8015bb6 <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
 8015bb4:	6481      	str	r1, [r0, #72]	; 0x48
	}
 8015bb6:	4770      	bx	lr

08015bb8 <vTaskList>:
	{
 8015bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bba:	b085      	sub	sp, #20
 8015bbc:	0004      	movs	r4, r0
		*pcWriteBuffer = 0x00;
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 8015bc2:	4b2b      	ldr	r3, [pc, #172]	; (8015c70 <vTaskList+0xb8>)
 8015bc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015bc6:	9203      	str	r2, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8015bc8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8015bca:	0140      	lsls	r0, r0, #5
 8015bcc:	f000 fad0 	bl	8016170 <pvPortMalloc>
 8015bd0:	1e07      	subs	r7, r0, #0
		if( pxTaskStatusArray != NULL )
 8015bd2:	d04a      	beq.n	8015c6a <vTaskList+0xb2>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8015bd4:	9903      	ldr	r1, [sp, #12]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	f7f8 fe2e 	bl	800e838 <uxTaskGetSystemState>
 8015bdc:	9003      	str	r0, [sp, #12]
			for( x = 0; x < uxArraySize; x++ )
 8015bde:	2300      	movs	r3, #0
 8015be0:	9302      	str	r3, [sp, #8]
 8015be2:	9a02      	ldr	r2, [sp, #8]
 8015be4:	9b03      	ldr	r3, [sp, #12]
 8015be6:	429a      	cmp	r2, r3
 8015be8:	d23c      	bcs.n	8015c64 <vTaskList+0xac>
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8015bea:	4e22      	ldr	r6, [pc, #136]	; (8015c74 <vTaskList+0xbc>)
 8015bec:	e027      	b.n	8015c3e <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 8015bee:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8015bf0:	2b01      	cmp	r3, #1
 8015bf2:	d133      	bne.n	8015c5c <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8015bf4:	9b02      	ldr	r3, [sp, #8]
 8015bf6:	015b      	lsls	r3, r3, #5
 8015bf8:	18fb      	adds	r3, r7, r3
 8015bfa:	6859      	ldr	r1, [r3, #4]
 8015bfc:	0020      	movs	r0, r4
 8015bfe:	f7f8 fdd3 	bl	800e7a8 <prvWriteNameToBuffer>
 8015c02:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8015c04:	9b02      	ldr	r3, [sp, #8]
 8015c06:	9a02      	ldr	r2, [sp, #8]
 8015c08:	9902      	ldr	r1, [sp, #8]
 8015c0a:	015b      	lsls	r3, r3, #5
 8015c0c:	18fb      	adds	r3, r7, r3
 8015c0e:	691b      	ldr	r3, [r3, #16]
 8015c10:	0149      	lsls	r1, r1, #5
 8015c12:	1879      	adds	r1, r7, r1
 8015c14:	6889      	ldr	r1, [r1, #8]
 8015c16:	9101      	str	r1, [sp, #4]
 8015c18:	0152      	lsls	r2, r2, #5
 8015c1a:	18ba      	adds	r2, r7, r2
 8015c1c:	8b92      	ldrh	r2, [r2, #28]
 8015c1e:	9200      	str	r2, [sp, #0]
 8015c20:	002a      	movs	r2, r5
 8015c22:	0031      	movs	r1, r6
 8015c24:	f7fc fb3e 	bl	80122a4 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 8015c28:	0020      	movs	r0, r4
 8015c2a:	f7ea fa75 	bl	8000118 <strlen>
 8015c2e:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 8015c30:	9b02      	ldr	r3, [sp, #8]
 8015c32:	3301      	adds	r3, #1
 8015c34:	9302      	str	r3, [sp, #8]
 8015c36:	9a02      	ldr	r2, [sp, #8]
 8015c38:	9b03      	ldr	r3, [sp, #12]
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	d212      	bcs.n	8015c64 <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8015c3e:	9b02      	ldr	r3, [sp, #8]
 8015c40:	015b      	lsls	r3, r3, #5
 8015c42:	18fb      	adds	r3, r7, r3
 8015c44:	7b1b      	ldrb	r3, [r3, #12]
 8015c46:	2b02      	cmp	r3, #2
 8015c48:	d00a      	beq.n	8015c60 <vTaskList+0xa8>
 8015c4a:	b2da      	uxtb	r2, r3
 8015c4c:	2a02      	cmp	r2, #2
 8015c4e:	d9ce      	bls.n	8015bee <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8015c50:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8015c52:	2b03      	cmp	r3, #3
 8015c54:	d0ce      	beq.n	8015bf4 <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 8015c56:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8015c58:	2b04      	cmp	r3, #4
 8015c5a:	d0cb      	beq.n	8015bf4 <vTaskList+0x3c>
										cStatus = 0x00;
 8015c5c:	2500      	movs	r5, #0
										break;
 8015c5e:	e7c9      	b.n	8015bf4 <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8015c60:	2542      	movs	r5, #66	; 0x42
 8015c62:	e7c7      	b.n	8015bf4 <vTaskList+0x3c>
			vPortFree( pxTaskStatusArray );
 8015c64:	0038      	movs	r0, r7
 8015c66:	f000 fb19 	bl	801629c <vPortFree>
	}
 8015c6a:	b005      	add	sp, #20
 8015c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c6e:	46c0      	nop			; (mov r8, r8)
 8015c70:	20000230 	.word	0x20000230
 8015c74:	08019a78 	.word	0x08019a78

08015c78 <vTaskGetRunTimeStats>:
	{
 8015c78:	b570      	push	{r4, r5, r6, lr}
 8015c7a:	b084      	sub	sp, #16
 8015c7c:	0004      	movs	r4, r0
		*pcWriteBuffer = 0x00;
 8015c7e:	2300      	movs	r3, #0
 8015c80:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 8015c82:	4b26      	ldr	r3, [pc, #152]	; (8015d1c <vTaskGetRunTimeStats+0xa4>)
 8015c84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015c86:	9203      	str	r2, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8015c88:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8015c8a:	0140      	lsls	r0, r0, #5
 8015c8c:	f000 fa70 	bl	8016170 <pvPortMalloc>
 8015c90:	1e06      	subs	r6, r0, #0
		if( pxTaskStatusArray != NULL )
 8015c92:	d014      	beq.n	8015cbe <vTaskGetRunTimeStats+0x46>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8015c94:	9903      	ldr	r1, [sp, #12]
 8015c96:	aa01      	add	r2, sp, #4
 8015c98:	f7f8 fdce 	bl	800e838 <uxTaskGetSystemState>
 8015c9c:	9003      	str	r0, [sp, #12]
			ulTotalTime /= 100UL;
 8015c9e:	2164      	movs	r1, #100	; 0x64
 8015ca0:	9801      	ldr	r0, [sp, #4]
 8015ca2:	f7ea fa4b 	bl	800013c <__udivsi3>
 8015ca6:	9001      	str	r0, [sp, #4]
			if( ulTotalTime > 0 )
 8015ca8:	2800      	cmp	r0, #0
 8015caa:	d005      	beq.n	8015cb8 <vTaskGetRunTimeStats+0x40>
				for( x = 0; x < uxArraySize; x++ )
 8015cac:	2300      	movs	r3, #0
 8015cae:	9302      	str	r3, [sp, #8]
 8015cb0:	9a02      	ldr	r2, [sp, #8]
 8015cb2:	9b03      	ldr	r3, [sp, #12]
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	d316      	bcc.n	8015ce6 <vTaskGetRunTimeStats+0x6e>
			vPortFree( pxTaskStatusArray );
 8015cb8:	0030      	movs	r0, r6
 8015cba:	f000 faef 	bl	801629c <vPortFree>
	}
 8015cbe:	b004      	add	sp, #16
 8015cc0:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8015cc2:	9b02      	ldr	r3, [sp, #8]
 8015cc4:	015b      	lsls	r3, r3, #5
 8015cc6:	18f3      	adds	r3, r6, r3
 8015cc8:	699a      	ldr	r2, [r3, #24]
 8015cca:	4915      	ldr	r1, [pc, #84]	; (8015d20 <vTaskGetRunTimeStats+0xa8>)
 8015ccc:	f7fc faea 	bl	80122a4 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 8015cd0:	0020      	movs	r0, r4
 8015cd2:	f7ea fa21 	bl	8000118 <strlen>
 8015cd6:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 8015cd8:	9b02      	ldr	r3, [sp, #8]
 8015cda:	3301      	adds	r3, #1
 8015cdc:	9302      	str	r3, [sp, #8]
 8015cde:	9a02      	ldr	r2, [sp, #8]
 8015ce0:	9b03      	ldr	r3, [sp, #12]
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	d2e8      	bcs.n	8015cb8 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8015ce6:	9b02      	ldr	r3, [sp, #8]
 8015ce8:	015b      	lsls	r3, r3, #5
 8015cea:	18f3      	adds	r3, r6, r3
 8015cec:	9901      	ldr	r1, [sp, #4]
 8015cee:	6998      	ldr	r0, [r3, #24]
 8015cf0:	f7ea fa24 	bl	800013c <__udivsi3>
 8015cf4:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8015cf6:	9b02      	ldr	r3, [sp, #8]
 8015cf8:	015b      	lsls	r3, r3, #5
 8015cfa:	18f3      	adds	r3, r6, r3
 8015cfc:	6859      	ldr	r1, [r3, #4]
 8015cfe:	0020      	movs	r0, r4
 8015d00:	f7f8 fd52 	bl	800e7a8 <prvWriteNameToBuffer>
 8015d04:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 8015d06:	2d00      	cmp	r5, #0
 8015d08:	d0db      	beq.n	8015cc2 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8015d0a:	9b02      	ldr	r3, [sp, #8]
 8015d0c:	015b      	lsls	r3, r3, #5
 8015d0e:	18f3      	adds	r3, r6, r3
 8015d10:	699a      	ldr	r2, [r3, #24]
 8015d12:	002b      	movs	r3, r5
 8015d14:	4903      	ldr	r1, [pc, #12]	; (8015d24 <vTaskGetRunTimeStats+0xac>)
 8015d16:	f7fc fac5 	bl	80122a4 <siprintf>
 8015d1a:	e7d9      	b.n	8015cd0 <vTaskGetRunTimeStats+0x58>
 8015d1c:	20000230 	.word	0x20000230
 8015d20:	08019a94 	.word	0x08019a94
 8015d24:	08019a88 	.word	0x08019a88

08015d28 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015d28:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015d2a:	f7f8 fea7 	bl	800ea7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015d2e:	4b10      	ldr	r3, [pc, #64]	; (8015d70 <prvCheckForValidListAndQueue+0x48>)
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d002      	beq.n	8015d3c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015d36:	f7f8 fead 	bl	800ea94 <vPortExitCritical>
}
 8015d3a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8015d3c:	4c0c      	ldr	r4, [pc, #48]	; (8015d70 <prvCheckForValidListAndQueue+0x48>)
 8015d3e:	1d26      	adds	r6, r4, #4
 8015d40:	0030      	movs	r0, r6
 8015d42:	f7f8 fcd9 	bl	800e6f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015d46:	0025      	movs	r5, r4
 8015d48:	3518      	adds	r5, #24
 8015d4a:	0028      	movs	r0, r5
 8015d4c:	f7f8 fcd4 	bl	800e6f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015d50:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 8015d52:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8015d54:	2200      	movs	r2, #0
 8015d56:	2110      	movs	r1, #16
 8015d58:	2004      	movs	r0, #4
 8015d5a:	f7ff f8a2 	bl	8014ea2 <xQueueGenericCreate>
 8015d5e:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
 8015d60:	2800      	cmp	r0, #0
 8015d62:	d101      	bne.n	8015d68 <prvCheckForValidListAndQueue+0x40>
 8015d64:	b672      	cpsid	i
 8015d66:	e7fe      	b.n	8015d66 <prvCheckForValidListAndQueue+0x3e>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015d68:	4902      	ldr	r1, [pc, #8]	; (8015d74 <prvCheckForValidListAndQueue+0x4c>)
 8015d6a:	f7ff f80d 	bl	8014d88 <vQueueAddToRegistry>
 8015d6e:	e7e2      	b.n	8015d36 <prvCheckForValidListAndQueue+0xe>
 8015d70:	2000035c 	.word	0x2000035c
 8015d74:	08019ab4 	.word	0x08019ab4

08015d78 <prvInsertTimerInActiveList>:
{
 8015d78:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015d7a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015d7c:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8015d7e:	4291      	cmp	r1, r2
 8015d80:	d80b      	bhi.n	8015d9a <prvInsertTimerInActiveList+0x22>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8015d82:	1ad2      	subs	r2, r2, r3
			xProcessTimerNow = pdTRUE;
 8015d84:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8015d86:	6983      	ldr	r3, [r0, #24]
 8015d88:	429a      	cmp	r2, r3
 8015d8a:	d211      	bcs.n	8015db0 <prvInsertTimerInActiveList+0x38>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015d8c:	1d01      	adds	r1, r0, #4
 8015d8e:	4b09      	ldr	r3, [pc, #36]	; (8015db4 <prvInsertTimerInActiveList+0x3c>)
 8015d90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015d92:	f7f8 fccb 	bl	800e72c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8015d96:	2400      	movs	r4, #0
 8015d98:	e00a      	b.n	8015db0 <prvInsertTimerInActiveList+0x38>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d202      	bcs.n	8015da4 <prvInsertTimerInActiveList+0x2c>
			xProcessTimerNow = pdTRUE;
 8015d9e:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015da0:	4299      	cmp	r1, r3
 8015da2:	d205      	bcs.n	8015db0 <prvInsertTimerInActiveList+0x38>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015da4:	1d01      	adds	r1, r0, #4
 8015da6:	4b03      	ldr	r3, [pc, #12]	; (8015db4 <prvInsertTimerInActiveList+0x3c>)
 8015da8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015daa:	f7f8 fcbf 	bl	800e72c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8015dae:	2400      	movs	r4, #0
}
 8015db0:	0020      	movs	r0, r4
 8015db2:	bd10      	pop	{r4, pc}
 8015db4:	2000035c 	.word	0x2000035c

08015db8 <xTimerCreate>:
{
 8015db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dba:	46c6      	mov	lr, r8
 8015dbc:	b500      	push	{lr}
 8015dbe:	4680      	mov	r8, r0
 8015dc0:	000d      	movs	r5, r1
 8015dc2:	0017      	movs	r7, r2
 8015dc4:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 8015dc6:	2900      	cmp	r1, #0
 8015dc8:	d014      	beq.n	8015df4 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8015dca:	202c      	movs	r0, #44	; 0x2c
 8015dcc:	f000 f9d0 	bl	8016170 <pvPortMalloc>
 8015dd0:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 8015dd2:	d00b      	beq.n	8015dec <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 8015dd4:	f7ff ffa8 	bl	8015d28 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 8015dd8:	4643      	mov	r3, r8
 8015dda:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8015ddc:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8015dde:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8015de0:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015de2:	9b06      	ldr	r3, [sp, #24]
 8015de4:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015de6:	1d20      	adds	r0, r4, #4
 8015de8:	f7f8 fc91 	bl	800e70e <vListInitialiseItem>
}
 8015dec:	0020      	movs	r0, r4
 8015dee:	bc04      	pop	{r2}
 8015df0:	4690      	mov	r8, r2
 8015df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8015df4:	b672      	cpsid	i
 8015df6:	e7fe      	b.n	8015df6 <xTimerCreate+0x3e>

08015df8 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8015df8:	b510      	push	{r4, lr}
 8015dfa:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8015dfc:	d101      	bne.n	8015e02 <pvTimerGetTimerID+0xa>
 8015dfe:	b672      	cpsid	i
 8015e00:	e7fe      	b.n	8015e00 <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 8015e02:	f7f8 fe3b 	bl	800ea7c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8015e06:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8015e08:	f7f8 fe44 	bl	800ea94 <vPortExitCritical>

	return pvReturn;
}
 8015e0c:	0020      	movs	r0, r4
 8015e0e:	bd10      	pop	{r4, pc}

08015e10 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( const TimerHandle_t xTimer, void *pvNewID )
{
 8015e10:	b570      	push	{r4, r5, r6, lr}
 8015e12:	0004      	movs	r4, r0
 8015e14:	000d      	movs	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
 8015e16:	2800      	cmp	r0, #0
 8015e18:	d101      	bne.n	8015e1e <vTimerSetTimerID+0xe>
 8015e1a:	b672      	cpsid	i
 8015e1c:	e7fe      	b.n	8015e1c <vTimerSetTimerID+0xc>

	taskENTER_CRITICAL();
 8015e1e:	f7f8 fe2d 	bl	800ea7c <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 8015e22:	6225      	str	r5, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8015e24:	f7f8 fe36 	bl	800ea94 <vPortExitCritical>
}
 8015e28:	bd70      	pop	{r4, r5, r6, pc}

08015e2a <xTimerIsTimerActive>:
{
 8015e2a:	b510      	push	{r4, lr}
 8015e2c:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 8015e2e:	f7f8 fe25 	bl	800ea7c <vPortEnterCritical>
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 8015e32:	6964      	ldr	r4, [r4, #20]
 8015e34:	1e63      	subs	r3, r4, #1
 8015e36:	419c      	sbcs	r4, r3
	taskEXIT_CRITICAL();
 8015e38:	f7f8 fe2c 	bl	800ea94 <vPortExitCritical>
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8015e3c:	0020      	movs	r0, r4
 8015e3e:	bd10      	pop	{r4, pc}

08015e40 <xTimerCreateTimerTask>:
{
 8015e40:	b500      	push	{lr}
 8015e42:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 8015e44:	f7ff ff70 	bl	8015d28 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8015e48:	4b0a      	ldr	r3, [pc, #40]	; (8015e74 <xTimerCreateTimerTask+0x34>)
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d00d      	beq.n	8015e6c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8015e50:	2300      	movs	r3, #0
 8015e52:	9303      	str	r3, [sp, #12]
 8015e54:	9302      	str	r3, [sp, #8]
 8015e56:	9301      	str	r3, [sp, #4]
 8015e58:	3303      	adds	r3, #3
 8015e5a:	9300      	str	r3, [sp, #0]
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	22a0      	movs	r2, #160	; 0xa0
 8015e60:	4905      	ldr	r1, [pc, #20]	; (8015e78 <xTimerCreateTimerTask+0x38>)
 8015e62:	4806      	ldr	r0, [pc, #24]	; (8015e7c <xTimerCreateTimerTask+0x3c>)
 8015e64:	f7ff fd96 	bl	8015994 <xTaskGenericCreate>
	configASSERT( xReturn );
 8015e68:	2800      	cmp	r0, #0
 8015e6a:	d101      	bne.n	8015e70 <xTimerCreateTimerTask+0x30>
 8015e6c:	b672      	cpsid	i
 8015e6e:	e7fe      	b.n	8015e6e <xTimerCreateTimerTask+0x2e>
}
 8015e70:	b005      	add	sp, #20
 8015e72:	bd00      	pop	{pc}
 8015e74:	2000035c 	.word	0x2000035c
 8015e78:	08019abc 	.word	0x08019abc
 8015e7c:	08015f51 	.word	0x08015f51

08015e80 <xTimerGenericCommand>:
{
 8015e80:	b530      	push	{r4, r5, lr}
 8015e82:	b085      	sub	sp, #20
 8015e84:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 8015e86:	4b13      	ldr	r3, [pc, #76]	; (8015ed4 <xTimerGenericCommand+0x54>)
 8015e88:	681c      	ldr	r4, [r3, #0]
 8015e8a:	2c00      	cmp	r4, #0
 8015e8c:	d020      	beq.n	8015ed0 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 8015e8e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015e90:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8015e92:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015e94:	2905      	cmp	r1, #5
 8015e96:	dc13      	bgt.n	8015ec0 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015e98:	f7ff fcfc 	bl	8015894 <xTaskGetSchedulerState>
 8015e9c:	2802      	cmp	r0, #2
 8015e9e:	d007      	beq.n	8015eb0 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015ea0:	4b0c      	ldr	r3, [pc, #48]	; (8015ed4 <xTimerGenericCommand+0x54>)
 8015ea2:	6818      	ldr	r0, [r3, #0]
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	4669      	mov	r1, sp
 8015eaa:	f7fe fcba 	bl	8014822 <xQueueGenericSend>
 8015eae:	e00d      	b.n	8015ecc <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015eb0:	4b08      	ldr	r3, [pc, #32]	; (8015ed4 <xTimerGenericCommand+0x54>)
 8015eb2:	6818      	ldr	r0, [r3, #0]
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	9a08      	ldr	r2, [sp, #32]
 8015eb8:	4669      	mov	r1, sp
 8015eba:	f7fe fcb2 	bl	8014822 <xQueueGenericSend>
 8015ebe:	e005      	b.n	8015ecc <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	002a      	movs	r2, r5
 8015ec4:	4669      	mov	r1, sp
 8015ec6:	0020      	movs	r0, r4
 8015ec8:	f7fe fe2b 	bl	8014b22 <xQueueGenericSendFromISR>
}
 8015ecc:	b005      	add	sp, #20
 8015ece:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8015ed0:	2000      	movs	r0, #0
	return xReturn;
 8015ed2:	e7fb      	b.n	8015ecc <xTimerGenericCommand+0x4c>
 8015ed4:	2000035c 	.word	0x2000035c

08015ed8 <prvSwitchTimerLists>:
{
 8015ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015eda:	46c6      	mov	lr, r8
 8015edc:	b500      	push	{lr}
 8015ede:	b084      	sub	sp, #16
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015ee0:	4e1a      	ldr	r6, [pc, #104]	; (8015f4c <prvSwitchTimerLists+0x74>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	4698      	mov	r8, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015ee6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8015ee8:	681a      	ldr	r2, [r3, #0]
 8015eea:	2a00      	cmp	r2, #0
 8015eec:	d025      	beq.n	8015f3a <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015eee:	68db      	ldr	r3, [r3, #12]
 8015ef0:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015ef2:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015ef4:	1d25      	adds	r5, r4, #4
 8015ef6:	0028      	movs	r0, r5
 8015ef8:	f7f8 fc2f 	bl	800e75a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015efc:	0020      	movs	r0, r4
 8015efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015f00:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8015f02:	69e3      	ldr	r3, [r4, #28]
 8015f04:	2b01      	cmp	r3, #1
 8015f06:	d1ee      	bne.n	8015ee6 <prvSwitchTimerLists+0xe>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015f08:	69a3      	ldr	r3, [r4, #24]
 8015f0a:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 8015f0c:	429f      	cmp	r7, r3
 8015f0e:	d209      	bcs.n	8015f24 <prvSwitchTimerLists+0x4c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015f10:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015f12:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015f14:	4b0d      	ldr	r3, [pc, #52]	; (8015f4c <prvSwitchTimerLists+0x74>)
 8015f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f18:	9303      	str	r3, [sp, #12]
 8015f1a:	0029      	movs	r1, r5
 8015f1c:	0018      	movs	r0, r3
 8015f1e:	f7f8 fc05 	bl	800e72c <vListInsert>
 8015f22:	e7e0      	b.n	8015ee6 <prvSwitchTimerLists+0xe>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015f24:	4643      	mov	r3, r8
 8015f26:	9300      	str	r3, [sp, #0]
 8015f28:	003a      	movs	r2, r7
 8015f2a:	4641      	mov	r1, r8
 8015f2c:	0020      	movs	r0, r4
 8015f2e:	f7ff ffa7 	bl	8015e80 <xTimerGenericCommand>
				configASSERT( xResult );
 8015f32:	2800      	cmp	r0, #0
 8015f34:	d1d7      	bne.n	8015ee6 <prvSwitchTimerLists+0xe>
 8015f36:	b672      	cpsid	i
 8015f38:	e7fe      	b.n	8015f38 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 8015f3a:	4a04      	ldr	r2, [pc, #16]	; (8015f4c <prvSwitchTimerLists+0x74>)
 8015f3c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8015f3e:	62d1      	str	r1, [r2, #44]	; 0x2c
	pxOverflowTimerList = pxTemp;
 8015f40:	6313      	str	r3, [r2, #48]	; 0x30
}
 8015f42:	b004      	add	sp, #16
 8015f44:	bc04      	pop	{r2}
 8015f46:	4690      	mov	r8, r2
 8015f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f4a:	46c0      	nop			; (mov r8, r8)
 8015f4c:	2000035c 	.word	0x2000035c

08015f50 <prvTimerTask>:
{
 8015f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f52:	46c6      	mov	lr, r8
 8015f54:	b500      	push	{lr}
 8015f56:	b08a      	sub	sp, #40	; 0x28
	if( xTimeNow < xLastTime )
 8015f58:	4b60      	ldr	r3, [pc, #384]	; (80160dc <prvTimerTask+0x18c>)
 8015f5a:	4698      	mov	r8, r3
	xLastTime = xTimeNow;
 8015f5c:	001f      	movs	r7, r3
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015f5e:	4b5f      	ldr	r3, [pc, #380]	; (80160dc <prvTimerTask+0x18c>)
 8015f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 8015f62:	681a      	ldr	r2, [r3, #0]
 8015f64:	2a00      	cmp	r2, #0
 8015f66:	d100      	bne.n	8015f6a <prvTimerTask+0x1a>
 8015f68:	e0ab      	b.n	80160c2 <prvTimerTask+0x172>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015f6a:	68db      	ldr	r3, [r3, #12]
 8015f6c:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
 8015f6e:	f7ff f985 	bl	801527c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8015f72:	f7ff f98b 	bl	801528c <xTaskGetTickCount>
 8015f76:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 8015f78:	4b58      	ldr	r3, [pc, #352]	; (80160dc <prvTimerTask+0x18c>)
 8015f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f7c:	4298      	cmp	r0, r3
 8015f7e:	d33c      	bcc.n	8015ffa <prvTimerTask+0xaa>
	xLastTime = xTimeNow;
 8015f80:	4b56      	ldr	r3, [pc, #344]	; (80160dc <prvTimerTask+0x18c>)
 8015f82:	6358      	str	r0, [r3, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015f84:	42a8      	cmp	r0, r5
 8015f86:	d23f      	bcs.n	8016008 <prvTimerTask+0xb8>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8015f88:	1b29      	subs	r1, r5, r4
 8015f8a:	4b54      	ldr	r3, [pc, #336]	; (80160dc <prvTimerTask+0x18c>)
 8015f8c:	6818      	ldr	r0, [r3, #0]
 8015f8e:	f7fe ff34 	bl	8014dfa <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015f92:	f7ff fa19 	bl	80153c8 <xTaskResumeAll>
 8015f96:	2800      	cmp	r0, #0
 8015f98:	d05a      	beq.n	8016050 <prvTimerTask+0x100>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015f9a:	4c50      	ldr	r4, [pc, #320]	; (80160dc <prvTimerTask+0x18c>)
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	a906      	add	r1, sp, #24
 8015fa2:	6820      	ldr	r0, [r4, #0]
 8015fa4:	f7fe fcfa 	bl	801499c <xQueueGenericReceive>
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	d0d8      	beq.n	8015f5e <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015fac:	9b06      	ldr	r3, [sp, #24]
 8015fae:	9303      	str	r3, [sp, #12]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	da0c      	bge.n	8015fce <prvTimerTask+0x7e>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fb6:	9303      	str	r3, [sp, #12]
 8015fb8:	9b08      	ldr	r3, [sp, #32]
 8015fba:	9304      	str	r3, [sp, #16]
 8015fbc:	9b07      	ldr	r3, [sp, #28]
 8015fbe:	9305      	str	r3, [sp, #20]
 8015fc0:	9903      	ldr	r1, [sp, #12]
 8015fc2:	9804      	ldr	r0, [sp, #16]
 8015fc4:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015fc6:	9b06      	ldr	r3, [sp, #24]
 8015fc8:	9303      	str	r3, [sp, #12]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	dbe6      	blt.n	8015f9c <prvTimerTask+0x4c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015fce:	9d08      	ldr	r5, [sp, #32]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8015fd0:	696b      	ldr	r3, [r5, #20]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d002      	beq.n	8015fdc <prvTimerTask+0x8c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015fd6:	1d28      	adds	r0, r5, #4
 8015fd8:	f7f8 fbbf 	bl	800e75a <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8015fdc:	f7ff f956 	bl	801528c <xTaskGetTickCount>
 8015fe0:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 8015fe2:	4643      	mov	r3, r8
 8015fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fe6:	4298      	cmp	r0, r3
 8015fe8:	d335      	bcc.n	8016056 <prvTimerTask+0x106>
	xLastTime = xTimeNow;
 8015fea:	637e      	str	r6, [r7, #52]	; 0x34
			switch( xMessage.xMessageID )
 8015fec:	9b06      	ldr	r3, [sp, #24]
 8015fee:	2b09      	cmp	r3, #9
 8015ff0:	d8d4      	bhi.n	8015f9c <prvTimerTask+0x4c>
 8015ff2:	009b      	lsls	r3, r3, #2
 8015ff4:	4a3a      	ldr	r2, [pc, #232]	; (80160e0 <prvTimerTask+0x190>)
 8015ff6:	58d3      	ldr	r3, [r2, r3]
 8015ff8:	469f      	mov	pc, r3
		prvSwitchTimerLists();
 8015ffa:	f7ff ff6d 	bl	8015ed8 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8015ffe:	4b37      	ldr	r3, [pc, #220]	; (80160dc <prvTimerTask+0x18c>)
 8016000:	635c      	str	r4, [r3, #52]	; 0x34
			( void ) xTaskResumeAll();
 8016002:	f7ff f9e1 	bl	80153c8 <xTaskResumeAll>
 8016006:	e7c8      	b.n	8015f9a <prvTimerTask+0x4a>
				( void ) xTaskResumeAll();
 8016008:	f7ff f9de 	bl	80153c8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801600c:	4b33      	ldr	r3, [pc, #204]	; (80160dc <prvTimerTask+0x18c>)
 801600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016010:	68db      	ldr	r3, [r3, #12]
 8016012:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016014:	1d30      	adds	r0, r6, #4
 8016016:	f7f8 fba0 	bl	800e75a <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801601a:	69f3      	ldr	r3, [r6, #28]
 801601c:	2b01      	cmp	r3, #1
 801601e:	d003      	beq.n	8016028 <prvTimerTask+0xd8>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016020:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016022:	0030      	movs	r0, r6
 8016024:	4798      	blx	r3
 8016026:	e7b8      	b.n	8015f9a <prvTimerTask+0x4a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8016028:	69b3      	ldr	r3, [r6, #24]
 801602a:	18e9      	adds	r1, r5, r3
 801602c:	002b      	movs	r3, r5
 801602e:	0022      	movs	r2, r4
 8016030:	0030      	movs	r0, r6
 8016032:	f7ff fea1 	bl	8015d78 <prvInsertTimerInActiveList>
 8016036:	2801      	cmp	r0, #1
 8016038:	d1f2      	bne.n	8016020 <prvTimerTask+0xd0>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801603a:	2100      	movs	r1, #0
 801603c:	9100      	str	r1, [sp, #0]
 801603e:	000b      	movs	r3, r1
 8016040:	002a      	movs	r2, r5
 8016042:	0030      	movs	r0, r6
 8016044:	f7ff ff1c 	bl	8015e80 <xTimerGenericCommand>
			configASSERT( xResult );
 8016048:	2800      	cmp	r0, #0
 801604a:	d1e9      	bne.n	8016020 <prvTimerTask+0xd0>
 801604c:	b672      	cpsid	i
 801604e:	e7fe      	b.n	801604e <prvTimerTask+0xfe>
					portYIELD_WITHIN_API();
 8016050:	f7f8 fd08 	bl	800ea64 <vPortYield>
 8016054:	e7a1      	b.n	8015f9a <prvTimerTask+0x4a>
		prvSwitchTimerLists();
 8016056:	f7ff ff3f 	bl	8015ed8 <prvSwitchTimerLists>
 801605a:	e7c6      	b.n	8015fea <prvTimerTask+0x9a>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 801605c:	9b07      	ldr	r3, [sp, #28]
 801605e:	69aa      	ldr	r2, [r5, #24]
 8016060:	4694      	mov	ip, r2
 8016062:	4463      	add	r3, ip
 8016064:	0019      	movs	r1, r3
 8016066:	9b07      	ldr	r3, [sp, #28]
 8016068:	0032      	movs	r2, r6
 801606a:	0028      	movs	r0, r5
 801606c:	f7ff fe84 	bl	8015d78 <prvInsertTimerInActiveList>
 8016070:	2801      	cmp	r0, #1
 8016072:	d193      	bne.n	8015f9c <prvTimerTask+0x4c>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016074:	0028      	movs	r0, r5
 8016076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016078:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801607a:	69eb      	ldr	r3, [r5, #28]
 801607c:	2b01      	cmp	r3, #1
 801607e:	d18d      	bne.n	8015f9c <prvTimerTask+0x4c>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016080:	9b07      	ldr	r3, [sp, #28]
 8016082:	69a9      	ldr	r1, [r5, #24]
 8016084:	468c      	mov	ip, r1
 8016086:	4463      	add	r3, ip
 8016088:	001a      	movs	r2, r3
 801608a:	2300      	movs	r3, #0
 801608c:	9300      	str	r3, [sp, #0]
 801608e:	2100      	movs	r1, #0
 8016090:	0028      	movs	r0, r5
 8016092:	f7ff fef5 	bl	8015e80 <xTimerGenericCommand>
							configASSERT( xResult );
 8016096:	2800      	cmp	r0, #0
 8016098:	d000      	beq.n	801609c <prvTimerTask+0x14c>
 801609a:	e77f      	b.n	8015f9c <prvTimerTask+0x4c>
 801609c:	b672      	cpsid	i
 801609e:	e7fe      	b.n	801609e <prvTimerTask+0x14e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80160a0:	9907      	ldr	r1, [sp, #28]
 80160a2:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80160a4:	2900      	cmp	r1, #0
 80160a6:	d006      	beq.n	80160b6 <prvTimerTask+0x166>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80160a8:	1989      	adds	r1, r1, r6
 80160aa:	0033      	movs	r3, r6
 80160ac:	0032      	movs	r2, r6
 80160ae:	0028      	movs	r0, r5
 80160b0:	f7ff fe62 	bl	8015d78 <prvInsertTimerInActiveList>
 80160b4:	e772      	b.n	8015f9c <prvTimerTask+0x4c>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80160b6:	b672      	cpsid	i
 80160b8:	e7fe      	b.n	80160b8 <prvTimerTask+0x168>
					vPortFree( pxTimer );
 80160ba:	0028      	movs	r0, r5
 80160bc:	f000 f8ee 	bl	801629c <vPortFree>
 80160c0:	e76c      	b.n	8015f9c <prvTimerTask+0x4c>
	vTaskSuspendAll();
 80160c2:	f7ff f8db 	bl	801527c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80160c6:	f7ff f8e1 	bl	801528c <xTaskGetTickCount>
 80160ca:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 80160cc:	4b03      	ldr	r3, [pc, #12]	; (80160dc <prvTimerTask+0x18c>)
 80160ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160d0:	4298      	cmp	r0, r3
 80160d2:	d392      	bcc.n	8015ffa <prvTimerTask+0xaa>
	xLastTime = xTimeNow;
 80160d4:	4b01      	ldr	r3, [pc, #4]	; (80160dc <prvTimerTask+0x18c>)
 80160d6:	635c      	str	r4, [r3, #52]	; 0x34
		xNextExpireTime = ( TickType_t ) 0U;
 80160d8:	2500      	movs	r5, #0
 80160da:	e755      	b.n	8015f88 <prvTimerTask+0x38>
 80160dc:	2000035c 	.word	0x2000035c
 80160e0:	0801631c 	.word	0x0801631c

080160e4 <pxPortInitialiseStack>:
{
 80160e4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80160e6:	1f03      	subs	r3, r0, #4
 80160e8:	2480      	movs	r4, #128	; 0x80
 80160ea:	0464      	lsls	r4, r4, #17
 80160ec:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80160ee:	3b04      	subs	r3, #4
 80160f0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80160f2:	3b04      	subs	r3, #4
 80160f4:	4902      	ldr	r1, [pc, #8]	; (8016100 <pxPortInitialiseStack+0x1c>)
 80160f6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80160f8:	3b14      	subs	r3, #20
 80160fa:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80160fc:	3840      	subs	r0, #64	; 0x40
}
 80160fe:	bd10      	pop	{r4, pc}
 8016100:	0800ea2d 	.word	0x0800ea2d

08016104 <xPortStartScheduler>:
{
 8016104:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8016106:	4b0f      	ldr	r3, [pc, #60]	; (8016144 <xPortStartScheduler+0x40>)
 8016108:	6819      	ldr	r1, [r3, #0]
 801610a:	22ff      	movs	r2, #255	; 0xff
 801610c:	0412      	lsls	r2, r2, #16
 801610e:	430a      	orrs	r2, r1
 8016110:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8016112:	6819      	ldr	r1, [r3, #0]
 8016114:	22ff      	movs	r2, #255	; 0xff
 8016116:	0612      	lsls	r2, r2, #24
 8016118:	430a      	orrs	r2, r1
 801611a:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801611c:	4b0a      	ldr	r3, [pc, #40]	; (8016148 <xPortStartScheduler+0x44>)
 801611e:	6818      	ldr	r0, [r3, #0]
 8016120:	21fa      	movs	r1, #250	; 0xfa
 8016122:	0089      	lsls	r1, r1, #2
 8016124:	f7ea f80a 	bl	800013c <__udivsi3>
 8016128:	3801      	subs	r0, #1
 801612a:	4b08      	ldr	r3, [pc, #32]	; (801614c <xPortStartScheduler+0x48>)
 801612c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 801612e:	4b08      	ldr	r3, [pc, #32]	; (8016150 <xPortStartScheduler+0x4c>)
 8016130:	2207      	movs	r2, #7
 8016132:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 8016134:	4b07      	ldr	r3, [pc, #28]	; (8016154 <xPortStartScheduler+0x50>)
 8016136:	2200      	movs	r2, #0
 8016138:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 801613a:	f7f8 fc81 	bl	800ea40 <vPortStartFirstTask>
	prvTaskExitError();
 801613e:	f7f8 fc75 	bl	800ea2c <prvTaskExitError>
 8016142:	46c0      	nop			; (mov r8, r8)
 8016144:	e000ed20 	.word	0xe000ed20
 8016148:	2000004c 	.word	0x2000004c
 801614c:	e000e014 	.word	0xe000e014
 8016150:	e000e010 	.word	0xe000e010
 8016154:	2000005c 	.word	0x2000005c

08016158 <vPortEndScheduler>:
	configASSERT( uxCriticalNesting == 1000UL );
 8016158:	23fa      	movs	r3, #250	; 0xfa
 801615a:	009b      	lsls	r3, r3, #2
 801615c:	4a03      	ldr	r2, [pc, #12]	; (801616c <vPortEndScheduler+0x14>)
 801615e:	6812      	ldr	r2, [r2, #0]
 8016160:	429a      	cmp	r2, r3
 8016162:	d001      	beq.n	8016168 <vPortEndScheduler+0x10>
 8016164:	b672      	cpsid	i
 8016166:	e7fe      	b.n	8016166 <vPortEndScheduler+0xe>
}
 8016168:	4770      	bx	lr
 801616a:	46c0      	nop			; (mov r8, r8)
 801616c:	2000005c 	.word	0x2000005c

08016170 <pvPortMalloc>:
{
 8016170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016172:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8016174:	f7ff f882 	bl	801527c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8016178:	4b41      	ldr	r3, [pc, #260]	; (8016280 <pvPortMalloc+0x110>)
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d00a      	beq.n	8016196 <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016180:	4b40      	ldr	r3, [pc, #256]	; (8016284 <pvPortMalloc+0x114>)
 8016182:	681f      	ldr	r7, [r3, #0]
 8016184:	423c      	tst	r4, r7
 8016186:	d02a      	beq.n	80161de <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 8016188:	f7ff f91e 	bl	80153c8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 801618c:	f7f7 fe40 	bl	800de10 <vApplicationMallocFailedHook>
 8016190:	2500      	movs	r5, #0
}
 8016192:	0028      	movs	r0, r5
 8016194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 8016196:	4a3c      	ldr	r2, [pc, #240]	; (8016288 <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016198:	0753      	lsls	r3, r2, #29
 801619a:	d01e      	beq.n	80161da <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 801619c:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 801619e:	2307      	movs	r3, #7
 80161a0:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 80161a2:	4b3a      	ldr	r3, [pc, #232]	; (801628c <pvPortMalloc+0x11c>)
 80161a4:	18d3      	adds	r3, r2, r3
 80161a6:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80161a8:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80161aa:	4839      	ldr	r0, [pc, #228]	; (8016290 <pvPortMalloc+0x120>)
 80161ac:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80161ae:	2100      	movs	r1, #0
 80161b0:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 80161b2:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 80161b4:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80161b6:	2007      	movs	r0, #7
 80161b8:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 80161ba:	4831      	ldr	r0, [pc, #196]	; (8016280 <pvPortMalloc+0x110>)
 80161bc:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80161be:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80161c0:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 80161c2:	1a99      	subs	r1, r3, r2
 80161c4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80161c6:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80161c8:	4b32      	ldr	r3, [pc, #200]	; (8016294 <pvPortMalloc+0x124>)
 80161ca:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80161cc:	4b32      	ldr	r3, [pc, #200]	; (8016298 <pvPortMalloc+0x128>)
 80161ce:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80161d0:	4b2c      	ldr	r3, [pc, #176]	; (8016284 <pvPortMalloc+0x114>)
 80161d2:	2280      	movs	r2, #128	; 0x80
 80161d4:	0612      	lsls	r2, r2, #24
 80161d6:	601a      	str	r2, [r3, #0]
 80161d8:	e7d2      	b.n	8016180 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80161da:	4b2c      	ldr	r3, [pc, #176]	; (801628c <pvPortMalloc+0x11c>)
 80161dc:	e7e5      	b.n	80161aa <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 80161de:	2c00      	cmp	r4, #0
 80161e0:	d008      	beq.n	80161f4 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 80161e2:	0023      	movs	r3, r4
 80161e4:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80161e6:	075a      	lsls	r2, r3, #29
 80161e8:	d002      	beq.n	80161f0 <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80161ea:	2207      	movs	r2, #7
 80161ec:	4393      	bics	r3, r2
 80161ee:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d102      	bne.n	80161fa <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 80161f4:	f7ff f8e8 	bl	80153c8 <xTaskResumeAll>
 80161f8:	e7c8      	b.n	801618c <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80161fa:	4a27      	ldr	r2, [pc, #156]	; (8016298 <pvPortMalloc+0x128>)
 80161fc:	6816      	ldr	r6, [r2, #0]
 80161fe:	429e      	cmp	r6, r3
 8016200:	d302      	bcc.n	8016208 <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 8016202:	4a23      	ldr	r2, [pc, #140]	; (8016290 <pvPortMalloc+0x120>)
 8016204:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016206:	e004      	b.n	8016212 <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 8016208:	f7ff f8de 	bl	80153c8 <xTaskResumeAll>
 801620c:	e7be      	b.n	801618c <pvPortMalloc+0x1c>
 801620e:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8016210:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016212:	6861      	ldr	r1, [r4, #4]
 8016214:	4299      	cmp	r1, r3
 8016216:	d202      	bcs.n	801621e <pvPortMalloc+0xae>
 8016218:	6821      	ldr	r1, [r4, #0]
 801621a:	2900      	cmp	r1, #0
 801621c:	d1f7      	bne.n	801620e <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 801621e:	4918      	ldr	r1, [pc, #96]	; (8016280 <pvPortMalloc+0x110>)
 8016220:	6809      	ldr	r1, [r1, #0]
 8016222:	42a1      	cmp	r1, r4
 8016224:	d00b      	beq.n	801623e <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016226:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016228:	6821      	ldr	r1, [r4, #0]
 801622a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801622c:	6862      	ldr	r2, [r4, #4]
 801622e:	1ad2      	subs	r2, r2, r3
 8016230:	2a10      	cmp	r2, #16
 8016232:	d90b      	bls.n	801624c <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016234:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016236:	0741      	lsls	r1, r0, #29
 8016238:	d004      	beq.n	8016244 <pvPortMalloc+0xd4>
 801623a:	b672      	cpsid	i
 801623c:	e7fe      	b.n	801623c <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 801623e:	f7ff f8c3 	bl	80153c8 <xTaskResumeAll>
 8016242:	e7a3      	b.n	801618c <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016244:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016246:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8016248:	f7f8 fc70 	bl	800eb2c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801624c:	6862      	ldr	r2, [r4, #4]
 801624e:	1ab6      	subs	r6, r6, r2
 8016250:	4911      	ldr	r1, [pc, #68]	; (8016298 <pvPortMalloc+0x128>)
 8016252:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016254:	490f      	ldr	r1, [pc, #60]	; (8016294 <pvPortMalloc+0x124>)
 8016256:	6809      	ldr	r1, [r1, #0]
 8016258:	428e      	cmp	r6, r1
 801625a:	d201      	bcs.n	8016260 <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801625c:	490d      	ldr	r1, [pc, #52]	; (8016294 <pvPortMalloc+0x124>)
 801625e:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016260:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016262:	4317      	orrs	r7, r2
 8016264:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016266:	2300      	movs	r3, #0
 8016268:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 801626a:	f7ff f8ad 	bl	80153c8 <xTaskResumeAll>
		if( pvReturn == NULL )
 801626e:	2d00      	cmp	r5, #0
 8016270:	d100      	bne.n	8016274 <pvPortMalloc+0x104>
 8016272:	e78b      	b.n	801618c <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016274:	076b      	lsls	r3, r5, #29
 8016276:	d100      	bne.n	801627a <pvPortMalloc+0x10a>
 8016278:	e78b      	b.n	8016192 <pvPortMalloc+0x22>
 801627a:	b672      	cpsid	i
 801627c:	e7fe      	b.n	801627c <pvPortMalloc+0x10c>
 801627e:	46c0      	nop			; (mov r8, r8)
 8016280:	20001648 	.word	0x20001648
 8016284:	20006084 	.word	0x20006084
 8016288:	2000164c 	.word	0x2000164c
 801628c:	00004a38 	.word	0x00004a38
 8016290:	20006090 	.word	0x20006090
 8016294:	2000608c 	.word	0x2000608c
 8016298:	20006088 	.word	0x20006088

0801629c <vPortFree>:
{
 801629c:	b510      	push	{r4, lr}
	if( pv != NULL )
 801629e:	2800      	cmp	r0, #0
 80162a0:	d020      	beq.n	80162e4 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80162a2:	0003      	movs	r3, r0
 80162a4:	3b08      	subs	r3, #8
 80162a6:	685b      	ldr	r3, [r3, #4]
 80162a8:	4a0f      	ldr	r2, [pc, #60]	; (80162e8 <vPortFree+0x4c>)
 80162aa:	6812      	ldr	r2, [r2, #0]
 80162ac:	421a      	tst	r2, r3
 80162ae:	d101      	bne.n	80162b4 <vPortFree+0x18>
 80162b0:	b672      	cpsid	i
 80162b2:	e7fe      	b.n	80162b2 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80162b4:	0001      	movs	r1, r0
 80162b6:	3908      	subs	r1, #8
 80162b8:	6809      	ldr	r1, [r1, #0]
 80162ba:	2900      	cmp	r1, #0
 80162bc:	d001      	beq.n	80162c2 <vPortFree+0x26>
 80162be:	b672      	cpsid	i
 80162c0:	e7fe      	b.n	80162c0 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80162c2:	3808      	subs	r0, #8
 80162c4:	0004      	movs	r4, r0
 80162c6:	4393      	bics	r3, r2
 80162c8:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80162ca:	f7fe ffd7 	bl	801527c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80162ce:	4a07      	ldr	r2, [pc, #28]	; (80162ec <vPortFree+0x50>)
 80162d0:	6863      	ldr	r3, [r4, #4]
 80162d2:	6811      	ldr	r1, [r2, #0]
 80162d4:	468c      	mov	ip, r1
 80162d6:	4463      	add	r3, ip
 80162d8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80162da:	0020      	movs	r0, r4
 80162dc:	f7f8 fc26 	bl	800eb2c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80162e0:	f7ff f872 	bl	80153c8 <xTaskResumeAll>
}
 80162e4:	bd10      	pop	{r4, pc}
 80162e6:	46c0      	nop			; (mov r8, r8)
 80162e8:	20006084 	.word	0x20006084
 80162ec:	20006088 	.word	0x20006088

080162f0 <vPortInitialiseBlocks>:
}
 80162f0:	4770      	bx	lr

080162f2 <xPortGetFreeHeapSize>:
	return xFreeBytesRemaining;
 80162f2:	4b01      	ldr	r3, [pc, #4]	; (80162f8 <xPortGetFreeHeapSize+0x6>)
 80162f4:	6818      	ldr	r0, [r3, #0]
}
 80162f6:	4770      	bx	lr
 80162f8:	20006088 	.word	0x20006088

080162fc <xPortGetMinimumEverFreeHeapSize>:
	return xMinimumEverFreeBytesRemaining;
 80162fc:	4b01      	ldr	r3, [pc, #4]	; (8016304 <xPortGetMinimumEverFreeHeapSize+0x8>)
 80162fe:	6818      	ldr	r0, [r3, #0]
}
 8016300:	4770      	bx	lr
 8016302:	46c0      	nop			; (mov r8, r8)
 8016304:	2000608c 	.word	0x2000608c
